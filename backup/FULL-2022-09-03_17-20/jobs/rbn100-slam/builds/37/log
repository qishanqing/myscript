Started by user [8mha:////4PuPrVqfmiKYrDXnyWV9hICL82VuE+SZkTyZDRRZLVnbAAAAnB+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAyuEgYB/dLi1CL9nMzSwszE/KzSPADZ2uqSxQAAAA==[0mliuqiaojun
Running as SYSTEM
[EnvInject] - Loading node environment variables.
[EnvInject] - Preparing an environment for the build.
[EnvInject] - Keeping Jenkins system variables.
[EnvInject] - Keeping Jenkins build variables.
[EnvInject] - Injecting contributions.
Building remotely on [8mha:////4J8M8M4pLAVsr5HsUCuoFBwpyiajxV9VrGbWj66EbYmPAAAAoR+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzuEgZR/eT83ILSktQi/eyMxJTEYt3kxCJjAEfvBs3KAAAA[0mkhadas-car3 in workspace /root/workspace/workspace/rbn100-slam
[WS-CLEANUP] Deleting project workspace...
[WS-CLEANUP] Deferred wipeout is used...
[WS-CLEANUP] Done
No emails were triggered.
[EnvInject] - Executing scripts and injecting environment variables after the SCM step.
[rbn100-slam] $ /bin/sh -xe /tmp/jenkins4124274985576539084.sh
+ bash /root/myscript/build/build.sh
++ export MYSQL_PWD=123
++ MYSQL_PWD=123
++ export -f cmdb_mysql
+ set -ex
+ export -f public_project_update
+ export -f project_build
+ init_project_env
++ date +%Y%m%d
+ DT=20220829
+ UserName=jenkins
+ API_TOKEN=11b65309c9835de9579d9c9038853d9eb7
+ GIT_PRIVATE_TOKEN=emEDrsaJVjxKK5gSWrf-
+ GIT_HOST=192.168.50.191
++ echo rbn/rbn100/integration/solutions/solution001/slam
++ awk -F/ '{print $1"%2F"$2}'
+ CONVERT_TARGET_PROJECT=rbn%2Frbn100
++ python -c 'import sys, json; print(json.load(sys.stdin)["id"])'
++ curl -XGET -H 'Content-Type: application/json' --header 'PRIVATE-TOKEN: emEDrsaJVjxKK5gSWrf-' http://192.168.50.191:85/api/v4/projects/rbn%2Frbn100
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    35  100    35    0     0    744      0 --:--:-- --:--:-- --:--:--   744
Traceback (most recent call last):
  File "<string>", line 1, in <module>
KeyError: 'id'
+ SUB_PROJECT_ID=
+ true
+ '[' -z ']'
+ SOURCE_DIR=/root/workspace/workspace/rbn100-slam/rbn100_slam
+ TARGET_DIR=/root/workspace/workspace/rbn100-slam/slam
+ prepare_env
++ uname -m
+ system_platform=aarch64
+ export COMMIT_ID_FILE=/root/workspace/workspace/rbn100-slam/_last_build_id
+ COMMIT_ID_FILE=/root/workspace/workspace/rbn100-slam/_last_build_id
+ export COMMIT_MSG_FILE=/root/workspace/workspace/rbn100-slam/_commit-msg
+ COMMIT_MSG_FILE=/root/workspace/workspace/rbn100-slam/_commit-msg
+ export COMMIT_MSG_FILE_TMP=/root/workspace/workspace/rbn100-slam/_commit-msg.tmp
+ COMMIT_MSG_FILE_TMP=/root/workspace/workspace/rbn100-slam/_commit-msg.tmp
+ rm -f /root/workspace/workspace/rbn100-slam/_last_build_id
+ rm -f /root/workspace/workspace/rbn100-slam/_commit-msg
+ rm -f /root/workspace/workspace/rbn100-slam/_commit-msg.tmp
+ rm -f /root/workspace/workspace/rbn100-slam/result.log
+ CLONE_DEPTH=--depth=1
+ cmdb_mysql 'insert into prebuild(job_name,source_project,source_branch,target_project,target_branch,time,build_url,node_name) values ('\''rbn100-slam'\'','\''liuqiaojun/rbn100_slam'\'','\''master'\'','\''rbn/rbn100/integration/solutions/solution001/slam'\'','\''master'\'',now(),'\''http://192.168.50.26:8080/job/rbn100-slam/37/'\'','\''khadas-car3'\'')'
+ set +x
+ DOCKER_CONTAINER_I18=build-x64-18.04
+ DOCKER_CONTAINER_RUBBY=c405
+ DOCKER_CONTAINER_RUBBY_INSIDE=c3566
+ '[' true = false ']'
+ source_project_fetch
+ git clone ssh://git@192.168.50.191:222/liuqiaojun/rbn100_slam -b master --depth=1
Ê≠£ÂÖãÈöÜÂà∞ 'rbn100_slam'...
+ target_project_update
+ rm -rf /root/workspace/workspace/rbn100-slam/slam
+ target_project_fetch
+ git clone ssh://git@192.168.50.191:222/rbn/rbn100/integration/solutions/solution001/slam -b master --depth=1
Ê≠£ÂÖãÈöÜÂà∞ 'slam'...
+ [[ aarch64 =~ x86_64 ]]
+ [[ rbn100-slam =~ rbn ]]
+ project_build
+ pushd /root/workspace/workspace/rbn100-slam/rbn100_slam
~/workspace/workspace/rbn100-slam/rbn100_slam ~/workspace/workspace/rbn100-slam
++ cmdb_mysql 'SELECT first_commit_id FROM prebuild where source_project='\''liuqiaojun/rbn100_slam'\'' and source_branch='\''master'\'' and target_project='\''rbn/rbn100/integration/solutions/solution001/slam'\'' and target_branch='\''master'\'' and status='\''0'\'' order by id desc limit 1;'
++ set +x
+ version='first_commit_id
c8fc55e'
++ awk -F ' ' '{print $2}'
++ echo first_commit_id c8fc55e
+ version=c8fc55e
++ git log -1 --pretty=format:%h
+ first_commit_id_now=3965012
+ cmdb_mysql 'update prebuild set first_commit_id='\''3965012'\'' where build_url='\''http://192.168.50.26:8080/job/rbn100-slam/37/'\'';'
+ set +x
+ '[' 3965012 == c8fc55e ']'
+ bash -ex build_rbn100.sh
+ git submodule update --init --recursive
Â≠êÊ®°ÁªÑ 'thirdparty/RBNMess'Ôºàhttp://192.168.50.191:85/rbn/rbn100/source/rbn100message.gitÔºâÊú™ÂØπË∑ØÂæÑ 'thirdparty/RBNMess' Ê≥®ÂÜå
Ê≠£ÂÖãÈöÜÂà∞ '/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess'...
Â≠êÊ®°ÁªÑË∑ØÂæÑ 'thirdparty/RBNMess'ÔºöÊ£ÄÂá∫ '8cacbd2d2d8dde341c4daf5b003855ffb1a60a57'
+ git submodule update --remote
Â≠êÊ®°ÁªÑË∑ØÂæÑ 'thirdparty/RBNMess'ÔºöÊ£ÄÂá∫ '84d6834fd7058be0f9781460b795aa7998fc09de'
+ echo 'Configuring and building Thirdparty/DBoW2 ...'
Configuring and building Thirdparty/DBoW2 ...
+ cd thirdparty/DBoW2
+ mkdir build
+ cd build
+ cmake .. -DCMAKE_BUILD_TYPE=Release
-- The C compiler identification is GNU 7.5.0
-- The CXX compiler identification is GNU 7.5.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/build
+ make -j4
Scanning dependencies of target DBoW2
[ 14%] Building CXX object CMakeFiles/DBoW2.dir/DBoW2/FORB.cpp.o
[ 28%] Building CXX object CMakeFiles/DBoW2.dir/DBoW2/FeatureVector.cpp.o
[ 42%] Building CXX object CMakeFiles/DBoW2.dir/DBoW2/ScoringObject.cpp.o
[ 57%] Building CXX object CMakeFiles/DBoW2.dir/DBoW2/BowVector.cpp.o
[ 71%] Building CXX object CMakeFiles/DBoW2.dir/DUtils/Random.cpp.o
[ 85%] Building CXX object CMakeFiles/DBoW2.dir/DUtils/Timestamp.cpp.o
[100%] Linking CXX shared library ../lib/libDBoW2.so
[100%] Built target DBoW2
+ cd ../../DLib
+ echo 'Configuring and building thirdparty/DLib ...'
Configuring and building thirdparty/DLib ...
+ mkdir build
+ cd build
+ cmake .. -DCMAKE_BUILD_TYPE=Release
-- The C compiler identification is GNU 7.5.0
-- The CXX compiler identification is GNU 7.5.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found OpenCV: /usr/local (found version "3.4.3") 
-- Configuring done
-- Generating done
-- Build files have been written to: /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/build
+ make -j4
Scanning dependencies of target DLib
[  3%] Building CXX object CMakeFiles/DLib.dir/src/DVision/FSolver.cpp.o
[  6%] Building CXX object CMakeFiles/DLib.dir/src/DVision/PLYFile.cpp.o
[ 10%] Building CXX object CMakeFiles/DLib.dir/src/DVision/BRIEF.cpp.o
[ 13%] Building CXX object CMakeFiles/DLib.dir/src/DVision/ImageFunctions.cpp.o
[ 17%] Building CXX object CMakeFiles/DLib.dir/src/DVision/PatchFile.cpp.o
[ 20%] Building CXX object CMakeFiles/DLib.dir/src/DVision/BundleCamera.cpp.o
[ 24%] Building CXX object CMakeFiles/DLib.dir/src/DVision/HSolver.cpp.o
[ 27%] Building CXX object CMakeFiles/DLib.dir/src/DVision/Matches.cpp.o
[ 31%] Building CXX object CMakeFiles/DLib.dir/src/DVision/PMVSCamera.cpp.o
[ 34%] Building CXX object CMakeFiles/DLib.dir/src/DVision/PixelPointFile.cpp.o
[ 37%] Building CXX object CMakeFiles/DLib.dir/src/DUtilsCV/Drawing.cpp.o
[ 41%] Building CXX object CMakeFiles/DLib.dir/src/DUtilsCV/Geometry.cpp.o
[ 44%] Building CXX object CMakeFiles/DLib.dir/src/DUtilsCV/Mat.cpp.o
[ 48%] Building CXX object CMakeFiles/DLib.dir/src/DUtilsCV/Types.cpp.o
[ 51%] Building CXX object CMakeFiles/DLib.dir/src/DUtilsCV/GUI.cpp.o
[ 55%] Building CXX object CMakeFiles/DLib.dir/src/DUtilsCV/IO.cpp.o
[ 58%] Building CXX object CMakeFiles/DLib.dir/src/DUtilsCV/Transformations.cpp.o
[ 62%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/BinaryFile.cpp.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/GUI.cpp: In static member function ‚Äòstatic int DUtilsCV::GUI::showImage(const cv::Mat&, bool, DUtilsCV::GUI::tWinHandler*, int)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/GUI.cpp:56:10: warning: comparison is always false due to limited range of data type [-Wtype-limits]
   if(key == -1) key = NO_KEY;
      ~~~~^~~~~
[ 65%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/DebugFunctions.cpp.o
[ 68%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/LUT.cpp.o
[ 72%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/Profiler.cpp.o
[ 75%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/StringFunctions.cpp.o
[ 79%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/Timestamp.cpp.o
[ 82%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/ConfigFile.cpp.o
[ 86%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/FileFunctions.cpp.o
[ 89%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/LineFile.cpp.o
[ 93%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/Random.cpp.o
[ 96%] Building CXX object CMakeFiles/DLib.dir/src/DUtils/TimeManager.cpp.o
[100%] Linking CXX shared library libDLib.so
[100%] Built target DLib
+ cd ../../cartographer_source/
+ echo 'Configuring and building thirdparty/cartographer_source ...'
Configuring and building thirdparty/cartographer_source ...
+ mkdir build
+ cd build
+ cmake .. -DCMAKE_BUILD_TYPE=Release
-- The C compiler identification is GNU 7.5.0
-- The CXX compiler identification is GNU 7.5.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Build type: Release
Êñá‰ª∂ /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/AllFiles.cmake Âíå - ‰∏çÂêå
-- Found PythonInterp: /usr/bin/python (found version "2.7.17") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Found GMock: gmock_main;-lpthread  
-- Boost version: 1.65.1
-- Found the following Boost libraries:
--   iostreams
--   regex
-- Found installed version of Eigen: /usr/lib/cmake/eigen3
-- Found required Ceres dependency: Eigen version 3.3.4 in /usr/include/eigen3
-- Found required Ceres dependency: glog
-- Found installed version of gflags: /usr/lib/aarch64-linux-gnu/cmake/gflags
-- Detected gflags version: 2.2.1
-- Found required Ceres dependency: gflags
-- Found Ceres version: 1.13.0 installed in: /usr/local with components: [LAPACK, SuiteSparse, SparseLinearAlgebraLibrary, CXSparse, SchurSpecializations, OpenMP]
-- Found Lua: /usr/lib/aarch64-linux-gnu/liblua5.2.so;/usr/lib/aarch64-linux-gnu/libm.so (found version "5.2.4") 
-- Found Protobuf: /usr/local/lib/libprotobuf.a;-lpthread (found suitable version "3.4.0", minimum required is "3.0.0") 
-- Found PkgConfig: /usr/bin/pkg-config (found version "0.29.1") 
-- Checking for one of the modules 'cairo>=1.12.16'
-- Could NOT find Sphinx (missing: SPHINX_EXECUTABLE) 
-- Configuring done
-- Generating done
-- Build files have been written to: /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build
+ make -j4 install DESTDIR=../../cartographer
[  0%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/proto/ceres_solver_options.proto
Scanning dependencies of target cartographer_detect_changes
[  0%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/proto/transform.proto
[  0%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/proto/relations.proto
Scanning dependencies of target gmock_main
[  0%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/2d/cell_limits.proto
[  1%] Building CXX object gmock/CMakeFiles/gmock_main.dir/usr/src/googletest/googletest/src/gtest-all.cc.o
[  2%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/2d/grid_2d.proto
Êñá‰ª∂ /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/AllFiles.cmake Âíå - ‰∏çÂêå
[  2%] Building CXX object gmock/CMakeFiles/gmock_main.dir/src/gmock-all.cc.o
[  2%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/2d/grid_2d_options.proto
[  2%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.proto
[  2%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/2d/map_limits.proto
[  2%] Built target cartographer_detect_changes
[  3%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/2d/probability_grid.proto
[  3%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.proto
[  3%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/2d/submaps_options_2d.proto
[  4%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/3d/hybrid_grid.proto
[  4%] Building CXX object gmock/CMakeFiles/gmock_main.dir/src/gmock_main.cc.o
[  4%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.proto
[  4%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/3d/range_data_inserter_options_3d.proto
[  4%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/3d/submaps_options_3d.proto
[  5%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/connected_components.proto
[  5%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/internal/legacy_serialized_data.proto
[  5%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/map_builder_options.proto
[  6%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/motion_filter_options.proto
[  6%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/pose_graph.proto
[  6%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/pose_graph/constraint_builder_options.proto
[  6%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/pose_graph/optimization_problem_options.proto
[  7%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/pose_graph_options.proto
[  7%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/ramp.proto
[  7%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/range_data_inserter_options.proto
[  8%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.proto
[  8%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto
[  8%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.proto
[  8%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.proto
[  9%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.proto
[  9%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/serialization.proto
[  9%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/submap.proto
[ 10%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/submap_visualization.proto
[ 10%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/trajectory.proto
[ 10%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/trajectory_builder_options.proto
[ 10%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/proto/trajectory_node_data.proto
[ 11%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/proto/adaptive_voxel_filter_options.proto
[ 11%] Running C++ protocol buffer compiler on /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/proto/sensor.proto
Scanning dependencies of target cartographer
[ 12%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/DataChecking.cc.o
[ 12%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/ceres_solver_options.cc.o
[ 12%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/configuration_file_resolver.cc.o
[ 12%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/fixed_ratio_sampler.cc.o
[ 13%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/histogram.cc.o
[ 13%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/internal/testing/thread_pool_for_testing.cc.o
[ 13%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/lua_parameter_dictionary.cc.o
[ 14%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/setting.cc.o
[ 14%] Linking CXX static library libgmock_main.a
[ 14%] Built target gmock_main
[ 14%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/task.cc.o
[ 14%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/thread_pool.cc.o
[ 14%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/time.cc.o
[ 15%] Building CXX object CMakeFiles/cartographer.dir/cartographer/ground_truth/relations_text_file.cc.o
[ 15%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/color.cc.o
[ 15%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/coloring_points_processor.cc.o
[ 16%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/counting_points_processor.cc.o
[ 16%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/draw_trajectories.cc.o
[ 16%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/file_writer.cc.o
[ 16%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/fixed_ratio_sampling_points_processor.cc.o
[ 17%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/frame_id_filtering_points_processor.cc.o
[ 17%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/hybrid_grid_points_processor.cc.o
[ 17%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/image.cc.o
[ 18%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/intensity_to_color_points_processor.cc.o
[ 18%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/internal/in_memory_proto_stream.cc.o
[ 18%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/internal/mapping_state_serialization.cc.o
[ 18%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/min_max_range_filtering_points_processor.cc.o
[ 19%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/outlier_removing_points_processor.cc.o
[ 19%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/pcd_writing_points_processor.cc.o
[ 19%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/ply_writing_points_processor.cc.o
[ 20%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/points_batch.cc.o
[ 20%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/points_processor_pipeline_builder.cc.o
[ 20%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/probability_grid_points_processor.cc.o
[ 20%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/proto_stream.cc.o
[ 21%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/proto_stream_deserializer.cc.o
[ 21%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/serialization_format_migration.cc.o
[ 21%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/submap_painter.cc.o
[ 22%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/xray_points_processor.cc.o
[ 22%] Building CXX object CMakeFiles/cartographer.dir/cartographer/io/xyz_writing_points_processor.cc.o
[ 22%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/2d/grid_2d.cc.o
[ 22%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/2d/probability_grid.cc.o
[ 23%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.cc.o
[ 23%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/2d/submap_2d.cc.o
[ 23%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/3d/range_data_inserter_3d.cc.o
[ 24%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/3d/submap_3d.cc.o
[ 24%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/Ramp.cc.o
[ 24%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/detect_floors.cc.o
[ 24%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/imu_kalman.cc.o
[ 25%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/imu_tracker.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_kalman.cc: In member function ‚Äòvoid cartographer::mapping::ImuKalman::CompOdmtrack()‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_kalman.cc:275:37: warning: variable ‚Äòpos_slam_tmp‚Äô set but not used [-Wunused-but-set-variable]
                     Eigen::Vector3d pos_slam_tmp = track_slam_pose.translation();
                                     ^~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_kalman.cc: In member function ‚Äòvoid cartographer::mapping::ImuKalman::newkfCovUpdata(double)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_kalman.cc:794:12: warning: unused variable ‚Äòtao‚Äô [-Wunused-variable]
     double tao=300;
            ^~~
[ 25%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/local_slam_result_2d.cc.o
[ 25%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc: In member function ‚Äòstd::unique_ptr<cartographer::mapping::LocalTrajectoryBuilder2D::MatchingResult> cartographer::mapping::LocalTrajectoryBuilder2D::AddRangeData(const string&, const cartographer::sensor::TimedPointCloudData&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc:685:14: warning: unused variable ‚Äòtime_3‚Äô [-Wunused-variable]
     uint64_t time_3 = common::getTimeNow();
              ^~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc:719:15: warning: unused variable ‚Äòtime_4‚Äô [-Wunused-variable]
      uint64_t time_4 = common::getTimeNow();
               ^~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc:663:12: warning: unused variable ‚Äòtime_2‚Äô [-Wunused-variable]
   uint64_t time_2 = common::getTimeNow();
            ^~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc: In member function ‚Äòstd::unique_ptr<cartographer::mapping::LocalTrajectoryBuilder2D::MatchingResult> cartographer::mapping::LocalTrajectoryBuilder2D::AddAccumulatedRangeData(cartographer::common::Time, const cartographer::sensor::RangeData&, const Rigid3d&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc:966:11: warning: unused variable ‚Äòflag_long_imu_loss‚Äô [-Wunused-variable]
     bool  flag_long_imu_loss =  extrapolator_->long_loss_imu_time;
           ^~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc: In member function ‚Äòstd::unique_ptr<cartographer::mapping::LocalTrajectoryBuilder2D::MatchingResult> cartographer::mapping::LocalTrajectoryBuilder2D::AddAccumulatedRangeData(cartographer::common::Time, const cartographer::sensor::RangeData&, const cartographer::sensor::RangeData&, const Rigid3d&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc:1131:14: warning: unused variable ‚Äòtime_4‚Äô [-Wunused-variable]
     uint64_t time_4 = common::getTimeNow();
              ^~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc: In member function ‚Äòstd::unique_ptr<cartographer::mapping::LocalTrajectoryBuilder2D::InsertionResult> cartographer::mapping::LocalTrajectoryBuilder2D::InsertIntoSubmap(cartographer::common::Time, const cartographer::sensor::RangeData&, const cartographer::sensor::RangeData&, const Rigid3d&, const Quaterniond&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc:1443:32: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
               for(int ii =0 ;ii<filtered_gravity_aligned_point_cloud.size();ii++)
                              ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc: In member function ‚Äòstd::unique_ptr<cartographer::mapping::LocalTrajectoryBuilder2D::InsertionResult> cartographer::mapping::LocalTrajectoryBuilder2D::InsertIntoSubmap(cartographer::common::Time, const cartographer::sensor::RangeData&, const cartographer::sensor::RangeData&, const Rigid3d&, const Quaterniond&, double)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc:1516:32: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
               for(int ii =0 ;ii<filtered_gravity_aligned_point_cloud.size();ii++)
                              ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[ 26%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/local_trajectory_builder_options_2d.cc.o
[ 26%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc.o
[ 26%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/pose_graph_2d.cc.o
[ 26%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/ray_casting.cc.o
[ 27%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/scan_matching/ceres_scan_matcher_2d.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc: In member function ‚Äòvirtual void cartographer::mapping::OverlappingSubmapsTrimmer2D::Trim(cartographer::mapping::Trimmable*)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc:220:28: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
               for(int i=0;i<to_save.size();i++)
                           ~^~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc:251:16: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int i=0;i<to_remove.size();i++)
               ~^~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.cc: In member function ‚Äòvoid cartographer::mapping::PoseGraph2D::ComputeConstraint(const cartographer::mapping::NodeId&, const cartographer::mapping::SubmapId&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.cc:352:22: warning: variable ‚Äònode_time‚Äô set but not used [-Wunused-but-set-variable]
   const common::Time node_time = GetLatestNodeTime(node_id, submap_id);
                      ^~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.cc:353:22: warning: variable ‚Äòlast_connection_time‚Äô set but not used [-Wunused-but-set-variable]
   const common::Time last_connection_time =
                      ^~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.cc: In member function ‚Äòvoid cartographer::mapping::PoseGraph2D::ComputeConstraintsForNode(const cartographer::mapping::NodeId&, std::vector<std::shared_ptr<const cartographer::mapping::Submap2D> >, bool)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.cc:458:65: warning: suggest parentheses around ‚Äò&&‚Äô within ‚Äò||‚Äô [-Wparentheses]
   if(insertion_submaps.size() <= 0 || !insertion_submaps.front()&& common::Setting::open_debug_log >= 1)
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc: At global scope:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc:147:23: warning: ‚Äòstd::vector<cartographer::mapping::SubmapId> cartographer::mapping::{anonymous}::FindSubmapIdsToTrim(const cartographer::mapping::{anonymous}::SubmapCoverageGrid2D&, const std::set<cartographer::mapping::SubmapId>&, cartographer::uint16, cartographer::uint16)‚Äô defined but not used [-Wunused-function]
 std::vector<SubmapId> FindSubmapIdsToTrim(
                       ^~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc:104:34: warning: ‚Äòstd::map<cartographer::mapping::SubmapId, std::chrono::time_point<cartographer::common::UniversalTimeScaleClock> > cartographer::mapping::{anonymous}::ComputeSubmapFreshness(const cartographer::mapping::MapById<cartographer::mapping::SubmapId, cartographer::mapping::PoseGraphInterface::SubmapData>&, const cartographer::mapping::MapById<cartographer::mapping::NodeId, cartographer::mapping::TrajectoryNode>&, const std::vector<cartographer::mapping::PoseGraphInterface::Constraint>&)‚Äô defined but not used [-Wunused-function]
 std::map<SubmapId, common::Time> ComputeSubmapFreshness(
                                  ^~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc:55:20: warning: ‚Äòstd::set<cartographer::mapping::SubmapId> cartographer::mapping::{anonymous}::AddSubmapsToSubmapCoverageGrid2D(const std::map<cartographer::mapping::SubmapId, std::chrono::time_point<cartographer::common::UniversalTimeScaleClock> >&, const cartographer::mapping::MapById<cartographer::mapping::SubmapId, cartographer::mapping::PoseGraphInterface::SubmapData>&, cartographer::mapping::{anonymous}::SubmapCoverageGrid2D*)‚Äô defined but not used [-Wunused-function]
 std::set<SubmapId> AddSubmapsToSubmapCoverageGrid2D(
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[ 27%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/scan_matching/correlative_scan_matcher_2d.cc.o
[ 27%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d.cc: In member function ‚Äòbool cartographer::mapping::scan_matching::FastCorrelativeScanMatcher2D::MatchFullSubmapNew(const PointCloud&, float, float*, cartographer::transform::Rigid2d*, const Rigid2d&) const‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d.cc:240:28: warning: variable ‚Äòcenter‚Äô set but not used [-Wunused-but-set-variable]
   const transform::Rigid2d center = transform::Rigid2d::Translation(
                            ^~~~~~
[ 28%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc.o
[ 28%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/local_slam_result_3d.cc.o
[ 28%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/local_trajectory_builder_3d.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc: In member function ‚Äòdouble cartographer::mapping::scan_matching::RealTimeCorrelativeScanMatcher2D::Match(const Rigid2d&, const PointCloud&, const cartographer::mapping::ProbabilityGrid&, cartographer::transform::Rigid2d*) const‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc:348:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    for(int i = 0 ; i < imu_candidates.size();i++)
                    ~~^~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc:367:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int i = 0 ; i < imu_candidates_noWeight.size();i++)
                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc:378:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int i = 0 ; i < candidates.size();i++)
                   ~~^~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc:384:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int i = 0 ; i < imu_candidates.size();i++)
                   ~~^~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc:391:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int gid = 0 ; gid < candidatesGroup.size();gid ++)
                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc:394:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for(int i = 0 ; i < candidatesGroup[gid].size();i++)
                       ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc:405:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int gid = 0 ; gid < candidatesGroup.size();gid ++)
                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc:416:10: warning: variable ‚ÄòbestCandidatesMeanScore‚Äô set but not used [-Wunused-but-set-variable]
   double bestCandidatesMeanScore;
          ^~~~~~~~~~~~~~~~~~~~~~~
[ 28%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/local_trajectory_builder_options_3d.cc.o
[ 29%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/pose_graph_3d.cc.o
[ 29%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/scan_matching/ceres_scan_matcher_3d.cc.o
[ 29%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/scan_matching/fast_correlative_scan_matcher_3d.cc.o
[ 30%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/scan_matching/low_resolution_matcher.cc.o
[ 30%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/scan_matching/precomputation_grid_3d.cc.o
[ 30%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/scan_matching/real_time_correlative_scan_matcher_3d.cc.o
[ 30%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/3d/scan_matching/rotational_scan_matcher.cc.o
[ 31%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/build_gridmap.cc.o
[ 31%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/collated_trajectory_builder.cc.o
[ 31%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/connected_components.cc.o
[ 32%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/constraints/constraint_builder.cc.o
[ 32%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/constraints/constraint_builder_2d.cc.o
[ 32%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/constraints/constraint_builder_3d.cc.o
[ 32%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/global_trajectory_builder.cc.o
[ 34%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/motion_filter.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d.cc: In member function ‚Äòvoid cartographer::mapping::constraints::ConstraintBuilder2D::ComputeConstraint(const cartographer::mapping::SubmapId&, const cartographer::mapping::Submap2D*, const cartographer::mapping::NodeId&, bool, const cartographer::mapping::TrajectoryNode::Data*, const Rigid2d&, const cartographer::mapping::constraints::ConstraintBuilder2D::SubmapScanMatcher&, std::unique_ptr<cartographer::mapping::PoseGraphInterface::Constraint>*)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d.cc:317:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
           for(int ii=0;ii<constant_data->filtered_gravity_aligned_point_cloud.size();ii++)
                        ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d.cc:356:24: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
           for(int i=0;i<constant_data->filtered_gravity_aligned_point_cloud.size();i++)
                       ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d.cc:506:18: warning: variable ‚Äòcheck_pos‚Äô set but not used [-Wunused-but-set-variable]
           double check_pos=3.5;
                  ^~~~~~~~~
[ 34%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/optimization/ceres_pose.cc.o
[ 34%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_2d.cc.o
[ 35%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/optimization/isam_problem_2d.cc.o
[ 35%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/optimization/optimization_problem_2d.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc: In instantiation of ‚Äòvoid cartographer::mapping::{anonymous}::GlobalTrajectoryBuilder<LocalTrajectoryBuilder, PoseGraph>::AddSensorData(const string&, const cartographer::sensor::TimedPointCloudData&) [with LocalTrajectoryBuilder = cartographer::mapping::LocalTrajectoryBuilder3D; PoseGraph = cartographer::mapping::PoseGraph3D; std::__cxx11::string = std::__cxx11::basic_string<char>]‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc:284:1:   required from here
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc:96:14: warning: unused variable ‚Äòlast_sys_time‚Äô [-Wunused-variable]
     uint64_t last_sys_time = cartographer::common::getTimeNow();
              ^~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc:100:14: warning: unused variable ‚Äòcurrent_sys_time‚Äô [-Wunused-variable]
     uint64_t current_sys_time = cartographer::common::getTimeNow();
              ^~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc: In instantiation of ‚Äòvoid cartographer::mapping::{anonymous}::GlobalTrajectoryBuilder<LocalTrajectoryBuilder, PoseGraph>::AddSensorData(const string&, const cartographer::sensor::TimedPointCloudData&) [with LocalTrajectoryBuilder = cartographer::mapping::LocalTrajectoryBuilder2D; PoseGraph = cartographer::mapping::PoseGraph2D; std::__cxx11::string = std::__cxx11::basic_string<char>]‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc:284:1:   required from here
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc:96:14: warning: unused variable ‚Äòlast_sys_time‚Äô [-Wunused-variable]
     uint64_t last_sys_time = cartographer::common::getTimeNow();
              ^~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc:100:14: warning: unused variable ‚Äòcurrent_sys_time‚Äô [-Wunused-variable]
     uint64_t current_sys_time = cartographer::common::getTimeNow();
              ^~~~~~~~~~~~~~~~
[ 35%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/optimization/optimization_problem_3d.cc.o
[ 35%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/optimization/optimization_problem_options.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc: In member function ‚Äòvoid cartographer::mapping::optimization::OptimizationProblem2D::SolvePyramid(std::vector<cartographer::mapping::PoseGraphInterface::Constraint>&, const std::set<int>&, const std::map<std::__cxx11::basic_string<char>, cartographer::mapping::PoseGraphInterface::LandmarkNode>&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:322:14: warning: unused variable ‚Äòfreeze_landmarks‚Äô [-Wunused-variable]
         bool freeze_landmarks = !frozen_trajectories.empty();
              ^~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc: In member function ‚Äòvoid cartographer::mapping::optimization::OptimizationProblem2D::SolvePyramidFast(const std::vector<cartographer::mapping::PoseGraphInterface::Constraint>&, const std::set<int>&, const std::map<std::__cxx11::basic_string<char>, cartographer::mapping::PoseGraphInterface::LandmarkNode>&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:668:16: warning: unused variable ‚Äòto_continue‚Äô [-Wunused-variable]
           bool to_continue = false;
                ^~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:601:14: warning: unused variable ‚Äòfreeze_landmarks‚Äô [-Wunused-variable]
         bool freeze_landmarks = !frozen_trajectories.empty();
              ^~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc: In member function ‚Äòvoid cartographer::mapping::optimization::OptimizationProblem2D::CheckErrorConstraint(std::vector<std::vector<cartographer::transform::Rigid2<double> > >, int)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:851:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for (int i = 0; i < cons_pose.size(); i++)
                         ~~^~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:854:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
           for (int j = 0; j < cons_pose.at(i).size(); j++)
                           ~~^~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:869:33: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for (int ii = 1; ii < id_nodes.size(); ii++)
                              ~~~^~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc: In member function ‚Äòvoid cartographer::mapping::optimization::OptimizationProblem2D::ComputeReletivePose(cartographer::mapping::NodeId, cartographer::mapping::NodeId, cartographer::transform::Rigid2d, cartographer::transform::Rigid2d)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:939:28: warning: variable ‚Äòcheck_result‚Äô set but not used [-Wunused-but-set-variable]
         transform::Rigid2d check_result = relative_pose_node.inverse() * relative_pose_constraint;
                            ^~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc: In member function ‚Äòvoid cartographer::mapping::optimization::OptimizationProblem2D::SolveShort(const std::vector<cartographer::mapping::PoseGraphInterface::Constraint>&, const std::set<int>&, const std::map<std::__cxx11::basic_string<char>, cartographer::mapping::PoseGraphInterface::LandmarkNode>&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:1014:42: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
           if (node_id_data.id.node_index > node_data_.size() - 35 * 3)
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:1080:16: warning: unused variable ‚Äòto_continue‚Äô [-Wunused-variable]
           bool to_continue = false;
                ^~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc: In member function ‚Äòvirtual void cartographer::mapping::optimization::OptimizationProblem2D::Solve(std::vector<cartographer::mapping::PoseGraphInterface::Constraint>&, const std::set<int>&, const std::map<std::__cxx11::basic_string<char>, cartographer::mapping::PoseGraphInterface::LandmarkNode>&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc:1355:16: warning: unused variable ‚Äòto_continue‚Äô [-Wunused-variable]
           bool to_continue = false;
                ^~~~~~~~~~~
[ 36%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/range_data_collator.cc.o
[ 36%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/scan_matching/real_time_correlative_scan_matcher.cc.o
[ 36%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/submap_controller.cc.o
[ 37%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/internal/trajectory_connectivity_state.cc.o
[ 37%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/map_builder.cc.o
[ 37%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/pose_extrapolator.cc.o
[ 37%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/pose_graph.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc: In member function ‚Äòvoid cartographer::mapping::PoseExtrapolator::AddOdometryData(const cartographer::sensor::OdometryData&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc:283:23: warning: variable ‚Äòmy_odm_pos‚Äô set but not used [-Wunused-but-set-variable]
       Eigen::Vector3d my_odm_pos = odometry_data.pose.translation();
                       ^~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc:354:24: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    if(list_angle.size()>(num_angle-1))
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc: In member function ‚Äòvoid cartographer::mapping::PoseExtrapolator::JudgeSlope()‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc:384:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
      if(list_angle.size()>(num_angle-1))
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc: In member function ‚Äòcartographer::transform::Rigid3d cartographer::mapping::PoseExtrapolator::ExtrapolateImuVel(cartographer::common::Time)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc:670:23: warning: variable ‚Äòinput_start_vel‚Äô set but not used [-Wunused-but-set-variable]
       Eigen::Vector3d input_start_vel = start_vel;
                       ^~~~~~~~~~~~~~~
[ 38%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/pose_graph_trimmer.cc.o
[ 38%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/probability_values.cc.o
[ 38%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/range_data_inserter_interface.cc.o
[ 39%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/trajectory_builder_interface.cc.o
[ 39%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/trajectory_node.cc.o
[ 39%] Building CXX object CMakeFiles/cartographer.dir/cartographer/metrics/counter.cc.o
[ 39%] Building CXX object CMakeFiles/cartographer.dir/cartographer/metrics/gauge.cc.o
[ 40%] Building CXX object CMakeFiles/cartographer.dir/cartographer/metrics/histogram.cc.o
[ 40%] Building CXX object CMakeFiles/cartographer.dir/cartographer/metrics/register.cc.o
[ 40%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/compressed_point_cloud.cc.o
[ 41%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/fixed_frame_pose_data.cc.o
[ 41%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/imu_data.cc.o
[ 41%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/internal/collator.cc.o
[ 41%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/internal/ordered_multi_queue.cc.o
[ 42%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/internal/trajectory_collator.cc.o
[ 42%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/internal/voxel_filter.cc.o
[ 42%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/landmark_data.cc.o
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/voxel_filter.cc: In function ‚Äòcartographer::sensor::PointCloud cartographer::sensor::{anonymous}::AdaptivelyVoxelFiltered(const cartographer::sensor::proto::AdaptiveVoxelFilterOptions&, const PointCloud&)‚Äô:
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/voxel_filter.cc:42:12: warning: unused variable ‚Äòtmp_min_points‚Äô [-Wunused-variable]
     float  tmp_min_points = options.min_num_points();
            ^~~~~~~~~~~~~~
[ 43%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/odometry_data.cc.o
[ 43%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/point_cloud.cc.o
[ 43%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/range_data.cc.o
[ 43%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/timed_point_cloud_data.cc.o
[ 44%] Building CXX object CMakeFiles/cartographer.dir/cartographer/transform/rigid_transform.cc.o
[ 44%] Building CXX object CMakeFiles/cartographer.dir/cartographer/transform/timestamped_transform.cc.o
[ 44%] Building CXX object CMakeFiles/cartographer.dir/cartographer/transform/transform.cc.o
[ 45%] Building CXX object CMakeFiles/cartographer.dir/cartographer/transform/transform_interpolation_buffer.cc.o
[ 45%] Building CXX object CMakeFiles/cartographer.dir/cartographer/common/proto/ceres_solver_options.pb.cc.o
[ 45%] Building CXX object CMakeFiles/cartographer.dir/cartographer/ground_truth/proto/relations.pb.cc.o
[ 45%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/2d/cell_limits.pb.cc.o
[ 46%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/2d/grid_2d.pb.cc.o
[ 46%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/2d/grid_2d_options.pb.cc.o
[ 46%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.cc.o
[ 47%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/2d/map_limits.pb.cc.o
[ 47%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/2d/probability_grid.pb.cc.o
[ 47%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.cc.o
[ 47%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/2d/submaps_options_2d.pb.cc.o
[ 48%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/3d/hybrid_grid.pb.cc.o
[ 48%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.cc.o
[ 48%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.cc.o
[ 49%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/3d/submaps_options_3d.pb.cc.o
[ 49%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/connected_components.pb.cc.o
[ 49%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/internal/legacy_serialized_data.pb.cc.o
[ 49%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/map_builder_options.pb.cc.o
[ 50%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/motion_filter_options.pb.cc.o
[ 50%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/pose_graph.pb.cc.o
[ 50%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.cc.o
[ 51%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.cc.o
[ 51%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/pose_graph_options.pb.cc.o
[ 51%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/ramp.pb.cc.o
[ 51%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/range_data_inserter_options.pb.cc.o
[ 52%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.cc.o
[ 52%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.cc.o
[ 52%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.cc.o
[ 52%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.cc.o
[ 53%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.cc.o
[ 53%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/serialization.pb.cc.o
[ 53%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/submap.pb.cc.o
[ 54%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/submap_visualization.pb.cc.o
[ 54%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/trajectory.pb.cc.o
[ 54%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/trajectory_builder_options.pb.cc.o
[ 54%] Building CXX object CMakeFiles/cartographer.dir/cartographer/mapping/proto/trajectory_node_data.pb.cc.o
[ 55%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.cc.o
[ 55%] Building CXX object CMakeFiles/cartographer.dir/cartographer/sensor/proto/sensor.pb.cc.o
[ 55%] Building CXX object CMakeFiles/cartographer.dir/cartographer/transform/proto/transform.pb.cc.o
[ 56%] Linking CXX shared library libcartographer.so
[ 56%] Built target cartographer
Scanning dependencies of target cartographer_migrate_serialization_format
[ 56%] Building CXX object CMakeFiles/cartographer_migrate_serialization_format.dir/cartographer/io/migrate_serialization_format_main.cc.o
Scanning dependencies of target cartographer_autogenerate_ground_truth
Scanning dependencies of target cartographer_compute_relations_metrics
Scanning dependencies of target cartographer_test_library
[ 57%] Building CXX object CMakeFiles/cartographer_test_library.dir/cartographer/io/fake_file_writer.cc.o
[ 57%] Building CXX object CMakeFiles/cartographer_compute_relations_metrics.dir/cartographer/ground_truth/compute_relations_metrics_main.cc.o
[ 57%] Building CXX object CMakeFiles/cartographer_autogenerate_ground_truth.dir/cartographer/ground_truth/autogenerate_ground_truth_main.cc.o
[ 57%] Linking CXX executable cartographer_migrate_serialization_format
[ 57%] Built target cartographer_migrate_serialization_format
[ 57%] Building CXX object CMakeFiles/cartographer_test_library.dir/cartographer/io/fake_file_writer_test.cc.o
[ 57%] Building CXX object CMakeFiles/cartographer_test_library.dir/cartographer/mapping/internal/testing/test_helpers.cc.o
[ 58%] Linking CXX executable cartographer_compute_relations_metrics
[ 58%] Built target cartographer_compute_relations_metrics
[ 58%] Linking CXX executable cartographer_autogenerate_ground_truth
[ 58%] Built target cartographer_autogenerate_ground_truth
[ 58%] Linking CXX static library libcartographer_test_library.a
[ 58%] Built target cartographer_test_library
Scanning dependencies of target cartographer.mapping.internal.2d.pose_graph_2d_test
[ 58%] Building CXX object CMakeFiles/cartographer.mapping.internal.2d.pose_graph_2d_test.dir/cartographer/mapping/internal/2d/pose_graph_2d_test.cc.o
Scanning dependencies of target cartographer.mapping.2d.xy_index_test
Scanning dependencies of target cartographer.mapping.3d.submap_3d_test
[ 59%] Linking CXX executable cartographer.mapping.internal.2d.pose_graph_2d_test
Scanning dependencies of target cartographer.sensor.point_cloud_test
[ 59%] Building CXX object CMakeFiles/cartographer.mapping.2d.xy_index_test.dir/cartographer/mapping/2d/xy_index_test.cc.o
[ 59%] Building CXX object CMakeFiles/cartographer.mapping.3d.submap_3d_test.dir/cartographer/mapping/3d/submap_3d_test.cc.o
[ 59%] Building CXX object CMakeFiles/cartographer.sensor.point_cloud_test.dir/cartographer/sensor/point_cloud_test.cc.o
[ 59%] Built target cartographer.mapping.internal.2d.pose_graph_2d_test
Scanning dependencies of target cartographer.mapping.2d.submap_2d_test
[ 60%] Building CXX object CMakeFiles/cartographer.mapping.2d.submap_2d_test.dir/cartographer/mapping/2d/submap_2d_test.cc.o
[ 61%] Linking CXX executable cartographer.mapping.2d.xy_index_test
[ 61%] Linking CXX executable cartographer.sensor.point_cloud_test
[ 61%] Built target cartographer.mapping.2d.xy_index_test
Scanning dependencies of target cartographer.mapping.internal.constraints.constraint_builder_3d_test
[ 61%] Built target cartographer.sensor.point_cloud_test
[ 61%] Building CXX object CMakeFiles/cartographer.mapping.internal.constraints.constraint_builder_3d_test.dir/cartographer/mapping/internal/constraints/constraint_builder_3d_test.cc.o
Scanning dependencies of target cartographer.io.proto_stream_deserializer_test
[ 61%] Building CXX object CMakeFiles/cartographer.io.proto_stream_deserializer_test.dir/cartographer/io/proto_stream_deserializer_test.cc.o
[ 62%] Linking CXX executable cartographer.io.proto_stream_deserializer_test
[ 62%] Built target cartographer.io.proto_stream_deserializer_test
Scanning dependencies of target cartographer.mapping.imu_tracker_test
[ 62%] Building CXX object CMakeFiles/cartographer.mapping.imu_tracker_test.dir/cartographer/mapping/imu_tracker_test.cc.o
[ 62%] Linking CXX executable cartographer.mapping.3d.submap_3d_test
[ 62%] Built target cartographer.mapping.3d.submap_3d_test
Scanning dependencies of target cartographer.mapping.3d.hybrid_grid_test
[ 62%] Building CXX object CMakeFiles/cartographer.mapping.3d.hybrid_grid_test.dir/cartographer/mapping/3d/hybrid_grid_test.cc.o
[ 62%] Linking CXX executable cartographer.mapping.2d.submap_2d_test
[ 62%] Built target cartographer.mapping.2d.submap_2d_test
Scanning dependencies of target cartographer.mapping.trajectory_node_test
[ 62%] Building CXX object CMakeFiles/cartographer.mapping.trajectory_node_test.dir/cartographer/mapping/trajectory_node_test.cc.o
[ 63%] Linking CXX executable cartographer.mapping.internal.constraints.constraint_builder_3d_test
[ 63%] Built target cartographer.mapping.internal.constraints.constraint_builder_3d_test
Scanning dependencies of target cartographer.common.lua_parameter_dictionary_test
[ 63%] Building CXX object CMakeFiles/cartographer.common.lua_parameter_dictionary_test.dir/cartographer/common/lua_parameter_dictionary_test.cc.o
[ 63%] Linking CXX executable cartographer.mapping.3d.hybrid_grid_test
[ 63%] Built target cartographer.mapping.3d.hybrid_grid_test
Scanning dependencies of target cartographer.io.proto_stream_test
[ 63%] Building CXX object CMakeFiles/cartographer.io.proto_stream_test.dir/cartographer/io/proto_stream_test.cc.o
[ 64%] Linking CXX executable cartographer.mapping.trajectory_node_test
[ 64%] Built target cartographer.mapping.trajectory_node_test
Scanning dependencies of target cartographer.mapping.2d.probability_grid_test
[ 65%] Building CXX object CMakeFiles/cartographer.mapping.2d.probability_grid_test.dir/cartographer/mapping/2d/probability_grid_test.cc.o
[ 65%] Linking CXX executable cartographer.io.proto_stream_test
[ 65%] Linking CXX executable cartographer.common.lua_parameter_dictionary_test
[ 65%] Linking CXX executable cartographer.mapping.imu_tracker_test
[ 65%] Built target cartographer.io.proto_stream_test
[ 65%] Built target cartographer.common.lua_parameter_dictionary_test
[ 65%] Built target cartographer.mapping.imu_tracker_test
Scanning dependencies of target cartographer.mapping.internal.3d.scan_matching.real_time_correlative_scan_matcher_3d_test
[ 67%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.scan_matching.real_time_correlative_scan_matcher_3d_test.dir/cartographer/mapping/internal/3d/scan_matching/real_time_correlative_scan_matcher_3d_test.cc.o
Scanning dependencies of target cartographer.common.math_test
Scanning dependencies of target cartographer.mapping.internal.2d.overlapping_submaps_trimmer_2d_test
[ 68%] Building CXX object CMakeFiles/cartographer.common.math_test.dir/cartographer/common/math_test.cc.o
[ 69%] Building CXX object CMakeFiles/cartographer.mapping.internal.2d.overlapping_submaps_trimmer_2d_test.dir/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d_test.cc.o
[ 69%] Linking CXX executable cartographer.mapping.2d.probability_grid_test
[ 69%] Linking CXX executable cartographer.common.math_test
[ 69%] Built target cartographer.common.math_test
Scanning dependencies of target cartographer.mapping.internal.optimization.optimization_problem_3d_test
[ 69%] Built target cartographer.mapping.2d.probability_grid_test
[ 69%] Building CXX object CMakeFiles/cartographer.mapping.internal.optimization.optimization_problem_3d_test.dir/cartographer/mapping/internal/optimization/optimization_problem_3d_test.cc.o
Scanning dependencies of target cartographer.io.internal.in_memory_proto_stream_test
[ 70%] Linking CXX executable cartographer.mapping.internal.optimization.optimization_problem_3d_test
[ 70%] Building CXX object CMakeFiles/cartographer.io.internal.in_memory_proto_stream_test.dir/cartographer/io/internal/in_memory_proto_stream_test.cc.o
[ 70%] Built target cartographer.mapping.internal.optimization.optimization_problem_3d_test
Scanning dependencies of target cartographer.sensor.internal.voxel_filter_test
[ 70%] Building CXX object CMakeFiles/cartographer.sensor.internal.voxel_filter_test.dir/cartographer/sensor/internal/voxel_filter_test.cc.o
[ 70%] Linking CXX executable cartographer.io.internal.in_memory_proto_stream_test
[ 70%] Built target cartographer.io.internal.in_memory_proto_stream_test
Scanning dependencies of target cartographer.mapping.internal.2d.scan_matching.correlative_scan_matcher_test
[ 70%] Building CXX object CMakeFiles/cartographer.mapping.internal.2d.scan_matching.correlative_scan_matcher_test.dir/cartographer/mapping/internal/2d/scan_matching/correlative_scan_matcher_test.cc.o
[ 70%] Linking CXX executable cartographer.mapping.internal.2d.overlapping_submaps_trimmer_2d_test
[ 70%] Linking CXX executable cartographer.mapping.internal.3d.scan_matching.real_time_correlative_scan_matcher_3d_test
[ 70%] Built target cartographer.mapping.internal.2d.overlapping_submaps_trimmer_2d_test
Scanning dependencies of target cartographer.common.blocking_queue_test
[ 70%] Built target cartographer.mapping.internal.3d.scan_matching.real_time_correlative_scan_matcher_3d_test
[ 70%] Building CXX object CMakeFiles/cartographer.common.blocking_queue_test.dir/cartographer/common/blocking_queue_test.cc.o
Scanning dependencies of target cartographer.mapping.internal.trajectory_connectivity_state_test
[ 70%] Building CXX object CMakeFiles/cartographer.mapping.internal.trajectory_connectivity_state_test.dir/cartographer/mapping/internal/trajectory_connectivity_state_test.cc.o
[ 71%] Linking CXX executable cartographer.sensor.internal.voxel_filter_test
[ 71%] Built target cartographer.sensor.internal.voxel_filter_test
Scanning dependencies of target cartographer.common.lockless_queue_test
[ 72%] Building CXX object CMakeFiles/cartographer.common.lockless_queue_test.dir/cartographer/common/lockless_queue_test.cc.o
[ 72%] Linking CXX executable cartographer.common.lockless_queue_test
[ 72%] Built target cartographer.common.lockless_queue_test
Scanning dependencies of target cartographer.common.fixed_ratio_sampler_test
[ 72%] Building CXX object CMakeFiles/cartographer.common.fixed_ratio_sampler_test.dir/cartographer/common/fixed_ratio_sampler_test.cc.o
[ 72%] Linking CXX executable cartographer.common.blocking_queue_test
[ 73%] Linking CXX executable cartographer.mapping.internal.2d.scan_matching.correlative_scan_matcher_test
[ 73%] Built target cartographer.common.blocking_queue_test
Scanning dependencies of target cartographer.mapping.id_test
[ 74%] Building CXX object CMakeFiles/cartographer.mapping.id_test.dir/cartographer/mapping/id_test.cc.o
[ 75%] Linking CXX executable cartographer.mapping.internal.trajectory_connectivity_state_test
[ 75%] Built target cartographer.mapping.internal.2d.scan_matching.correlative_scan_matcher_test
Scanning dependencies of target cartographer.mapping.internal.3d.scan_matching.rotation_delta_cost_functor_3d_test
[ 75%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.scan_matching.rotation_delta_cost_functor_3d_test.dir/cartographer/mapping/internal/3d/scan_matching/rotation_delta_cost_functor_3d_test.cc.o
[ 75%] Built target cartographer.mapping.internal.trajectory_connectivity_state_test
Scanning dependencies of target cartographer.common.configuration_files_test
[ 75%] Building CXX object CMakeFiles/cartographer.common.configuration_files_test.dir/cartographer/common/configuration_files_test.cc.o
[ 75%] Linking CXX executable cartographer.common.fixed_ratio_sampler_test
[ 75%] Built target cartographer.common.fixed_ratio_sampler_test
Scanning dependencies of target cartographer.io.serialization_format_migration_test
[ 75%] Building CXX object CMakeFiles/cartographer.io.serialization_format_migration_test.dir/cartographer/io/serialization_format_migration_test.cc.o
In file included from /usr/src/googletest/googlemock/include/gmock/gmock-spec-builders.h:75:0,
                 from /usr/src/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h:43,
                 from /usr/src/googletest/googlemock/include/gmock/gmock.h:61,
                 from /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/serialization_format_migration_test.cc:27:
/usr/src/googletest/googlemock/include/gmock/gmock-matchers.h: In instantiation of ‚Äòbool testing::internal::AnyEq::operator()(const A&, const B&) const [with A = unsigned int; B = int]‚Äô:
/usr/src/googletest/googlemock/include/gmock/gmock-matchers.h:908:18:   required from ‚Äòbool testing::internal::ComparisonBase<D, Rhs, Op>::Impl<Lhs>::MatchAndExplain(Lhs, testing::MatchResultListener*) const [with Lhs = const unsigned int&; D = testing::internal::EqMatcher<int>; Rhs = int; Op = testing::internal::AnyEq]‚Äô
/root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/serialization_format_migration_test.cc:120:1:   required from here
/usr/src/googletest/googlemock/include/gmock/gmock-matchers.h:204:60: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   bool operator()(const A& a, const B& b) const { return a == b; }
                                                          ~~^~~~
[ 75%] Linking CXX executable cartographer.mapping.internal.3d.scan_matching.rotation_delta_cost_functor_3d_test
[ 75%] Built target cartographer.mapping.internal.3d.scan_matching.rotation_delta_cost_functor_3d_test
Scanning dependencies of target cartographer.sensor.internal.ordered_multi_queue_test
[ 75%] Building CXX object CMakeFiles/cartographer.sensor.internal.ordered_multi_queue_test.dir/cartographer/sensor/internal/ordered_multi_queue_test.cc.o
[ 75%] Linking CXX executable cartographer.mapping.id_test
[ 75%] Built target cartographer.mapping.id_test
Scanning dependencies of target cartographer.common.optional_test
[ 75%] Building CXX object CMakeFiles/cartographer.common.optional_test.dir/cartographer/common/optional_test.cc.o
[ 76%] Linking CXX executable cartographer.io.serialization_format_migration_test
[ 76%] Built target cartographer.io.serialization_format_migration_test
Scanning dependencies of target cartographer.mapping.internal.3d.local_trajectory_builder_3d_test
[ 76%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.local_trajectory_builder_3d_test.dir/cartographer/mapping/internal/3d/local_trajectory_builder_3d_test.cc.o
[ 77%] Linking CXX executable cartographer.common.optional_test
[ 77%] Built target cartographer.common.optional_test
Scanning dependencies of target cartographer.mapping.internal.connected_components_test
[ 77%] Building CXX object CMakeFiles/cartographer.mapping.internal.connected_components_test.dir/cartographer/mapping/internal/connected_components_test.cc.o
[ 78%] Linking CXX executable cartographer.common.configuration_files_test
[ 78%] Built target cartographer.common.configuration_files_test
Scanning dependencies of target cartographer.common.thread_pool_test
[ 78%] Building CXX object CMakeFiles/cartographer.common.thread_pool_test.dir/cartographer/common/thread_pool_test.cc.o
[ 78%] Linking CXX executable cartographer.sensor.internal.ordered_multi_queue_test
[ 78%] Built target cartographer.sensor.internal.ordered_multi_queue_test
[ 78%] Linking CXX executable cartographer.common.thread_pool_test
Scanning dependencies of target cartographer.mapping.2d.range_data_inserter_2d_test
[ 78%] Building CXX object CMakeFiles/cartographer.mapping.2d.range_data_inserter_2d_test.dir/cartographer/mapping/2d/range_data_inserter_2d_test.cc.o
[ 78%] Built target cartographer.common.thread_pool_test
Scanning dependencies of target cartographer.common.task_test
[ 78%] Building CXX object CMakeFiles/cartographer.common.task_test.dir/cartographer/common/task_test.cc.o
[ 79%] Linking CXX executable cartographer.mapping.internal.connected_components_test
[ 79%] Built target cartographer.mapping.internal.connected_components_test
Scanning dependencies of target cartographer.mapping.3d.range_data_inserter_3d_test
[ 79%] Building CXX object CMakeFiles/cartographer.mapping.3d.range_data_inserter_3d_test.dir/cartographer/mapping/3d/range_data_inserter_3d_test.cc.o
[ 80%] Linking CXX executable cartographer.common.task_test
[ 80%] Linking CXX executable cartographer.mapping.internal.3d.local_trajectory_builder_3d_test
[ 80%] Linking CXX executable cartographer.mapping.2d.range_data_inserter_2d_test
[ 80%] Built target cartographer.common.task_test
Scanning dependencies of target cartographer.mapping.internal.2d.scan_matching.fast_correlative_scan_matcher_2d_test
[ 80%] Built target cartographer.mapping.internal.3d.local_trajectory_builder_3d_test
[ 80%] Building CXX object CMakeFiles/cartographer.mapping.internal.2d.scan_matching.fast_correlative_scan_matcher_2d_test.dir/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d_test.cc.o
Scanning dependencies of target cartographer.mapping.internal.3d.scan_matching.ceres_scan_matcher_3d_test
[ 80%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.scan_matching.ceres_scan_matcher_3d_test.dir/cartographer/mapping/internal/3d/scan_matching/ceres_scan_matcher_3d_test.cc.o
[ 80%] Built target cartographer.mapping.2d.range_data_inserter_2d_test
Scanning dependencies of target cartographer.mapping.internal.2d.scan_matching.ceres_scan_matcher_2d_test
[ 80%] Building CXX object CMakeFiles/cartographer.mapping.internal.2d.scan_matching.ceres_scan_matcher_2d_test.dir/cartographer/mapping/internal/2d/scan_matching/ceres_scan_matcher_2d_test.cc.o
[ 81%] Linking CXX executable cartographer.mapping.3d.range_data_inserter_3d_test
[ 81%] Built target cartographer.mapping.3d.range_data_inserter_3d_test
Scanning dependencies of target cartographer.mapping.internal.3d.pose_graph_3d_test
[ 82%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.pose_graph_3d_test.dir/cartographer/mapping/internal/3d/pose_graph_3d_test.cc.o
[ 82%] Linking CXX executable cartographer.mapping.internal.2d.scan_matching.ceres_scan_matcher_2d_test
[ 82%] Built target cartographer.mapping.internal.2d.scan_matching.ceres_scan_matcher_2d_test
Scanning dependencies of target cartographer.mapping.internal.3d.scan_matching.fast_correlative_scan_matcher_3d_test
[ 82%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.scan_matching.fast_correlative_scan_matcher_3d_test.dir/cartographer/mapping/internal/3d/scan_matching/fast_correlative_scan_matcher_3d_test.cc.o
[ 83%] Linking CXX executable cartographer.mapping.internal.3d.scan_matching.ceres_scan_matcher_3d_test
[ 83%] Linking CXX executable cartographer.mapping.internal.2d.scan_matching.fast_correlative_scan_matcher_2d_test
[ 83%] Built target cartographer.mapping.internal.3d.scan_matching.ceres_scan_matcher_3d_test
Scanning dependencies of target cartographer.mapping.map_builder_test
[ 83%] Building CXX object CMakeFiles/cartographer.mapping.map_builder_test.dir/cartographer/mapping/map_builder_test.cc.o
[ 83%] Built target cartographer.mapping.internal.2d.scan_matching.fast_correlative_scan_matcher_2d_test
Scanning dependencies of target cartographer.common.rate_timer_test
[ 83%] Building CXX object CMakeFiles/cartographer.common.rate_timer_test.dir/cartographer/common/rate_timer_test.cc.o
[ 83%] Linking CXX executable cartographer.mapping.internal.3d.pose_graph_3d_test
[ 83%] Built target cartographer.mapping.internal.3d.pose_graph_3d_test
Scanning dependencies of target cartographer.mapping.internal.3d.scan_matching.precomputation_grid_3d_test
[ 83%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.scan_matching.precomputation_grid_3d_test.dir/cartographer/mapping/internal/3d/scan_matching/precomputation_grid_3d_test.cc.o
[ 83%] Linking CXX executable cartographer.common.rate_timer_test
[ 83%] Built target cartographer.common.rate_timer_test
Scanning dependencies of target cartographer.mapping.internal.3d.scan_matching.rotational_scan_matcher_test
[ 84%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.scan_matching.rotational_scan_matcher_test.dir/cartographer/mapping/internal/3d/scan_matching/rotational_scan_matcher_test.cc.o
[ 84%] Linking CXX executable cartographer.mapping.internal.3d.scan_matching.precomputation_grid_3d_test
[ 84%] Linking CXX executable cartographer.mapping.internal.3d.scan_matching.fast_correlative_scan_matcher_3d_test
[ 84%] Built target cartographer.mapping.internal.3d.scan_matching.precomputation_grid_3d_test
Scanning dependencies of target cartographer.mapping.internal.range_data_collator_test
[ 84%] Building CXX object CMakeFiles/cartographer.mapping.internal.range_data_collator_test.dir/cartographer/mapping/internal/range_data_collator_test.cc.o
[ 84%] Built target cartographer.mapping.internal.3d.scan_matching.fast_correlative_scan_matcher_3d_test
Scanning dependencies of target cartographer.mapping.internal.motion_filter_test
[ 84%] Building CXX object CMakeFiles/cartographer.mapping.internal.motion_filter_test.dir/cartographer/mapping/internal/motion_filter_test.cc.o
[ 84%] Linking CXX executable cartographer.mapping.internal.3d.scan_matching.rotational_scan_matcher_test
[ 84%] Built target cartographer.mapping.internal.3d.scan_matching.rotational_scan_matcher_test
Scanning dependencies of target cartographer.mapping.probability_values_test
[ 84%] Building CXX object CMakeFiles/cartographer.mapping.probability_values_test.dir/cartographer/mapping/probability_values_test.cc.o
[ 84%] Linking CXX executable cartographer.mapping.map_builder_test
[ 84%] Built target cartographer.mapping.map_builder_test
Scanning dependencies of target cartographer.mapping.internal.constraints.constraint_builder_2d_test
[ 84%] Building CXX object CMakeFiles/cartographer.mapping.internal.constraints.constraint_builder_2d_test.dir/cartographer/mapping/internal/constraints/constraint_builder_2d_test.cc.o
[ 84%] Linking CXX executable cartographer.mapping.internal.motion_filter_test
[ 85%] Linking CXX executable cartographer.mapping.probability_values_test
[ 85%] Built target cartographer.mapping.internal.motion_filter_test
Scanning dependencies of target cartographer.mapping.internal.optimization.cost_functions.landmark_cost_function_2d_test
[ 85%] Built target cartographer.mapping.probability_values_test
[ 86%] Building CXX object CMakeFiles/cartographer.mapping.internal.optimization.cost_functions.landmark_cost_function_2d_test.dir/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_2d_test.cc.o
Scanning dependencies of target cartographer.io.fake_file_writer_test
[ 87%] Building CXX object CMakeFiles/cartographer.io.fake_file_writer_test.dir/cartographer/io/fake_file_writer_test.cc.o
[ 87%] Linking CXX executable cartographer.mapping.internal.range_data_collator_test
[ 87%] Built target cartographer.mapping.internal.range_data_collator_test
Scanning dependencies of target cartographer.mapping.internal.optimization.cost_functions.landmark_cost_function_3d_test
[ 87%] Building CXX object CMakeFiles/cartographer.mapping.internal.optimization.cost_functions.landmark_cost_function_3d_test.dir/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_3d_test.cc.o
[ 87%] Linking CXX executable cartographer.io.fake_file_writer_test
[ 87%] Built target cartographer.io.fake_file_writer_test
Scanning dependencies of target cartographer.mapping.internal.optimization.cost_functions.spa_cost_function_2d_test
[ 88%] Building CXX object CMakeFiles/cartographer.mapping.internal.optimization.cost_functions.spa_cost_function_2d_test.dir/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_2d_test.cc.o
[ 88%] Linking CXX executable cartographer.mapping.internal.constraints.constraint_builder_2d_test
[ 88%] Built target cartographer.mapping.internal.constraints.constraint_builder_2d_test
Scanning dependencies of target cartographer.mapping.pose_graph_test
[ 88%] Building CXX object CMakeFiles/cartographer.mapping.pose_graph_test.dir/cartographer/mapping/pose_graph_test.cc.o
[ 88%] Linking CXX executable cartographer.mapping.internal.optimization.cost_functions.landmark_cost_function_2d_test
[ 88%] Built target cartographer.mapping.internal.optimization.cost_functions.landmark_cost_function_2d_test
Scanning dependencies of target cartographer.mapping.pose_extrapolator_test
[ 89%] Building CXX object CMakeFiles/cartographer.mapping.pose_extrapolator_test.dir/cartographer/mapping/pose_extrapolator_test.cc.o
[ 89%] Linking CXX executable cartographer.mapping.pose_graph_test
[ 89%] Built target cartographer.mapping.pose_graph_test
Scanning dependencies of target cartographer.io.points_processor_pipeline_builder_test
[ 90%] Building CXX object CMakeFiles/cartographer.io.points_processor_pipeline_builder_test.dir/cartographer/io/points_processor_pipeline_builder_test.cc.o
[ 90%] Linking CXX executable cartographer.mapping.internal.optimization.cost_functions.landmark_cost_function_3d_test
[ 90%] Built target cartographer.mapping.internal.optimization.cost_functions.landmark_cost_function_3d_test
Scanning dependencies of target cartographer.mapping.pose_graph_trimmer_test
[ 91%] Building CXX object CMakeFiles/cartographer.mapping.pose_graph_trimmer_test.dir/cartographer/mapping/pose_graph_trimmer_test.cc.o
[ 91%] Linking CXX executable cartographer.mapping.internal.optimization.cost_functions.spa_cost_function_2d_test
[ 91%] Built target cartographer.mapping.internal.optimization.cost_functions.spa_cost_function_2d_test
Scanning dependencies of target cartographer.mapping.submaps_test
[ 91%] Building CXX object CMakeFiles/cartographer.mapping.submaps_test.dir/cartographer/mapping/submaps_test.cc.o
[ 91%] Linking CXX executable cartographer.io.points_processor_pipeline_builder_test
[ 91%] Built target cartographer.io.points_processor_pipeline_builder_test
Scanning dependencies of target cartographer.sensor.compressed_point_cloud_test
[ 91%] Building CXX object CMakeFiles/cartographer.sensor.compressed_point_cloud_test.dir/cartographer/sensor/compressed_point_cloud_test.cc.o
[ 91%] Linking CXX executable cartographer.mapping.pose_graph_trimmer_test
[ 91%] Linking CXX executable cartographer.mapping.submaps_test
[ 91%] Built target cartographer.mapping.submaps_test
Scanning dependencies of target cartographer.sensor.internal.collator_test
[ 92%] Building CXX object CMakeFiles/cartographer.sensor.internal.collator_test.dir/cartographer/sensor/internal/collator_test.cc.o
[ 92%] Built target cartographer.mapping.pose_graph_trimmer_test
Scanning dependencies of target cartographer.sensor.internal.trajectory_collator_test
[ 93%] Building CXX object CMakeFiles/cartographer.sensor.internal.trajectory_collator_test.dir/cartographer/sensor/internal/trajectory_collator_test.cc.o
[ 93%] Linking CXX executable cartographer.sensor.compressed_point_cloud_test
[ 93%] Built target cartographer.sensor.compressed_point_cloud_test
Scanning dependencies of target cartographer.mapping.2d.map_limits_test
[ 93%] Building CXX object CMakeFiles/cartographer.mapping.2d.map_limits_test.dir/cartographer/mapping/2d/map_limits_test.cc.o
[ 93%] Linking CXX executable cartographer.sensor.internal.trajectory_collator_test
[ 93%] Built target cartographer.sensor.internal.trajectory_collator_test
Scanning dependencies of target cartographer.mapping.internal.2d.scan_matching.real_time_correlative_scan_matcher_2d_test
[ 94%] Building CXX object CMakeFiles/cartographer.mapping.internal.2d.scan_matching.real_time_correlative_scan_matcher_2d_test.dir/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d_test.cc.o
[ 94%] Linking CXX executable cartographer.sensor.internal.collator_test
[ 94%] Built target cartographer.sensor.internal.collator_test
Scanning dependencies of target cartographer.sensor.landmark_data_test
[ 94%] Building CXX object CMakeFiles/cartographer.sensor.landmark_data_test.dir/cartographer/sensor/landmark_data_test.cc.o
[ 94%] Linking CXX executable cartographer.mapping.2d.map_limits_test
[ 94%] Built target cartographer.mapping.2d.map_limits_test
Scanning dependencies of target cartographer.transform.transform_test
[ 94%] Building CXX object CMakeFiles/cartographer.transform.transform_test.dir/cartographer/transform/transform_test.cc.o
[ 94%] Linking CXX executable cartographer.mapping.pose_extrapolator_test
[ 94%] Linking CXX executable cartographer.mapping.internal.2d.scan_matching.real_time_correlative_scan_matcher_2d_test
[ 94%] Built target cartographer.mapping.pose_extrapolator_test
Scanning dependencies of target cartographer.sensor.map_by_time_test
[ 94%] Building CXX object CMakeFiles/cartographer.sensor.map_by_time_test.dir/cartographer/sensor/map_by_time_test.cc.o
[ 94%] Built target cartographer.mapping.internal.2d.scan_matching.real_time_correlative_scan_matcher_2d_test
Scanning dependencies of target cartographer.mapping.internal.3d.scan_matching.interpolated_grid_test
[ 94%] Building CXX object CMakeFiles/cartographer.mapping.internal.3d.scan_matching.interpolated_grid_test.dir/cartographer/mapping/internal/3d/scan_matching/interpolated_grid_test.cc.o
[ 94%] Linking CXX executable cartographer.sensor.landmark_data_test
[ 94%] Built target cartographer.sensor.landmark_data_test
Scanning dependencies of target cartographer.sensor.range_data_test
[ 95%] Building CXX object CMakeFiles/cartographer.sensor.range_data_test.dir/cartographer/sensor/range_data_test.cc.o
[ 96%] Linking CXX executable cartographer.transform.transform_test
[ 96%] Built target cartographer.transform.transform_test
Scanning dependencies of target cartographer.transform.rigid_transform_test
[ 96%] Building CXX object CMakeFiles/cartographer.transform.rigid_transform_test.dir/cartographer/transform/rigid_transform_test.cc.o
[ 97%] Linking CXX executable cartographer.sensor.map_by_time_test
[ 97%] Built target cartographer.sensor.map_by_time_test
Scanning dependencies of target cartographer.transform.transform_interpolation_buffer_test
[ 98%] Building CXX object CMakeFiles/cartographer.transform.transform_interpolation_buffer_test.dir/cartographer/transform/transform_interpolation_buffer_test.cc.o
[100%] Linking CXX executable cartographer.mapping.internal.3d.scan_matching.interpolated_grid_test
[100%] Built target cartographer.mapping.internal.3d.scan_matching.interpolated_grid_test
[100%] Linking CXX executable cartographer.sensor.range_data_test
[100%] Built target cartographer.sensor.range_data_test
[100%] Linking CXX executable cartographer.transform.transform_interpolation_buffer_test
[100%] Built target cartographer.transform.transform_interpolation_buffer_test
[100%] Linking CXX executable cartographer.transform.rigid_transform_test
[100%] Built target cartographer.transform.rigid_transform_test
Install the project...
-- Install configuration: "Release"
-- Installing: ../../cartographer/usr/local/share/cartographer/package.xml
-- Installing: ../../cartographer/usr/local/./cartographer//config
-- Installing: ../../cartographer/usr/local/./cartographer//config/trajectory_builder_3d.lua
-- Installing: ../../cartographer/usr/local/./cartographer//config/pose_graph.lua
-- Installing: ../../cartographer/usr/local/./cartographer//config/map_builder_server.lua
-- Installing: ../../cartographer/usr/local/./cartographer//config/map_builder.lua
-- Installing: ../../cartographer/usr/local/./cartographer//config/trajectory_builder_2d.lua
-- Installing: ../../cartographer/usr/local/./cartographer//config/trajectory_builder.lua
-- Installing: ../../cartographer/usr/local/./cartographer//cmake
-- Installing: ../../cartographer/usr/local/./cartographer//cmake/functions.cmake
-- Installing: ../../cartographer/usr/local/./cartographer//cmake/modules
-- Installing: ../../cartographer/usr/local/./cartographer//cmake/modules/FindLuaGoogle.cmake
-- Installing: ../../cartographer/usr/local/./cartographer//cmake/modules/FindSphinx.cmake
-- Installing: ../../cartographer/usr/local/./cartographer//cmake/modules/FindGMock.cmake
-- Installing: ../../cartographer/usr/local/bin/cartographer_autogenerate_ground_truth
-- Set runtime path of "../../cartographer/usr/local/bin/cartographer_autogenerate_ground_truth" to ""
-- Installing: ../../cartographer/usr/local/bin/cartographer_compute_relations_metrics
-- Set runtime path of "../../cartographer/usr/local/bin/cartographer_compute_relations_metrics" to ""
-- Installing: ../../cartographer/usr/local/bin/cartographer_migrate_serialization_format
-- Set runtime path of "../../cartographer/usr/local/bin/cartographer_migrate_serialization_format" to ""
-- Installing: ../../cartographer/usr/local/lib/libcartographer.so.1.0.0
-- Installing: ../../cartographer/usr/local/lib/libcartographer.so.0
-- Installing: ../../cartographer/usr/local/lib/libcartographer.so
-- Set runtime path of "../../cartographer/usr/local/lib/libcartographer.so.1.0.0" to ""
-- Installing: ../../cartographer/usr/local/include/cartographer/common/DataChecking.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/blocking_queue.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/ceres_solver_options.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/configuration_file_resolver.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/fixed_ratio_sampler.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/histogram.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/lockless_queue.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/lua.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/make_unique.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/math.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/mutex.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/optional.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/port.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/rate_timer.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/setting.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/task.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/thread_pool.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/time.h
-- Installing: ../../cartographer/usr/local/include/cartographer/ground_truth/relations_text_file.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/color.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/coloring_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/counting_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/draw_trajectories.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/file_writer.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/fixed_ratio_sampling_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/frame_id_filtering_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/hybrid_grid_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/image.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/intensity_to_color_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/min_max_range_filtering_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/null_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/outlier_removing_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/pcd_writing_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/ply_writing_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/points_batch.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/points_processor_pipeline_builder.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/probability_grid_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/proto_stream.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/proto_stream_deserializer.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/proto_stream_interface.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/serialization_format_migration.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/submap_painter.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/xray_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/xyz_writing_points_processor.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/2d/grid_2d.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/2d/map_limits.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/2d/probability_grid.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/2d/submap_2d.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/2d/xy_index.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/3d/hybrid_grid.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/3d/range_data_inserter_3d.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/3d/submap_3d.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/Ramp.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/detect_floors.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/grid_interface.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/id.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/imu_kalman.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/imu_tracker.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/local_slam_result_data.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/map_builder.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/map_builder_interface.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/pose_extrapolator.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/pose_graph.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/pose_graph_interface.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/pose_graph_trimmer.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/probability_values.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/range_data_inserter_interface.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/submaps.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/trajectory_builder_interface.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/trajectory_node.h
-- Installing: ../../cartographer/usr/local/include/cartographer/metrics/counter.h
-- Installing: ../../cartographer/usr/local/include/cartographer/metrics/family_factory.h
-- Installing: ../../cartographer/usr/local/include/cartographer/metrics/gauge.h
-- Installing: ../../cartographer/usr/local/include/cartographer/metrics/histogram.h
-- Installing: ../../cartographer/usr/local/include/cartographer/metrics/register.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/collator_interface.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/compressed_point_cloud.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/data.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/fixed_frame_pose_data.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/imu_data.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/landmark_data.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/map_by_time.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/odometry_data.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/point_cloud.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/range_data.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/timed_point_cloud_data.h
-- Installing: ../../cartographer/usr/local/include/cartographer/transform/rigid_transform.h
-- Installing: ../../cartographer/usr/local/include/cartographer/transform/timestamped_transform.h
-- Installing: ../../cartographer/usr/local/include/cartographer/transform/transform.h
-- Installing: ../../cartographer/usr/local/include/cartographer/transform/transform_interpolation_buffer.h
-- Installing: ../../cartographer/usr/local/include/cartographer/io/fake_file_writer.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary_test_helpers.h
-- Installing: ../../cartographer/usr/local/include/cartographer/transform/rigid_transform_test_helpers.h
-- Installing: ../../cartographer/usr/local/include/cartographer/common/proto/ceres_solver_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/ground_truth/proto/relations.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/2d/cell_limits.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/2d/map_limits.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/2d/submaps_options_2d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/3d/hybrid_grid.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/3d/submaps_options_3d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/connected_components.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/internal/legacy_serialized_data.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/map_builder_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/motion_filter_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/pose_graph.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/pose_graph_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/ramp.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/range_data_inserter_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/serialization.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/submap.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/submap_visualization.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/trajectory.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/trajectory_builder_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/mapping/proto/trajectory_node_data.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/sensor/proto/sensor.pb.h
-- Installing: ../../cartographer/usr/local/include/cartographer/transform/proto/transform.pb.h
-- Installing: ../../cartographer/usr/local/share/cartographer/cmake/CartographerTargets.cmake
-- Installing: ../../cartographer/usr/local/share/cartographer/cmake/CartographerTargets-release.cmake
-- Installing: ../../cartographer/usr/local/share/cartographer/cartographer-config.cmake
+ cd ../../..
+ echo 'Configuring and building thirdparty/Location ...'
Configuring and building thirdparty/Location ...
+ mkdir build
+ cd build
+ cmake .. -DCMAKE_BUILD_TYPE=Release
-- The C compiler identification is GNU 7.5.0
-- The CXX compiler identification is GNU 7.5.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
Build type: Release
Detected armv8 -D__ARM_NEON__ -DENABLE_NEON -Ofast -std=c++11 -Wno-unused-result
-- Performing Test COMPILER_SUPPORTS_CXX17
-- Performing Test COMPILER_SUPPORTS_CXX17 - Success
-- Performing Test COMPILER_SUPPORTS_CXX14
-- Performing Test COMPILER_SUPPORTS_CXX14 - Success
-- Performing Test COMPILER_SUPPORTS_CXX11
-- Performing Test COMPILER_SUPPORTS_CXX11 - Success
-- Performing Test COMPILER_SUPPORTS_CXX0X
-- Performing Test COMPILER_SUPPORTS_CXX0X - Success
-- Using flag -std=c++11.
-- COMMON_INCLUDE_DIR : /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMESS
-- Found Eigen3: /usr/include/eigen3 (Required is at least version "2.91.0") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Boost version: 1.65.1
-- Found the following Boost libraries:
--   thread
--   system
--   filesystem
--   chrono
--   date_time
--   atomic
-- Found installed version of Eigen: /usr/lib/cmake/eigen3
-- Found required Ceres dependency: Eigen version 3.3.4 in /usr/include/eigen3
-- Found required Ceres dependency: glog
-- Found installed version of gflags: /usr/lib/aarch64-linux-gnu/cmake/gflags
-- Detected gflags version: 2.2.1
-- Found required Ceres dependency: gflags
-- Found Ceres version: 1.13.0 installed in: /usr/local with components: [LAPACK, SuiteSparse, SparseLinearAlgebraLibrary, CXSparse, SchurSpecializations, OpenMP]
-- Found Lua: /usr/lib/aarch64-linux-gnu/liblua5.2.so;/usr/lib/aarch64-linux-gnu/libm.so (found version "5.2.4") 
-- Found Glog: /usr/include  
-- Failed to find gflags - Could not find gflags include directory, set GFLAGS_INCLUDE_DIR to directory containing gflags/gflags.h
-- Failed to find gflags - Could not find gflags library, set GFLAGS_LIBRARY to full path to libgflags.
-- Could NOT find Gflags (missing: GFLAGS_INCLUDE_DIRS GFLAGS_NAMESPACE) 
-- Found YAMLCPP: /usr/include  
-- Found YAMLCPP:
-- YAMLCPP_INCLUDE_DIRS=/usr/include
-- YAMLCPP_LIBRARIES   =/usr/lib/aarch64-linux-gnu/libyaml-cpp.so
-- /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/
CMake Warning at CMakeLists.txt:66 (message):
  OpenMP found.


-- Configuring done
-- Generating done
-- Build files have been written to: /root/workspace/workspace/rbn100-slam/rbn100_slam/build
+ make -j4
Scanning dependencies of target RBN100_SLAM
[  8%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/DataDealing.cc.o
[ 16%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/Parameter.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
[ 25%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/DataCorrect.cc.o
[ 33%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/SlamInterface.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
[ 41%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/SystemState.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
[ 50%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/convert_tool.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
[ 58%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/fusing_sensor.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
[ 66%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/judge_imu_still.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
[ 75%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/nodeOptions.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
[ 83%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/time_conversion.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
[ 91%] Building CXX object CMakeFiles/RBN100_SLAM.dir/src/trajectory_options.cc.o
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h: not a directory
cc1plus: warning: /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h: not a directory
[100%] Linking CXX shared library ../lib/libRBN100_SLAM.so
[100%] Built target RBN100_SLAM
+ cd ../
+ mkdir install
+ cd install
+ scp -r ../config .
+ mkdir include
+ scp -r ../lib .
+ mkdir Thirdparty
+ cd Thirdparty
+ scp -r ../../thirdparty/cartographer .
+ scp -r ../../thirdparty/DBoW2 .
+ rm -rf DBoW2/build
+ cd ../
+ mkdir scripts
+ cd scripts
+ cp ../../scripts/env.sh .
+ cd ../
+ cp ../CMakeLists.txt .
+ popd
~/workspace/workspace/rbn100-slam
+ check_status_code
+ test -f /root/workspace/workspace/rbn100-slam/result.log
+ [[ '' = false ]]
+ generate_message
+ cd /root/workspace/workspace/rbn100-slam/rbn100_slam
+ git log -1 --oneline --decorate=
+ echo ''
+ echo ====================================
+ [[ -f /root/workspace/workspace/rbn100-slam/_commit-msg.tmp ]]
+ cat /root/workspace/workspace/rbn100-slam/_commit-msg.tmp
+ echo ''
+ echo 'build_num:      http://192.168.50.26:8080/job/rbn100-slam/37/'
+ echo 'Push aarch64 platform files'
+ generate_commits
+ pushd /root/workspace/workspace/rbn100-slam/slam
~/workspace/workspace/rbn100-slam/slam ~/workspace/workspace/rbn100-slam
++ xargs -l ls
++ find /root/workspace/workspace/rbn100-slam/rbn100_slam -name install
+ install_dir_list='CMakeLists.txt
config
include
lib
scripts
Thirdparty'
+ [[ true = true ]]
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/CMakeLists.txt
rm 'arm64/CMakeLists.txt'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/config
rm 'arm64/config/Calibration.yaml'
rm 'arm64/config/Location.lua'
rm 'arm64/config/Run.yaml'
rm 'arm64/config/assets_writer_backpack_2d.lua'
rm 'arm64/config/assets_writer_backpack_2d_ci.lua'
rm 'arm64/config/assets_writer_backpack_3d.lua'
rm 'arm64/config/assets_writer_ros_map.lua'
rm 'arm64/config/backpack_2d.lua'
rm 'arm64/config/backpack_2d_localization.lua'
rm 'arm64/config/backpack_2d_localization_evaluation.lua'
rm 'arm64/config/backpack_2d_server.lua'
rm 'arm64/config/backpack_3d.lua'
rm 'arm64/config/backpack_3d_localization.lua'
rm 'arm64/config/calibration_evt3_new.yaml'
rm 'arm64/config/demo_2d.rviz'
rm 'arm64/config/demo_3d.rviz'
rm 'arm64/config/encoder_calibration.txt'
rm 'arm64/config/laser_calib.yaml'
rm 'arm64/config/map_builder.lua'
rm 'arm64/config/map_builder_server.lua'
rm 'arm64/config/new_add_data.txt'
rm 'arm64/config/pose_graph.lua'
rm 'arm64/config/pr2.lua'
rm 'arm64/config/revo_lds.lua'
rm 'arm64/config/taurob_tracker.lua'
rm 'arm64/config/trajectory_builder.lua'
rm 'arm64/config/trajectory_builder_2d.lua'
rm 'arm64/config/trajectory_builder_3d.lua'
rm 'arm64/config/transform.lua'
rm 'arm64/config/visualize_pbstream.lua'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/include
fatal: Ë∑ØÂæÑËßÑÊ†º 'arm64/include' Êú™ÂåπÈÖç‰ªª‰ΩïÊñá‰ª∂
+ true
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/lib
rm 'arm64/lib/libRBN100_SLAM.so'
rm 'arm64/lib/libRBN100_SLAM.so.0'
rm 'arm64/lib/libRBN100_SLAM.so.1.0.0'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/scripts
rm 'arm64/scripts/env.sh'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/Thirdparty
rm 'arm64/Thirdparty/DBoW2/CMakeLists.txt'
rm 'arm64/Thirdparty/DBoW2/DBoW2/BowVector.cpp'
rm 'arm64/Thirdparty/DBoW2/DBoW2/BowVector.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/DBoW2.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/FBrief.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/FClass.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/FORB.cpp'
rm 'arm64/Thirdparty/DBoW2/DBoW2/FORB.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp'
rm 'arm64/Thirdparty/DBoW2/DBoW2/FeatureVector.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/QueryResults.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp'
rm 'arm64/Thirdparty/DBoW2/DBoW2/ScoringObject.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/TemplatedDatabase.h'
rm 'arm64/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h'
rm 'arm64/Thirdparty/DBoW2/DUtils/Random.cpp'
rm 'arm64/Thirdparty/DBoW2/DUtils/Random.h'
rm 'arm64/Thirdparty/DBoW2/DUtils/Timestamp.cpp'
rm 'arm64/Thirdparty/DBoW2/DUtils/Timestamp.h'
rm 'arm64/Thirdparty/DBoW2/DUtils/config.h'
rm 'arm64/Thirdparty/DBoW2/LICENSE.txt'
rm 'arm64/Thirdparty/DBoW2/README.txt'
rm 'arm64/Thirdparty/DBoW2/lib/libDBoW2.so'
rm 'arm64/Thirdparty/cartographer/usr/local/bin/cartographer_autogenerate_ground_truth'
rm 'arm64/Thirdparty/cartographer/usr/local/bin/cartographer_compute_relations_metrics'
rm 'arm64/Thirdparty/cartographer/usr/local/bin/cartographer_migrate_serialization_format'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/cmake/functions.cmake'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/cmake/modules/FindGMock.cmake'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/cmake/modules/FindLuaGoogle.cmake'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/cmake/modules/FindSphinx.cmake'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/config/map_builder.lua'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/config/map_builder_server.lua'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/config/pose_graph.lua'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/config/trajectory_builder.lua'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/config/trajectory_builder_2d.lua'
rm 'arm64/Thirdparty/cartographer/usr/local/cartographer/config/trajectory_builder_3d.lua'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/DataChecking.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/blocking_queue.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/ceres_solver_options.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/configuration_file_resolver.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/fixed_ratio_sampler.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/histogram.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/lockless_queue.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/lua.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary_test_helpers.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/make_unique.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/math.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/mutex.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/optional.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/port.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/proto/ceres_solver_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/rate_timer.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/setting.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/task.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/thread_pool.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/common/time.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/ground_truth/proto/relations.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/ground_truth/relations_text_file.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/color.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/coloring_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/counting_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/draw_trajectories.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/fake_file_writer.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/file_writer.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/fixed_ratio_sampling_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/frame_id_filtering_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/hybrid_grid_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/image.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/intensity_to_color_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/min_max_range_filtering_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/null_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/outlier_removing_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/pcd_writing_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/ply_writing_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/points_batch.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/points_processor_pipeline_builder.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/probability_grid_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_deserializer.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_interface.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/serialization_format_migration.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/submap_painter.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/xray_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/io/xyz_writing_points_processor.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/grid_2d.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/map_limits.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/submap_2d.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/xy_index.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/hybrid_grid.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/range_data_inserter_3d.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/submap_3d.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/Ramp.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/detect_floors.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/grid_interface.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/id.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_kalman.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_tracker.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/local_slam_result_data.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder_interface.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_extrapolator.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_interface.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_trimmer.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/probability_values.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/cell_limits.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/map_limits.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/submaps_options_2d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/hybrid_grid.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/submaps_options_3d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/connected_components.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/internal/legacy_serialized_data.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/map_builder_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/motion_filter_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/ramp.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/range_data_inserter_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/serialization.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap_visualization.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_builder_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_node_data.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/range_data_inserter_interface.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/submaps.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_builder_interface.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_node.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/metrics/counter.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/metrics/family_factory.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/metrics/gauge.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/metrics/histogram.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/metrics/register.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/collator_interface.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/compressed_point_cloud.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/data.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/fixed_frame_pose_data.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/imu_data.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/landmark_data.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/map_by_time.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/odometry_data.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/point_cloud.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/sensor.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/range_data.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/sensor/timed_point_cloud_data.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/transform/proto/transform.pb.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform_test_helpers.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/transform/timestamped_transform.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/transform/transform.h'
rm 'arm64/Thirdparty/cartographer/usr/local/include/cartographer/transform/transform_interpolation_buffer.h'
rm 'arm64/Thirdparty/cartographer/usr/local/lib/libcartographer.so'
rm 'arm64/Thirdparty/cartographer/usr/local/lib/libcartographer.so.0'
rm 'arm64/Thirdparty/cartographer/usr/local/lib/libcartographer.so.1.0.0'
rm 'arm64/Thirdparty/cartographer/usr/local/share/cartographer/cartographer-config.cmake'
rm 'arm64/Thirdparty/cartographer/usr/local/share/cartographer/cmake/CartographerTargets-release.cmake'
rm 'arm64/Thirdparty/cartographer/usr/local/share/cartographer/cmake/CartographerTargets.cmake'
rm 'arm64/Thirdparty/cartographer/usr/local/share/cartographer/package.xml'
+ [[ true = \m\a\r\k\-\c\h\e\c\k\-\t\o\o\l\s ]]
+ '[' -z arm64 ']'
+ mkdir -p arm64
+ cp -ar /root/workspace/workspace/rbn100-slam/rbn100_slam/install/CMakeLists.txt /root/workspace/workspace/rbn100-slam/rbn100_slam/install/config /root/workspace/workspace/rbn100-slam/rbn100_slam/install/include /root/workspace/workspace/rbn100-slam/rbn100_slam/install/lib /root/workspace/workspace/rbn100-slam/rbn100_slam/install/scripts /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty arm64/
+ git add --all .
++ git status -s
+ add_file_list='M  arm64/config/Run.yaml
M  arm64/lib/libRBN100_SLAM.so.1.0.0'
+ '[' -z 'M  arm64/config/Run.yaml
M  arm64/lib/libRBN100_SLAM.so.1.0.0' ']'
+ git commit -s -F /root/workspace/workspace/rbn100-slam/_commit-msg
[master a670123] 3965012 slam add i18R dataset read test 01
 2 files changed, 1 insertion(+)
 rewrite arm64/lib/libRBN100_SLAM.so.1.0.0 (65%)
++ git config --local --get branch.master.remote
+ local remote=origin
++ git config --local --get branch.master.merge
+ local branch=refs/heads/master
+ git push --no-verify origin HEAD:refs/heads/master
To ssh://192.168.50.191:222/rbn/rbn100/integration/solutions/solution001/slam
   e7a89b3..a670123  HEAD -> master
+ [[ -z 3965012 ]]
+ cmdb_mysql 'update prebuild set status='\''0'\'' where build_url='\''http://192.168.50.26:8080/job/rbn100-slam/37/'\'';'
+ set +x
+ [[ '' = true ]]
+ [[ '' = c405 ]]
+ [[ '' = c3566 ]]
+ check_code_style
+ pushd /root/system/cppreview
~/system/cppreview ~/workspace/workspace/rbn100-slam/slam ~/workspace/workspace/rbn100-slam
+ git checkout ./
+ git clean -xdf ./
Ê≠£Âà†Èô§ __pycache__/
Ê≠£Âà†Èô§ utils/__pycache__/
+ git pull
Â∑≤ÁªèÊòØÊúÄÊñ∞ÁöÑ„ÄÇ
+ echo 'check code style start'
check code style start
+ echo

+ test -f get_variable.py
+ sed -r 's/\\033\[[0-9]+m//g' -i get_variable.py
+ tee rbn100_slam_aarch64_codesytle_check.log
+ timeout 5m python3 review.py --input /root/workspace/workspace/rbn100-slam/rbn100_slam

Function name:-------------------------------------------------------------------------------------
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h  ( 44 )
[49] void fusingInit (const cartographer::common::Time imu_time);
[50] void fusingReset ();
[51] void kalmanInit ();
[53] void initOdm (const cartographer::transform::Rigid3d T);
[55] void imuUpdate (const Eigen::Vector3d imu_gyr_ , const Eigen::Vector3d imu_acc_ ,const cartographer::common::Time imu_time);
[57] void odmImuIntergration ();
[58] void computeAngleAll (Eigen::Quaterniond qua_odm,float oula_angle[3],int type_sense);
[59] void computeOdmParam (const cartographer::sensor::OdometryData odometry_data);
[60] void comuputeNowSensors (const cartographer::sensor::OdometryData odometry_data);
[62] void kalmanResetPose (const cartographer::transform::Rigid3d input_slam_pose);
[63] void kfCovUpdata (double dtime);
[65] void kfCarvelObservation (Eigen::Vector3d observation_car_vel);
[66] void sifFusePosKf (Eigen::Vector3d observation_pos);
[68] void sifFuseQuatKf (Eigen::Quaterniond observation_qua);
[70] void sifReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
[72] void estimatePose (const cartographer::common::Time time1,const cartographer::common::Time time2);
[75] void imuStillJudge (const Eigen::Vector3d imu_gyr_,const Eigen::Vector3d imu_acc_);
[76] void sifReviseNavKf (int fuse_type);
[78] void accInitAttitude ();
[79] void getSensorsParameter ();
[80] void reset_estimate_kk (int estimate_stop);
[82] void judge_stable_kk ();
[86] void threadFuse ();
[91] void initThreadFuse ();
[94] void addImuForFuse (const cartographer::sensor::ImuData imu_data);
[95] void addOdometryForFuse (const cartographer::sensor::OdometryData odometry_data);
[97] void addSlamPose (const cartographer::common::Time slam_tm, const cartographer::transform::Rigid3d cur_slam_pose);
[100] void setStopRevCartoResult ();
[104] void setCallback (OnFuseSlamResult cb);
[107] bool getImuSize ();
[108] bool getOdmSize ();
[111] bool getOutPut (cartographer::common::Setting::OutPut_data data);
[112] int getOutPutSize ();
[115] Eigen::Quaterniond setQua (double qw,double qx ,double qy ,double qz);
[116] Eigen::Vector3d setVec (double x ,double y ,double z);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h  ( 12 )
[19] void put (const T t);
[20] T take ();
[21] T front ();
[23] bool empty () const;
[28] bool full () const;
[35] size _type size();
[40] void clear ();
[46] bool offer (const T t);
[47] bool poll (T t);
[144] void produce (BlockQueue<int> q);
[152] void consume (BlockQueue<int> q);
[160] void testBlockQueue ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h  ( 32 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h  ( 6 )
[47] void addImu (Eigen::Vector3d data_acc,Eigen::Vector3d data_gyr);
[49] void dealImu (Imu_data imu_data_input);
[51] void computeVar ();
[53] void jugeStillCov (Imu_data imu_data_cov);
[54] void jugeStillAll (Imu_data imu_data_still);
[55] void setparameter ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h  ( 2 )
[9] Eigen::Quaterniond setQua (double qw,double qx ,double qy ,double qz);
[10] Eigen::Vector3d setVec (double vecx,double vecy ,double vecz );
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h  ( 11 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h  ( 29 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/Parameter.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/trajectory_options.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/fusing_sensor.cc  ( 11 )
[23] void fusing_sensor::fusingReset ();
[140] void fusing_sensor::fusingInit (const cartographer::common::Time imu_time);
[168] void fusing_sensor::kalmanInit ();
[267] Eigen::Quaterniond fusing_sensor::setQua (double qw,double qx ,double qy ,double qz);
[273] Eigen::Vector3d fusing_sensor::setVec (double x ,double y ,double z);
[279] void fusing_sensor::initOdm (const cartographer::transform::Rigid3d T);
[293] void fusing_sensor::initThreadFuse ();
[300] void fusing_sensor::setCallback (OnFuseSlamResult cb);
[304] void fusing_sensor::imuUpdate (const Eigen::Vector3d imu_gyr_ , const Eigen::Vector3d imu_acc_ ,const cartographer::common::Time imu_time);
[373] void fusing_sensor::odmImuIntergration ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/DataDealing.cc  ( 19 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/DataCorrect.cc  ( 12 )
[4] bool comp (const CorrectSentiMap a, const CorrectSentiMap b);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/time_conversion.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/nodeOptions.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/SlamInterface.cc  ( 33 )
[883] void onLoaded () override;
[888] void onUnloaded () override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/SystemState.cc  ( 32 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/convert_tool.cc  ( 2 )
[7] Eigen::Quaterniond setQua (double qw,double qx ,double qy ,double qz);
[13] Eigen::Vector3d setVec (double vecx,double vecy ,double vecz);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/judge_imu_still.cc  ( 6 )
[54] void judge_imu_still::setparameter ();
[65] void judge_imu_still::addImu (Eigen::Vector3d data_acc, Eigen::Vector3d data_gyr);
[95] void judge_imu_still::dealImu (Imu_data imu_data_deal);
[112] void judge_imu_still::computeVar ();
[162] void judge_imu_still::jugeStillCov (Imu_data imu_data_still);
[213] void judge_imu_still::jugeStillAll (Imu_data imu_data_still);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/local_slam_result_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/probability_values.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_kalman.h  ( 30 )
[56] void kalmanInit ();
[57] void newkalmaninit ();
[70] void sifFusePosKf (Eigen::Vector3d observation_pos);
[71] void sifFuseQuatKf (Eigen::Quaterniond observation_qua);
[72] void newFusePosKf (Eigen::Vector3d observation_pos,Eigen::Quaterniond observation_qua);
[73] void newFuseQuatKf (Eigen::Quaterniond observation_qua);
[74] void estimatePose (double dt_slam_odm, double dt_odm);
[75] void reset_q_parameter ();
[77] void kfCovUpdata (double dtime);
[78] void newkfCovUpdata (double dtime);
[79] void sifReviseNavKf (int fuse_type);
[80] void newReviseNavKf (int fuse_type);
[81] void sifReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
[82] void newReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
[84] void stateMove (Eigen::Vector3d observation_car_vel);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/detect_floors.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_node.h  ( 3 )
[70] common::Time time () const return constant_data->time };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/id.h  ( 23 )
[117] IteratorType begin () const return begin_ };
[118] IteratorType end () const return end_ };
[171] IdDataReference operator () const;
[189] ConstIterator operator-- ();
[276] ConstIterator find (const IdType id) const;
[312] Dat aType at(const IdType id) const;
[336] size _t size() const;
[345] Range<ConstIterator> trajectory (const int trajectory_id) const;
[351] Range<ConstTrajectoryIterator> trajectory_ids () const;
[362] bool empty () const return begin() == end() };
[369] ConstIterator lower_bound (const int trajectory_id, const common::Time time) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/submaps.h  ( 9 )
[78] transform::Rigid3d local_pose () const return local_pose_ };
[81] int num_range_data () const return num_range_data_ };
[82] void set_num_range_data (const int num_range_data);
[87] bool finished () const return finished_ };
[88] void set_finished (bool finished) finished_ = finished };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph.h  ( 22 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/grid_interface.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_tracker.h  ( 5 )
[49] common::Time time () const return time_ };
[53] Eigen::Quaterniond orientation () const return orientation_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder_interface.h  ( 12 )
[93] int num_trajectory_builders () const = 0;
[95] mapping::PoseGraphInterface pose_graph () = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_interface.h  ( 10 )
[151] std::vector<Constraint> constraints () const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/range_data_inserter_interface.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_builder_interface.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/Ramp.h  ( 11 )
[43] transform::Rigid2d local_pose1 () const return local_pose1_ };
[44] transform::Rigid2d local_pose2 () const return local_pose2_ };
[45] transform::Rigid2d local_pose3 () const return local_pose3_ };
[46] transform::Rigid2d local_pose4 () const return local_pose4_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_extrapolator.h  ( 27 )
[93] transform::Rigid3d ExtrapolatePose_frame_vel (common::Time time);
[96] bool judge_time_frame_vel (common::Time time);
[97] bool judge_time_imu (common::Time time);
[141] Eigen::Vector3d ExtrapolateTranslation_frame_vel (common::Time time);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder.h  ( 13 )
[87] mapping::PoseGraphInterface pose_graph () override;
[91] int num_trajectory_builders () const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_trimmer.h  ( 6 )
[32] int num_submaps (int trajectory_id) const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/hybrid_grid.h  ( 23 )
[84] int grid_size () return 1 << kBits };
[88] ValueType value (const Eigen::Array3i index) const;
[93] ValueType mutable_value (const Eigen::Array3i index);
[423] float resolution () const return resolution_ };
[449] Iterator begin () const return Iterator(this) };
[451] Iterator end () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/submap_3d.h  ( 12 )
[61] HybridGrid high_resolution_hybrid_grid () const;
[64] HybridGrid low_resolution_hybrid_grid () const;
[98] int matching_index () const;
[106] std::vector<std::shared_ptr<Submap3D>> submaps () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/range_data_inserter_3d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/grid_2d.h  ( 20 )
[42] MapLimits limits () const return limits_ };
[79] std::vector<uint16> correspondence_cost_cells () const;
[80] std::vector<int> update_indices () const return update_indices_ };
[81] Eigen::AlignedBox2i known_cells_box () const;
[85] std::vector<uint16> mutable_correspondence_cost_cells ();
[86] std::vector<int> mutable_update_indices () return update_indices_ };
[87] Eigen::AlignedBox2i mutable_known_cells_box () return known_cells_box_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/submap_2d.h  ( 21 )
[56] Grid2D grid () const return grid_.get() };
[66] void setFlag ();
[117] int matching_index () const;
[123] std::vector<std::shared_ptr<Submap2D>> submaps () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/xy_index.h  ( 3 )
[85] Eigen::Array2i operator () return xy_index_ };
[95] XYIndexRangeIterator begin ();
[99] XYIndexRangeIterator end ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/map_limits.h  ( 5 )
[57] double resolution () const return resolution_ };
[61] Eigen::Vector2d max () const return max_ };
[64] CellLimits cell_limits () const return cell_limits_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/ramp.pb.h  ( 48 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] Ramp default_instance ();
[147] bool has_pose1 () const;
[148] void clear_pose1 ();
[150] ::cartographer::transform::proto::Rigid2d pose1 () const;
[151] ::cartographer::transform::proto::Rigid2d mutable_pose1 ();
[152] ::cartographer::transform::proto::Rigid2d release_pose1 ();
[153] void set_allocated_pose1 (::cartographer::transform::proto::Rigid2d pose1);
[156] bool has_pose2 () const;
[157] void clear_pose2 ();
[159] ::cartographer::transform::proto::Rigid2d pose2 () const;
[160] ::cartographer::transform::proto::Rigid2d mutable_pose2 ();
[161] ::cartographer::transform::proto::Rigid2d release_pose2 ();
[162] void set_allocated_pose2 (::cartographer::transform::proto::Rigid2d pose2);
[165] bool has_pose3 () const;
[166] void clear_pose3 ();
[168] ::cartographer::transform::proto::Rigid2d pose3 () const;
[169] ::cartographer::transform::proto::Rigid2d mutable_pose3 ();
[170] ::cartographer::transform::proto::Rigid2d release_pose3 ();
[171] void set_allocated_pose3 (::cartographer::transform::proto::Rigid2d pose3);
[174] bool has_pose4 () const;
[175] void clear_pose4 ();
[177] ::cartographer::transform::proto::Rigid2d pose4 () const;
[178] ::cartographer::transform::proto::Rigid2d mutable_pose4 ();
[179] ::cartographer::transform::proto::Rigid2d release_pose4 ();
[180] void set_allocated_pose4 (::cartographer::transform::proto::Rigid2d pose4);
[183] void clear_trajectory_id ();
[185] ::google::protobuf::int32 trajectory_id () const;
[186] void set_trajectory_id (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph.pb.h  ( 86 )
[83] bool PoseGraph_Constraint_Tag_IsValid (int value);
[88] ::google::protobuf::EnumDescriptor PoseGraph_Constraint_Tag_descriptor ();
[126] ::google::protobuf::Descriptor descriptor ();
[127] SubmapId default_instance ();
[182] void clear_trajectory_id ();
[184] ::google::protobuf::int32 trajectory_id () const;
[185] void set_trajectory_id (::google::protobuf::int32 value);
[188] void clear_submap_index ();
[190] ::google::protobuf::int32 submap_index () const;
[191] void set_submap_index (::google::protobuf::int32 value);
[292] void clear_node_index ();
[294] ::google::protobuf::int32 node_index () const;
[295] void set_node_index (::google::protobuf::int32 value);
[416] bool has_submap_id () const;
[417] void clear_submap_id ();
[419] ::cartographer::mapping::proto::SubmapId submap_id () const;
[420] ::cartographer::mapping::proto::SubmapId mutable_submap_id ();
[421] ::cartographer::mapping::proto::SubmapId release_submap_id ();
[422] void set_allocated_submap_id (::cartographer::mapping::proto::SubmapId submap_id);
[425] bool has_node_id () const;
[426] void clear_node_id ();
[428] ::cartographer::mapping::proto::NodeId node_id () const;
[429] ::cartographer::mapping::proto::NodeId mutable_node_id ();
[430] ::cartographer::mapping::proto::NodeId release_node_id ();
[431] void set_allocated_node_id (::cartographer::mapping::proto::NodeId node_id);
[434] bool has_relative_pose () const;
[435] void clear_relative_pose ();
[437] ::cartographer::transform::proto::Rigid3d relative_pose () const;
[438] ::cartographer::transform::proto::Rigid3d mutable_relative_pose ();
[439] ::cartographer::transform::proto::Rigid3d release_relative_pose ();
[440] void set_allocated_relative_pose (::cartographer::transform::proto::Rigid3d relative_pose);
[443] void clear_translation_weight ();
[445] double translation_weight () const;
[446] void set_translation_weight (double value);
[449] void clear_rotation_weight ();
[451] double rotation_weight () const;
[452] void set_rotation_weight (double value);
[455] void clear_tag ();
[457] ::cartographer::mapping::proto::PoseGraph_Constraint_Tag tag () const;
[458] void set_tag (::cartographer::mapping::proto::PoseGraph_Constraint_Tag value);
[557] void clear_landmark_id ();
[559] ::std::string landmark_id () const;
[560] void set_landmark_id (const ::std::string value);
[566] ::std::string mutable_landmark_id ();
[567] ::std::string release_landmark_id ();
[568] void set_allocated_landmark_id (::std::string landmark_id);
[571] bool has_global_pose () const;
[572] void clear_global_pose ();
[574] ::cartographer::transform::proto::Rigid3d global_pose () const;
[575] ::cartographer::transform::proto::Rigid3d mutable_global_pose ();
[576] ::cartographer::transform::proto::Rigid3d release_global_pose ();
[577] void set_allocated_global_pose (::cartographer::transform::proto::Rigid3d global_pose);
[675] int constraint_size () const;
[676] void clear_constraint ();
[678] ::cartographer::mapping::proto::PoseGraph_Constraint constraint (int index) const;
[679] ::cartographer::mapping::proto::PoseGraph_Constraint mutable_constraint (int index);
[680] ::cartographer::mapping::proto::PoseGraph_Constraint add_constraint ();
[687] int trajectory_size () const;
[688] void clear_trajectory ();
[690] ::cartographer::mapping::proto::Trajectory trajectory (int index) const;
[691] ::cartographer::mapping::proto::Trajectory mutable_trajectory (int index);
[692] ::cartographer::mapping::proto::Trajectory add_trajectory ();
[699] int landmark_poses_size () const;
[700] void clear_landmark_poses ();
[702] ::cartographer::mapping::proto::PoseGraph_LandmarkPose landmark_poses (int index) const;
[703] ::cartographer::mapping::proto::PoseGraph_LandmarkPose mutable_landmark_poses (int index);
[704] ::cartographer::mapping::proto::PoseGraph_LandmarkPose add_landmark_poses ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_node_data.pb.h  ( 65 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] TrajectoryNodeData default_instance ();
[148] int rotational_scan_matcher_histogram_size () const;
[149] void clear_rotational_scan_matcher_histogram ();
[151] float rotational_scan_matcher_histogram (int index) const;
[152] void set_rotational_scan_matcher_histogram (int index, float value);
[153] void add_rotational_scan_matcher_histogram (float value);
[160] bool has_gravity_alignment () const;
[161] void clear_gravity_alignment ();
[163] ::cartographer::transform::proto::Quaterniond gravity_alignment () const;
[164] ::cartographer::transform::proto::Quaterniond mutable_gravity_alignment ();
[165] ::cartographer::transform::proto::Quaterniond release_gravity_alignment ();
[166] void set_allocated_gravity_alignment (::cartographer::transform::proto::Quaterniond gravity_alignment);
[169] bool has_filtered_gravity_aligned_point_cloud () const;
[170] void clear_filtered_gravity_aligned_point_cloud ();
[172] ::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud () const;
[173] ::cartographer::sensor::proto::CompressedPointCloud mutable_filtered_gravity_aligned_point_cloud ();
[174] ::cartographer::sensor::proto::CompressedPointCloud release_filtered_gravity_aligned_point_cloud ();
[175] void set_allocated_filtered_gravity_aligned_point_cloud (::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud);
[178] bool has_high_resolution_point_cloud () const;
[179] void clear_high_resolution_point_cloud ();
[181] ::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud () const;
[182] ::cartographer::sensor::proto::CompressedPointCloud mutable_high_resolution_point_cloud ();
[183] ::cartographer::sensor::proto::CompressedPointCloud release_high_resolution_point_cloud ();
[184] void set_allocated_high_resolution_point_cloud (::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud);
[187] bool has_low_resolution_point_cloud () const;
[188] void clear_low_resolution_point_cloud ();
[190] ::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud () const;
[191] ::cartographer::sensor::proto::CompressedPointCloud mutable_low_resolution_point_cloud ();
[192] ::cartographer::sensor::proto::CompressedPointCloud release_low_resolution_point_cloud ();
[193] void set_allocated_low_resolution_point_cloud (::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud);
[196] bool has_local_pose () const;
[197] void clear_local_pose ();
[199] ::cartographer::transform::proto::Rigid3d local_pose () const;
[200] ::cartographer::transform::proto::Rigid3d mutable_local_pose ();
[201] ::cartographer::transform::proto::Rigid3d release_local_pose ();
[202] void set_allocated_local_pose (::cartographer::transform::proto::Rigid3d local_pose);
[205] bool has_obstacles () const;
[206] void clear_obstacles ();
[208] ::cartographer::sensor::proto::CompressedPointCloud obstacles () const;
[209] ::cartographer::sensor::proto::CompressedPointCloud mutable_obstacles ();
[210] ::cartographer::sensor::proto::CompressedPointCloud release_obstacles ();
[211] void set_allocated_obstacles (::cartographer::sensor::proto::CompressedPointCloud obstacles);
[214] void clear_timestamp ();
[216] ::google::protobuf::int64 timestamp () const;
[217] void set_timestamp (::google::protobuf::int64 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_builder_options.pb.h  ( 99 )
[91] bool SensorId_SensorType_IsValid (int value);
[96] ::google::protobuf::EnumDescriptor SensorId_SensorType_descriptor ();
[134] ::google::protobuf::Descriptor descriptor ();
[135] InitialTrajectoryPose default_instance ();
[190] bool has_relative_pose () const;
[191] void clear_relative_pose ();
[193] ::cartographer::transform::proto::Rigid3d relative_pose () const;
[194] ::cartographer::transform::proto::Rigid3d mutable_relative_pose ();
[195] ::cartographer::transform::proto::Rigid3d release_relative_pose ();
[196] void set_allocated_relative_pose (::cartographer::transform::proto::Rigid3d relative_pose);
[199] void clear_timestamp ();
[201] ::google::protobuf::int64 timestamp () const;
[202] void set_timestamp (::google::protobuf::int64 value);
[205] void clear_to_trajectory_id ();
[207] ::google::protobuf::int32 to_trajectory_id () const;
[208] void set_to_trajectory_id (::google::protobuf::int32 value);
[304] void clear_min_covered_area ();
[306] double min_covered_area () const;
[307] void set_min_covered_area (double value);
[310] void clear_fresh_submaps_count ();
[312] ::google::protobuf::int32 fresh_submaps_count () const;
[313] void set_fresh_submaps_count (::google::protobuf::int32 value);
[316] void clear_min_added_submaps_count ();
[318] ::google::protobuf::int32 min_added_submaps_count () const;
[319] void set_min_added_submaps_count (::google::protobuf::int32 value);
[417] bool has_trajectory_builder_2d_options () const;
[418] void clear_trajectory_builder_2d_options ();
[420] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options () const;
[421] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D mutable_trajectory_builder_2d_options ();
[422] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D release_trajectory_builder_2d_options ();
[423] void set_allocated_trajectory_builder_2d_options (::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options);
[426] bool has_trajectory_builder_3d_options () const;
[427] void clear_trajectory_builder_3d_options ();
[429] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options () const;
[430] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D mutable_trajectory_builder_3d_options ();
[431] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D release_trajectory_builder_3d_options ();
[432] void set_allocated_trajectory_builder_3d_options (::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options);
[435] bool has_initial_trajectory_pose () const;
[436] void clear_initial_trajectory_pose ();
[438] ::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose () const;
[439] ::cartographer::mapping::proto::InitialTrajectoryPose mutable_initial_trajectory_pose ();
[440] ::cartographer::mapping::proto::InitialTrajectoryPose release_initial_trajectory_pose ();
[441] void set_allocated_initial_trajectory_pose (::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose);
[444] bool has_overlapping_submaps_trimmer_2d () const;
[445] void clear_overlapping_submaps_trimmer_2d ();
[447] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d () const;
[448] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D mutable_overlapping_submaps_trimmer_2d ();
[449] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D release_overlapping_submaps_trimmer_2d ();
[450] void set_allocated_overlapping_submaps_trimmer_2d (::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d);
[453] void clear_pure_localization ();
[455] bool pure_localization () const;
[456] void set_pure_localization (bool value);
[459] void clear_border_flag ();
[461] bool border_flag () const;
[462] void set_border_flag (bool value);
[595] void clear_id ();
[597] ::std::string id () const;
[598] void set_id (const ::std::string value);
[604] ::std::string mutable_id ();
[605] ::std::string release_id ();
[606] void set_allocated_id (::std::string id);
[609] void clear_type ();
[611] ::cartographer::mapping::proto::SensorId_SensorType type () const;
[612] void set_type (::cartographer::mapping::proto::SensorId_SensorType value);
[707] int sensor_id_size () const;
[708] void clear_sensor_id ();
[710] ::cartographer::mapping::proto::SensorId sensor_id (int index) const;
[711] ::cartographer::mapping::proto::SensorId mutable_sensor_id (int index);
[712] ::cartographer::mapping::proto::SensorId add_sensor_id ();
[719] bool has_trajectory_builder_options () const;
[720] void clear_trajectory_builder_options ();
[722] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options () const;
[723] ::cartographer::mapping::proto::TrajectoryBuilderOptions mutable_trajectory_builder_options ();
[724] ::cartographer::mapping::proto::TrajectoryBuilderOptions release_trajectory_builder_options ();
[725] void set_allocated_trajectory_builder_options (::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options);
[820] int options_with_sensor_ids_size () const;
[821] void clear_options_with_sensor_ids ();
[823] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids (int index) const;
[824] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds mutable_options_with_sensor_ids (int index);
[825] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds add_options_with_sensor_ids ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap.pb.h  ( 51 )
[96] ::google::protobuf::Descriptor descriptor ();
[97] Submap2D default_instance ();
[152] bool has_local_pose () const;
[153] void clear_local_pose ();
[155] ::cartographer::transform::proto::Rigid3d local_pose () const;
[156] ::cartographer::transform::proto::Rigid3d mutable_local_pose ();
[157] ::cartographer::transform::proto::Rigid3d release_local_pose ();
[158] void set_allocated_local_pose (::cartographer::transform::proto::Rigid3d local_pose);
[161] bool has_grid () const;
[162] void clear_grid ();
[164] ::cartographer::mapping::proto::Grid2D grid () const;
[165] ::cartographer::mapping::proto::Grid2D mutable_grid ();
[166] ::cartographer::mapping::proto::Grid2D release_grid ();
[167] void set_allocated_grid (::cartographer::mapping::proto::Grid2D grid);
[170] void clear_num_range_data ();
[172] ::google::protobuf::int32 num_range_data () const;
[173] void set_num_range_data (::google::protobuf::int32 value);
[176] void clear_finished ();
[178] bool finished () const;
[179] void set_finished (bool value);
[285] bool has_high_resolution_hybrid_grid () const;
[286] void clear_high_resolution_hybrid_grid ();
[288] ::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid () const;
[289] ::cartographer::mapping::proto::HybridGrid mutable_high_resolution_hybrid_grid ();
[290] ::cartographer::mapping::proto::HybridGrid release_high_resolution_hybrid_grid ();
[291] void set_allocated_high_resolution_hybrid_grid (::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid);
[294] bool has_low_resolution_hybrid_grid () const;
[295] void clear_low_resolution_hybrid_grid ();
[297] ::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid () const;
[298] ::cartographer::mapping::proto::HybridGrid mutable_low_resolution_hybrid_grid ();
[299] ::cartographer::mapping::proto::HybridGrid release_low_resolution_hybrid_grid ();
[300] void set_allocated_low_resolution_hybrid_grid (::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/serialization.pb.h  ( 152 )
[124] ::google::protobuf::Descriptor descriptor ();
[125] Submap default_instance ();
[180] bool has_submap_id () const;
[181] void clear_submap_id ();
[183] ::cartographer::mapping::proto::SubmapId submap_id () const;
[184] ::cartographer::mapping::proto::SubmapId mutable_submap_id ();
[185] ::cartographer::mapping::proto::SubmapId release_submap_id ();
[186] void set_allocated_submap_id (::cartographer::mapping::proto::SubmapId submap_id);
[189] bool has_submap_2d () const;
[190] void clear_submap_2d ();
[192] ::cartographer::mapping::proto::Submap2D submap_2d () const;
[193] ::cartographer::mapping::proto::Submap2D mutable_submap_2d ();
[194] ::cartographer::mapping::proto::Submap2D release_submap_2d ();
[195] void set_allocated_submap_2d (::cartographer::mapping::proto::Submap2D submap_2d);
[198] bool has_submap_3d () const;
[199] void clear_submap_3d ();
[201] ::cartographer::mapping::proto::Submap3D submap_3d () const;
[202] ::cartographer::mapping::proto::Submap3D mutable_submap_3d ();
[203] ::cartographer::mapping::proto::Submap3D release_submap_3d ();
[204] void set_allocated_submap_3d (::cartographer::mapping::proto::Submap3D submap_3d);
[300] bool has_node_id () const;
[301] void clear_node_id ();
[303] ::cartographer::mapping::proto::NodeId node_id () const;
[304] ::cartographer::mapping::proto::NodeId mutable_node_id ();
[305] ::cartographer::mapping::proto::NodeId release_node_id ();
[306] void set_allocated_node_id (::cartographer::mapping::proto::NodeId node_id);
[309] bool has_node_data () const;
[310] void clear_node_data ();
[312] ::cartographer::mapping::proto::TrajectoryNodeData node_data () const;
[313] ::cartographer::mapping::proto::TrajectoryNodeData mutable_node_data ();
[314] ::cartographer::mapping::proto::TrajectoryNodeData release_node_data ();
[315] void set_allocated_node_data (::cartographer::mapping::proto::TrajectoryNodeData node_data);
[410] bool has_imu_data () const;
[411] void clear_imu_data ();
[413] ::cartographer::sensor::proto::ImuData imu_data () const;
[414] ::cartographer::sensor::proto::ImuData mutable_imu_data ();
[415] ::cartographer::sensor::proto::ImuData release_imu_data ();
[416] void set_allocated_imu_data (::cartographer::sensor::proto::ImuData imu_data);
[419] void clear_trajectory_id ();
[421] ::google::protobuf::int32 trajectory_id () const;
[422] void set_trajectory_id (::google::protobuf::int32 value);
[517] bool has_odometry_data () const;
[518] void clear_odometry_data ();
[520] ::cartographer::sensor::proto::OdometryData odometry_data () const;
[521] ::cartographer::sensor::proto::OdometryData mutable_odometry_data ();
[522] ::cartographer::sensor::proto::OdometryData release_odometry_data ();
[523] void set_allocated_odometry_data (::cartographer::sensor::proto::OdometryData odometry_data);
[624] bool has_fixed_frame_pose_data () const;
[625] void clear_fixed_frame_pose_data ();
[627] ::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data () const;
[628] ::cartographer::sensor::proto::FixedFramePoseData mutable_fixed_frame_pose_data ();
[629] ::cartographer::sensor::proto::FixedFramePoseData release_fixed_frame_pose_data ();
[630] void set_allocated_fixed_frame_pose_data (::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data);
[731] bool has_landmark_data () const;
[732] void clear_landmark_data ();
[734] ::cartographer::sensor::proto::LandmarkData landmark_data () const;
[735] ::cartographer::sensor::proto::LandmarkData mutable_landmark_data ();
[736] ::cartographer::sensor::proto::LandmarkData release_landmark_data ();
[737] void set_allocated_landmark_data (::cartographer::sensor::proto::LandmarkData landmark_data);
[838] bool has_imu_calibration () const;
[839] void clear_imu_calibration ();
[841] ::cartographer::transform::proto::Quaterniond imu_calibration () const;
[842] ::cartographer::transform::proto::Quaterniond mutable_imu_calibration ();
[843] ::cartographer::transform::proto::Quaterniond release_imu_calibration ();
[844] void set_allocated_imu_calibration (::cartographer::transform::proto::Quaterniond imu_calibration);
[847] bool has_fixed_frame_origin_in_map () const;
[848] void clear_fixed_frame_origin_in_map ();
[850] ::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map () const;
[851] ::cartographer::transform::proto::Rigid3d mutable_fixed_frame_origin_in_map ();
[852] ::cartographer::transform::proto::Rigid3d release_fixed_frame_origin_in_map ();
[853] void set_allocated_fixed_frame_origin_in_map (::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map);
[856] void clear_gravity_constant ();
[858] double gravity_constant () const;
[859] void set_gravity_constant (double value);
[962] int submaps_size () const;
[963] void clear_submaps ();
[965] ::cartographer::mapping::proto::Submap submaps (int index) const;
[966] ::cartographer::mapping::proto::Submap mutable_submaps (int index);
[967] ::cartographer::mapping::proto::Submap add_submaps ();
[983] void clear_timestamp ();
[985] ::google::protobuf::int64 timestamp () const;
[986] void set_timestamp (::google::protobuf::int64 value);
[1082] void clear_format_version ();
[1084] ::google::protobuf::uint32 format_version () const;
[1085] void set_format_version (::google::protobuf::uint32 value);
[1193] bool has_pose_graph () const;
[1194] void clear_pose_graph ();
[1196] ::cartographer::mapping::proto::PoseGraph pose_graph () const;
[1197] ::cartographer::mapping::proto::PoseGraph mutable_pose_graph ();
[1198] ::cartographer::mapping::proto::PoseGraph release_pose_graph ();
[1199] void set_allocated_pose_graph (::cartographer::mapping::proto::PoseGraph pose_graph);
[1202] bool has_all_trajectory_builder_options () const;
[1203] void clear_all_trajectory_builder_options ();
[1205] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options () const;
[1206] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions mutable_all_trajectory_builder_options ();
[1207] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions release_all_trajectory_builder_options ();
[1208] void set_allocated_all_trajectory_builder_options (::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options);
[1211] bool has_submap () const;
[1212] void clear_submap ();
[1214] ::cartographer::mapping::proto::Submap submap () const;
[1215] ::cartographer::mapping::proto::Submap mutable_submap ();
[1216] ::cartographer::mapping::proto::Submap release_submap ();
[1217] void set_allocated_submap (::cartographer::mapping::proto::Submap submap);
[1220] bool has_node () const;
[1221] void clear_node ();
[1223] ::cartographer::mapping::proto::Node node () const;
[1224] ::cartographer::mapping::proto::Node mutable_node ();
[1225] ::cartographer::mapping::proto::Node release_node ();
[1226] void set_allocated_node (::cartographer::mapping::proto::Node node);
[1229] bool has_trajectory_data () const;
[1230] void clear_trajectory_data ();
[1232] ::cartographer::mapping::proto::TrajectoryData trajectory_data () const;
[1233] ::cartographer::mapping::proto::TrajectoryData mutable_trajectory_data ();
[1234] ::cartographer::mapping::proto::TrajectoryData release_trajectory_data ();
[1235] void set_allocated_trajectory_data (::cartographer::mapping::proto::TrajectoryData trajectory_data);
[1274] bool has_ramp () const;
[1275] void clear_ramp ();
[1277] ::cartographer::mapping::proto::Ramp ramp () const;
[1278] ::cartographer::mapping::proto::Ramp mutable_ramp ();
[1279] ::cartographer::mapping::proto::Ramp release_ramp ();
[1280] void set_allocated_ramp (::cartographer::mapping::proto::Ramp ramp);
[1282] DataCase data_case () const;
[1285] void set_has_pose_graph ();
[1286] void set_has_all_trajectory_builder_options ();
[1287] void set_has_submap ();
[1288] void set_has_node ();
[1289] void set_has_trajectory_data ();
[1290] void set_has_imu_data ();
[1291] void set_has_odometry_data ();
[1292] void set_has_fixed_frame_pose_data ();
[1293] void set_has_landmark_data ();
[1294] void set_has_ramp ();
[1297] void clear_data ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/map_builder_options.pb.h  ( 39 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] MapBuilderOptions default_instance ();
[147] bool has_pose_graph_options () const;
[148] void clear_pose_graph_options ();
[150] ::cartographer::mapping::proto::PoseGraphOptions pose_graph_options () const;
[151] ::cartographer::mapping::proto::PoseGraphOptions mutable_pose_graph_options ();
[152] ::cartographer::mapping::proto::PoseGraphOptions release_pose_graph_options ();
[153] void set_allocated_pose_graph_options (::cartographer::mapping::proto::PoseGraphOptions pose_graph_options);
[156] void clear_use_trajectory_builder_2d ();
[158] bool use_trajectory_builder_2d () const;
[159] void set_use_trajectory_builder_2d (bool value);
[162] void clear_use_trajectory_builder_3d ();
[164] bool use_trajectory_builder_3d () const;
[165] void set_use_trajectory_builder_3d (bool value);
[168] void clear_collate_by_trajectory ();
[170] bool collate_by_trajectory () const;
[171] void set_collate_by_trajectory (bool value);
[174] void clear_num_background_threads ();
[176] ::google::protobuf::int32 num_background_threads () const;
[177] void set_num_background_threads (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/connected_components.pb.h  ( 31 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] ConnectedComponents_ConnectedComponent default_instance ();
[149] int trajectory_id_size () const;
[150] void clear_trajectory_id ();
[152] ::google::protobuf::int32 trajectory_id (int index) const;
[153] void set_trajectory_id (int index, ::google::protobuf::int32 value);
[154] void add_trajectory_id (::google::protobuf::int32 value);
[255] int connected_component_size () const;
[256] void clear_connected_component ();
[258] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent connected_component (int index) const;
[259] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent mutable_connected_component (int index);
[260] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent add_connected_component ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph_options.pb.h  ( 54 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] PoseGraphOptions default_instance ();
[148] bool has_constraint_builder_options () const;
[149] void clear_constraint_builder_options ();
[151] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options () const;
[152] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions mutable_constraint_builder_options ();
[153] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions release_constraint_builder_options ();
[154] void set_allocated_constraint_builder_options (::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options);
[157] bool has_optimization_problem_options () const;
[158] void clear_optimization_problem_options ();
[160] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options () const;
[161] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions mutable_optimization_problem_options ();
[162] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions release_optimization_problem_options ();
[163] void set_allocated_optimization_problem_options (::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options);
[166] void clear_optimize_every_n_nodes ();
[168] ::google::protobuf::int32 optimize_every_n_nodes () const;
[169] void set_optimize_every_n_nodes (::google::protobuf::int32 value);
[172] void clear_max_num_final_iterations ();
[174] ::google::protobuf::int32 max_num_final_iterations () const;
[175] void set_max_num_final_iterations (::google::protobuf::int32 value);
[178] void clear_global_sampling_ratio ();
[180] double global_sampling_ratio () const;
[181] void set_global_sampling_ratio (double value);
[184] void clear_matcher_translation_weight ();
[186] double matcher_translation_weight () const;
[187] void set_matcher_translation_weight (double value);
[190] void clear_matcher_rotation_weight ();
[192] double matcher_rotation_weight () const;
[193] void set_matcher_rotation_weight (double value);
[196] void clear_global_constraint_search_after_n_seconds ();
[198] double global_constraint_search_after_n_seconds () const;
[199] void set_global_constraint_search_after_n_seconds (double value);
[202] void clear_log_residual_histograms ();
[204] bool log_residual_histograms () const;
[205] void set_log_residual_histograms (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/motion_filter_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] MotionFilterOptions default_instance ();
[146] void clear_max_time_seconds ();
[148] double max_time_seconds () const;
[149] void set_max_time_seconds (double value);
[152] void clear_max_distance_meters ();
[154] double max_distance_meters () const;
[155] void set_max_distance_meters (double value);
[158] void clear_max_angle_radians ();
[160] double max_angle_radians () const;
[161] void set_max_angle_radians (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap_visualization.pb.h  ( 90 )
[109] ::google::protobuf::Descriptor descriptor ();
[110] SubmapList_SubmapEntry default_instance ();
[165] bool has_pose () const;
[166] void clear_pose ();
[168] ::cartographer::transform::proto::Rigid3d pose () const;
[169] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[170] ::cartographer::transform::proto::Rigid3d release_pose ();
[171] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[174] void clear_submap_version ();
[176] ::google::protobuf::int32 submap_version () const;
[177] void set_submap_version (::google::protobuf::int32 value);
[272] int submap_size () const;
[273] void clear_submap ();
[275] ::cartographer::mapping::proto::SubmapList_SubmapEntry submap (int index) const;
[276] ::cartographer::mapping::proto::SubmapList_SubmapEntry mutable_submap (int index);
[277] ::cartographer::mapping::proto::SubmapList_SubmapEntry add_submap ();
[378] int trajectory_size () const;
[379] void clear_trajectory ();
[381] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList trajectory (int index) const;
[382] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList mutable_trajectory (int index);
[383] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList add_trajectory ();
[481] void clear_submap_index ();
[483] ::google::protobuf::int32 submap_index () const;
[484] void set_submap_index (::google::protobuf::int32 value);
[487] void clear_trajectory_id ();
[489] ::google::protobuf::int32 trajectory_id () const;
[490] void set_trajectory_id (::google::protobuf::int32 value);
[585] void clear_cells ();
[587] ::std::string cells () const;
[588] void set_cells (const ::std::string value);
[594] ::std::string mutable_cells ();
[595] ::std::string release_cells ();
[596] void set_allocated_cells (::std::string cells);
[599] bool has_slice_pose () const;
[600] void clear_slice_pose ();
[602] ::cartographer::transform::proto::Rigid3d slice_pose () const;
[603] ::cartographer::transform::proto::Rigid3d mutable_slice_pose ();
[604] ::cartographer::transform::proto::Rigid3d release_slice_pose ();
[605] void set_allocated_slice_pose (::cartographer::transform::proto::Rigid3d slice_pose);
[608] void clear_width ();
[610] ::google::protobuf::int32 width () const;
[611] void set_width (::google::protobuf::int32 value);
[614] void clear_height ();
[616] ::google::protobuf::int32 height () const;
[617] void set_height (::google::protobuf::int32 value);
[620] void clear_resolution ();
[622] double resolution () const;
[623] void set_resolution (double value);
[723] int textures_size () const;
[724] void clear_textures ();
[726] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture textures (int index) const;
[727] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture mutable_textures (int index);
[728] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture add_textures ();
[735] void clear_error_message ();
[737] ::std::string error_message () const;
[738] void set_error_message (const ::std::string value);
[744] ::std::string mutable_error_message ();
[745] ::std::string release_error_message ();
[746] void set_allocated_error_message (::std::string error_message);
[851] bool has_request () const;
[852] void clear_request ();
[854] ::cartographer::mapping::proto::SubmapQuery_Request request () const;
[855] ::cartographer::mapping::proto::SubmapQuery_Request mutable_request ();
[856] ::cartographer::mapping::proto::SubmapQuery_Request release_request ();
[857] void set_allocated_request (::cartographer::mapping::proto::SubmapQuery_Request request);
[860] bool has_response () const;
[861] void clear_response ();
[863] ::cartographer::mapping::proto::SubmapQuery_Response response () const;
[864] ::cartographer::mapping::proto::SubmapQuery_Response mutable_response ();
[865] ::cartographer::mapping::proto::SubmapQuery_Response release_response ();
[866] void set_allocated_response (::cartographer::mapping::proto::SubmapQuery_Response response);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory.pb.h  ( 49 )
[97] ::google::protobuf::Descriptor descriptor ();
[98] Trajectory_Node default_instance ();
[153] bool has_pose () const;
[154] void clear_pose ();
[156] ::cartographer::transform::proto::Rigid3d pose () const;
[157] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[158] ::cartographer::transform::proto::Rigid3d release_pose ();
[159] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[162] void clear_timestamp ();
[164] ::google::protobuf::int64 timestamp () const;
[165] void set_timestamp (::google::protobuf::int64 value);
[168] void clear_node_index ();
[170] ::google::protobuf::int32 node_index () const;
[171] void set_node_index (::google::protobuf::int32 value);
[276] void clear_submap_index ();
[278] ::google::protobuf::int32 submap_index () const;
[279] void set_submap_index (::google::protobuf::int32 value);
[377] int node_size () const;
[378] void clear_node ();
[380] ::cartographer::mapping::proto::Trajectory_Node node (int index) const;
[381] ::cartographer::mapping::proto::Trajectory_Node mutable_node (int index);
[382] ::cartographer::mapping::proto::Trajectory_Node add_node ();
[389] int submap_size () const;
[390] void clear_submap ();
[392] ::cartographer::mapping::proto::Trajectory_Submap submap (int index) const;
[393] ::cartographer::mapping::proto::Trajectory_Submap mutable_submap (int index);
[394] ::cartographer::mapping::proto::Trajectory_Submap add_submap ();
[401] void clear_trajectory_id ();
[403] ::google::protobuf::int32 trajectory_id () const;
[404] void set_trajectory_id (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/range_data_inserter_options.pb.h  ( 32 )
[70] bool RangeDataInserterOptions_RangeDataInserterType_IsValid (int value);
[75] ::google::protobuf::EnumDescriptor RangeDataInserterOptions_RangeDataInserterType_descriptor ();
[113] ::google::protobuf::Descriptor descriptor ();
[114] RangeDataInserterOptions default_instance ();
[195] bool has_probability_grid_range_data_inserter_options_2d () const;
[196] void clear_probability_grid_range_data_inserter_options_2d ();
[198] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d () const;
[199] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D mutable_probability_grid_range_data_inserter_options_2d ();
[200] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D release_probability_grid_range_data_inserter_options_2d ();
[201] void set_allocated_probability_grid_range_data_inserter_options_2d (::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d);
[204] void clear_range_data_inserter_type ();
[206] ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType range_data_inserter_type () const;
[207] void set_range_data_inserter_type (::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h  ( 33 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] RealTimeCorrelativeScanMatcherOptions default_instance ();
[149] void clear_linear_search_window ();
[151] double linear_search_window () const;
[152] void set_linear_search_window (double value);
[155] void clear_angular_search_window ();
[157] double angular_search_window () const;
[158] void set_angular_search_window (double value);
[161] void clear_translation_delta_cost_weight ();
[163] double translation_delta_cost_weight () const;
[164] void set_translation_delta_cost_weight (double value);
[167] void clear_rotation_delta_cost_weight ();
[169] double rotation_delta_cost_weight () const;
[170] void set_rotation_delta_cost_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h  ( 30 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] FastCorrelativeScanMatcherOptions2D default_instance ();
[149] void clear_linear_search_window ();
[151] double linear_search_window () const;
[152] void set_linear_search_window (double value);
[155] void clear_angular_search_window ();
[157] double angular_search_window () const;
[158] void set_angular_search_window (double value);
[161] void clear_branch_and_bound_depth ();
[163] ::google::protobuf::int32 branch_and_bound_depth () const;
[164] void set_branch_and_bound_depth (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h  ( 36 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] CeresScanMatcherOptions2D default_instance ();
[150] bool has_ceres_solver_options () const;
[151] void clear_ceres_solver_options ();
[153] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[154] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[155] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[156] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[159] void clear_occupied_space_weight ();
[161] double occupied_space_weight () const;
[162] void set_occupied_space_weight (double value);
[165] void clear_translation_weight ();
[167] double translation_weight () const;
[168] void set_translation_weight (double value);
[171] void clear_rotation_weight ();
[173] double rotation_weight () const;
[174] void set_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h  ( 41 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] CeresScanMatcherOptions3D default_instance ();
[150] int occupied_space_weight_size () const;
[151] void clear_occupied_space_weight ();
[153] double occupied_space_weight (int index) const;
[154] void set_occupied_space_weight (int index, double value);
[155] void add_occupied_space_weight (double value);
[162] bool has_ceres_solver_options () const;
[163] void clear_ceres_solver_options ();
[165] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[166] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[167] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[168] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[171] void clear_translation_weight ();
[173] double translation_weight () const;
[174] void set_translation_weight (double value);
[177] void clear_rotation_weight ();
[179] double rotation_weight () const;
[180] void set_rotation_weight (double value);
[183] void clear_only_optimize_yaw ();
[185] bool only_optimize_yaw () const;
[186] void set_only_optimize_yaw (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h  ( 42 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] FastCorrelativeScanMatcherOptions3D default_instance ();
[149] void clear_min_rotational_score ();
[151] double min_rotational_score () const;
[152] void set_min_rotational_score (double value);
[155] void clear_linear_xy_search_window ();
[157] double linear_xy_search_window () const;
[158] void set_linear_xy_search_window (double value);
[161] void clear_branch_and_bound_depth ();
[163] ::google::protobuf::int32 branch_and_bound_depth () const;
[164] void set_branch_and_bound_depth (::google::protobuf::int32 value);
[167] void clear_full_resolution_depth ();
[169] ::google::protobuf::int32 full_resolution_depth () const;
[170] void set_full_resolution_depth (::google::protobuf::int32 value);
[173] void clear_linear_z_search_window ();
[175] double linear_z_search_window () const;
[176] void set_linear_z_search_window (double value);
[179] void clear_angular_search_window ();
[181] double angular_search_window () const;
[182] void set_angular_search_window (double value);
[185] void clear_min_low_resolution_score ();
[187] double min_low_resolution_score () const;
[188] void set_min_low_resolution_score (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h  ( 66 )
[97] ::google::protobuf::Descriptor descriptor ();
[98] ConstraintBuilderOptions default_instance ();
[153] bool has_fast_correlative_scan_matcher_options () const;
[154] void clear_fast_correlative_scan_matcher_options ();
[156] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options () const;
[157] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D mutable_fast_correlative_scan_matcher_options ();
[158] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D release_fast_correlative_scan_matcher_options ();
[159] void set_allocated_fast_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options);
[162] bool has_fast_correlative_scan_matcher_options_3d () const;
[163] void clear_fast_correlative_scan_matcher_options_3d ();
[165] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d () const;
[166] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D mutable_fast_correlative_scan_matcher_options_3d ();
[167] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D release_fast_correlative_scan_matcher_options_3d ();
[168] void set_allocated_fast_correlative_scan_matcher_options_3d (::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d);
[171] bool has_ceres_scan_matcher_options () const;
[172] void clear_ceres_scan_matcher_options ();
[174] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options () const;
[175] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D mutable_ceres_scan_matcher_options ();
[176] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D release_ceres_scan_matcher_options ();
[177] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options);
[180] bool has_ceres_scan_matcher_options_3d () const;
[181] void clear_ceres_scan_matcher_options_3d ();
[183] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d () const;
[184] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D mutable_ceres_scan_matcher_options_3d ();
[185] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D release_ceres_scan_matcher_options_3d ();
[186] void set_allocated_ceres_scan_matcher_options_3d (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d);
[189] void clear_sampling_ratio ();
[191] double sampling_ratio () const;
[192] void set_sampling_ratio (double value);
[195] void clear_max_constraint_distance ();
[197] double max_constraint_distance () const;
[198] void set_max_constraint_distance (double value);
[201] void clear_min_score ();
[203] double min_score () const;
[204] void set_min_score (double value);
[207] void clear_global_localization_min_score ();
[209] double global_localization_min_score () const;
[210] void set_global_localization_min_score (double value);
[213] void clear_log_matches ();
[215] bool log_matches () const;
[216] void set_log_matches (bool value);
[219] void clear_loop_closure_translation_weight ();
[221] double loop_closure_translation_weight () const;
[222] void set_loop_closure_translation_weight (double value);
[225] void clear_loop_closure_rotation_weight ();
[227] double loop_closure_rotation_weight () const;
[228] void set_loop_closure_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h  ( 60 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] OptimizationProblemOptions default_instance ();
[150] bool has_ceres_solver_options () const;
[151] void clear_ceres_solver_options ();
[153] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[154] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[155] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[156] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[159] void clear_huber_scale ();
[161] double huber_scale () const;
[162] void set_huber_scale (double value);
[165] void clear_acceleration_weight ();
[167] double acceleration_weight () const;
[168] void set_acceleration_weight (double value);
[171] void clear_rotation_weight ();
[173] double rotation_weight () const;
[174] void set_rotation_weight (double value);
[177] void clear_fixed_frame_pose_translation_weight ();
[179] double fixed_frame_pose_translation_weight () const;
[180] void set_fixed_frame_pose_translation_weight (double value);
[183] void clear_fixed_frame_pose_rotation_weight ();
[185] double fixed_frame_pose_rotation_weight () const;
[186] void set_fixed_frame_pose_rotation_weight (double value);
[189] void clear_fix_z_in_3d ();
[191] bool fix_z_in_3d () const;
[192] void set_fix_z_in_3d (bool value);
[195] void clear_log_solver_summary ();
[197] bool log_solver_summary () const;
[198] void set_log_solver_summary (bool value);
[201] void clear_local_slam_pose_translation_weight ();
[203] double local_slam_pose_translation_weight () const;
[204] void set_local_slam_pose_translation_weight (double value);
[207] void clear_local_slam_pose_rotation_weight ();
[209] double local_slam_pose_rotation_weight () const;
[210] void set_local_slam_pose_rotation_weight (double value);
[213] void clear_odometry_translation_weight ();
[215] double odometry_translation_weight () const;
[216] void set_odometry_translation_weight (double value);
[219] void clear_odometry_rotation_weight ();
[221] double odometry_rotation_weight () const;
[222] void set_odometry_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] RangeDataInserterOptions3D default_instance ();
[146] void clear_hit_probability ();
[148] double hit_probability () const;
[149] void set_hit_probability (double value);
[152] void clear_miss_probability ();
[154] double miss_probability () const;
[155] void set_miss_probability (double value);
[158] void clear_num_free_space_voxels ();
[160] ::google::protobuf::int32 num_free_space_voxels () const;
[161] void set_num_free_space_voxels (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/submaps_options_3d.pb.h  ( 39 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] SubmapsOptions3D default_instance ();
[147] bool has_range_data_inserter_options () const;
[148] void clear_range_data_inserter_options ();
[150] ::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options () const;
[151] ::cartographer::mapping::proto::RangeDataInserterOptions3D mutable_range_data_inserter_options ();
[152] ::cartographer::mapping::proto::RangeDataInserterOptions3D release_range_data_inserter_options ();
[153] void set_allocated_range_data_inserter_options (::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options);
[156] void clear_high_resolution ();
[158] double high_resolution () const;
[159] void set_high_resolution (double value);
[162] void clear_high_resolution_max_range ();
[164] double high_resolution_max_range () const;
[165] void set_high_resolution_max_range (double value);
[168] void clear_low_resolution ();
[170] double low_resolution () const;
[171] void set_low_resolution (double value);
[174] void clear_num_range_data ();
[176] ::google::protobuf::int32 num_range_data () const;
[177] void set_num_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/hybrid_grid.pb.h  ( 44 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] HybridGrid default_instance ();
[146] int x_indices_size () const;
[147] void clear_x_indices ();
[149] ::google::protobuf::int32 x_indices (int index) const;
[150] void set_x_indices (int index, ::google::protobuf::int32 value);
[151] void add_x_indices (::google::protobuf::int32 value);
[158] int y_indices_size () const;
[159] void clear_y_indices ();
[161] ::google::protobuf::int32 y_indices (int index) const;
[162] void set_y_indices (int index, ::google::protobuf::int32 value);
[163] void add_y_indices (::google::protobuf::int32 value);
[170] int z_indices_size () const;
[171] void clear_z_indices ();
[173] ::google::protobuf::int32 z_indices (int index) const;
[174] void set_z_indices (int index, ::google::protobuf::int32 value);
[175] void add_z_indices (::google::protobuf::int32 value);
[182] int values_size () const;
[183] void clear_values ();
[185] ::google::protobuf::int32 values (int index) const;
[186] void set_values (int index, ::google::protobuf::int32 value);
[187] void add_values (::google::protobuf::int32 value);
[194] void clear_resolution ();
[196] float resolution () const;
[197] void set_resolution (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h  ( 78 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] LocalTrajectoryBuilderOptions3D default_instance ();
[151] bool has_high_resolution_adaptive_voxel_filter_options () const;
[152] void clear_high_resolution_adaptive_voxel_filter_options ();
[154] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options () const;
[155] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_high_resolution_adaptive_voxel_filter_options ();
[156] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_high_resolution_adaptive_voxel_filter_options ();
[157] void set_allocated_high_resolution_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options);
[160] bool has_ceres_scan_matcher_options () const;
[161] void clear_ceres_scan_matcher_options ();
[163] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options () const;
[164] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D mutable_ceres_scan_matcher_options ();
[165] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D release_ceres_scan_matcher_options ();
[166] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options);
[169] bool has_motion_filter_options () const;
[170] void clear_motion_filter_options ();
[172] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options () const;
[173] ::cartographer::mapping::proto::MotionFilterOptions mutable_motion_filter_options ();
[174] ::cartographer::mapping::proto::MotionFilterOptions release_motion_filter_options ();
[175] void set_allocated_motion_filter_options (::cartographer::mapping::proto::MotionFilterOptions motion_filter_options);
[178] bool has_submaps_options () const;
[179] void clear_submaps_options ();
[181] ::cartographer::mapping::proto::SubmapsOptions3D submaps_options () const;
[182] ::cartographer::mapping::proto::SubmapsOptions3D mutable_submaps_options ();
[183] ::cartographer::mapping::proto::SubmapsOptions3D release_submaps_options ();
[184] void set_allocated_submaps_options (::cartographer::mapping::proto::SubmapsOptions3D submaps_options);
[187] bool has_low_resolution_adaptive_voxel_filter_options () const;
[188] void clear_low_resolution_adaptive_voxel_filter_options ();
[190] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options () const;
[191] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_low_resolution_adaptive_voxel_filter_options ();
[192] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_low_resolution_adaptive_voxel_filter_options ();
[193] void set_allocated_low_resolution_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options);
[196] bool has_real_time_correlative_scan_matcher_options () const;
[197] void clear_real_time_correlative_scan_matcher_options ();
[199] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options () const;
[200] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions mutable_real_time_correlative_scan_matcher_options ();
[201] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions release_real_time_correlative_scan_matcher_options ();
[202] void set_allocated_real_time_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options);
[205] void clear_min_range ();
[207] float min_range () const;
[208] void set_min_range (float value);
[211] void clear_max_range ();
[213] float max_range () const;
[214] void set_max_range (float value);
[217] void clear_num_accumulated_range_data ();
[219] ::google::protobuf::int32 num_accumulated_range_data () const;
[220] void set_num_accumulated_range_data (::google::protobuf::int32 value);
[223] void clear_voxel_filter_size ();
[225] float voxel_filter_size () const;
[226] void set_voxel_filter_size (float value);
[229] void clear_imu_gravity_time_constant ();
[231] double imu_gravity_time_constant () const;
[232] void set_imu_gravity_time_constant (double value);
[235] void clear_use_online_correlative_scan_matching ();
[237] bool use_online_correlative_scan_matching () const;
[238] void set_use_online_correlative_scan_matching (bool value);
[241] void clear_rotational_histogram_size ();
[243] ::google::protobuf::int32 rotational_histogram_size () const;
[244] void set_rotational_histogram_size (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/submaps_options_2d.pb.h  ( 36 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] SubmapsOptions2D default_instance ();
[148] bool has_grid_options_2d () const;
[149] void clear_grid_options_2d ();
[151] ::cartographer::mapping::proto::GridOptions2D grid_options_2d () const;
[152] ::cartographer::mapping::proto::GridOptions2D mutable_grid_options_2d ();
[153] ::cartographer::mapping::proto::GridOptions2D release_grid_options_2d ();
[154] void set_allocated_grid_options_2d (::cartographer::mapping::proto::GridOptions2D grid_options_2d);
[157] bool has_range_data_inserter_options () const;
[158] void clear_range_data_inserter_options ();
[160] ::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options () const;
[161] ::cartographer::mapping::proto::RangeDataInserterOptions mutable_range_data_inserter_options ();
[162] ::cartographer::mapping::proto::RangeDataInserterOptions release_range_data_inserter_options ();
[163] void set_allocated_range_data_inserter_options (::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options);
[166] void clear_num_range_data ();
[168] ::google::protobuf::int32 num_range_data () const;
[169] void set_num_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d_options.pb.h  ( 29 )
[69] bool GridOptions2D_GridType_IsValid (int value);
[74] ::google::protobuf::EnumDescriptor GridOptions2D_GridType_descriptor ();
[112] ::google::protobuf::Descriptor descriptor ();
[113] GridOptions2D default_instance ();
[194] void clear_grid_type ();
[196] ::cartographer::mapping::proto::GridOptions2D_GridType grid_type () const;
[197] void set_grid_type (::cartographer::mapping::proto::GridOptions2D_GridType value);
[200] void clear_resolution ();
[202] float resolution () const;
[203] void set_resolution (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid.pb.h  ( 21 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] ProbabilityGrid default_instance ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/cell_limits.pb.h  ( 27 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] CellLimits default_instance ();
[146] void clear_num_x_cells ();
[148] ::google::protobuf::int32 num_x_cells () const;
[149] void set_num_x_cells (::google::protobuf::int32 value);
[152] void clear_num_y_cells ();
[154] ::google::protobuf::int32 num_y_cells () const;
[155] void set_num_y_cells (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/map_limits.pb.h  ( 36 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] MapLimits default_instance ();
[148] bool has_max () const;
[149] void clear_max ();
[151] ::cartographer::transform::proto::Vector2d max () const;
[152] ::cartographer::transform::proto::Vector2d mutable_max ();
[153] ::cartographer::transform::proto::Vector2d release_max ();
[154] void set_allocated_max (::cartographer::transform::proto::Vector2d max);
[157] bool has_cell_limits () const;
[158] void clear_cell_limits ();
[160] ::cartographer::mapping::proto::CellLimits cell_limits () const;
[161] ::cartographer::mapping::proto::CellLimits mutable_cell_limits ();
[162] ::cartographer::mapping::proto::CellLimits release_cell_limits ();
[163] void set_allocated_cell_limits (::cartographer::mapping::proto::CellLimits cell_limits);
[166] void clear_resolution ();
[168] double resolution () const;
[169] void set_resolution (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h  ( 87 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] LocalTrajectoryBuilderOptions2D default_instance ();
[151] bool has_adaptive_voxel_filter_options () const;
[152] void clear_adaptive_voxel_filter_options ();
[154] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options () const;
[155] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_adaptive_voxel_filter_options ();
[156] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_adaptive_voxel_filter_options ();
[157] void set_allocated_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options);
[160] bool has_real_time_correlative_scan_matcher_options () const;
[161] void clear_real_time_correlative_scan_matcher_options ();
[163] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options () const;
[164] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions mutable_real_time_correlative_scan_matcher_options ();
[165] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions release_real_time_correlative_scan_matcher_options ();
[166] void set_allocated_real_time_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options);
[169] bool has_ceres_scan_matcher_options () const;
[170] void clear_ceres_scan_matcher_options ();
[172] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options () const;
[173] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D mutable_ceres_scan_matcher_options ();
[174] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D release_ceres_scan_matcher_options ();
[175] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options);
[178] bool has_submaps_options () const;
[179] void clear_submaps_options ();
[181] ::cartographer::mapping::proto::SubmapsOptions2D submaps_options () const;
[182] ::cartographer::mapping::proto::SubmapsOptions2D mutable_submaps_options ();
[183] ::cartographer::mapping::proto::SubmapsOptions2D release_submaps_options ();
[184] void set_allocated_submaps_options (::cartographer::mapping::proto::SubmapsOptions2D submaps_options);
[187] bool has_motion_filter_options () const;
[188] void clear_motion_filter_options ();
[190] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options () const;
[191] ::cartographer::mapping::proto::MotionFilterOptions mutable_motion_filter_options ();
[192] ::cartographer::mapping::proto::MotionFilterOptions release_motion_filter_options ();
[193] void set_allocated_motion_filter_options (::cartographer::mapping::proto::MotionFilterOptions motion_filter_options);
[196] bool has_loop_closure_adaptive_voxel_filter_options () const;
[197] void clear_loop_closure_adaptive_voxel_filter_options ();
[199] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options () const;
[200] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_loop_closure_adaptive_voxel_filter_options ();
[201] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_loop_closure_adaptive_voxel_filter_options ();
[202] void set_allocated_loop_closure_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options);
[205] void clear_min_z ();
[207] float min_z () const;
[208] void set_min_z (float value);
[211] void clear_max_z ();
[213] float max_z () const;
[214] void set_max_z (float value);
[217] void clear_voxel_filter_size ();
[219] float voxel_filter_size () const;
[220] void set_voxel_filter_size (float value);
[223] void clear_use_online_correlative_scan_matching ();
[225] bool use_online_correlative_scan_matching () const;
[226] void set_use_online_correlative_scan_matching (bool value);
[229] void clear_use_imu_data ();
[231] bool use_imu_data () const;
[232] void set_use_imu_data (bool value);
[235] void clear_min_range ();
[237] float min_range () const;
[238] void set_min_range (float value);
[241] void clear_max_range ();
[243] float max_range () const;
[244] void set_max_range (float value);
[247] void clear_imu_gravity_time_constant ();
[249] double imu_gravity_time_constant () const;
[250] void set_imu_gravity_time_constant (double value);
[253] void clear_missing_data_ray_length ();
[255] float missing_data_ray_length () const;
[256] void set_missing_data_ray_length (float value);
[259] void clear_num_accumulated_range_data ();
[261] ::google::protobuf::int32 num_accumulated_range_data () const;
[262] void set_num_accumulated_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] ProbabilityGridRangeDataInserterOptions2D default_instance ();
[146] void clear_hit_probability ();
[148] double hit_probability () const;
[149] void set_hit_probability (double value);
[152] void clear_miss_probability ();
[154] double miss_probability () const;
[155] void set_miss_probability (double value);
[158] void clear_insert_free_space ();
[160] bool insert_free_space () const;
[161] void set_insert_free_space (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d.pb.h  ( 65 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] Grid2D_CellBox default_instance ();
[151] void clear_max_x ();
[153] ::google::protobuf::int32 max_x () const;
[154] void set_max_x (::google::protobuf::int32 value);
[157] void clear_max_y ();
[159] ::google::protobuf::int32 max_y () const;
[160] void set_max_y (::google::protobuf::int32 value);
[163] void clear_min_x ();
[165] ::google::protobuf::int32 min_x () const;
[166] void set_min_x (::google::protobuf::int32 value);
[169] void clear_min_y ();
[171] ::google::protobuf::int32 min_y () const;
[172] void set_min_y (::google::protobuf::int32 value);
[276] int cells_size () const;
[277] void clear_cells ();
[279] ::google::protobuf::int32 cells (int index) const;
[280] void set_cells (int index, ::google::protobuf::int32 value);
[281] void add_cells (::google::protobuf::int32 value);
[288] bool has_limits () const;
[289] void clear_limits ();
[291] ::cartographer::mapping::proto::MapLimits limits () const;
[292] ::cartographer::mapping::proto::MapLimits mutable_limits ();
[293] ::cartographer::mapping::proto::MapLimits release_limits ();
[294] void set_allocated_limits (::cartographer::mapping::proto::MapLimits limits);
[297] bool has_known_cells_box () const;
[298] void clear_known_cells_box ();
[300] ::cartographer::mapping::proto::Grid2D_CellBox known_cells_box () const;
[301] ::cartographer::mapping::proto::Grid2D_CellBox mutable_known_cells_box ();
[302] ::cartographer::mapping::proto::Grid2D_CellBox release_known_cells_box ();
[303] void set_allocated_known_cells_box (::cartographer::mapping::proto::Grid2D_CellBox known_cells_box);
[306] void clear_min_correspondence_cost ();
[308] float min_correspondence_cost () const;
[309] void set_min_correspondence_cost (float value);
[312] void clear_max_correspondence_cost ();
[314] float max_correspondence_cost () const;
[315] void set_max_correspondence_cost (float value);
[318] bool has_probability_grid_2d () const;
[319] void clear_probability_grid_2d ();
[321] ::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d () const;
[322] ::cartographer::mapping::proto::ProbabilityGrid mutable_probability_grid_2d ();
[323] ::cartographer::mapping::proto::ProbabilityGrid release_probability_grid_2d ();
[324] void set_allocated_probability_grid_2d (::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d);
[326] GridCase grid_case () const;
[329] void set_has_probability_grid_2d ();
[332] void clear_grid ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/internal/legacy_serialized_data.pb.h  ( 63 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] LegacySerializedData default_instance ();
[147] bool has_submap () const;
[148] void clear_submap ();
[150] ::cartographer::mapping::proto::Submap submap () const;
[151] ::cartographer::mapping::proto::Submap mutable_submap ();
[152] ::cartographer::mapping::proto::Submap release_submap ();
[153] void set_allocated_submap (::cartographer::mapping::proto::Submap submap);
[156] bool has_node () const;
[157] void clear_node ();
[159] ::cartographer::mapping::proto::Node node () const;
[160] ::cartographer::mapping::proto::Node mutable_node ();
[161] ::cartographer::mapping::proto::Node release_node ();
[162] void set_allocated_node (::cartographer::mapping::proto::Node node);
[165] bool has_imu_data () const;
[166] void clear_imu_data ();
[168] ::cartographer::mapping::proto::ImuData imu_data () const;
[169] ::cartographer::mapping::proto::ImuData mutable_imu_data ();
[170] ::cartographer::mapping::proto::ImuData release_imu_data ();
[171] void set_allocated_imu_data (::cartographer::mapping::proto::ImuData imu_data);
[174] bool has_odometry_data () const;
[175] void clear_odometry_data ();
[177] ::cartographer::mapping::proto::OdometryData odometry_data () const;
[178] ::cartographer::mapping::proto::OdometryData mutable_odometry_data ();
[179] ::cartographer::mapping::proto::OdometryData release_odometry_data ();
[180] void set_allocated_odometry_data (::cartographer::mapping::proto::OdometryData odometry_data);
[183] bool has_fixed_frame_pose_data () const;
[184] void clear_fixed_frame_pose_data ();
[186] ::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data () const;
[187] ::cartographer::mapping::proto::FixedFramePoseData mutable_fixed_frame_pose_data ();
[188] ::cartographer::mapping::proto::FixedFramePoseData release_fixed_frame_pose_data ();
[189] void set_allocated_fixed_frame_pose_data (::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data);
[192] bool has_trajectory_data () const;
[193] void clear_trajectory_data ();
[195] ::cartographer::mapping::proto::TrajectoryData trajectory_data () const;
[196] ::cartographer::mapping::proto::TrajectoryData mutable_trajectory_data ();
[197] ::cartographer::mapping::proto::TrajectoryData release_trajectory_data ();
[198] void set_allocated_trajectory_data (::cartographer::mapping::proto::TrajectoryData trajectory_data);
[201] bool has_landmark_data () const;
[202] void clear_landmark_data ();
[204] ::cartographer::mapping::proto::LandmarkData landmark_data () const;
[205] ::cartographer::mapping::proto::LandmarkData mutable_landmark_data ();
[206] ::cartographer::mapping::proto::LandmarkData release_landmark_data ();
[207] void set_allocated_landmark_data (::cartographer::mapping::proto::LandmarkData landmark_data);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/timestamped_transform.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/transform.h  ( 11 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/transform_interpolation_buffer.h  ( 6 )
[50] common::Time earliest_time () const;
[54] common::Time latest_time () const;
[57] bool empty () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform_test_helpers.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform.h  ( 14 )
[60] Rigid2<OtherType> cast () const;
[65] Vector translation () const return translation_ };
[67] Rotation2D rotation () const return rotation_ };
[69] double normalized_angle () const;
[73] Rigid2 inverse () const;
[98] Rigid2<FloatType> operator (const Rigid2<FloatType> lhs, const Rigid2<FloatType> rhs);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/proto/transform.pb.h  ( 49 )
[120] ::google::protobuf::Descriptor descriptor ();
[121] Vector2d default_instance ();
[176] void clear_x ();
[178] double x () const;
[179] void set_x (double value);
[182] void clear_y ();
[184] double y () const;
[185] void set_y (double value);
[396] void clear_z ();
[398] double z () const;
[399] void set_z (double value);
[624] void clear_t ();
[626] float  t() const;
[627] void set_t (float value);
[742] void clear_w ();
[744] double w () const;
[745] void set_w (double value);
[960] bool has_translation () const;
[961] void clear_translation ();
[963] ::cartographer::transform::proto::Vector2d translation () const;
[964] ::cartographer::transform::proto::Vector2d mutable_translation ();
[965] ::cartographer::transform::proto::Vector2d release_translation ();
[966] void set_allocated_translation (::cartographer::transform::proto::Vector2d translation);
[969] void clear_rotation ();
[971] double rotation () const;
[972] void set_rotation (double value);
[1183] bool has_rotation () const;
[1187] ::cartographer::transform::proto::Quaterniond mutable_rotation ();
[1188] ::cartographer::transform::proto::Quaterniond release_rotation ();
[1189] void set_allocated_rotation (::cartographer::transform::proto::Quaterniond rotation);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/task.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/histogram.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/rate_timer.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/ceres_solver_options.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/port.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/make_unique.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary.h  ( 24 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/optional.h  ( 2 )
[41] bool has_value () const return value_ != nullptr };
[43] T value () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/lua.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/mutex.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/configuration_file_resolver.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary_test_helpers.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/time.h  ( 8 )
[57] uint64_t getTimeNow ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/blocking_queue.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/thread_pool.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/math.h  ( 3 )
[70] T atan2 (const Eigen::Matrix<T, 2, 1> vector);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/DataChecking.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/lockless_queue.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/setting.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/fixed_ratio_sampler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/proto/ceres_solver_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] CeresSolverOptions default_instance ();
[146] void clear_use_nonmonotonic_steps ();
[148] bool use_nonmonotonic_steps () const;
[149] void set_use_nonmonotonic_steps (bool value);
[152] void clear_max_num_iterations ();
[154] ::google::protobuf::int32 max_num_iterations () const;
[155] void set_max_num_iterations (::google::protobuf::int32 value);
[158] void clear_num_threads ();
[160] ::google::protobuf::int32 num_threads () const;
[161] void set_num_threads (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/ground_truth/relations_text_file.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/ground_truth/proto/relations.pb.h  ( 41 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] Relation default_instance ();
[150] bool has_expected () const;
[151] void clear_expected ();
[153] ::cartographer::transform::proto::Rigid3d expected () const;
[154] ::cartographer::transform::proto::Rigid3d mutable_expected ();
[155] ::cartographer::transform::proto::Rigid3d release_expected ();
[156] void set_allocated_expected (::cartographer::transform::proto::Rigid3d expected);
[159] void clear_timestamp1 ();
[161] ::google::protobuf::int64 timestamp1 () const;
[162] void set_timestamp1 (::google::protobuf::int64 value);
[165] void clear_timestamp2 ();
[167] ::google::protobuf::int64 timestamp2 () const;
[168] void set_timestamp2 (::google::protobuf::int64 value);
[171] void clear_covered_distance ();
[173] double covered_distance () const;
[174] void set_covered_distance (double value);
[271] int relation_size () const;
[272] void clear_relation ();
[274] ::cartographer::ground_truth::proto::Relation relation (int index) const;
[275] ::cartographer::ground_truth::proto::Relation mutable_relation (int index);
[276] ::cartographer::ground_truth::proto::Relation add_relation ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/points_processor.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/coloring_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/xray_points_processor.h  ( 6 )
[58] Eigen::AlignedBox3i bounding_box () const return bounding_box_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/outlier_removing_points_processor.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/file_writer.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/fake_file_writer.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/min_max_range_filtering_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/submap_painter.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/serialization_format_migration.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_deserializer.h  ( 5 )
[42] mapping::proto::SerializationHeader header () return header_ };
[44] mapping::proto::PoseGraph pose_graph ();
[52] mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_interface.h  ( 4 )
[48] bool eof () const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/ply_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/frame_id_filtering_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/counting_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/intensity_to_color_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/image.h  ( 6 )
[67] int width () const return width_ };
[68] int height () const return height_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/draw_trajectories.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/xyz_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/fixed_ratio_sampling_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/pcd_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/probability_grid_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/points_processor_pipeline_builder.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/points_batch.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream.h  ( 6 )
[62] bool eof () const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/color.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/hybrid_grid_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/null_points_processor.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/collator_interface.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/range_data.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/timed_point_cloud_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/compressed_point_cloud.h  ( 9 )
[47] bool empty () const;
[48] size _t size() const;
[49] ConstIterator begin () const;
[50] ConstIterator end () const;
[76] Eigen::Vector3f operator () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/map_by_time.h  ( 10 )
[115] DataType operator () const return iterator_->second };
[124] ConstIterator operator-- ();
[186] mapping::Range<ConstTrajectoryIterator> trajectory_ids () const;
[192] mapping::Range<ConstIterator> trajectory (const int trajectory_id) const;
[202] ConstIterator lower_bound (const int trajectory_id, const common::Time time) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/odometry_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/data.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/imu_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/fixed_frame_pose_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/point_cloud.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/landmark_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/sensor.pb.h  ( 90 )
[112] ::google::protobuf::Descriptor descriptor ();
[113] CompressedPointCloud default_instance ();
[168] int point_data_size () const;
[169] void clear_point_data ();
[171] ::google::protobuf::int32 point_data (int index) const;
[172] void set_point_data (int index, ::google::protobuf::int32 value);
[173] void add_point_data (::google::protobuf::int32 value);
[180] void clear_num_points ();
[182] ::google::protobuf::int32 num_points () const;
[183] void set_num_points (::google::protobuf::int32 value);
[283] ::cartographer::transform::proto::Vector4f mutable_point_data (int index);
[291] bool has_origin () const;
[292] void clear_origin ();
[294] ::cartographer::transform::proto::Vector3f origin () const;
[295] ::cartographer::transform::proto::Vector3f mutable_origin ();
[296] ::cartographer::transform::proto::Vector3f release_origin ();
[297] void set_allocated_origin (::cartographer::transform::proto::Vector3f origin);
[300] void clear_timestamp ();
[302] ::google::protobuf::int64 timestamp () const;
[303] void set_timestamp (::google::protobuf::int64 value);
[399] int returns_size () const;
[400] void clear_returns ();
[402] ::cartographer::transform::proto::Vector3f returns (int index) const;
[403] ::cartographer::transform::proto::Vector3f mutable_returns (int index);
[404] ::cartographer::transform::proto::Vector3f add_returns ();
[411] int misses_size () const;
[412] void clear_misses ();
[414] ::cartographer::transform::proto::Vector3f misses (int index) const;
[415] ::cartographer::transform::proto::Vector3f mutable_misses (int index);
[416] ::cartographer::transform::proto::Vector3f add_misses ();
[525] bool has_linear_acceleration () const;
[526] void clear_linear_acceleration ();
[528] ::cartographer::transform::proto::Vector3d linear_acceleration () const;
[529] ::cartographer::transform::proto::Vector3d mutable_linear_acceleration ();
[530] ::cartographer::transform::proto::Vector3d release_linear_acceleration ();
[531] void set_allocated_linear_acceleration (::cartographer::transform::proto::Vector3d linear_acceleration);
[534] bool has_angular_velocity () const;
[535] void clear_angular_velocity ();
[537] ::cartographer::transform::proto::Vector3d angular_velocity () const;
[538] ::cartographer::transform::proto::Vector3d mutable_angular_velocity ();
[539] ::cartographer::transform::proto::Vector3d release_angular_velocity ();
[540] void set_allocated_angular_velocity (::cartographer::transform::proto::Vector3d angular_velocity);
[642] bool has_pose () const;
[643] void clear_pose ();
[645] ::cartographer::transform::proto::Rigid3d pose () const;
[646] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[647] ::cartographer::transform::proto::Rigid3d release_pose ();
[648] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[856] void clear_id ();
[858] ::std::string id () const;
[859] void set_id (const ::std::string value);
[865] ::std::string mutable_id ();
[866] ::std::string release_id ();
[867] void set_allocated_id (::std::string id);
[870] bool has_landmark_to_tracking_transform () const;
[871] void clear_landmark_to_tracking_transform ();
[873] ::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform () const;
[874] ::cartographer::transform::proto::Rigid3d mutable_landmark_to_tracking_transform ();
[875] ::cartographer::transform::proto::Rigid3d release_landmark_to_tracking_transform ();
[876] void set_allocated_landmark_to_tracking_transform (::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform);
[879] void clear_translation_weight ();
[881] double translation_weight () const;
[882] void set_translation_weight (double value);
[885] void clear_rotation_weight ();
[887] double rotation_weight () const;
[888] void set_rotation_weight (double value);
[987] int landmark_observations_size () const;
[988] void clear_landmark_observations ();
[990] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation landmark_observations (int index) const;
[991] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation mutable_landmark_observations (int index);
[992] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation add_landmark_observations ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] AdaptiveVoxelFilterOptions default_instance ();
[146] void clear_max_length ();
[148] float max_length () const;
[149] void set_max_length (float value);
[152] void clear_min_num_points ();
[154] float min_num_points () const;
[155] void set_min_num_points (float value);
[158] void clear_max_range ();
[160] float max_range () const;
[161] void set_max_range (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/register.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/histogram.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/counter.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/family_factory.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/gauge.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FORB.h  ( 6 )
[39] void meanValue (const std::vector<pDescriptor> descriptors, TDescriptor mean);
[47] int distance (const TDescriptor a, const TDescriptor b);
[54] std::string toString (const TDescriptor a);
[61] void fromString (TDescriptor a, const std::string s);
[69] void toMat32F (const std::vector<TDescriptor> descriptors, cv::Mat mat);
[72] void toMat8U (const std::vector<TDescriptor> descriptors, cv::Mat mat);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/TemplatedDatabase.h  ( 12 )
[107] void setVocabulary (const T voc, bool use_di, int di_levels = 0);
[121] void allocate (int nd = 0, int ni = 0);
[131] EntryId add (const std::vector<TDescriptor> features, BowVector bowvec = NULL, FeatureVector fvec = NULL);
[175] void query (const std::vector<TDescriptor> features, QueryResults ret, int max_results = 1, int max_id = -1) const;
[200] void save (const std::string filename) const;
[206] void load (const std::string filename);
[228] void queryL1 (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[232] void queryL2 (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[236] void queryChiSquare (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[240] void queryBhattacharyya (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[244] void queryKL (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[248] void queryDotProduct (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FeatureVector.h  ( 1 )
[42] void addFeature (NodeId id, unsigned int i_feature);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h  ( 21 )
[98] void create  (const std::vector<std::vector<TDescriptor> > training_features);
[138] void transform (const std::vector<TDescriptor> features, BowVector v) const;
[173] NodeId getParentNode (WordId wid, int levelsup) const;
[181] void getWordsFromNode (NodeId nid, std::vector<WordId> words) const;
[199] float getEffectiveLevels () const;
[237] void setScoringType (ScoringType type);
[243] bool loadFromTextFile (const std::string filename);
[249] void saveToTextFile (const std::string filename) const;
[255] bool loadFromBinaryFile (const std::string filename);
[263] void saveToBinaryFile (const std::string filename) const;
[270] void save (const std::string filename) const;
[276] void load (const std::string filename);
[306] int stopWords (double minWeight);
[353] void createScoringObject ();
[362] void getFeatures ( const vector<vector<TDescriptor> > training_features, vector<pDescriptor> features) const;
[398] void initiateClusters (const vector<pDescriptor> descriptors, vector<TDescriptor> clusters) const;
[407] void initiateClustersKMpp (const vector<pDescriptor> descriptors, vector<TDescriptor> clusters) const;
[412] void createWords ();
[420] void setNodeWeights (const vector<vector<TDescriptor> > features);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FBrief.h  ( 5 )
[37] void meanValue (const std::vector<pDescriptor> descriptors, TDescriptor mean);
[45] double distance (const TDescriptor a, const TDescriptor b);
[52] std::string toString (const TDescriptor a);
[59] void fromString (TDescriptor a, const std::string s);
[67] void toMat32F (const std::vector<TDescriptor> descriptors, cv::Mat mat);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/DBoW2.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/BowVector.cpp  ( 4 )
[35] void BowVector::addWeight (WordId id, WordValue v);
[51] void BowVector::addIfNotExist (WordId id, WordValue v);
[63] void BowVector::normalize (LNorm norm_type);
[106] void BowVector::saveM (const std::string filename, size_t W) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FClass.h  ( 5 )
[36] void meanValue (const std::vector<pDescriptor> descriptors, TDescriptor mean) = 0;
[44] double distance (const TDescriptor a, const TDescriptor b);
[51] std::string toString (const TDescriptor a);
[58] void fromString (TDescriptor a, const std::string s);
[66] void toMat32F (const std::vector<TDescriptor> descriptors, cv::Mat mat);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/ScoringObject.h  ( 2 )
[28] double score (const BowVector v, const BowVector w) const = 0;
[36] bool mustNormalize (LNorm norm) const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/QueryResults.h  ( 1 )
[188] void saveM (const std::string filename) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FeatureVector.cpp  ( 1 )
[32] void FeatureVector::addFeature (NodeId id, unsigned int i_feature);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FORB.cpp  ( 7 )
[30] void FORB::meanValue (const std::vector<FORB::pDescriptor> descriptors, FORB::TDescriptor mean);
[42] vector<int> sum (FORB::L 8, 0);
[83] int FORB::distance (const FORB::TDescriptor a, const FORB::TDescriptor b);
[106] std::string FORB::toString (const FORB::TDescriptor a);
[121] void FORB::fromString (FORB::TDescriptor a, const std::string s);
[141] void FORB::toMat32F (const std::vector<TDescriptor> descriptors, cv::Mat mat);
[176] void FORB::toMat8U (const std::vector<TDescriptor> descriptors, cv::Mat mat);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/ScoringObject.cpp  ( 1 )
[24] double L1Scoring::score (const BowVector v1, const BowVector v2) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/BowVector.h  ( 4 )
[77] void addWeight (WordId id, WordValue v);
[84] void addIfNotExist (WordId id, WordValue v);
[90] void normalize (LNorm norm_type);
[104] void saveM (const std::string filename, size_t W) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/Timestamp.h  ( 7 )
[49] bool empty () const;
[54] void setToCurrentTime ();
[81] void setTime (const string stime);
[92] double getFloatTime () const;
[97] string getStringTime () const;
[105] double operator-  (const Timestamp t) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/Random.cpp  ( 6 )
[82] int DUtils::Random::UnrepeatedRandomizer::get ();
[98] void DUtils::Random::UnrepeatedRandomizer::createValues ();
[108] void DUtils::Random::UnrepeatedRandomizer::reset ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/Random.h  ( 8 )
[141] int get ();
[160] void reset ();
[167] void createValues ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/Timestamp.cpp  ( 7 )
[52] bool Timestamp::empty () const;
[56] void Timestamp::setToCurrentTime ();
[73] void Timestamp::setTime (const string stime);
[93] double Timestamp::getFloatTime () const;
[97] string Timestamp::getStringTime () const;
[103] double Timestamp::operator-  (const Timestamp t) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/IO.h  ( 8 )
[37] void saveKeyPoints (const std::string filename, const std::vector<cv::KeyPoint> keys, const std::string nodename = "keys");
[47] void loadKeyPoints (const std::string filename, std::vector<cv::KeyPoint> keys, const std::string nodename = "keys");
[56] void print (const cv::Mat m, const std::string name = "", std::ostream f = std::cout);
[75] void printSize (const cv::Mat m, const std::string name = "", std::ostream f = std::cout);
[84] void printType (const cv::Mat m, const std::string name = "", std::ostream f = std::cout);
[94] void save (const std::string filename, const T c, const std::string nodename = "data");
[104] void load (const std::string filename, T c, const std::string nodename = "data");
[134] cv::FileStorage fs (filename, cv::FileStorage::WRITE);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Types.h  ( 3 )
[32] void vectorize (const cv::Mat V, T r);
[38] std::string type (const cv::Mat m);
[49] void _vectorize (const cv::Mat V, T r);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/DUtilsCV.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/GUI.h  ( 13 )
[97] int showImage (const cv::Mat image, bool autosize = true, tWinHandler hwnd = NULL, int timeout = 0);
[112] int showImageInfo (const cv::Mat image, bool autosize = true, tWinHandler hwnd = NULL);
[119] bool windowExists (const tWinHandler hwnd);
[125] void destroyWindow (const tWinHandler hwnd);
[137] bool showSystemImage (const cv::Mat image, const std::string tmp_file = "tmp.png", const std::string app = "eog");
[195] void attach (const tWinHandler hwnd, const std::vector<int> events = std::vector<int>());
[202] void attachToClicks (const tWinHandler hwnd);
[209] void attachToMotions (const tWinHandler hwnd);
[221] void listen (int event);
[226] void listenToAll ();
[232] void ignore (int event);
[239] bool get (tEvent event);
[258] void callbackHandlerFunction (int event, int x, int y, int flags, void pMouseHandler);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Mat.h  ( 4 )
[29] void removeRows (cv::Mat m, std::vector<unsigned int> rows);
[46] void _removeRows (cv::Mat m, const std::vector<unsigned int> rows);
[58] void _removeRowsContinuous (cv::Mat m, const std::vector<unsigned int> rows);
[67] void _removeRowsNonContinuous (cv::Mat m, const std::vector<unsigned int> rows);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Drawing.h  ( 11 )
[104] void create (int rows, int cols, double minx, double maxx, double miny, double maxy);
[170] void line (double x1, double y1, double x2, double y2, const Style style = Style());
[180] void polyline (const std::vector<T> x, const std::vector<T> y, const Style style = Style());
[193] void setAxes (double minx, double maxx, double miny, double maxy, int margin);
[241] void drawKeyPoints (cv::Mat image, const std::vector<cv::KeyPoint> keypoints, bool colorOctave = false, bool useCartesianAngle = false);
[250] void saveKeyPointImage (const std::string filename, const cv::Mat image, const std::vector<cv::KeyPoint> keypoints);
[265] void drawCorrespondences (cv::Mat image, const cv::Mat im1, const cv::Mat im2, const std::vector<cv::KeyPoint> kp1, const std::vector<cv::KeyPoint> kp2, const std::vector<int> c1, const std::vector<int> c2);
[281] void saveCorrespondenceImage (const std::string filename, const cv::Mat im1, const cv::Mat im2, const std::vector<cv::KeyPoint> kp1, const std::vector<cv::KeyPoint> kp2, const std::vector<int> c1, const std::vector<int> c2);
[294] void drawReferenceSystem (cv::Mat image, const cv::Mat cTo, const cv::Mat A, const cv::Mat K = cv::Mat(), float length = 0.1);
[326] void drawBox (cv::Mat image, const cv::Mat cRo, const cv::Mat cto, float width, float height, const cv::Mat A, const cv::Mat K = cv::Mat(), std::vector<cv::Point2f> box = NULL, const Plot::Style style = Plot::Style('r', 2));
[354] void plot (cv::Mat image, const std::vector<T> x, const std::vector<T> y, int thickness = 1, const cv::Scalar color = cv::Scalar(0), const cv::Scalar bgcolor = cv::Scalar(255,255,255));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Transformations.h  ( 8 )
[27] cv::Mat rotvec (const cv::Mat axis, double theta);
[49] cv::Mat transl (double X, double Y, double Z);
[58] cv::Mat rotx (double theta, double X = 0, double Y = 0, double Z = 0);
[67] cv::Mat roty (double theta, double X = 0, double Y = 0, double Z = 0);
[76] cv::Mat rotz (double theta, double X = 0, double Y = 0, double Z = 0);
[83] cv::Mat inv (const cv::Mat aTb);
[92] cv::Mat composeRt (const cv::Mat R, const cv::Mat t);
[101] void decomposeRt (const cv::Mat T, cv::Mat R, cv::Mat t);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Geometry.h  ( 1 )
[31] double sqDistance (const cv::Mat a, const cv::Mat b);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/BRIEF256.h  ( 2 )
[123] void compute (const cv::Mat image, const std::vector<cv::KeyPoint> points, std::vector<bitset> descriptors, bool treat_image = true) const;
[176] void generateTestPoints ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/DVision.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/BRIEF.h  ( 2 )
[121] void compute (const cv::Mat image, const std::vector<cv::KeyPoint> points, std::vector<bitset> descriptors, bool treat_image = true) const;
[174] void generateTestPoints ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/PLYFile.h  ( 3 )
[39] void readFile (const std::string filename, std::vector<PLYPoint> points);
[46] void saveFile (const std::string filename, const std::vector<PLYPoint> points);
[53] int getNumberOfPoints (const std::string filename);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/BundleCamera.h  ( 6 )
[61] void save (const std::string filename, const std::string comment = "") const;
[67] void load (const std::string filename);
[95] void readFile (const std::string filename, std::vector<Camera> cameras);
[103] void saveFile (const std::string filename, const std::vector<Camera> cameras);
[114] void readFromStream (std::fstream f, int N, std::vector<Camera> cameras);
[122] void saveToStream (std::fstream f, const std::vector<Camera> cameras);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/HSolver.h  ( 4 )
[48] void setImageSize (int cols, int rows);
[68] cv::Mat findHomography (const cv::Mat P1, const cv::Mat P2, double reprojection_error, int min_points = 5, std::vector<uchar> status = NULL, bool computeH = true, double probability = 0.99, int max_its = 500) const;
[83] bool checkHomography (const cv::Mat P1, const cv::Mat P2, double reprojection_error, int min_points = 5, double probability = 0.99, int max_its = 500) const;
[95] cv::Mat _computeH (const cv::Mat Qc1, const cv::Mat Qc2, const std::vector<unsigned int> i_cols) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/Matches.h  ( 4 )
[60] void save (cv::FileStorage fs, const std::vector<int> c1, const std::vector<int> c2);
[69] void load (cv::FileStorage fs, std::vector<int> c1, std::vector<int> c2);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/PatchFile.h  ( 5 )
[48] void readFile (const std::string filename, std::vector<std::vector<int> > visibility, bool use_weak_list = false);
[64] void saveFile (const std::string filename, const std::vector<Patch> patches);
[75] void readVisibilityIndices (std::fstream f, std::vector<std::vector<int> > visibility, int pt_idx);
[82] int parseInt (const std::string s);
[89] int getNumberOfPoints (const std::string filename);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/FSolver.h  ( 5 )
[46] void setImageSize (int cols, int rows);
[66] cv::Mat findFundamentalMat (const cv::Mat P1, const cv::Mat P2, double reprojection_error, int min_points = 9, std::vector<uchar> status = NULL, bool computeF = true, double probability = 0.99, int max_its = 500) const;
[81] bool checkFundamentalMat (const cv::Mat P1, const cv::Mat P2, double reprojection_error, int min_points = 9, double probability = 0.99, int max_its = 500) const;
[90] void normalizePoints (const cv::Mat P, cv::Mat Q) const;
[100] cv::Mat _computeF (const cv::Mat Qc1, const cv::Mat Qc2, const std::vector<unsigned int> i_cols) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/PMVSCamera.h  ( 2 )
[40] void readFile (const std::string filename, Camera camera);
[56] void saveFile (const std::string filename, const Camera cameras);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/ImageFunctions.h  ( 1 )
[42] cv::Mat getPatch (const cv::Mat im, const cv::KeyPoint kp, int final_size = -1, bool rectifyOrientation = true, bool useCartesianAngle = false);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/PixelPointFile.h  ( 2 )
[55] void saveFile (const std::string filename, const std::vector<PixelPoint> points);
[63] void readFile (const std::string filename, std::vector<PixelPoint> points);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/LineFile.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/Timestamp.h  ( 7 )
[48] bool empty () const;
[53] void setToCurrentTime ();
[80] void setTime (const std::string stime);
[91] double getFloatTime () const;
[96] std::string getStringTime () const;
[104] double operator-  (const Timestamp t) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/ConfigFile.h  ( 13 )
[135] T get (const std::string name) const;
[156] T getAnonymous (int n) const;
[164] void put (const std::string name, const T data);
[187] void readContent ();
[192] void writeContent ();
[197] void resolveVariables ();
[205] void resolveVar (std::string value, const std::set<std::string> used);
[273] int ConfigFile::sizeAnonymous () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/FileModes.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/Profiler.h  ( 14 )
[78] void profile (const std::string name = "");
[88] void stopAndScale (double scale, const std::string name = "");
[106] void add (double v, const std::string name = "");
[112] double back (const std::string name = "") const;
[118] void reset (const std::string name = "");
[132] void getEntryNames (std::vector<std::string> names) const;
[150] double getMeanTime (const std::string name = "") const;
[156] double getStdevTime (const std::string name = "") const;
[162] double getMinTime (const std::string name = "") const;
[168] double getMaxTime (const std::string name = "") const;
[174] double getTotalTime (const std::string name = "") const;
[181] void getTime (std::vector<double> time, const std::string name = "") const;
[192] void getStatistics (double mean, double stdev, double min, double max, const std::string name = "") const;
[203] void showStatistics (const std::string name = "", const std::string suffix = "s", double scale = 1., std::ostream out = std::cout) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/FileFunctions.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/Random.h  ( 8 )
[141] int get ();
[160] void reset ();
[167] void createValues ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/BinaryFile.h  ( 12 )
[200] void setEndianness ();
[207] void hton_f (float v, char buf[8]) const;
[214] void hton_d (double d, char buf[8]) const;
[221] float ntoh_f (char buf[8]) const;
[228] double ntoh_d (char buf[8]) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/StringFunctions.h  ( 6 )
[35] void split (const std::string s, std::vector<std::string> tokens, const std::string delims = " \t\n", int max_splits = -1);
[42] void trim (std::string s);
[54] void removeFrom (std::string s, const char c, const std::string escape = "");
[65] void replace (std::string s, const std::vector<std::pair<std::string, std::string> > map);
[81] std::string toString (const T data);
[88] T fromString (const std::string s);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/DebugFunctions.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/DUtils.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/dirent_win.h  ( 3 )
[83] DIR opendir  (const char dirname);
[85] int closedir  (DIR dirp);
[86] void rewinddir (DIR dirp);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/DException.h  ( 1 )
[52] char what () const throw();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/LUT.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/TimeManager.h  ( 13 )
[61] void operator-- ();
[73] void step (double secs);
[92] void set (const Timestamp desired_time, bool moving_backwards = false);
[128] void add (const Timestamp t);
[137] void remove (const Timestamp t, bool decrease_indexes);
[143] void clear ();
[169] iterator begin (float frequency = -1);
[177] iterator beginAfter (double seconds, float frequency = -1);
[184] iterator beginAt (const Timestamp t, float frequency = -1);
[190] Timestamp getFirstTimestamp ();
[196] Timestamp getLastTimestamp ();
[203] void sort ();
[248] bool le (const tEntry a, const tEntry b);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/STL.h  ( 6 )
[36] void removeIndices (std::vector<T> data, const std::vector<unsigned int> indices, bool preserve_order = true);
[71] void print (const std::vector<T> v, const std::string name, std::ostream f = std::cout);
[94] void indexSort (RandomIt first, RandomIt last, std::vector<unsigned int> sorted_indexes, Compare fun);
[122] void _removeIndices (std::vector<T> data, const std::vector<unsigned int> indices, bool preserve_order);
[139] bool operator ()(const unsigned int a, const unsigned int b) const;
[347] void STL::arrange (RandomIt first, RandomIt, const std::vector<unsigned int> indices);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/Math.hpp  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Mat.cpp  ( 3 )
[21] void Mat::removeRows (cv::Mat m, const std::vector<unsigned int> rows);
[57] void Mat::_removeRows (cv::Mat m, const std::vector<unsigned int> rows);
[81] void Mat::_removeRowsNonContinuous (cv::Mat m, const std::vector<unsigned int> rows);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/IO.cpp  ( 6 )
[27] void IO::saveKeyPoints (const std::string filename, const std::vector<cv::KeyPoint> keys, const std::string nodename);
[28] cv::FileStorage fs (filename, cv::FileStorage::WRITE);
[37] void IO::loadKeyPoints (const std::string filename, std::vector<cv::KeyPoint> keys, const std::string nodename);
[46] void IO::print (const cv::Mat m, const std::string name, std::ostream f);
[62] void IO::printSize (const cv::Mat m, const std::string name, std::ostream f);
[74] void IO::printType (const cv::Mat m, const std::string name, std::ostream f);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Geometry.cpp  ( 1 )
[21] double Geometry::sqDistance (const cv::Mat a, const cv::Mat b);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Drawing.cpp  ( 9 )
[25] void Drawing::drawKeyPoints (cv::Mat image, const std::vector<cv::KeyPoint> keypoints, bool colorOctave, bool useCartesianAngle);
[74] void Drawing::saveKeyPointImage (const std::string filename, const cv::Mat image, const std::vector<cv::KeyPoint> keypoints);
[87] void Drawing::saveCorrespondenceImage (const std::string filename, const cv::Mat im1, const cv::Mat im2, const std::vector<cv::KeyPoint> kp1, const std::vector<cv::KeyPoint> kp2, const std::vector<int> c1, const std::vector<int> c2);
[99] void Drawing::drawCorrespondences (cv::Mat image, const cv::Mat img1, const cv::Mat img2, const std::vector<cv::KeyPoint> kp1, const std::vector<cv::KeyPoint> kp2, const std::vector<int> c1, const std::vector<int> c2);
[159] void Drawing::drawReferenceSystem (cv::Mat image, const cv::Mat cTo, const cv::Mat A, const cv::Mat K, float length);
[228] void Drawing::drawBox (cv::Mat image, const cv::Mat cRo, const cv::Mat cto, float width, float height, const cv::Mat A, const cv::Mat K, std::vector<cv::Point2f> _box, const Plot::Style style);
[348] void Drawing::Plot::create (int rows, int cols, double minx, double maxx, double miny, double maxy, int margin);
[387] void Drawing::Plot::setAxes (double minx, double maxx, double miny, double maxy, int margin);
[408] void Drawing::Plot::line (double x1, double y1, double x2, double y2, const Style style);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/GUI.cpp  ( 13 )
[31] int GUI::showImage (const cv::Mat image, bool autosize, GUI::tWinHandler hwnd, int timeout);
[65] int GUI::showImageInfo (const cv::Mat image, bool autosize, tWinHandler _hwnd);
[178] bool GUI::windowExists (const tWinHandler hwnd);
[185] void GUI::destroyWindow (const tWinHandler hwnd);
[193] bool GUI::showSystemImage (const cv::Mat image, const std::string tmp_file, const std::string app);
[220] void GUI::MouseHandler::attach (const tWinHandler hwnd, const std::vector<int> events);
[238] void GUI::MouseHandler::attachToClicks (const tWinHandler hwnd);
[248] void GUI::MouseHandler::attachToMotions (const tWinHandler hwnd);
[258] void GUI::MouseHandler::listen (int event);
[274] void GUI::MouseHandler::listenToAll ();
[295] void GUI::MouseHandler::ignore (int event);
[311] bool GUI::MouseHandler::get (tEvent event);
[326] void GUI::MouseHandler::callbackHandlerFunction (int event, int x, int y, int flags, void pMouseHandler);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Transformations.cpp  ( 8 )
[21] cv::Mat Transformations::rotx (double theta, double X, double Y, double Z);
[35] cv::Mat Transformations::roty (double theta, double X, double Y, double Z);
[49] cv::Mat Transformations::rotz (double theta, double X, double Y, double Z);
[63] cv::Mat Transformations::transl (double X, double Y, double Z);
[74] cv::Mat Transformations::rotvec (const cv::Mat axis, double theta);
[158] cv::Mat Transformations::inv (const cv::Mat aTb);
[190] cv::Mat Transformations::composeRt (const cv::Mat r, const cv::Mat t);
[259] void Transformations::decomposeRt (const cv::Mat T, cv::Mat R, cv::Mat t);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Types.cpp  ( 1 )
[20] std::string Types::type (const cv::Mat m);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/BRIEF.cpp  ( 2 )
[45] void BRIEF::compute (const cv::Mat image, const std::vector<cv::KeyPoint> points, vector<bitset> descriptors, bool treat_image) const;
[113] void BRIEF::generateTestPoints ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/Matches.cpp  ( 5 )
[26] cv::FileStorage fs (filename, cv::FileStorage::WRITE);
[34] void DVision::Matches::save (cv::FileStorage fs, const std::vector<int> c0, const std::vector<int> c1);
[79] void DVision::Matches::load (cv::FileStorage fs, std::vector<int> c0, std::vector<int> c1);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/BundleCamera.cpp  ( 6 )
[26] void CameraFile::Camera::save (const std::string filename, const std::string comment) const;
[48] void CameraFile::Camera::load (const std::string filename);
[160] void CameraFile::readFile (const std::string filename, std::vector<Camera> cameras);
[201] void CameraFile::readFromStream (std::fstream f, int N, std::vector<Camera> cameras);
[213] void CameraFile::saveFile (const std::string filename, const std::vector<Camera> cameras);
[229] void CameraFile::saveToStream (std::fstream f, const std::vector<Camera> cameras);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/PMVSCamera.cpp  ( 2 )
[27] void CameraFile::readFile (const std::string filename, Camera cameras);
[65] void CameraFile::saveFile (const std::string filename, const Camera cameras);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/PatchFile.cpp  ( 5 )
[25] void PatchFile::readFile (const std::string filename, std::vector<Patch> patches);
[84] void PatchFile::saveFile (const std::string filename, const std::vector<Patch> patches);
[172] void PatchFile::readVisibilityIndices (std::fstream f, std::vector<std::vector<int> > visibility, int pt_idx);
[199] int PatchFile::parseInt (const std::string s);
[209] int PatchFile::getNumberOfPoints (const std::string filename);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/PLYFile.cpp  ( 3 )
[24] void PLYFile::readFile (const std::string filename, std::vector<PLYPoint> points);
[68] void PLYFile::saveFile (const std::string filename, const std::vector<PLYPoint> points);
[109] int PLYFile::getNumberOfPoints (const std::string filename);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/FSolver.cpp  ( 6 )
[42] void FSolver::setImageSize (int cols, int rows);
[58] bool FSolver::checkFundamentalMat (const cv::Mat P1, const cv::Mat P2, double reprojection_error, int min_points, double p, int max_its) const;
[69] cv::Mat FSolver::findFundamentalMat (const cv::Mat P1, const cv::Mat P2, double reprojection_error, int min_points, std::vector<uchar> _status, bool compute_F, double p, int MAX_ITS) const;
[232] void FSolver::normalizePoints (const cv::Mat P, cv::Mat Q) const;
[307] cv::Mat FSolver::_computeF (const cv::Mat Qc1, const cv::Mat Qc2, const std::vector<unsigned int> i_cols) const;
[344] cv::SVD svd (M, cv::SVD::MODIFY_A | cv::SVD::FULL_UV);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/PixelPointFile.cpp  ( 2 )
[23] void PixelPointFile::saveFile (const std::string filename, const std::vector<PixelPoint> points);
[55] void PixelPointFile::readFile (const std::string filename, std::vector<PixelPoint> points);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/HSolver.cpp  ( 5 )
[43] bool HSolver::checkHomography (const cv::Mat P1, const cv::Mat P2, double reprojection_error, int min_points, double p, int max_its) const;
[54] cv::Mat HSolver::findHomography (const cv::Mat P1, const cv::Mat P2, double reprojection_error, int min_points, std::vector<uchar> _status, bool compute_H, double p, int MAX_ITS) const;
[215] cv::Mat HSolver::_computeH (const cv::Mat Qc1, const cv::Mat Qc2, const std::vector<unsigned int> i_cols) const;
[263] cv::SVD svd (M, cv::SVD::MODIFY_A | cv::SVD::FULL_UV);
[277] void HSolver::setImageSize (int cols, int rows);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/ImageFunctions.cpp  ( 1 )
[22] cv::Mat ImageFunctions::getPatch (const cv::Mat im, const cv::KeyPoint kp, int final_size, bool rectifyOrientation, bool useCartesianAngle);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/BinaryFile.cpp  ( 12 )
[245] void BinaryFile::hton_f (float v, char buf[8]) const;
[263] float BinaryFile::ntoh_f (char buf[8]) const;
[284] void BinaryFile::hton_d (double v, char buf[8]) const;
[310] double BinaryFile::ntoh_d (char buf[8]) const;
[339] void BinaryFile::setEndianness ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/Random.cpp  ( 6 )
[82] int DUtils::Random::UnrepeatedRandomizer::get ();
[98] void DUtils::Random::UnrepeatedRandomizer::createValues ();
[108] void DUtils::Random::UnrepeatedRandomizer::reset ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/Profiler.cpp  ( 14 )
[29] void Profiler::profile (const std::string name);
[40] void Profiler::stopAndScale (double scale, const std::string name);
[66] void Profiler::add (double v, const std::string name);
[83] double Profiler::getMeanTime (const std::string name) const;
[97] double Profiler::getStdevTime (const std::string name) const;
[111] double Profiler::getMinTime (const std::string name) const;
[125] double Profiler::getMaxTime (const std::string name) const;
[139] double Profiler::getTotalTime (const std::string name) const;
[159] void Profiler::getStatistics (double mean, double stdev, double min, double max, const std::string name) const;
[190] void Profiler::showStatistics (const std::string name, const std::string suffix, double scale, ostream out) const;
[206] void Profiler::getTime (std::vector<double> time, const std::string name) const;
[220] double Profiler::back (const std::string name) const;
[234] void Profiler::reset (const std::string name);
[247] void Profiler::getEntryNames (std::vector<std::string> names) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/LineFile.cpp  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/TimeManager.cpp  ( 13 )
[34] void TimeManager::add (const Timestamp t);
[58] void TimeManager::clear ();
[66] bool TimeManager::le (const tEntry a, const tEntry b);
[73] void TimeManager::remove (const Timestamp t, bool decrease_indexes);
[119] TimeManager::iterator TimeManager::begin (float frequency);
[142] TimeManager::iterator TimeManager::beginAt (const Timestamp t, float frequency);
[161] TimeManager::iterator TimeManager::beginAfter (double seconds, float frequency);
[169] Timestamp TimeManager::getFirstTimestamp ();
[177] Timestamp TimeManager::getLastTimestamp ();
[185] void TimeManager::sort ();
[213] void TimeManager::iterator::step (double secs);
[221] void TimeManager::iterator::operator-- ();
[262] void TimeManager::iterator::set (const Timestamp desired_time, bool moving_backwards);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/Timestamp.cpp  ( 7 )
[52] bool Timestamp::empty () const;
[56] void Timestamp::setToCurrentTime ();
[73] void Timestamp::setTime (const string stime);
[93] double Timestamp::getFloatTime () const;
[97] string Timestamp::getStringTime () const;
[103] double Timestamp::operator-  (const Timestamp t) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/FileFunctions.cpp  ( 9 )
[59] std::f stream f(filename, ios::in);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/DebugFunctions.cpp  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/StringFunctions.cpp  ( 4 )
[21] void StringFunctions::split (const std::string s, std::vector<std::string> tokens, const std::string delims, int max_splits);
[60] void StringFunctions::removeFrom (std::string s, const char c, const std::string escape);
[98] void StringFunctions::trim (std::string s);
[118] void StringFunctions::replace (std::string s, const std::vector<std::pair<std::string, std::string> > map);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/LUT.cpp  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/ConfigFile.cpp  ( 9 )
[104] void ConfigFile::writeContent ();
[117] void ConfigFile::readContent ();
[169] void ConfigFile::resolveVariables ();
[184] void ConfigFile::resolveVar (std::string value, const std::set<string> used);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetGridMapSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/CorrectSemanticMapSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/InitSlamSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetRampPointSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/SetMapOperationSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetPoseSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/StartSlamSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/PauseSlamSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetCurrentPoseSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/StopSlamSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetHighReflectionPointSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/SetRelocalizationSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/WakeupSlamSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/DeInitSlamSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/StartSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/StopSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/GetPoseSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/DeInitSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/InitSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/ResumeNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/StopNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/SelectModeNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/InitNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/CancelNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/PauseNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/DeInitNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/TaskNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/EmergencyPauseNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/StartNavSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/GridMap.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerPauseSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerInitSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerDeInitSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerResultSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerStartSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerStopSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCInitSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCResultSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCDeInitSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCPauseSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCStartSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCStopSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/DeInitDepthSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/RestartDepthSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/StartDepthSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/StopDepthSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/InitDepthSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/PauseDepthSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImuFreqSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/WifiConfigSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorStop.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImseeParamSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorServiceTypes.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/BluetoothSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImseeAutoLightSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImseeIrSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/MemorySrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/AudioSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorInit.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImseeTxSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorControl.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/AutoChargeSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/LaserCtrl.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SysTimeSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SetLedSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorDeinit.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/CpuTemperatureSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorStart.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SelfTest.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/DeInitTopoSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/CreateTopoSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/SetTopoMapSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/RoutePath.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/InitTopoSrv.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/GridMap.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/GetPathViaUUID.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/SaveMap.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/Stop.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/Start.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/Init.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/LoadMap.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/DeInit.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/SlamResult.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/SlamInitInfo.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/OccupancyGrid.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/EndInfo.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/StartInfo.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/ElevatorInfo.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/SlamState.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/SlamErrorInfo.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/recurrence/Result.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/recurrence/InitInfo.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/server/state/Result.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/server/state/ResultTest.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/nav/TaskStatus.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/nav/SpeedControl.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/nav/GetWorkLengthNTime.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/common/error/ErrorCode.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/common/error/ErrorMessage.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/common/base/Time.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/common/base/Data.h  ( 3 )
[62] std::uint16_t size () const;
[67] T data () const;
[72] T raw () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/marker/MarkerResult.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/depth/DepthPointCloud.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/depth/DepthMatrix.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/depth/CalibrationImage.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/DropEvent.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/MachineMode.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/PointCloud2.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/BumperEvent.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/TofGrayImg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/TofDepthImg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/UltraData.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/TofDepthData.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/CliffEvent.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/SensorTopicTypes.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/BluetoothMsg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/ImgMsg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/TofPointCloud.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/WifiStatus.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/WallSensorMsg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/PowerBoardData.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/WheelSpeedMsg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/LightFlowMsg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/ChargePosition.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/LaserScan.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/EncoderMsg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/ImuMsg.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/hmi/generated/request_generated.h  ( 240 )
[306] bool state () const;
[320] void add_state (bool state);
[352] int32_t pram () const;
[370] void add_pram (int32_t pram);
[400] RBN100::FSenceInfo sence_info () const;
[415] void add_sence_info (flatbuffers::Offset<RBN100::FSenceInfo> sence_info);
[443] RBN100::FMapInfo map_info () const;
[458] void add_map_info (flatbuffers::Offset<RBN100::FMapInfo> map_info);
[571] RBN100::FPoseNodeInfo pose_info () const;
[586] void add_pose_info (flatbuffers::Offset<RBN100::FPoseNodeInfo> pose_info);
[614] RBN100::FStartNodeInfo start_info () const;
[629] void add_start_info (flatbuffers::Offset<RBN100::FStartNodeInfo> start_info);
[657] RBN100::FStandByNodeInfo standby_info () const;
[672] void add_standby_info (flatbuffers::Offset<RBN100::FStandByNodeInfo> standby_info);
[700] RBN100::FPassNodeInfo pass_info () const;
[715] void add_pass_info (flatbuffers::Offset<RBN100::FPassNodeInfo> pass_info);
[743] RBN100::FJMRNodeInfo jmr_info () const;
[758] void add_jmr_info (flatbuffers::Offset<RBN100::FJMRNodeInfo> jmr_info);
[802] flatbuffers::String uuid () const;
[805] int64_t ct_time () const;
[808] int64_t first_upload_tm () const;
[811] int64_t modify_tm () const;
[814] flatbuffers::String test_ver () const;
[817] flatbuffers::String operate_ver () const;
[820] flatbuffers::String core_min_ver () const;
[823] flatbuffers::String proj_min_ver () const;
[826] flatbuffers::String sence_name () const;
[829] flatbuffers::String addr () const;
[832] flatbuffers::String ct_user () const;
[835] flatbuffers::String proj_id () const;
[838] flatbuffers::String proj_name () const;
[841] flatbuffers::String area_id () const;
[844] flatbuffers::String area_name () const;
[847] flatbuffers::String rely_db_path () const;
[850] flatbuffers::String rely_file_path () const;
[894] void add_uuid (flatbuffers::Offset<flatbuffers::String> uuid);
[897] void add_ct_time (int64_t ct_time);
[900] void add_first_upload_tm (int64_t first_upload_tm);
[903] void add_modify_tm (int64_t modify_tm);
[906] void add_test_ver (flatbuffers::Offset<flatbuffers::String> test_ver);
[909] void add_operate_ver (flatbuffers::Offset<flatbuffers::String> operate_ver);
[912] void add_core_min_ver (flatbuffers::Offset<flatbuffers::String> core_min_ver);
[915] void add_proj_min_ver (flatbuffers::Offset<flatbuffers::String> proj_min_ver);
[918] void add_sence_name (flatbuffers::Offset<flatbuffers::String> sence_name);
[921] void add_addr (flatbuffers::Offset<flatbuffers::String> addr);
[924] void add_ct_user (flatbuffers::Offset<flatbuffers::String> ct_user);
[927] void add_proj_id (flatbuffers::Offset<flatbuffers::String> proj_id);
[930] void add_proj_name (flatbuffers::Offset<flatbuffers::String> proj_name);
[933] void add_area_id (flatbuffers::Offset<flatbuffers::String> area_id);
[936] void add_area_name (flatbuffers::Offset<flatbuffers::String> area_name);
[939] void add_rely_db_path (flatbuffers::Offset<flatbuffers::String> rely_db_path);
[942] void add_rely_file_path (flatbuffers::Offset<flatbuffers::String> rely_file_path);
[1091] flatbuffers::String proj () const;
[1094] flatbuffers::String name1 () const;
[1097] flatbuffers::String name2 () const;
[1100] flatbuffers::String name3 () const;
[1103] flatbuffers::String env_map_ver () const;
[1106] flatbuffers::String soft_core () const;
[1109] float resolution () const;
[1112] flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>> area_outline () const;
[1121] flatbuffers::String ct_dev () const;
[1130] flatbuffers::String modify_user () const;
[1133] flatbuffers::String modify_dev () const;
[1136] flatbuffers::String slam_env_mappath () const;
[1139] flatbuffers::String slam_reflex_mappath () const;
[1142] flatbuffers::String slam_trans_mappath () const;
[1145] flatbuffers::String slam_obs_base_mappath () const;
[1148] float ui_map_angle () const;
[1151] flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>> ui_crop_range () const;
[1154] float ui_display_scale () const;
[1157] RBN100::FPoseTransParm ui_parm () const;
[1160] flatbuffers::String ui_env_thumb_path () const;
[1163] flatbuffers::String ui_env_base_path () const;
[1166] flatbuffers::String nav_obs_path () const;
[1169] flatbuffers::String nav_run_mapconfig_path () const;
[1172] flatbuffers::String nav_virwall_auto_path () const;
[1175] flatbuffers::String nav_virwall_path () const;
[1178] flatbuffers::String nav_run_track_path () const;
[1181] flatbuffers::String per_senmatic_map_path () const;
[1184] flatbuffers::String slam_3d_env_path () const;
[1262] void add_proj (flatbuffers::Offset<flatbuffers::String> proj);
[1265] void add_name1 (flatbuffers::Offset<flatbuffers::String> name1);
[1268] void add_name2 (flatbuffers::Offset<flatbuffers::String> name2);
[1271] void add_name3 (flatbuffers::Offset<flatbuffers::String> name3);
[1274] void add_env_map_ver (flatbuffers::Offset<flatbuffers::String> env_map_ver);
[1277] void add_soft_core (flatbuffers::Offset<flatbuffers::String> soft_core);
[1280] void add_resolution (float resolution);
[1283] void add_area_outline (flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> area_outline);
[1292] void add_ct_dev (flatbuffers::Offset<flatbuffers::String> ct_dev);
[1301] void add_modify_user (flatbuffers::Offset<flatbuffers::String> modify_user);
[1304] void add_modify_dev (flatbuffers::Offset<flatbuffers::String> modify_dev);
[1307] void add_slam_env_mappath (flatbuffers::Offset<flatbuffers::String> slam_env_mappath);
[1310] void add_slam_reflex_mappath (flatbuffers::Offset<flatbuffers::String> slam_reflex_mappath);
[1313] void add_slam_trans_mappath (flatbuffers::Offset<flatbuffers::String> slam_trans_mappath);
[1316] void add_slam_obs_base_mappath (flatbuffers::Offset<flatbuffers::String> slam_obs_base_mappath);
[1319] void add_ui_map_angle (float ui_map_angle);
[1322] void add_ui_crop_range (flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> ui_crop_range);
[1325] void add_ui_display_scale (float ui_display_scale);
[1328] void add_ui_parm (flatbuffers::Offset<RBN100::FPoseTransParm> ui_parm);
[1331] void add_ui_env_thumb_path (flatbuffers::Offset<flatbuffers::String> ui_env_thumb_path);
[1334] void add_ui_env_base_path (flatbuffers::Offset<flatbuffers::String> ui_env_base_path);
[1337] void add_nav_obs_path (flatbuffers::Offset<flatbuffers::String> nav_obs_path);
[1340] void add_nav_run_mapconfig_path (flatbuffers::Offset<flatbuffers::String> nav_run_mapconfig_path);
[1343] void add_nav_virwall_auto_path (flatbuffers::Offset<flatbuffers::String> nav_virwall_auto_path);
[1346] void add_nav_virwall_path (flatbuffers::Offset<flatbuffers::String> nav_virwall_path);
[1349] void add_nav_run_track_path (flatbuffers::Offset<flatbuffers::String> nav_run_track_path);
[1352] void add_per_senmatic_map_path (flatbuffers::Offset<flatbuffers::String> per_senmatic_map_path);
[1355] void add_slam_3d_env_path (flatbuffers::Offset<flatbuffers::String> slam_3d_env_path);
[1589] int32_t show_level () const;
[1592] flatbuffers::String by_proj () const;
[1595] int32_t node_type () const;
[1598] flatbuffers::String sence () const;
[1601] flatbuffers::String envmap () const;
[1610] int64_t ct_tm () const;
[1619] int32_t versatility () const;
[1622] flatbuffers::String soft_ver () const;
[1625] flatbuffers::String proj_soft_ver () const;
[1628] RBN100::FPoint center () const;
[1631] float angle () const;
[1634] float node_area () const;
[1637] float node_angle () const;
[1640] bool is_release () const;
[1643] int32_t timeout () const;
[1646] bool is_coordinate () const;
[1649] RBN100::FPoseTransParm parm () const;
[1652] bool is_tf_return () const;
[1655] bool is_ntf_return () const;
[1658] bool is_all_return () const;
[1661] flatbuffers::String link_node () const;
[1664] int32_t tagID () const;
[1667] float action_x () const;
[1670] float action_y () const;
[1673] float action_z () const;
[1745] void add_show_level (int32_t show_level);
[1748] void add_by_proj (flatbuffers::Offset<flatbuffers::String> by_proj);
[1751] void add_node_type (int32_t node_type);
[1754] void add_sence (flatbuffers::Offset<flatbuffers::String> sence);
[1757] void add_envmap (flatbuffers::Offset<flatbuffers::String> envmap);
[1766] void add_ct_tm (int64_t ct_tm);
[1775] void add_versatility (int32_t versatility);
[1778] void add_soft_ver (flatbuffers::Offset<flatbuffers::String> soft_ver);
[1781] void add_proj_soft_ver (flatbuffers::Offset<flatbuffers::String> proj_soft_ver);
[1784] void add_center (flatbuffers::Offset<RBN100::FPoint> center);
[1787] void add_angle (float angle);
[1790] void add_node_area (float node_area);
[1793] void add_node_angle (float node_angle);
[1796] void add_is_release (bool is_release);
[1799] void add_timeout (int32_t timeout);
[1802] void add_is_coordinate (bool is_coordinate);
[1805] void add_parm (flatbuffers::Offset<RBN100::FPoseTransParm> parm);
[1808] void add_is_tf_return (bool is_tf_return);
[1811] void add_is_ntf_return (bool is_ntf_return);
[1814] void add_is_all_return (bool is_all_return);
[1817] void add_link_node (flatbuffers::Offset<flatbuffers::String> link_node);
[1820] void add_tagID (int32_t tagID);
[1823] void add_action_x (float action_x);
[1826] void add_action_y (float action_y);
[1829] void add_action_z (float action_z);
[2121] flatbuffers::String action_uuid () const;
[2266] void add_action_uuid (flatbuffers::Offset<flatbuffers::String> action_uuid);
[3696] int32_t floor () const;
[3699] flatbuffers::String name () const;
[3715] void add_floor (int32_t floor);
[3718] void add_name (flatbuffers::Offset<flatbuffers::String> name);
[3780] int32_t communication_mode () const;
[3783] flatbuffers::String plugin () const;
[3786] int32_t communication_list () const;
[3789] int32_t distance () const;
[3792] int32_t count () const;
[3795] flatbuffers::Vector<flatbuffers::Offset<RBN100::FFloorIndex>> floorinfo () const;
[3837] void add_communication_mode (int32_t communication_mode);
[3840] void add_plugin (flatbuffers::Offset<flatbuffers::String> plugin);
[3843] void add_communication_list (int32_t communication_list);
[3846] void add_distance (int32_t distance);
[3849] void add_count (int32_t count);
[3852] void add_floorinfo (flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FFloorIndex>>> floorinfo);
[3930] RBN100::FElevatorInfo elevator_info () const;
[3945] void add_elevator_info (flatbuffers::Offset<RBN100::FElevatorInfo> elevator_info);
[4399] RBN100::FElevatorOutNodeInfo ele_out_info () const;
[4414] void add_ele_out_info (flatbuffers::Offset<RBN100::FElevatorOutNodeInfo> ele_out_info);
[4868] RBN100::FJMRNodeInfo ele_transf_info () const;
[4883] void add_ele_transf_info (flatbuffers::Offset<RBN100::FJMRNodeInfo> ele_transf_info);
[4928] flatbuffers::String node_uuid () const;
[4931] flatbuffers::String sence_uuid () const;
[4934] flatbuffers::String id () const;
[4943] float l_x () const;
[4946] float l_y () const;
[4949] float l_z () const;
[4952] int32_t dis_pre () const;
[4955] int32_t angle_pre () const;
[5005] void add_node_uuid (flatbuffers::Offset<flatbuffers::String> node_uuid);
[5008] void add_sence_uuid (flatbuffers::Offset<flatbuffers::String> sence_uuid);
[5011] void add_id (flatbuffers::Offset<flatbuffers::String> id);
[5020] void add_l_x (float l_x);
[5023] void add_l_y (float l_y);
[5026] void add_l_z (float l_z);
[5029] void add_dis_pre (int32_t dis_pre);
[5032] void add_angle_pre (int32_t angle_pre);
[5143] RBN100::FActionStandBy action_standby () const;
[5158] void add_action_standby (flatbuffers::Offset<RBN100::FActionStandBy> action_standby);
[5418] RBN100::FActionJMR action_jmr () const;
[5433] void add_action_jmr (flatbuffers::Offset<RBN100::FActionJMR> action_jmr);
[5565] RBN100::FActionStart action_start () const;
[5580] void add_action_start (flatbuffers::Offset<RBN100::FActionStart> action_start);
[5714] RBN100::FActionElevatorOut action_elevator_out () const;
[5729] void add_action_elevator_out (flatbuffers::Offset<RBN100::FActionElevatorOut> action_elevator_out);
[5863] RBN100::FActionElevatorIn action_elevator_in () const;
[5878] void add_action_elevator_in (flatbuffers::Offset<RBN100::FActionElevatorIn> action_elevator_in);
[6138] RBN100::FActionElevatorTransf action_ele_transf () const;
[6153] void add_action_ele_transf (flatbuffers::Offset<RBN100::FActionElevatorTransf> action_ele_transf);
[6183] RBN100::FRequestType type () const;
[6186] RBN100::FRequestDataField message_type () const;
[6189] void message () const;
[6193] RBN100::FRequestVideo message_as_FRequestVideo () const;
[6196] RBN100::FRequestScanQR message_as_FRequestScanQR () const;
[6199] RBN100::FRequestCreateSence message_as_FRequestCreateSence () const;
[6202] RBN100::FRequestCreateMap_Tag message_as_FRequestCreateMap_Tag () const;
[6205] RBN100::FRequestCreateMap_Any message_as_FRequestCreateMap_Any () const;
[6208] RBN100::FRequestCreateMap_Stop message_as_FRequestCreateMap_Stop () const;
[6211] RBN100::FRequestCreatePoseNode message_as_FRequestCreatePoseNode () const;
[6214] RBN100::FRequestCreateStartNode message_as_FRequestCreateStartNode () const;
[6217] RBN100::FRequestCreateStandByNode message_as_FRequestCreateStandByNode () const;
[6220] RBN100::FRequestCreatePassNode message_as_FRequestCreatePassNode () const;
[6223] RBN100::FRequestCreateJMRNode message_as_FRequestCreateJMRNode () const;
[6226] RBN100::FRequestElevatorInfoInput message_as_FRequestElevatorInfoInput () const;
[6229] RBN100::FRequestCreateElevatorOutNode message_as_FRequestCreateElevatorOutNode () const;
[6232] RBN100::FRequestCreateElevatorTransformNode message_as_FRequestCreateElevatorTransformNode () const;
[6235] RBN100::FRequestCreateActionStandBy message_as_FRequestCreateActionStandBy () const;
[6238] RBN100::FRequestCreateActionJMR message_as_FRequestCreateActionJMR () const;
[6241] RBN100::FRequestCreateActionStart message_as_FRequestCreateActionStart () const;
[6244] RBN100::FRequestCreateActionElevatorOut message_as_FRequestCreateActionElevatorOut () const;
[6247] RBN100::FRequestCreateActionElevatorIn message_as_FRequestCreateActionElevatorIn () const;
[6250] RBN100::FRequestCreateActionElevatorTransf message_as_FRequestCreateActionElevatorTransf () const;
[6347] void add_type (RBN100::FRequestType type);
[6350] void add_message_type (RBN100::FRequestDataField message_type);
[6353] void add_message (flatbuffers::Offset<void> message);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/hmi/generated/response_generated.h  ( 16 )
[87] int32_t status () const;
[90] RBN100::FRequestType type () const;
[93] RBN100::FResponseDataField message_type () const;
[96] void message () const;
[100] RBN100::FRequestVideo message_as_FRequestVideo () const;
[103] RBN100::FRequestScanQR message_as_FRequestScanQR () const;
[106] RBN100::FRequestCreateSence message_as_FRequestCreateSence () const;
[109] RBN100::FRequestCreateMap_Tag message_as_FRequestCreateMap_Tag () const;
[143] void add_status (int32_t status);
[146] void add_type (RBN100::FRequestType type);
[149] void add_message_type (RBN100::FResponseDataField message_type);
[152] void add_message (flatbuffers::Offset<void> message);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/hmi/generated/public_generated.h  ( 14 )
[257] float x () const;
[260] float y () const;
[275] void add_x (float x);
[278] void add_y (float y);
[319] float q_w () const;
[322] float q_x () const;
[325] float q_y () const;
[328] float q_z () const;
[353] void add_q_w (float q_w);
[356] void add_q_x (float q_x);
[359] void add_q_y (float q_y);
[362] void add_q_z (float q_z);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/hmi/generated/report_generated.h  ( 40 )
[132] double time () const;
[135] flatbuffers::Vector<uint8_t> image () const;
[151] void add_time (double time);
[154] void add_image (flatbuffers::Offset<flatbuffers::Vector<uint8_t>> image);
[202] int32_t state () const;
[205] int32_t tagID () const;
[208] bool tagIDExist () const;
[211] RBN100::FPoint lb () const;
[214] RBN100::FPoint rb () const;
[217] RBN100::FPoint rt () const;
[220] RBN100::FPoint lt () const;
[223] RBN100::FPoint ct () const;
[249] void add_state (int32_t state);
[252] void add_tagID (int32_t tagID);
[255] void add_tagIDExist (bool tagIDExist);
[258] void add_lb (flatbuffers::Offset<RBN100::FPoint> lb);
[261] void add_rb (flatbuffers::Offset<RBN100::FPoint> rb);
[264] void add_rt (flatbuffers::Offset<RBN100::FPoint> rt);
[267] void add_lt (flatbuffers::Offset<RBN100::FPoint> lt);
[270] void add_ct (flatbuffers::Offset<RBN100::FPoint> ct);
[314] int32_t x () const;
[317] int32_t y () const;
[336] void add_x (int32_t x);
[339] void add_y (int32_t y);
[374] flatbuffers::Vector<flatbuffers::Offset<RBN100::FGrid>> map () const;
[390] void add_map (flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FGrid>>> map);
[471] RBN100::FReportType type () const;
[474] RBN100::FReportDataField data_type () const;
[477] void data () const;
[481] RBN100::FReportScanQR data_as_FReportScanQR () const;
[484] RBN100::FReportImage data_as_FReportImage () const;
[487] RBN100::FReportNeedCreateMap data_as_FReportNeedCreateMap () const;
[490] RBN100::FReprotGridMap data_as_FReprotGridMap () const;
[523] void add_type (RBN100::FReportType type);
[526] void add_data_type (RBN100::FReportDataField data_type);
[529] void add_data (flatbuffers::Offset<void> data);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/perception/Object.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/perception/SenmaticMap.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/local_slam_result_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/submaps_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/probability_values.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_kalman.h  ( 30 )
[56] void kalmanInit ();
[57] void newkalmaninit ();
[70] void sifFusePosKf (Eigen::Vector3d observation_pos);
[71] void sifFuseQuatKf (Eigen::Quaterniond observation_qua);
[72] void newFusePosKf (Eigen::Vector3d observation_pos,Eigen::Quaterniond observation_qua);
[73] void newFuseQuatKf (Eigen::Quaterniond observation_qua);
[74] void estimatePose (double dt_slam_odm, double dt_odm);
[75] void reset_q_parameter ();
[77] void kfCovUpdata (double dtime);
[78] void newkfCovUpdata (double dtime);
[79] void sifReviseNavKf (int fuse_type);
[80] void newReviseNavKf (int fuse_type);
[81] void sifReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
[82] void newReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
[84] void stateMove (Eigen::Vector3d observation_car_vel);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/id_test.cc  ( 2 )
[40] common::Time time () const return time_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_builder_interface.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/detect_floors.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_node.h  ( 3 )
[70] common::Time time () const return constant_data->time };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/id.h  ( 23 )
[117] IteratorType begin () const return begin_ };
[118] IteratorType end () const return end_ };
[171] IdDataReference operator () const;
[189] ConstIterator operator-- ();
[276] ConstIterator find (const IdType id) const;
[312] Dat aType at(const IdType id) const;
[336] size _t size() const;
[345] Range<ConstIterator> trajectory (const int trajectory_id) const;
[351] Range<ConstTrajectoryIterator> trajectory_ids () const;
[362] bool empty () const return begin() == end() };
[369] ConstIterator lower_bound (const int trajectory_id, const common::Time time) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_trimmer.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/probability_values.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_node_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/submaps.h  ( 9 )
[78] transform::Rigid3d local_pose () const return local_pose_ };
[81] int num_range_data () const return num_range_data_ };
[82] void set_num_range_data (const int num_range_data);
[87] bool finished () const return finished_ };
[88] void set_finished (bool finished) finished_ = finished };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph.h  ( 22 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/Ramp.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_kalman.cc  ( 29 )
[71] void ImuKalman::kalmanInit ();
[96] void ImuKalman::newkalmaninit ();
[119] void computeAngleAll (Eigen::Quaterniond qua_odm,float oula_angle[3],int type_sense);
[317] void ImuKalman::estimatePose (double dt_slam_odm, double dt_odm);
[333] void ImuKalman::newFuseQuatKf (Eigen::Quaterniond observation_qua);
[390] void ImuKalman::newFusePosKf (Eigen::Vector3d observation_pos,Eigen::Quaterniond observation_qua);
[499] void ImuKalman::reset_q_parameter ();
[506] void ImuKalman::newReviseNavKf (int fuse_type);
[650] void ImuKalman::stateMove (Eigen::Vector3d observation_car_vel);
[793] void ImuKalman::newkfCovUpdata (double dtime);
[829] void ImuKalman::kfCovUpdata (double dtime);
[994] void ImuKalman::sifFuseQuatKf (Eigen::Quaterniond observation_qua);
[1055] void ImuKalman::sifFusePosKf (Eigen::Vector3d observation_pos);
[1108] void ImuKalman::sifReviseNavKf (int fuse_type);
[1170] void ImuKalman::newReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
[1187] void ImuKalman::sifReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/grid_interface.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/range_data_inserter_interface.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_tracker.h  ( 5 )
[49] common::Time time () const return time_ };
[53] Eigen::Quaterniond orientation () const return orientation_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/map_builder_interface.h  ( 12 )
[93] int num_trajectory_builders () const = 0;
[95] mapping::PoseGraphInterface pose_graph () = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_interface.h  ( 10 )
[151] std::vector<Constraint> constraints () const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/range_data_inserter_interface.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_builder_interface.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/probability_values_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/detect_floors.cc  ( 10 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_tracker.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator_test.cc  ( 1 )
[164] Eigen::Quaterniond expected_rotation ( Eigen::AngleAxisd(kGravityTimeConstant angular_velocity_yaw.norm(), angular_velocity_yaw.normalized()));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/Ramp.h  ( 11 )
[43] transform::Rigid2d local_pose1 () const return local_pose1_ };
[44] transform::Rigid2d local_pose2 () const return local_pose2_ };
[45] transform::Rigid2d local_pose3 () const return local_pose3_ };
[46] transform::Rigid2d local_pose4 () const return local_pose4_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc  ( 28 )
[405] bool PoseExtrapolator::judge_time_frame_vel (common::Time time);
[416] bool PoseExtrapolator::judge_time_imu (common::Time time);
[450] transform::Rigid3d PoseExtrapolator::ExtrapolatePose_frame_vel (const common::Time time);
[826] Eigen::Vector3d PoseExtrapolator::ExtrapolateTranslation_frame_vel (common::Time time);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/map_builder_test.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/map_builder.cc  ( 11 )
[382] std::ofstream out (common::Setting::save_path + "/groundtruth_realtime.txt");
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_trimmer_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.h  ( 27 )
[93] transform::Rigid3d ExtrapolatePose_frame_vel (common::Time time);
[96] bool judge_time_frame_vel (common::Time time);
[97] bool judge_time_imu (common::Time time);
[141] Eigen::Vector3d ExtrapolateTranslation_frame_vel (common::Time time);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/map_builder.h  ( 13 )
[87] mapping::PoseGraphInterface pose_graph () override;
[91] int num_trajectory_builders () const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_trimmer.h  ( 6 )
[32] int num_submaps (int trajectory_id) const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_tracker_test.cc  ( 3 )
[63] Eigen::Quaterniond expected_orientation (Eigen::AngleAxisd( kDuration angular_velocity_.norm(), angular_velocity_.normalized()));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_node.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/hybrid_grid.h  ( 23 )
[84] int grid_size () return 1 << kBits };
[88] ValueType value (const Eigen::Array3i index) const;
[93] ValueType mutable_value (const Eigen::Array3i index);
[423] float resolution () const return resolution_ };
[449] Iterator begin () const return Iterator(this) };
[451] Iterator end () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/hybrid_grid_test.cc  ( 1 )
[206] bool operator ()(const Eigen::Vector3i lhs, const Eigen::Vector3i rhs) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/submap_3d.cc  ( 15 )
[103] Eigen::Array4i voxel_index_and_probability ( common::RoundToInt(cell_center_global.x() resolution_inverse), common::RoundToInt(cell_center_global.y() resolution_inverse), common::RoundToInt(cell_center_global.z() resolution_inverse), probability_value);
[293] std::vector<std::shared_ptr<Submap3D>> ActiveSubmaps3D::submaps () const;
[297] int ActiveSubmaps3D::matching_index () const return matching_submap_index_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/range_data_inserter_3d_test.cc  ( 4 )
[60] proto::RangeDataInserterOptions3D options () const return options_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/submap_3d.h  ( 12 )
[61] HybridGrid high_resolution_hybrid_grid () const;
[64] HybridGrid low_resolution_hybrid_grid () const;
[98] int matching_index () const;
[106] std::vector<std::shared_ptr<Submap3D>> submaps () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/submap_3d_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/range_data_inserter_3d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/range_data_inserter_3d.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid_test.cc  ( 1 )
[44] ProbabilityGrid grid (proto);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/grid_2d.h  ( 20 )
[42] MapLimits limits () const return limits_ };
[79] std::vector<uint16> correspondence_cost_cells () const;
[80] std::vector<int> update_indices () const return update_indices_ };
[81] Eigen::AlignedBox2i known_cells_box () const;
[85] std::vector<uint16> mutable_correspondence_cost_cells ();
[86] std::vector<int> mutable_update_indices () return update_indices_ };
[87] Eigen::AlignedBox2i mutable_known_cells_box () return known_cells_box_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/map_limits_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/submap_2d.h  ( 21 )
[56] Grid2D grid () const return grid_.get() };
[66] void setFlag ();
[117] int matching_index () const;
[123] std::vector<std::shared_ptr<Submap2D>> submaps () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/range_data_inserter_2d_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/submap_2d.cc  ( 19 )
[158] std::vector<std::shared_ptr<Submap2D>> ActiveSubmaps2D::submaps () const;
[167] int ActiveSubmaps2D::matching_index () const return matching_submap_index_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/xy_index_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/xy_index.h  ( 3 )
[85] Eigen::Array2i operator () return xy_index_ };
[95] XYIndexRangeIterator begin ();
[99] XYIndexRangeIterator end ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/map_limits.h  ( 5 )
[57] double resolution () const return resolution_ };
[61] Eigen::Vector2d max () const return max_ };
[64] CellLimits cell_limits () const return cell_limits_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/grid_2d.cc  ( 10 )
[94] std::vector<uint16> Grid2D::mutable_correspondence_cost_cells ();
[100] std::vector<uint16> Grid2D::correspondence_cost_cells () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/submap_2d_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/trajectory_connectivity_state.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/trajectory_connectivity_state_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/gvalues_gridmap.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/collated_trajectory_builder.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/submap_controller.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/connected_components_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/build_gridmap.h  ( 11 )
[35] bool stopGridMap ();
[38] void initThread ();
[40] void initGridMap ();
[41] void SetCallBack_ptr (const TrajectoryBuilderInterface::LocalMapCallback cb);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/trajectory_connectivity_state.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/range_data_collator.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/range_data_collator_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/point_gridmap.h  ( 2 )
[128] point<T> absoluteSum (const orientedpoint<T,A> p1,const point<T> p2);
[135] bool operator  ()(const point<T> a, const point<T> b) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/motion_filter.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/connected_components.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/connected_components.cc  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/build_gridmap.cc  ( 11 )
[42] void BuildGridMap::initGridMap ();
[68] void BuildGridMap::SetCallBack_ptr (const TrajectoryBuilderInterface::LocalMapCallback cb);
[73] void BuildGridMap::initThread ();
[79] bool BuildGridMap::stopGridMap ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/obstacles_interface.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/gridlinetraversal_gridmap.h  ( 2 )
[24] void GridLineTraversal::gridLineCore (IntPoint start, IntPoint end, GridLineTraversalLine line);
[108] void GridLineTraversal::gridLine (IntPoint start, IntPoint end, GridLineTraversalLine line);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/collated_trajectory_builder.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/motion_filter.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/range_data_collator.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/submap_controller.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/motion_filter_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/scan_matching/real_time_correlative_scan_matcher.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/scan_matching/real_time_correlative_scan_matcher.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_options_3d.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_slam_result_3d.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/rotation_parameterization.h  ( 1 )
[29] bool operator ()(const T x, const T delta, T x_plus_delta) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_3d.h  ( 10 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_3d.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/pose_graph_3d.h  ( 44 )
[142] std::vector<Constraint> constraints () const override EXCLUDES(mutex_);
[302] int num_submaps (int trajectory_id) const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/pose_graph_3d.cc  ( 49 )
[745] std::vector<PoseGraphInterface::Constraint> PoseGraph3D::constraints () const;
[858] int PoseGraph3D::TrimmingHandle::num_submaps (const int trajectory_id) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_3d_test.cc  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/pose_graph_3d_test.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/imu_integration.h  ( 2 )
[64] T delta_t (common::ToSeconds(next_time - current_time));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_options_3d.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_slam_result_3d.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/precomputation_grid_3d.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/occupied_space_cost_function_3d.h  ( 4 )
[49] bool operator ()(const T const translation, const T const rotation, T const residual) const;
[53] transform ::Rigid3<T> transform( Eigen::Map<const Eigen::Matrix<T, 3, 1>>(translation), Eigen::Quaternion<T>(rotation[0], rotation[1], rotation[2], rotation[3]));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/fast_correlative_scan_matcher_3d.h  ( 13 )
[54] int max_depth () const return precomputation_grids_.size() - 1 };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/low_resolution_matcher.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/translation_delta_cost_functor_3d.h  ( 2 )
[40] bool operator ()(const T const translation, T residual) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotational_scan_matcher.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/ceres_scan_matcher_3d_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/fast_correlative_scan_matcher_3d.cc  ( 12 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotational_scan_matcher_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/real_time_correlative_scan_matcher_3d_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/interpolated_grid.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/low_resolution_matcher.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/ceres_scan_matcher_3d.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/real_time_correlative_scan_matcher_3d.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotation_delta_cost_functor_3d_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/fast_correlative_scan_matcher_3d_test.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/real_time_correlative_scan_matcher_3d.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/precomputation_grid_3d.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotation_delta_cost_functor_3d.h  ( 2 )
[44] bool operator ()(const T const rotation_quaternion, T residual) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/interpolated_grid_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/ceres_scan_matcher_3d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/precomputation_grid_3d_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotational_scan_matcher.cc  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc  ( 16 )
[49] void fitLine2D_wods ( std::vector<common::Setting::Point2f> points, int count, float weights, float line );
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.h  ( 14 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_options_2d.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/ray_casting.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.cc  ( 52 )
[1183] std::vector<PoseGraphInterface::Constraint> PoseGraph2D::constraints () const;
[1311] int PoseGraph2D::TrimmingHandle::num_submaps (const int trajectory_id) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_slam_result_2d.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/ray_casting.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_options_2d.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_slam_result_2d.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d_test.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.h  ( 46 )
[152] std::vector<Constraint> constraints () const override EXCLUDES(mutex_);
[318] int num_submaps (int trajectory_id) const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/ceres_scan_matcher_2d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/correlative_scan_matcher_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/rotation_delta_cost_functor_2d.h  ( 2 )
[39] bool operator ()(const T const pose, T residual) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc  ( 9 )
[39] void store_search_pos_check ( std::vector<Candidate2D> candidates, float best_score);
[70] void store_search_pos ( std::vector<Candidate2D> candidates, float best_score);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/correlative_scan_matcher_2d.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/ceres_scan_matcher_2d_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d.h  ( 14 )
[105] int max_depth () const return precomputation_grids_.size() - 1 };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d.cc  ( 14 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/correlative_scan_matcher_2d.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/ceres_scan_matcher_2d.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/translation_delta_cost_functor_2d.h  ( 2 )
[40] bool operator ()(const T const pose, T residual) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/occupied_space_cost_function_2d.h  ( 5 )
[48] bool operator ()(const T const pose, T residual) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_3d.h  ( 10 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_3d_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d.h  ( 14 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_3d.cc  ( 10 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d.cc  ( 14 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/mock_map_builder.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/mock_trajectory_builder.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/fake_trimmable.h  ( 10 )
[40] int num_submaps (const int trajectory_id) const override;
[53] void set_submap_data ( const MapById<SubmapId, PoseGraphInterface::SubmapData> submap_data);
[67] void set_trajectory_nodes ( const MapById<NodeId, TrajectoryNode> trajectory_nodes);
[80] void set_constraints ( const std::vector<PoseGraphInterface::Constraint> constraints);
[84] std::vector<PoseGraphInterface::Constraint> mutable_constraints ();
[99] std::vector<SubmapId> trimmed_submaps () return trimmed_submaps_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/test_helpers.cc  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/mock_pose_graph.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/test_helpers.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_3d.cc  ( 16 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_interface.h  ( 12 )
[79] sensor::MapByTime<sensor::ImuData> imu_data () const = 0;
[81] sensor::MapByTime<sensor::OdometryData> odometry_data () const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_3d.h  ( 16 )
[95] sensor::MapByTime<sensor::ImuData> imu_data () const override;
[99] sensor::MapByTime<sensor::OdometryData> odometry_data () const override;
[110] sensor::MapByTime<sensor::FixedFramePoseData> fixed_frame_pose_data () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/isam_problem_2d.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc  ( 23 )
[454] std::ofstream outloop ("loop_check.txt",std::ios::app);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_3d_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/isam_problem_2d.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_options.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_options.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/ceres_pose.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.h  ( 21 )
[129] sensor::MapByTime<sensor::ImuData> imu_data () const override;
[133] sensor::MapByTime<sensor::OdometryData> odometry_data () const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/isam_problem_interface.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/ceres_pose.h  ( 5 )
[41] double translation () return data_->translation.data() };
[44] double rotation () return data_->rotation.data() };
[53] Data data () return data_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/rotation_cost_function_3d.h  ( 2 )
[41] bool operator ()(const T const start_rotation, const T const end_rotation, const T const imu_calibration, T residual) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/cost_helpers.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_3d.h  ( 2 )
[61] bool operator ()(const T const prev_node_rotation, const T const prev_node_translation, const T const next_node_rotation, const T const next_node_translation, const T const landmark_rotation, const T const landmark_translation, T const e) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_2d.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_2d.cc  ( 4 )
[42] bool operator ()(const T const start_pose, const T const end_pose, T e) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_3d.h  ( 2 )
[49] bool operator ()(const T const c_i_rotation, const T const c_i_translation, const T const c_j_rotation, const T const c_j_translation, T const e) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/cost_helpers_impl.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_2d_test.cc  ( 1 )
[46] std::unique_ptr<ceres::CostFunction> cost_function ( LandmarkCostFunction2D::CreateAutoDiffCostFunction( LandmarkObservation;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_2d_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/acceleration_cost_function_3d.h  ( 3 )
[49] bool operator ()(const T const middle_rotation, const T const start_position, const T const middle_position, const T const end_position, const T const gravity_constant, const T const imu_calibration, T residual) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_2d.h  ( 2 )
[56] bool operator ()(const T const prev_node_pose, const T const next_node_pose, const T const landmark_rotation, const T const landmark_translation, T const e) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_3d_test.cc  ( 1 )
[44] std::unique_ptr<ceres::CostFunction> cost_function ( LandmarkCostFunction3D::CreateAutoDiffCostFunction( LandmarkObservation;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/timestamped_transform.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/rigid_transform_test.cc  ( 3 )
[31] T eps () return std::numeric_limits<T>::epsilon() };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform.h  ( 11 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform_interpolation_buffer.cc  ( 6 )
[68] common::Time TransformInterpolationBuffer::earliest_time () const;
[73] common::Time TransformInterpolationBuffer::latest_time () const;
[78] bool TransformInterpolationBuffer::empty () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform_interpolation_buffer.h  ( 6 )
[50] common::Time earliest_time () const;
[54] common::Time latest_time () const;
[57] bool empty () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/rigid_transform_test_helpers.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/rigid_transform.h  ( 14 )
[60] Rigid2<OtherType> cast () const;
[65] Vector translation () const return translation_ };
[67] Rotation2D rotation () const return rotation_ };
[69] double normalized_angle () const;
[73] Rigid2 inverse () const;
[98] Rigid2<FloatType> operator (const Rigid2<FloatType> lhs, const Rigid2<FloatType> rhs);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform_interpolation_buffer_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/timestamped_transform.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/rigid_transform.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/task.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/histogram.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/rate_timer_test.cc  ( 1 )
[42] time_point now () noexcept return time };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/rate_timer.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/ceres_solver_options.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/task.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua_parameter_dictionary.cc  ( 23 )
[327] std::unique_ptr<LuaParameterDictionary> subdict ( PopDictionary(ReferenceCount::NO));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua_parameter_dictionary_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/port.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/blocking_queue_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/histogram.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/thread_pool_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/thread_pool.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/make_unique.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua_parameter_dictionary.h  ( 24 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/optional.h  ( 2 )
[41] bool has_value () const return value_ != nullptr };
[43] T value () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/ceres_solver_options.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/fixed_ratio_sampler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/mutex.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/configuration_file_resolver.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/DataChecking.cc  ( 9 )
[13] void computeAngleAll_t (Eigen::Quaterniond qua_odm,float oula_angle[3],int type_sense);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua_parameter_dictionary_test_helpers.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/setting.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/time.h  ( 8 )
[57] uint64_t getTimeNow ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/configuration_file_resolver.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/math_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/blocking_queue.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/thread_pool.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/time.cc  ( 8 )
[44] uint64_t getTimeNow ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/math.h  ( 3 )
[70] T atan2 (const Eigen::Matrix<T, 2, 1> vector);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/DataChecking.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/configuration_files_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/task_test.cc  ( 5 )
[69] FakeThreadPool thread_pool () return thread_pool_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lockless_queue.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/optional_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/setting.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/fixed_ratio_sampler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/fixed_ratio_sampler_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lockless_queue_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/internal/testing/thread_pool_for_testing.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/internal/testing/thread_pool_for_testing.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_interface.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_interface.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_main.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_options.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_options.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/client/map_builder_stub.h  ( 10 )
[55] int num_trajectory_builders () const override;
[56] mapping::PoseGraphInterface pose_graph () override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/client/map_builder_stub.cc  ( 11 )
[46] std::chrono::system_clock::time_point deadline ( std::chrono::system_clock::now() + std::chrono::seconds(kConnectionTimeoutInSecond));
[159] int MapBuilderStub::num_trajectory_builders () const;
[163] mapping::PoseGraphInterface MapBuilderStub::pose_graph ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_context_impl.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_server.h  ( 21 )
[46] mapping::MapBuilderInterface map_builder () override;
[48] common::BlockingQueue<std::unique_ptr<MapBuilderContextInterface::Data>> sensor_data_queue () override;
[60] LocalTrajectoryUploaderInterface local_trajectory_uploader () override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/local_trajectory_uploader.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_context_impl.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client_server_test.cc  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/local_trajectory_uploader.cc  ( 10 )
[88] std::chrono::system_clock::time_point deadline ( std::chrono::system_clock::now() + std::chrono::seconds(kConnectionTimeoutInSecond));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_server.cc  ( 14 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_context_interface.h  ( 12 )
[76] mapping::MapBuilderInterface map_builder () = 0;
[77] common::BlockingQueue<std::unique_ptr<Data>> sensor_data_queue () = 0;
[89] LocalTrajectoryUploaderInterface local_trajectory_uploader () = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client/pose_graph_stub.h  ( 8 )
[51] std::vector<Constraint> constraints () const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client/trajectory_builder_stub.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client/pose_graph_stub.cc  ( 8 )
[157] std::vector<mapping::PoseGraphInterface::Constraint> PoseGraphStub::constraints () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client/trajectory_builder_stub.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/mock_local_trajectory_uploader.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/mock_map_builder_context.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/test_helpers.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/handler_test.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/test_helpers.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/sensor/serialization.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/sensor/serialization.cc  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_landmark_poses_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_trajectory_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/set_landmark_pose_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/is_trajectory_finished_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_sensor_data_batch_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_all_submap_poses.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/is_trajectory_frozen_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_imu_data_handler_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_rangefinder_data_handler_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/load_state_handler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/finish_trajectory_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_imu_data_handler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_odometry_data_handler_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_local_to_global_transform_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/write_state_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/run_final_optimization_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_constraints_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_trajectory_handler_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/load_state_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_landmark_data_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/receive_global_slam_optimizations_handler.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/set_landmark_pose_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_all_submap_poses.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_fixed_frame_pose_data_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/write_state_handler.cc  ( 2 )
[32] io::ForwardingProtoStreamWriter proto_stream_writer ( [writer](const google::protobuf::Message proto);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/receive_local_slam_results_handler.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_landmark_data_handler_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_imu_data_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_sensor_data_batch_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_constraints_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/set_landmark_pose_handler_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_fixed_frame_pose_data_handler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_local_to_global_transform_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/receive_global_slam_optimizations_handler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_submap_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_landmark_poses_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_trajectory_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_fixed_frame_pose_data_handler_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_trajectory_node_poses_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_trajectory_node_poses_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_landmark_poses_handler_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/receive_local_slam_results_handler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/run_final_optimization_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_rangefinder_data_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_submap_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_landmark_data_handler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_odometry_data_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_odometry_data_handler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/is_trajectory_frozen_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_rangefinder_data_handler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/finish_trajectory_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/is_trajectory_finished_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/metrics/prometheus/metrics_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/metrics/prometheus/family_factory.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/metrics/prometheus/family_factory.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/autogenerate_ground_truth_main.cc  ( 6 )
[186] std::ofstream output_stream (output_filename, std::ios_base::out | std::ios_base::binary);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/relations_text_file.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/compute_relations_metrics_main.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/relations_text_file.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_processor.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/coloring_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/coloring_points_processor.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/xray_points_processor.h  ( 6 )
[58] Eigen::AlignedBox3i bounding_box () const return bounding_box_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/outlier_removing_points_processor.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/file_writer.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/serialization_format_migration.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/xray_points_processor.cc  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fake_file_writer.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/min_max_range_filtering_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/intensity_to_color_points_processor.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/min_max_range_filtering_points_processor.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/submap_painter.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_deserializer_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/serialization_format_migration.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/counting_points_processor.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_deserializer.h  ( 5 )
[42] mapping::proto::SerializationHeader header () return header_ };
[44] mapping::proto::PoseGraph pose_graph ();
[52] mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/frame_id_filtering_points_processor.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_interface.h  ( 4 )
[48] bool eof () const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/ply_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/image.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/frame_id_filtering_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/counting_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/probability_grid_points_processor.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/color.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/intensity_to_color_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_processor_pipeline_builder_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/image.h  ( 6 )
[67] int width () const return width_ };
[68] int height () const return height_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_batch.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/file_writer.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream.cc  ( 8 )
[103] bool ProtoStreamReader::eof () const return in_.eof() };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/draw_trajectories.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/submap_painter.cc  ( 7 )
[88] Eigen::Array2i size ( std::ceil(bounding_box.sizes().x()) + 2 kPaddingPixel, std::ceil(bounding_box.sizes().y()) + 2 kPaddingPixel);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/draw_trajectories.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/ply_writing_points_processor.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/outlier_removing_points_processor.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/xyz_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/xyz_writing_points_processor.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_deserializer.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_processor_pipeline_builder.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/migrate_serialization_format_main.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fixed_ratio_sampling_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/pcd_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fake_file_writer.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/probability_grid_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_processor_pipeline_builder.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_batch.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/hybrid_grid_points_processor.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/serialization_format_migration_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream.h  ( 6 )
[62] bool eof () const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/color.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/pcd_writing_points_processor.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fixed_ratio_sampling_points_processor.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/hybrid_grid_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fake_file_writer_test.cc  ( 1 )
[27] std::string toString (const std::vector<char> data);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/null_points_processor.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/mapping_state_serialization.cc  ( 13 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/mapping_state_serialization.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/in_memory_proto_stream.h  ( 5 )
[69] bool eof () const override return state_chunks_.empty() };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/in_memory_proto_stream.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/in_memory_proto_stream_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/odometry_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/compressed_point_cloud_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/collator_interface.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/range_data.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/timed_point_cloud_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/range_data_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/map_by_time_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/fixed_frame_pose_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/compressed_point_cloud.h  ( 9 )
[47] bool empty () const;
[48] size _t size() const;
[49] ConstIterator begin () const;
[50] ConstIterator end () const;
[76] Eigen::Vector3f operator () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/map_by_time.h  ( 10 )
[115] DataType operator () const return iterator_->second };
[124] ConstIterator operator-- ();
[186] mapping::Range<ConstTrajectoryIterator> trajectory_ids () const;
[192] mapping::Range<ConstIterator> trajectory (const int trajectory_id) const;
[202] ConstIterator lower_bound (const int trajectory_id, const common::Time time) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/imu_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/timed_point_cloud_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/odometry_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/landmark_data_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/data.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/point_cloud_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/imu_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/fixed_frame_pose_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/point_cloud.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/compressed_point_cloud.cc  ( 9 )
[59] Eigen::Vector3f CompressedPointCloud::ConstIterator::operator () const;
[159] bool CompressedPointCloud::empty () const return num_points_ == 0 };
[161] size _t CompressedPointCloud::size() const return num_points_ };
[163] CompressedPointCloud::ConstIterator CompressedPointCloud::begin () const;
[167] CompressedPointCloud::ConstIterator CompressedPointCloud::end () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/range_data.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/landmark_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/point_cloud.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/landmark_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/trajectory_collator_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/ordered_multi_queue.cc  ( 11 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/collator_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/trajectory_collator.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/collator.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/ordered_multi_queue_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/ordered_multi_queue.h  ( 11 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/voxel_filter.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/collator.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/voxel_filter.cc  ( 9 )
[181] KeyType k_0 (static_cast<uint32>(index[0]));
[182] KeyType k_1 (static_cast<uint32>(index[1]));
[183] KeyType k_2 (static_cast<uint32>(index[2]));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/test_helpers.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/voxel_filter_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/dispatchable.h  ( 4 )
[37] DataType data () const return data_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/trajectory_collator.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/register.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/histogram.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/counter.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/family_factory.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/histogram.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/gauge.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/gauge.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/counter.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/register.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/bazel/third_party/cairo/cairo-features.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/bazel/third_party/cairo/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/bazel/third_party/fontconfig/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/bazel/third_party/pixman/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/ramp.pb.h  ( 48 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] Ramp default_instance ();
[147] bool has_pose1 () const;
[148] void clear_pose1 ();
[150] ::cartographer::transform::proto::Rigid2d pose1 () const;
[151] ::cartographer::transform::proto::Rigid2d mutable_pose1 ();
[152] ::cartographer::transform::proto::Rigid2d release_pose1 ();
[153] void set_allocated_pose1 (::cartographer::transform::proto::Rigid2d pose1);
[156] bool has_pose2 () const;
[157] void clear_pose2 ();
[159] ::cartographer::transform::proto::Rigid2d pose2 () const;
[160] ::cartographer::transform::proto::Rigid2d mutable_pose2 ();
[161] ::cartographer::transform::proto::Rigid2d release_pose2 ();
[162] void set_allocated_pose2 (::cartographer::transform::proto::Rigid2d pose2);
[165] bool has_pose3 () const;
[166] void clear_pose3 ();
[168] ::cartographer::transform::proto::Rigid2d pose3 () const;
[169] ::cartographer::transform::proto::Rigid2d mutable_pose3 ();
[170] ::cartographer::transform::proto::Rigid2d release_pose3 ();
[171] void set_allocated_pose3 (::cartographer::transform::proto::Rigid2d pose3);
[174] bool has_pose4 () const;
[175] void clear_pose4 ();
[177] ::cartographer::transform::proto::Rigid2d pose4 () const;
[178] ::cartographer::transform::proto::Rigid2d mutable_pose4 ();
[179] ::cartographer::transform::proto::Rigid2d release_pose4 ();
[180] void set_allocated_pose4 (::cartographer::transform::proto::Rigid2d pose4);
[183] void clear_trajectory_id ();
[185] ::google::protobuf::int32 trajectory_id () const;
[186] void set_trajectory_id (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph.pb.cc  ( 89 )
[137] void protobuf_AssignDescriptors ();
[145] void protobuf_AssignDescriptorsOnce ();
[150] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[238] ::google::protobuf::EnumDescriptor PoseGraph_Constraint_Tag_descriptor ();
[242] bool PoseGraph_Constraint_Tag_IsValid (int value);
[306] ::google::protobuf::Descriptor SubmapId::descriptor ();
[311] SubmapId SubmapId::default_instance ();
[541] void SubmapId::clear_trajectory_id ();
[544] ::google::protobuf::int32 SubmapId::trajectory_id () const;
[548] void SubmapId::set_trajectory_id (::google::protobuf::int32 value);
[555] void SubmapId::clear_submap_index ();
[558] ::google::protobuf::int32 SubmapId::submap_index () const;
[562] void SubmapId::set_submap_index (::google::protobuf::int32 value);
[865] void NodeId::clear_node_index ();
[868] ::google::protobuf::int32 NodeId::node_index () const;
[872] void NodeId::set_node_index (::google::protobuf::int32 value);
[1336] bool PoseGraph_Constraint::has_submap_id () const;
[1339] void PoseGraph_Constraint::clear_submap_id ();
[1343] ::cartographer::mapping::proto::SubmapId PoseGraph_Constraint::submap_id () const;
[1349] ::cartographer::mapping::proto::SubmapId PoseGraph_Constraint::mutable_submap_id ();
[1357] ::cartographer::mapping::proto::SubmapId PoseGraph_Constraint::release_submap_id ();
[1364] void PoseGraph_Constraint::set_allocated_submap_id (::cartographer::mapping::proto::SubmapId submap_id);
[1376] bool PoseGraph_Constraint::has_node_id () const;
[1379] void PoseGraph_Constraint::clear_node_id ();
[1383] ::cartographer::mapping::proto::NodeId PoseGraph_Constraint::node_id () const;
[1389] ::cartographer::mapping::proto::NodeId PoseGraph_Constraint::mutable_node_id ();
[1397] ::cartographer::mapping::proto::NodeId PoseGraph_Constraint::release_node_id ();
[1404] void PoseGraph_Constraint::set_allocated_node_id (::cartographer::mapping::proto::NodeId node_id);
[1416] bool PoseGraph_Constraint::has_relative_pose () const;
[1419] void PoseGraph_Constraint::clear_relative_pose ();
[1423] ::cartographer::transform::proto::Rigid3d PoseGraph_Constraint::relative_pose () const;
[1429] ::cartographer::transform::proto::Rigid3d PoseGraph_Constraint::mutable_relative_pose ();
[1437] ::cartographer::transform::proto::Rigid3d PoseGraph_Constraint::release_relative_pose ();
[1444] void PoseGraph_Constraint::set_allocated_relative_pose (::cartographer::transform::proto::Rigid3d relative_pose);
[1456] void PoseGraph_Constraint::clear_translation_weight ();
[1459] double PoseGraph_Constraint::translation_weight () const;
[1463] void PoseGraph_Constraint::set_translation_weight (double value);
[1470] void PoseGraph_Constraint::clear_rotation_weight ();
[1473] double PoseGraph_Constraint::rotation_weight () const;
[1477] void PoseGraph_Constraint::set_rotation_weight (double value);
[1484] void PoseGraph_Constraint::clear_tag ();
[1487] ::cartographer::mapping::proto::PoseGraph_Constraint_Tag PoseGraph_Constraint::tag () const;
[1491] void PoseGraph_Constraint::set_tag (::cartographer::mapping::proto::PoseGraph_Constraint_Tag value);
[1804] void PoseGraph_LandmarkPose::clear_landmark_id ();
[1807] ::std::string PoseGraph_LandmarkPose::landmark_id () const;
[1811] void PoseGraph_LandmarkPose::set_landmark_id (const ::std::string value);
[1836] ::std::string PoseGraph_LandmarkPose::mutable_landmark_id ();
[1841] ::std::string PoseGraph_LandmarkPose::release_landmark_id ();
[1846] void PoseGraph_LandmarkPose::set_allocated_landmark_id (::std::string landmark_id);
[1857] bool PoseGraph_LandmarkPose::has_global_pose () const;
[1860] void PoseGraph_LandmarkPose::clear_global_pose ();
[1864] ::cartographer::transform::proto::Rigid3d PoseGraph_LandmarkPose::global_pose () const;
[1870] ::cartographer::transform::proto::Rigid3d PoseGraph_LandmarkPose::mutable_global_pose ();
[1878] ::cartographer::transform::proto::Rigid3d PoseGraph_LandmarkPose::release_global_pose ();
[1885] void PoseGraph_LandmarkPose::set_allocated_global_pose (::cartographer::transform::proto::Rigid3d global_pose);
[2227] int PoseGraph::constraint_size () const;
[2230] void PoseGraph::clear_constraint ();
[2233] ::cartographer::mapping::proto::PoseGraph_Constraint PoseGraph::constraint (int index) const;
[2237] ::cartographer::mapping::proto::PoseGraph_Constraint PoseGraph::mutable_constraint (int index);
[2241] ::cartographer::mapping::proto::PoseGraph_Constraint PoseGraph::add_constraint ();
[2257] int PoseGraph::trajectory_size () const;
[2260] void PoseGraph::clear_trajectory ();
[2263] ::cartographer::mapping::proto::Trajectory PoseGraph::trajectory (int index) const;
[2267] ::cartographer::mapping::proto::Trajectory PoseGraph::mutable_trajectory (int index);
[2271] ::cartographer::mapping::proto::Trajectory PoseGraph::add_trajectory ();
[2287] int PoseGraph::landmark_poses_size () const;
[2290] void PoseGraph::clear_landmark_poses ();
[2293] ::cartographer::mapping::proto::PoseGraph_LandmarkPose PoseGraph::landmark_poses (int index) const;
[2297] ::cartographer::mapping::proto::PoseGraph_LandmarkPose PoseGraph::mutable_landmark_poses (int index);
[2301] ::cartographer::mapping::proto::PoseGraph_LandmarkPose PoseGraph::add_landmark_poses ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/connected_components.pb.cc  ( 34 )
[84] void protobuf_AssignDescriptors ();
[92] void protobuf_AssignDescriptorsOnce ();
[97] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[192] ::google::protobuf::Descriptor ConnectedComponents_ConnectedComponent::descriptor ();
[197] ConnectedComponents_ConnectedComponent ConnectedComponents_ConnectedComponent::default_instance ();
[416] int ConnectedComponents_ConnectedComponent::trajectory_id_size () const;
[419] void ConnectedComponents_ConnectedComponent::clear_trajectory_id ();
[422] ::google::protobuf::int32 ConnectedComponents_ConnectedComponent::trajectory_id (int index) const;
[426] void ConnectedComponents_ConnectedComponent::set_trajectory_id (int index, ::google::protobuf::int32 value);
[430] void ConnectedComponents_ConnectedComponent::add_trajectory_id (::google::protobuf::int32 value);
[690] int ConnectedComponents::connected_component_size () const;
[693] void ConnectedComponents::clear_connected_component ();
[696] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent ConnectedComponents::connected_component (int index) const;
[700] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent ConnectedComponents::mutable_connected_component (int index);
[704] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent ConnectedComponents::add_connected_component ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph.pb.h  ( 86 )
[83] bool PoseGraph_Constraint_Tag_IsValid (int value);
[88] ::google::protobuf::EnumDescriptor PoseGraph_Constraint_Tag_descriptor ();
[126] ::google::protobuf::Descriptor descriptor ();
[127] SubmapId default_instance ();
[182] void clear_trajectory_id ();
[184] ::google::protobuf::int32 trajectory_id () const;
[185] void set_trajectory_id (::google::protobuf::int32 value);
[188] void clear_submap_index ();
[190] ::google::protobuf::int32 submap_index () const;
[191] void set_submap_index (::google::protobuf::int32 value);
[292] void clear_node_index ();
[294] ::google::protobuf::int32 node_index () const;
[295] void set_node_index (::google::protobuf::int32 value);
[416] bool has_submap_id () const;
[417] void clear_submap_id ();
[419] ::cartographer::mapping::proto::SubmapId submap_id () const;
[420] ::cartographer::mapping::proto::SubmapId mutable_submap_id ();
[421] ::cartographer::mapping::proto::SubmapId release_submap_id ();
[422] void set_allocated_submap_id (::cartographer::mapping::proto::SubmapId submap_id);
[425] bool has_node_id () const;
[426] void clear_node_id ();
[428] ::cartographer::mapping::proto::NodeId node_id () const;
[429] ::cartographer::mapping::proto::NodeId mutable_node_id ();
[430] ::cartographer::mapping::proto::NodeId release_node_id ();
[431] void set_allocated_node_id (::cartographer::mapping::proto::NodeId node_id);
[434] bool has_relative_pose () const;
[435] void clear_relative_pose ();
[437] ::cartographer::transform::proto::Rigid3d relative_pose () const;
[438] ::cartographer::transform::proto::Rigid3d mutable_relative_pose ();
[439] ::cartographer::transform::proto::Rigid3d release_relative_pose ();
[440] void set_allocated_relative_pose (::cartographer::transform::proto::Rigid3d relative_pose);
[443] void clear_translation_weight ();
[445] double translation_weight () const;
[446] void set_translation_weight (double value);
[449] void clear_rotation_weight ();
[451] double rotation_weight () const;
[452] void set_rotation_weight (double value);
[455] void clear_tag ();
[457] ::cartographer::mapping::proto::PoseGraph_Constraint_Tag tag () const;
[458] void set_tag (::cartographer::mapping::proto::PoseGraph_Constraint_Tag value);
[557] void clear_landmark_id ();
[559] ::std::string landmark_id () const;
[560] void set_landmark_id (const ::std::string value);
[566] ::std::string mutable_landmark_id ();
[567] ::std::string release_landmark_id ();
[568] void set_allocated_landmark_id (::std::string landmark_id);
[571] bool has_global_pose () const;
[572] void clear_global_pose ();
[574] ::cartographer::transform::proto::Rigid3d global_pose () const;
[575] ::cartographer::transform::proto::Rigid3d mutable_global_pose ();
[576] ::cartographer::transform::proto::Rigid3d release_global_pose ();
[577] void set_allocated_global_pose (::cartographer::transform::proto::Rigid3d global_pose);
[675] int constraint_size () const;
[676] void clear_constraint ();
[678] ::cartographer::mapping::proto::PoseGraph_Constraint constraint (int index) const;
[679] ::cartographer::mapping::proto::PoseGraph_Constraint mutable_constraint (int index);
[680] ::cartographer::mapping::proto::PoseGraph_Constraint add_constraint ();
[687] int trajectory_size () const;
[688] void clear_trajectory ();
[690] ::cartographer::mapping::proto::Trajectory trajectory (int index) const;
[691] ::cartographer::mapping::proto::Trajectory mutable_trajectory (int index);
[692] ::cartographer::mapping::proto::Trajectory add_trajectory ();
[699] int landmark_poses_size () const;
[700] void clear_landmark_poses ();
[702] ::cartographer::mapping::proto::PoseGraph_LandmarkPose landmark_poses (int index) const;
[703] ::cartographer::mapping::proto::PoseGraph_LandmarkPose mutable_landmark_poses (int index);
[704] ::cartographer::mapping::proto::PoseGraph_LandmarkPose add_landmark_poses ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory_node_data.pb.h  ( 65 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] TrajectoryNodeData default_instance ();
[148] int rotational_scan_matcher_histogram_size () const;
[149] void clear_rotational_scan_matcher_histogram ();
[151] float rotational_scan_matcher_histogram (int index) const;
[152] void set_rotational_scan_matcher_histogram (int index, float value);
[153] void add_rotational_scan_matcher_histogram (float value);
[160] bool has_gravity_alignment () const;
[161] void clear_gravity_alignment ();
[163] ::cartographer::transform::proto::Quaterniond gravity_alignment () const;
[164] ::cartographer::transform::proto::Quaterniond mutable_gravity_alignment ();
[165] ::cartographer::transform::proto::Quaterniond release_gravity_alignment ();
[166] void set_allocated_gravity_alignment (::cartographer::transform::proto::Quaterniond gravity_alignment);
[169] bool has_filtered_gravity_aligned_point_cloud () const;
[170] void clear_filtered_gravity_aligned_point_cloud ();
[172] ::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud () const;
[173] ::cartographer::sensor::proto::CompressedPointCloud mutable_filtered_gravity_aligned_point_cloud ();
[174] ::cartographer::sensor::proto::CompressedPointCloud release_filtered_gravity_aligned_point_cloud ();
[175] void set_allocated_filtered_gravity_aligned_point_cloud (::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud);
[178] bool has_high_resolution_point_cloud () const;
[179] void clear_high_resolution_point_cloud ();
[181] ::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud () const;
[182] ::cartographer::sensor::proto::CompressedPointCloud mutable_high_resolution_point_cloud ();
[183] ::cartographer::sensor::proto::CompressedPointCloud release_high_resolution_point_cloud ();
[184] void set_allocated_high_resolution_point_cloud (::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud);
[187] bool has_low_resolution_point_cloud () const;
[188] void clear_low_resolution_point_cloud ();
[190] ::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud () const;
[191] ::cartographer::sensor::proto::CompressedPointCloud mutable_low_resolution_point_cloud ();
[192] ::cartographer::sensor::proto::CompressedPointCloud release_low_resolution_point_cloud ();
[193] void set_allocated_low_resolution_point_cloud (::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud);
[196] bool has_local_pose () const;
[197] void clear_local_pose ();
[199] ::cartographer::transform::proto::Rigid3d local_pose () const;
[200] ::cartographer::transform::proto::Rigid3d mutable_local_pose ();
[201] ::cartographer::transform::proto::Rigid3d release_local_pose ();
[202] void set_allocated_local_pose (::cartographer::transform::proto::Rigid3d local_pose);
[205] bool has_obstacles () const;
[206] void clear_obstacles ();
[208] ::cartographer::sensor::proto::CompressedPointCloud obstacles () const;
[209] ::cartographer::sensor::proto::CompressedPointCloud mutable_obstacles ();
[210] ::cartographer::sensor::proto::CompressedPointCloud release_obstacles ();
[211] void set_allocated_obstacles (::cartographer::sensor::proto::CompressedPointCloud obstacles);
[214] void clear_timestamp ();
[216] ::google::protobuf::int64 timestamp () const;
[217] void set_timestamp (::google::protobuf::int64 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph_options.pb.cc  ( 57 )
[78] void protobuf_AssignDescriptors ();
[86] void protobuf_AssignDescriptorsOnce ();
[91] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[227] ::google::protobuf::Descriptor PoseGraphOptions::descriptor ();
[232] PoseGraphOptions PoseGraphOptions::default_instance ();
[707] void PoseGraphOptions::clear_optimize_every_n_nodes ();
[710] ::google::protobuf::int32 PoseGraphOptions::optimize_every_n_nodes () const;
[714] void PoseGraphOptions::set_optimize_every_n_nodes (::google::protobuf::int32 value);
[721] bool PoseGraphOptions::has_constraint_builder_options () const;
[724] void PoseGraphOptions::clear_constraint_builder_options ();
[728] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions PoseGraphOptions::constraint_builder_options () const;
[734] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions PoseGraphOptions::mutable_constraint_builder_options ();
[742] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions PoseGraphOptions::release_constraint_builder_options ();
[749] void PoseGraphOptions::set_allocated_constraint_builder_options (::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options);
[761] void PoseGraphOptions::clear_matcher_translation_weight ();
[764] double PoseGraphOptions::matcher_translation_weight () const;
[768] void PoseGraphOptions::set_matcher_translation_weight (double value);
[775] void PoseGraphOptions::clear_matcher_rotation_weight ();
[778] double PoseGraphOptions::matcher_rotation_weight () const;
[782] void PoseGraphOptions::set_matcher_rotation_weight (double value);
[789] bool PoseGraphOptions::has_optimization_problem_options () const;
[792] void PoseGraphOptions::clear_optimization_problem_options ();
[796] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions PoseGraphOptions::optimization_problem_options () const;
[802] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions PoseGraphOptions::mutable_optimization_problem_options ();
[810] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions PoseGraphOptions::release_optimization_problem_options ();
[817] void PoseGraphOptions::set_allocated_optimization_problem_options (::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options);
[829] void PoseGraphOptions::clear_max_num_final_iterations ();
[832] ::google::protobuf::int32 PoseGraphOptions::max_num_final_iterations () const;
[836] void PoseGraphOptions::set_max_num_final_iterations (::google::protobuf::int32 value);
[843] void PoseGraphOptions::clear_global_sampling_ratio ();
[846] double PoseGraphOptions::global_sampling_ratio () const;
[850] void PoseGraphOptions::set_global_sampling_ratio (double value);
[857] void PoseGraphOptions::clear_log_residual_histograms ();
[860] bool PoseGraphOptions::log_residual_histograms () const;
[864] void PoseGraphOptions::set_log_residual_histograms (bool value);
[871] void PoseGraphOptions::clear_global_constraint_search_after_n_seconds ();
[874] double PoseGraphOptions::global_constraint_search_after_n_seconds () const;
[878] void PoseGraphOptions::set_global_constraint_search_after_n_seconds (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/motion_filter_options.pb.cc  ( 33 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[182] ::google::protobuf::Descriptor MotionFilterOptions::descriptor ();
[187] MotionFilterOptions MotionFilterOptions::default_instance ();
[446] void MotionFilterOptions::clear_max_time_seconds ();
[449] double MotionFilterOptions::max_time_seconds () const;
[453] void MotionFilterOptions::set_max_time_seconds (double value);
[460] void MotionFilterOptions::clear_max_distance_meters ();
[463] double MotionFilterOptions::max_distance_meters () const;
[467] void MotionFilterOptions::set_max_distance_meters (double value);
[474] void MotionFilterOptions::clear_max_angle_radians ();
[477] double MotionFilterOptions::max_angle_radians () const;
[481] void MotionFilterOptions::set_max_angle_radians (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory_builder_options.pb.h  ( 99 )
[91] bool SensorId_SensorType_IsValid (int value);
[96] ::google::protobuf::EnumDescriptor SensorId_SensorType_descriptor ();
[134] ::google::protobuf::Descriptor descriptor ();
[135] InitialTrajectoryPose default_instance ();
[190] bool has_relative_pose () const;
[191] void clear_relative_pose ();
[193] ::cartographer::transform::proto::Rigid3d relative_pose () const;
[194] ::cartographer::transform::proto::Rigid3d mutable_relative_pose ();
[195] ::cartographer::transform::proto::Rigid3d release_relative_pose ();
[196] void set_allocated_relative_pose (::cartographer::transform::proto::Rigid3d relative_pose);
[199] void clear_timestamp ();
[201] ::google::protobuf::int64 timestamp () const;
[202] void set_timestamp (::google::protobuf::int64 value);
[205] void clear_to_trajectory_id ();
[207] ::google::protobuf::int32 to_trajectory_id () const;
[208] void set_to_trajectory_id (::google::protobuf::int32 value);
[304] void clear_min_covered_area ();
[306] double min_covered_area () const;
[307] void set_min_covered_area (double value);
[310] void clear_fresh_submaps_count ();
[312] ::google::protobuf::int32 fresh_submaps_count () const;
[313] void set_fresh_submaps_count (::google::protobuf::int32 value);
[316] void clear_min_added_submaps_count ();
[318] ::google::protobuf::int32 min_added_submaps_count () const;
[319] void set_min_added_submaps_count (::google::protobuf::int32 value);
[417] bool has_trajectory_builder_2d_options () const;
[418] void clear_trajectory_builder_2d_options ();
[420] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options () const;
[421] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D mutable_trajectory_builder_2d_options ();
[422] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D release_trajectory_builder_2d_options ();
[423] void set_allocated_trajectory_builder_2d_options (::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options);
[426] bool has_trajectory_builder_3d_options () const;
[427] void clear_trajectory_builder_3d_options ();
[429] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options () const;
[430] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D mutable_trajectory_builder_3d_options ();
[431] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D release_trajectory_builder_3d_options ();
[432] void set_allocated_trajectory_builder_3d_options (::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options);
[435] bool has_initial_trajectory_pose () const;
[436] void clear_initial_trajectory_pose ();
[438] ::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose () const;
[439] ::cartographer::mapping::proto::InitialTrajectoryPose mutable_initial_trajectory_pose ();
[440] ::cartographer::mapping::proto::InitialTrajectoryPose release_initial_trajectory_pose ();
[441] void set_allocated_initial_trajectory_pose (::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose);
[444] bool has_overlapping_submaps_trimmer_2d () const;
[445] void clear_overlapping_submaps_trimmer_2d ();
[447] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d () const;
[448] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D mutable_overlapping_submaps_trimmer_2d ();
[449] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D release_overlapping_submaps_trimmer_2d ();
[450] void set_allocated_overlapping_submaps_trimmer_2d (::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d);
[453] void clear_pure_localization ();
[455] bool pure_localization () const;
[456] void set_pure_localization (bool value);
[459] void clear_border_flag ();
[461] bool border_flag () const;
[462] void set_border_flag (bool value);
[595] void clear_id ();
[597] ::std::string id () const;
[598] void set_id (const ::std::string value);
[604] ::std::string mutable_id ();
[605] ::std::string release_id ();
[606] void set_allocated_id (::std::string id);
[609] void clear_type ();
[611] ::cartographer::mapping::proto::SensorId_SensorType type () const;
[612] void set_type (::cartographer::mapping::proto::SensorId_SensorType value);
[707] int sensor_id_size () const;
[708] void clear_sensor_id ();
[710] ::cartographer::mapping::proto::SensorId sensor_id (int index) const;
[711] ::cartographer::mapping::proto::SensorId mutable_sensor_id (int index);
[712] ::cartographer::mapping::proto::SensorId add_sensor_id ();
[719] bool has_trajectory_builder_options () const;
[720] void clear_trajectory_builder_options ();
[722] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options () const;
[723] ::cartographer::mapping::proto::TrajectoryBuilderOptions mutable_trajectory_builder_options ();
[724] ::cartographer::mapping::proto::TrajectoryBuilderOptions release_trajectory_builder_options ();
[725] void set_allocated_trajectory_builder_options (::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options);
[820] int options_with_sensor_ids_size () const;
[821] void clear_options_with_sensor_ids ();
[823] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids (int index) const;
[824] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds mutable_options_with_sensor_ids (int index);
[825] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds add_options_with_sensor_ids ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/submap.pb.h  ( 51 )
[96] ::google::protobuf::Descriptor descriptor ();
[97] Submap2D default_instance ();
[152] bool has_local_pose () const;
[153] void clear_local_pose ();
[155] ::cartographer::transform::proto::Rigid3d local_pose () const;
[156] ::cartographer::transform::proto::Rigid3d mutable_local_pose ();
[157] ::cartographer::transform::proto::Rigid3d release_local_pose ();
[158] void set_allocated_local_pose (::cartographer::transform::proto::Rigid3d local_pose);
[161] bool has_grid () const;
[162] void clear_grid ();
[164] ::cartographer::mapping::proto::Grid2D grid () const;
[165] ::cartographer::mapping::proto::Grid2D mutable_grid ();
[166] ::cartographer::mapping::proto::Grid2D release_grid ();
[167] void set_allocated_grid (::cartographer::mapping::proto::Grid2D grid);
[170] void clear_num_range_data ();
[172] ::google::protobuf::int32 num_range_data () const;
[173] void set_num_range_data (::google::protobuf::int32 value);
[176] void clear_finished ();
[178] bool finished () const;
[179] void set_finished (bool value);
[285] bool has_high_resolution_hybrid_grid () const;
[286] void clear_high_resolution_hybrid_grid ();
[288] ::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid () const;
[289] ::cartographer::mapping::proto::HybridGrid mutable_high_resolution_hybrid_grid ();
[290] ::cartographer::mapping::proto::HybridGrid release_high_resolution_hybrid_grid ();
[291] void set_allocated_high_resolution_hybrid_grid (::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid);
[294] bool has_low_resolution_hybrid_grid () const;
[295] void clear_low_resolution_hybrid_grid ();
[297] ::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid () const;
[298] ::cartographer::mapping::proto::HybridGrid mutable_low_resolution_hybrid_grid ();
[299] ::cartographer::mapping::proto::HybridGrid release_low_resolution_hybrid_grid ();
[300] void set_allocated_low_resolution_hybrid_grid (::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/serialization.pb.h  ( 152 )
[124] ::google::protobuf::Descriptor descriptor ();
[125] Submap default_instance ();
[180] bool has_submap_id () const;
[181] void clear_submap_id ();
[183] ::cartographer::mapping::proto::SubmapId submap_id () const;
[184] ::cartographer::mapping::proto::SubmapId mutable_submap_id ();
[185] ::cartographer::mapping::proto::SubmapId release_submap_id ();
[186] void set_allocated_submap_id (::cartographer::mapping::proto::SubmapId submap_id);
[189] bool has_submap_2d () const;
[190] void clear_submap_2d ();
[192] ::cartographer::mapping::proto::Submap2D submap_2d () const;
[193] ::cartographer::mapping::proto::Submap2D mutable_submap_2d ();
[194] ::cartographer::mapping::proto::Submap2D release_submap_2d ();
[195] void set_allocated_submap_2d (::cartographer::mapping::proto::Submap2D submap_2d);
[198] bool has_submap_3d () const;
[199] void clear_submap_3d ();
[201] ::cartographer::mapping::proto::Submap3D submap_3d () const;
[202] ::cartographer::mapping::proto::Submap3D mutable_submap_3d ();
[203] ::cartographer::mapping::proto::Submap3D release_submap_3d ();
[204] void set_allocated_submap_3d (::cartographer::mapping::proto::Submap3D submap_3d);
[300] bool has_node_id () const;
[301] void clear_node_id ();
[303] ::cartographer::mapping::proto::NodeId node_id () const;
[304] ::cartographer::mapping::proto::NodeId mutable_node_id ();
[305] ::cartographer::mapping::proto::NodeId release_node_id ();
[306] void set_allocated_node_id (::cartographer::mapping::proto::NodeId node_id);
[309] bool has_node_data () const;
[310] void clear_node_data ();
[312] ::cartographer::mapping::proto::TrajectoryNodeData node_data () const;
[313] ::cartographer::mapping::proto::TrajectoryNodeData mutable_node_data ();
[314] ::cartographer::mapping::proto::TrajectoryNodeData release_node_data ();
[315] void set_allocated_node_data (::cartographer::mapping::proto::TrajectoryNodeData node_data);
[410] bool has_imu_data () const;
[411] void clear_imu_data ();
[413] ::cartographer::sensor::proto::ImuData imu_data () const;
[414] ::cartographer::sensor::proto::ImuData mutable_imu_data ();
[415] ::cartographer::sensor::proto::ImuData release_imu_data ();
[416] void set_allocated_imu_data (::cartographer::sensor::proto::ImuData imu_data);
[419] void clear_trajectory_id ();
[421] ::google::protobuf::int32 trajectory_id () const;
[422] void set_trajectory_id (::google::protobuf::int32 value);
[517] bool has_odometry_data () const;
[518] void clear_odometry_data ();
[520] ::cartographer::sensor::proto::OdometryData odometry_data () const;
[521] ::cartographer::sensor::proto::OdometryData mutable_odometry_data ();
[522] ::cartographer::sensor::proto::OdometryData release_odometry_data ();
[523] void set_allocated_odometry_data (::cartographer::sensor::proto::OdometryData odometry_data);
[624] bool has_fixed_frame_pose_data () const;
[625] void clear_fixed_frame_pose_data ();
[627] ::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data () const;
[628] ::cartographer::sensor::proto::FixedFramePoseData mutable_fixed_frame_pose_data ();
[629] ::cartographer::sensor::proto::FixedFramePoseData release_fixed_frame_pose_data ();
[630] void set_allocated_fixed_frame_pose_data (::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data);
[731] bool has_landmark_data () const;
[732] void clear_landmark_data ();
[734] ::cartographer::sensor::proto::LandmarkData landmark_data () const;
[735] ::cartographer::sensor::proto::LandmarkData mutable_landmark_data ();
[736] ::cartographer::sensor::proto::LandmarkData release_landmark_data ();
[737] void set_allocated_landmark_data (::cartographer::sensor::proto::LandmarkData landmark_data);
[838] bool has_imu_calibration () const;
[839] void clear_imu_calibration ();
[841] ::cartographer::transform::proto::Quaterniond imu_calibration () const;
[842] ::cartographer::transform::proto::Quaterniond mutable_imu_calibration ();
[843] ::cartographer::transform::proto::Quaterniond release_imu_calibration ();
[844] void set_allocated_imu_calibration (::cartographer::transform::proto::Quaterniond imu_calibration);
[847] bool has_fixed_frame_origin_in_map () const;
[848] void clear_fixed_frame_origin_in_map ();
[850] ::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map () const;
[851] ::cartographer::transform::proto::Rigid3d mutable_fixed_frame_origin_in_map ();
[852] ::cartographer::transform::proto::Rigid3d release_fixed_frame_origin_in_map ();
[853] void set_allocated_fixed_frame_origin_in_map (::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map);
[856] void clear_gravity_constant ();
[858] double gravity_constant () const;
[859] void set_gravity_constant (double value);
[962] int submaps_size () const;
[963] void clear_submaps ();
[965] ::cartographer::mapping::proto::Submap submaps (int index) const;
[966] ::cartographer::mapping::proto::Submap mutable_submaps (int index);
[967] ::cartographer::mapping::proto::Submap add_submaps ();
[983] void clear_timestamp ();
[985] ::google::protobuf::int64 timestamp () const;
[986] void set_timestamp (::google::protobuf::int64 value);
[1082] void clear_format_version ();
[1084] ::google::protobuf::uint32 format_version () const;
[1085] void set_format_version (::google::protobuf::uint32 value);
[1193] bool has_pose_graph () const;
[1194] void clear_pose_graph ();
[1196] ::cartographer::mapping::proto::PoseGraph pose_graph () const;
[1197] ::cartographer::mapping::proto::PoseGraph mutable_pose_graph ();
[1198] ::cartographer::mapping::proto::PoseGraph release_pose_graph ();
[1199] void set_allocated_pose_graph (::cartographer::mapping::proto::PoseGraph pose_graph);
[1202] bool has_all_trajectory_builder_options () const;
[1203] void clear_all_trajectory_builder_options ();
[1205] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options () const;
[1206] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions mutable_all_trajectory_builder_options ();
[1207] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions release_all_trajectory_builder_options ();
[1208] void set_allocated_all_trajectory_builder_options (::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options);
[1211] bool has_submap () const;
[1212] void clear_submap ();
[1214] ::cartographer::mapping::proto::Submap submap () const;
[1215] ::cartographer::mapping::proto::Submap mutable_submap ();
[1216] ::cartographer::mapping::proto::Submap release_submap ();
[1217] void set_allocated_submap (::cartographer::mapping::proto::Submap submap);
[1220] bool has_node () const;
[1221] void clear_node ();
[1223] ::cartographer::mapping::proto::Node node () const;
[1224] ::cartographer::mapping::proto::Node mutable_node ();
[1225] ::cartographer::mapping::proto::Node release_node ();
[1226] void set_allocated_node (::cartographer::mapping::proto::Node node);
[1229] bool has_trajectory_data () const;
[1230] void clear_trajectory_data ();
[1232] ::cartographer::mapping::proto::TrajectoryData trajectory_data () const;
[1233] ::cartographer::mapping::proto::TrajectoryData mutable_trajectory_data ();
[1234] ::cartographer::mapping::proto::TrajectoryData release_trajectory_data ();
[1235] void set_allocated_trajectory_data (::cartographer::mapping::proto::TrajectoryData trajectory_data);
[1274] bool has_ramp () const;
[1275] void clear_ramp ();
[1277] ::cartographer::mapping::proto::Ramp ramp () const;
[1278] ::cartographer::mapping::proto::Ramp mutable_ramp ();
[1279] ::cartographer::mapping::proto::Ramp release_ramp ();
[1280] void set_allocated_ramp (::cartographer::mapping::proto::Ramp ramp);
[1282] DataCase data_case () const;
[1285] void set_has_pose_graph ();
[1286] void set_has_all_trajectory_builder_options ();
[1287] void set_has_submap ();
[1288] void set_has_node ();
[1289] void set_has_trajectory_data ();
[1290] void set_has_imu_data ();
[1291] void set_has_odometry_data ();
[1292] void set_has_fixed_frame_pose_data ();
[1293] void set_has_landmark_data ();
[1294] void set_has_ramp ();
[1297] void clear_data ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory_builder_options.pb.cc  ( 102 )
[152] void protobuf_AssignDescriptors ();
[160] void protobuf_AssignDescriptorsOnce ();
[165] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[276] ::google::protobuf::EnumDescriptor SensorId_SensorType_descriptor ();
[280] bool SensorId_SensorType_IsValid (int value);
[359] ::google::protobuf::Descriptor InitialTrajectoryPose::descriptor ();
[364] InitialTrajectoryPose InitialTrajectoryPose::default_instance ();
[634] bool InitialTrajectoryPose::has_relative_pose () const;
[637] void InitialTrajectoryPose::clear_relative_pose ();
[641] ::cartographer::transform::proto::Rigid3d InitialTrajectoryPose::relative_pose () const;
[647] ::cartographer::transform::proto::Rigid3d InitialTrajectoryPose::mutable_relative_pose ();
[655] ::cartographer::transform::proto::Rigid3d InitialTrajectoryPose::release_relative_pose ();
[662] void InitialTrajectoryPose::set_allocated_relative_pose (::cartographer::transform::proto::Rigid3d relative_pose);
[674] void InitialTrajectoryPose::clear_to_trajectory_id ();
[677] ::google::protobuf::int32 InitialTrajectoryPose::to_trajectory_id () const;
[681] void InitialTrajectoryPose::set_to_trajectory_id (::google::protobuf::int32 value);
[688] void InitialTrajectoryPose::clear_timestamp ();
[691] ::google::protobuf::int64 InitialTrajectoryPose::timestamp () const;
[695] void InitialTrajectoryPose::set_timestamp (::google::protobuf::int64 value);
[1018] void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::clear_fresh_submaps_count ();
[1021] ::google::protobuf::int32 TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::fresh_submaps_count () const;
[1025] void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::set_fresh_submaps_count (::google::protobuf::int32 value);
[1032] void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::clear_min_covered_area ();
[1035] double TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::min_covered_area () const;
[1039] void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::set_min_covered_area (double value);
[1046] void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::clear_min_added_submaps_count ();
[1049] ::google::protobuf::int32 TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::min_added_submaps_count () const;
[1053] void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::set_min_added_submaps_count (::google::protobuf::int32 value);
[1526] bool TrajectoryBuilderOptions::has_trajectory_builder_2d_options () const;
[1529] void TrajectoryBuilderOptions::clear_trajectory_builder_2d_options ();
[1533] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D TrajectoryBuilderOptions::trajectory_builder_2d_options () const;
[1539] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D TrajectoryBuilderOptions::mutable_trajectory_builder_2d_options ();
[1547] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D TrajectoryBuilderOptions::release_trajectory_builder_2d_options ();
[1554] void TrajectoryBuilderOptions::set_allocated_trajectory_builder_2d_options (::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options);
[1566] bool TrajectoryBuilderOptions::has_trajectory_builder_3d_options () const;
[1569] void TrajectoryBuilderOptions::clear_trajectory_builder_3d_options ();
[1573] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D TrajectoryBuilderOptions::trajectory_builder_3d_options () const;
[1579] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D TrajectoryBuilderOptions::mutable_trajectory_builder_3d_options ();
[1587] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D TrajectoryBuilderOptions::release_trajectory_builder_3d_options ();
[1594] void TrajectoryBuilderOptions::set_allocated_trajectory_builder_3d_options (::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options);
[1606] void TrajectoryBuilderOptions::clear_pure_localization ();
[1609] bool TrajectoryBuilderOptions::pure_localization () const;
[1613] void TrajectoryBuilderOptions::set_pure_localization (bool value);
[1620] bool TrajectoryBuilderOptions::has_initial_trajectory_pose () const;
[1623] void TrajectoryBuilderOptions::clear_initial_trajectory_pose ();
[1627] ::cartographer::mapping::proto::InitialTrajectoryPose TrajectoryBuilderOptions::initial_trajectory_pose () const;
[1633] ::cartographer::mapping::proto::InitialTrajectoryPose TrajectoryBuilderOptions::mutable_initial_trajectory_pose ();
[1641] ::cartographer::mapping::proto::InitialTrajectoryPose TrajectoryBuilderOptions::release_initial_trajectory_pose ();
[1648] void TrajectoryBuilderOptions::set_allocated_initial_trajectory_pose (::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose);
[1660] bool TrajectoryBuilderOptions::has_overlapping_submaps_trimmer_2d () const;
[1663] void TrajectoryBuilderOptions::clear_overlapping_submaps_trimmer_2d ();
[1667] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D TrajectoryBuilderOptions::overlapping_submaps_trimmer_2d () const;
[1673] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D TrajectoryBuilderOptions::mutable_overlapping_submaps_trimmer_2d ();
[1681] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D TrajectoryBuilderOptions::release_overlapping_submaps_trimmer_2d ();
[1688] void TrajectoryBuilderOptions::set_allocated_overlapping_submaps_trimmer_2d (::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d);
[1700] void TrajectoryBuilderOptions::clear_border_flag ();
[1703] bool TrajectoryBuilderOptions::border_flag () const;
[1707] void TrajectoryBuilderOptions::set_border_flag (bool value);
[2013] void SensorId::clear_type ();
[2016] ::cartographer::mapping::proto::SensorId_SensorType SensorId::type () const;
[2020] void SensorId::set_type (::cartographer::mapping::proto::SensorId_SensorType value);
[2027] void SensorId::clear_id ();
[2030] ::std::string SensorId::id () const;
[2034] void SensorId::set_id (const ::std::string value);
[2059] ::std::string SensorId::mutable_id ();
[2064] ::std::string SensorId::release_id ();
[2069] void SensorId::set_allocated_id (::std::string id);
[2372] int TrajectoryBuilderOptionsWithSensorIds::sensor_id_size () const;
[2375] void TrajectoryBuilderOptionsWithSensorIds::clear_sensor_id ();
[2378] ::cartographer::mapping::proto::SensorId TrajectoryBuilderOptionsWithSensorIds::sensor_id (int index) const;
[2382] ::cartographer::mapping::proto::SensorId TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id (int index);
[2386] ::cartographer::mapping::proto::SensorId TrajectoryBuilderOptionsWithSensorIds::add_sensor_id ();
[2402] bool TrajectoryBuilderOptionsWithSensorIds::has_trajectory_builder_options () const;
[2405] void TrajectoryBuilderOptionsWithSensorIds::clear_trajectory_builder_options ();
[2409] ::cartographer::mapping::proto::TrajectoryBuilderOptions TrajectoryBuilderOptionsWithSensorIds::trajectory_builder_options () const;
[2415] ::cartographer::mapping::proto::TrajectoryBuilderOptions TrajectoryBuilderOptionsWithSensorIds::mutable_trajectory_builder_options ();
[2423] ::cartographer::mapping::proto::TrajectoryBuilderOptions TrajectoryBuilderOptionsWithSensorIds::release_trajectory_builder_options ();
[2430] void TrajectoryBuilderOptionsWithSensorIds::set_allocated_trajectory_builder_options (::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options);
[2686] int AllTrajectoryBuilderOptions::options_with_sensor_ids_size () const;
[2689] void AllTrajectoryBuilderOptions::clear_options_with_sensor_ids ();
[2692] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds AllTrajectoryBuilderOptions::options_with_sensor_ids (int index) const;
[2696] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids (int index);
[2700] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds AllTrajectoryBuilderOptions::add_options_with_sensor_ids ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory.pb.cc  ( 52 )
[103] void protobuf_AssignDescriptors ();
[111] void protobuf_AssignDescriptorsOnce ();
[116] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[237] ::google::protobuf::Descriptor Trajectory_Node::descriptor ();
[242] Trajectory_Node Trajectory_Node::default_instance ();
[512] void Trajectory_Node::clear_node_index ();
[515] ::google::protobuf::int32 Trajectory_Node::node_index () const;
[519] void Trajectory_Node::set_node_index (::google::protobuf::int32 value);
[526] void Trajectory_Node::clear_timestamp ();
[529] ::google::protobuf::int64 Trajectory_Node::timestamp () const;
[533] void Trajectory_Node::set_timestamp (::google::protobuf::int64 value);
[540] bool Trajectory_Node::has_pose () const;
[543] void Trajectory_Node::clear_pose ();
[547] ::cartographer::transform::proto::Rigid3d Trajectory_Node::pose () const;
[553] ::cartographer::transform::proto::Rigid3d Trajectory_Node::mutable_pose ();
[561] ::cartographer::transform::proto::Rigid3d Trajectory_Node::release_pose ();
[568] void Trajectory_Node::set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[869] void Trajectory_Submap::clear_submap_index ();
[872] ::google::protobuf::int32 Trajectory_Submap::submap_index () const;
[876] void Trajectory_Submap::set_submap_index (::google::protobuf::int32 value);
[1249] void Trajectory::clear_trajectory_id ();
[1252] ::google::protobuf::int32 Trajectory::trajectory_id () const;
[1256] void Trajectory::set_trajectory_id (::google::protobuf::int32 value);
[1263] int Trajectory::node_size () const;
[1266] void Trajectory::clear_node ();
[1269] ::cartographer::mapping::proto::Trajectory_Node Trajectory::node (int index) const;
[1273] ::cartographer::mapping::proto::Trajectory_Node Trajectory::mutable_node (int index);
[1277] ::cartographer::mapping::proto::Trajectory_Node Trajectory::add_node ();
[1293] int Trajectory::submap_size () const;
[1296] void Trajectory::clear_submap ();
[1299] ::cartographer::mapping::proto::Trajectory_Submap Trajectory::submap (int index) const;
[1303] ::cartographer::mapping::proto::Trajectory_Submap Trajectory::mutable_submap (int index);
[1307] ::cartographer::mapping::proto::Trajectory_Submap Trajectory::add_submap ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/submap.pb.cc  ( 54 )
[91] void protobuf_AssignDescriptors ();
[99] void protobuf_AssignDescriptorsOnce ();
[104] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[244] ::google::protobuf::Descriptor Submap2D::descriptor ();
[249] Submap2D Submap2D::default_instance ();
[557] bool Submap2D::has_local_pose () const;
[560] void Submap2D::clear_local_pose ();
[564] ::cartographer::transform::proto::Rigid3d Submap2D::local_pose () const;
[570] ::cartographer::transform::proto::Rigid3d Submap2D::mutable_local_pose ();
[578] ::cartographer::transform::proto::Rigid3d Submap2D::release_local_pose ();
[585] void Submap2D::set_allocated_local_pose (::cartographer::transform::proto::Rigid3d local_pose);
[597] void Submap2D::clear_num_range_data ();
[600] ::google::protobuf::int32 Submap2D::num_range_data () const;
[604] void Submap2D::set_num_range_data (::google::protobuf::int32 value);
[611] void Submap2D::clear_finished ();
[614] bool Submap2D::finished () const;
[618] void Submap2D::set_finished (bool value);
[625] bool Submap2D::has_grid () const;
[628] void Submap2D::clear_grid ();
[632] ::cartographer::mapping::proto::Grid2D Submap2D::grid () const;
[638] ::cartographer::mapping::proto::Grid2D Submap2D::mutable_grid ();
[646] ::cartographer::mapping::proto::Grid2D Submap2D::release_grid ();
[653] void Submap2D::set_allocated_grid (::cartographer::mapping::proto::Grid2D grid);
[1154] bool Submap3D::has_high_resolution_hybrid_grid () const;
[1157] void Submap3D::clear_high_resolution_hybrid_grid ();
[1161] ::cartographer::mapping::proto::HybridGrid Submap3D::high_resolution_hybrid_grid () const;
[1167] ::cartographer::mapping::proto::HybridGrid Submap3D::mutable_high_resolution_hybrid_grid ();
[1175] ::cartographer::mapping::proto::HybridGrid Submap3D::release_high_resolution_hybrid_grid ();
[1182] void Submap3D::set_allocated_high_resolution_hybrid_grid (::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid);
[1194] bool Submap3D::has_low_resolution_hybrid_grid () const;
[1197] void Submap3D::clear_low_resolution_hybrid_grid ();
[1201] ::cartographer::mapping::proto::HybridGrid Submap3D::low_resolution_hybrid_grid () const;
[1207] ::cartographer::mapping::proto::HybridGrid Submap3D::mutable_low_resolution_hybrid_grid ();
[1215] ::cartographer::mapping::proto::HybridGrid Submap3D::release_low_resolution_hybrid_grid ();
[1222] void Submap3D::set_allocated_low_resolution_hybrid_grid (::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/range_data_inserter_options.pb.cc  ( 35 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[147] ::google::protobuf::EnumDescriptor RangeDataInserterOptions_RangeDataInserterType_descriptor ();
[151] bool RangeDataInserterOptions_RangeDataInserterType_IsValid (int value);
[219] ::google::protobuf::Descriptor RangeDataInserterOptions::descriptor ();
[224] RangeDataInserterOptions RangeDataInserterOptions::default_instance ();
[459] void RangeDataInserterOptions::clear_range_data_inserter_type ();
[462] ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions::range_data_inserter_type () const;
[466] void RangeDataInserterOptions::set_range_data_inserter_type (::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType value);
[473] bool RangeDataInserterOptions::has_probability_grid_range_data_inserter_options_2d () const;
[476] void RangeDataInserterOptions::clear_probability_grid_range_data_inserter_options_2d ();
[480] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D RangeDataInserterOptions::probability_grid_range_data_inserter_options_2d () const;
[486] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D RangeDataInserterOptions::mutable_probability_grid_range_data_inserter_options_2d ();
[494] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D RangeDataInserterOptions::release_probability_grid_range_data_inserter_options_2d ();
[501] void RangeDataInserterOptions::set_allocated_probability_grid_range_data_inserter_options_2d (::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/submap_visualization.pb.cc  ( 93 )
[163] void protobuf_AssignDescriptors ();
[171] void protobuf_AssignDescriptorsOnce ();
[176] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[316] ::google::protobuf::Descriptor SubmapList_SubmapEntry::descriptor ();
[321] SubmapList_SubmapEntry SubmapList_SubmapEntry::default_instance ();
[554] void SubmapList_SubmapEntry::clear_submap_version ();
[557] ::google::protobuf::int32 SubmapList_SubmapEntry::submap_version () const;
[561] void SubmapList_SubmapEntry::set_submap_version (::google::protobuf::int32 value);
[568] bool SubmapList_SubmapEntry::has_pose () const;
[571] void SubmapList_SubmapEntry::clear_pose ();
[575] ::cartographer::transform::proto::Rigid3d SubmapList_SubmapEntry::pose () const;
[581] ::cartographer::transform::proto::Rigid3d SubmapList_SubmapEntry::mutable_pose ();
[589] ::cartographer::transform::proto::Rigid3d SubmapList_SubmapEntry::release_pose ();
[596] void SubmapList_SubmapEntry::set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[852] int SubmapList_TrajectorySubmapList::submap_size () const;
[855] void SubmapList_TrajectorySubmapList::clear_submap ();
[858] ::cartographer::mapping::proto::SubmapList_SubmapEntry SubmapList_TrajectorySubmapList::submap (int index) const;
[862] ::cartographer::mapping::proto::SubmapList_SubmapEntry SubmapList_TrajectorySubmapList::mutable_submap (int index);
[866] ::cartographer::mapping::proto::SubmapList_SubmapEntry SubmapList_TrajectorySubmapList::add_submap ();
[1126] int SubmapList::trajectory_size () const;
[1129] void SubmapList::clear_trajectory ();
[1132] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList SubmapList::trajectory (int index) const;
[1136] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList SubmapList::mutable_trajectory (int index);
[1140] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList SubmapList::add_trajectory ();
[1438] void SubmapQuery_Request::clear_submap_index ();
[1441] ::google::protobuf::int32 SubmapQuery_Request::submap_index () const;
[1445] void SubmapQuery_Request::set_submap_index (::google::protobuf::int32 value);
[1452] void SubmapQuery_Request::clear_trajectory_id ();
[1455] ::google::protobuf::int32 SubmapQuery_Request::trajectory_id () const;
[1459] void SubmapQuery_Request::set_trajectory_id (::google::protobuf::int32 value);
[1874] void SubmapQuery_Response_SubmapTexture::clear_cells ();
[1877] ::std::string SubmapQuery_Response_SubmapTexture::cells () const;
[1881] void SubmapQuery_Response_SubmapTexture::set_cells (const ::std::string value);
[1906] ::std::string SubmapQuery_Response_SubmapTexture::mutable_cells ();
[1911] ::std::string SubmapQuery_Response_SubmapTexture::release_cells ();
[1916] void SubmapQuery_Response_SubmapTexture::set_allocated_cells (::std::string cells);
[1927] void SubmapQuery_Response_SubmapTexture::clear_width ();
[1930] ::google::protobuf::int32 SubmapQuery_Response_SubmapTexture::width () const;
[1934] void SubmapQuery_Response_SubmapTexture::set_width (::google::protobuf::int32 value);
[1941] void SubmapQuery_Response_SubmapTexture::clear_height ();
[1944] ::google::protobuf::int32 SubmapQuery_Response_SubmapTexture::height () const;
[1948] void SubmapQuery_Response_SubmapTexture::set_height (::google::protobuf::int32 value);
[1955] void SubmapQuery_Response_SubmapTexture::clear_resolution ();
[1958] double SubmapQuery_Response_SubmapTexture::resolution () const;
[1962] void SubmapQuery_Response_SubmapTexture::set_resolution (double value);
[1969] bool SubmapQuery_Response_SubmapTexture::has_slice_pose () const;
[1972] void SubmapQuery_Response_SubmapTexture::clear_slice_pose ();
[1976] ::cartographer::transform::proto::Rigid3d SubmapQuery_Response_SubmapTexture::slice_pose () const;
[1982] ::cartographer::transform::proto::Rigid3d SubmapQuery_Response_SubmapTexture::mutable_slice_pose ();
[1990] ::cartographer::transform::proto::Rigid3d SubmapQuery_Response_SubmapTexture::release_slice_pose ();
[1997] void SubmapQuery_Response_SubmapTexture::set_allocated_slice_pose (::cartographer::transform::proto::Rigid3d slice_pose);
[2363] int SubmapQuery_Response::textures_size () const;
[2366] void SubmapQuery_Response::clear_textures ();
[2369] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture SubmapQuery_Response::textures (int index) const;
[2373] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture SubmapQuery_Response::mutable_textures (int index);
[2377] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture SubmapQuery_Response::add_textures ();
[2393] void SubmapQuery_Response::clear_error_message ();
[2396] ::std::string SubmapQuery_Response::error_message () const;
[2400] void SubmapQuery_Response::set_error_message (const ::std::string value);
[2425] ::std::string SubmapQuery_Response::mutable_error_message ();
[2430] ::std::string SubmapQuery_Response::release_error_message ();
[2435] void SubmapQuery_Response::set_allocated_error_message (::std::string error_message);
[2744] bool SubmapQuery::has_request () const;
[2747] void SubmapQuery::clear_request ();
[2751] ::cartographer::mapping::proto::SubmapQuery_Request SubmapQuery::request () const;
[2757] ::cartographer::mapping::proto::SubmapQuery_Request SubmapQuery::mutable_request ();
[2765] ::cartographer::mapping::proto::SubmapQuery_Request SubmapQuery::release_request ();
[2772] void SubmapQuery::set_allocated_request (::cartographer::mapping::proto::SubmapQuery_Request request);
[2784] bool SubmapQuery::has_response () const;
[2787] void SubmapQuery::clear_response ();
[2791] ::cartographer::mapping::proto::SubmapQuery_Response SubmapQuery::response () const;
[2797] ::cartographer::mapping::proto::SubmapQuery_Response SubmapQuery::mutable_response ();
[2805] ::cartographer::mapping::proto::SubmapQuery_Response SubmapQuery::release_response ();
[2812] void SubmapQuery::set_allocated_response (::cartographer::mapping::proto::SubmapQuery_Response response);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory_node_data.pb.cc  ( 68 )
[77] void protobuf_AssignDescriptors ();
[85] void protobuf_AssignDescriptorsOnce ();
[90] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[257] ::google::protobuf::Descriptor TrajectoryNodeData::descriptor ();
[262] TrajectoryNodeData TrajectoryNodeData::default_instance ();
[755] void TrajectoryNodeData::clear_timestamp ();
[758] ::google::protobuf::int64 TrajectoryNodeData::timestamp () const;
[762] void TrajectoryNodeData::set_timestamp (::google::protobuf::int64 value);
[769] bool TrajectoryNodeData::has_gravity_alignment () const;
[772] void TrajectoryNodeData::clear_gravity_alignment ();
[776] ::cartographer::transform::proto::Quaterniond TrajectoryNodeData::gravity_alignment () const;
[782] ::cartographer::transform::proto::Quaterniond TrajectoryNodeData::mutable_gravity_alignment ();
[790] ::cartographer::transform::proto::Quaterniond TrajectoryNodeData::release_gravity_alignment ();
[797] void TrajectoryNodeData::set_allocated_gravity_alignment (::cartographer::transform::proto::Quaterniond gravity_alignment);
[809] bool TrajectoryNodeData::has_filtered_gravity_aligned_point_cloud () const;
[812] void TrajectoryNodeData::clear_filtered_gravity_aligned_point_cloud ();
[816] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::filtered_gravity_aligned_point_cloud () const;
[822] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::mutable_filtered_gravity_aligned_point_cloud ();
[830] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::release_filtered_gravity_aligned_point_cloud ();
[837] void TrajectoryNodeData::set_allocated_filtered_gravity_aligned_point_cloud (::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud);
[849] bool TrajectoryNodeData::has_high_resolution_point_cloud () const;
[852] void TrajectoryNodeData::clear_high_resolution_point_cloud ();
[856] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::high_resolution_point_cloud () const;
[862] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::mutable_high_resolution_point_cloud ();
[870] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::release_high_resolution_point_cloud ();
[877] void TrajectoryNodeData::set_allocated_high_resolution_point_cloud (::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud);
[889] bool TrajectoryNodeData::has_low_resolution_point_cloud () const;
[892] void TrajectoryNodeData::clear_low_resolution_point_cloud ();
[896] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::low_resolution_point_cloud () const;
[902] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::mutable_low_resolution_point_cloud ();
[910] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::release_low_resolution_point_cloud ();
[917] void TrajectoryNodeData::set_allocated_low_resolution_point_cloud (::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud);
[929] int TrajectoryNodeData::rotational_scan_matcher_histogram_size () const;
[932] void TrajectoryNodeData::clear_rotational_scan_matcher_histogram ();
[935] float TrajectoryNodeData::rotational_scan_matcher_histogram (int index) const;
[939] void TrajectoryNodeData::set_rotational_scan_matcher_histogram (int index, float value);
[943] void TrajectoryNodeData::add_rotational_scan_matcher_histogram (float value);
[959] bool TrajectoryNodeData::has_local_pose () const;
[962] void TrajectoryNodeData::clear_local_pose ();
[966] ::cartographer::transform::proto::Rigid3d TrajectoryNodeData::local_pose () const;
[972] ::cartographer::transform::proto::Rigid3d TrajectoryNodeData::mutable_local_pose ();
[980] ::cartographer::transform::proto::Rigid3d TrajectoryNodeData::release_local_pose ();
[987] void TrajectoryNodeData::set_allocated_local_pose (::cartographer::transform::proto::Rigid3d local_pose);
[999] bool TrajectoryNodeData::has_obstacles () const;
[1002] void TrajectoryNodeData::clear_obstacles ();
[1006] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::obstacles () const;
[1012] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::mutable_obstacles ();
[1020] ::cartographer::sensor::proto::CompressedPointCloud TrajectoryNodeData::release_obstacles ();
[1027] void TrajectoryNodeData::set_allocated_obstacles (::cartographer::sensor::proto::CompressedPointCloud obstacles);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/ramp.pb.cc  ( 51 )
[74] void protobuf_AssignDescriptors ();
[82] void protobuf_AssignDescriptorsOnce ();
[87] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[223] ::google::protobuf::Descriptor Ramp::descriptor ();
[228] Ramp Ramp::default_instance ();
[581] void Ramp::clear_trajectory_id ();
[584] ::google::protobuf::int32 Ramp::trajectory_id () const;
[588] void Ramp::set_trajectory_id (::google::protobuf::int32 value);
[595] bool Ramp::has_pose1 () const;
[598] void Ramp::clear_pose1 ();
[602] ::cartographer::transform::proto::Rigid2d Ramp::pose1 () const;
[608] ::cartographer::transform::proto::Rigid2d Ramp::mutable_pose1 ();
[616] ::cartographer::transform::proto::Rigid2d Ramp::release_pose1 ();
[623] void Ramp::set_allocated_pose1 (::cartographer::transform::proto::Rigid2d pose1);
[635] bool Ramp::has_pose2 () const;
[638] void Ramp::clear_pose2 ();
[642] ::cartographer::transform::proto::Rigid2d Ramp::pose2 () const;
[648] ::cartographer::transform::proto::Rigid2d Ramp::mutable_pose2 ();
[656] ::cartographer::transform::proto::Rigid2d Ramp::release_pose2 ();
[663] void Ramp::set_allocated_pose2 (::cartographer::transform::proto::Rigid2d pose2);
[675] bool Ramp::has_pose3 () const;
[678] void Ramp::clear_pose3 ();
[682] ::cartographer::transform::proto::Rigid2d Ramp::pose3 () const;
[688] ::cartographer::transform::proto::Rigid2d Ramp::mutable_pose3 ();
[696] ::cartographer::transform::proto::Rigid2d Ramp::release_pose3 ();
[703] void Ramp::set_allocated_pose3 (::cartographer::transform::proto::Rigid2d pose3);
[715] bool Ramp::has_pose4 () const;
[718] void Ramp::clear_pose4 ();
[722] ::cartographer::transform::proto::Rigid2d Ramp::pose4 () const;
[728] ::cartographer::transform::proto::Rigid2d Ramp::mutable_pose4 ();
[736] ::cartographer::transform::proto::Rigid2d Ramp::release_pose4 ();
[743] void Ramp::set_allocated_pose4 (::cartographer::transform::proto::Rigid2d pose4);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/map_builder_options.pb.h  ( 39 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] MapBuilderOptions default_instance ();
[147] bool has_pose_graph_options () const;
[148] void clear_pose_graph_options ();
[150] ::cartographer::mapping::proto::PoseGraphOptions pose_graph_options () const;
[151] ::cartographer::mapping::proto::PoseGraphOptions mutable_pose_graph_options ();
[152] ::cartographer::mapping::proto::PoseGraphOptions release_pose_graph_options ();
[153] void set_allocated_pose_graph_options (::cartographer::mapping::proto::PoseGraphOptions pose_graph_options);
[156] void clear_use_trajectory_builder_2d ();
[158] bool use_trajectory_builder_2d () const;
[159] void set_use_trajectory_builder_2d (bool value);
[162] void clear_use_trajectory_builder_3d ();
[164] bool use_trajectory_builder_3d () const;
[165] void set_use_trajectory_builder_3d (bool value);
[168] void clear_collate_by_trajectory ();
[170] bool collate_by_trajectory () const;
[171] void set_collate_by_trajectory (bool value);
[174] void clear_num_background_threads ();
[176] ::google::protobuf::int32 num_background_threads () const;
[177] void set_num_background_threads (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/map_builder_options.pb.cc  ( 42 )
[74] void protobuf_AssignDescriptors ();
[82] void protobuf_AssignDescriptorsOnce ();
[87] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[201] ::google::protobuf::Descriptor MapBuilderOptions::descriptor ();
[206] MapBuilderOptions MapBuilderOptions::default_instance ();
[540] void MapBuilderOptions::clear_use_trajectory_builder_2d ();
[543] bool MapBuilderOptions::use_trajectory_builder_2d () const;
[547] void MapBuilderOptions::set_use_trajectory_builder_2d (bool value);
[554] void MapBuilderOptions::clear_use_trajectory_builder_3d ();
[557] bool MapBuilderOptions::use_trajectory_builder_3d () const;
[561] void MapBuilderOptions::set_use_trajectory_builder_3d (bool value);
[568] void MapBuilderOptions::clear_num_background_threads ();
[571] ::google::protobuf::int32 MapBuilderOptions::num_background_threads () const;
[575] void MapBuilderOptions::set_num_background_threads (::google::protobuf::int32 value);
[582] bool MapBuilderOptions::has_pose_graph_options () const;
[585] void MapBuilderOptions::clear_pose_graph_options ();
[589] ::cartographer::mapping::proto::PoseGraphOptions MapBuilderOptions::pose_graph_options () const;
[595] ::cartographer::mapping::proto::PoseGraphOptions MapBuilderOptions::mutable_pose_graph_options ();
[603] ::cartographer::mapping::proto::PoseGraphOptions MapBuilderOptions::release_pose_graph_options ();
[610] void MapBuilderOptions::set_allocated_pose_graph_options (::cartographer::mapping::proto::PoseGraphOptions pose_graph_options);
[622] void MapBuilderOptions::clear_collate_by_trajectory ();
[625] bool MapBuilderOptions::collate_by_trajectory () const;
[629] void MapBuilderOptions::set_collate_by_trajectory (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/connected_components.pb.h  ( 31 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] ConnectedComponents_ConnectedComponent default_instance ();
[149] int trajectory_id_size () const;
[150] void clear_trajectory_id ();
[152] ::google::protobuf::int32 trajectory_id (int index) const;
[153] void set_trajectory_id (int index, ::google::protobuf::int32 value);
[154] void add_trajectory_id (::google::protobuf::int32 value);
[255] int connected_component_size () const;
[256] void clear_connected_component ();
[258] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent connected_component (int index) const;
[259] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent mutable_connected_component (int index);
[260] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent add_connected_component ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph_options.pb.h  ( 54 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] PoseGraphOptions default_instance ();
[148] bool has_constraint_builder_options () const;
[149] void clear_constraint_builder_options ();
[151] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options () const;
[152] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions mutable_constraint_builder_options ();
[153] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions release_constraint_builder_options ();
[154] void set_allocated_constraint_builder_options (::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options);
[157] bool has_optimization_problem_options () const;
[158] void clear_optimization_problem_options ();
[160] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options () const;
[161] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions mutable_optimization_problem_options ();
[162] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions release_optimization_problem_options ();
[163] void set_allocated_optimization_problem_options (::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options);
[166] void clear_optimize_every_n_nodes ();
[168] ::google::protobuf::int32 optimize_every_n_nodes () const;
[169] void set_optimize_every_n_nodes (::google::protobuf::int32 value);
[172] void clear_max_num_final_iterations ();
[174] ::google::protobuf::int32 max_num_final_iterations () const;
[175] void set_max_num_final_iterations (::google::protobuf::int32 value);
[178] void clear_global_sampling_ratio ();
[180] double global_sampling_ratio () const;
[181] void set_global_sampling_ratio (double value);
[184] void clear_matcher_translation_weight ();
[186] double matcher_translation_weight () const;
[187] void set_matcher_translation_weight (double value);
[190] void clear_matcher_rotation_weight ();
[192] double matcher_rotation_weight () const;
[193] void set_matcher_rotation_weight (double value);
[196] void clear_global_constraint_search_after_n_seconds ();
[198] double global_constraint_search_after_n_seconds () const;
[199] void set_global_constraint_search_after_n_seconds (double value);
[202] void clear_log_residual_histograms ();
[204] bool log_residual_histograms () const;
[205] void set_log_residual_histograms (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/motion_filter_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] MotionFilterOptions default_instance ();
[146] void clear_max_time_seconds ();
[148] double max_time_seconds () const;
[149] void set_max_time_seconds (double value);
[152] void clear_max_distance_meters ();
[154] double max_distance_meters () const;
[155] void set_max_distance_meters (double value);
[158] void clear_max_angle_radians ();
[160] double max_angle_radians () const;
[161] void set_max_angle_radians (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/submap_visualization.pb.h  ( 90 )
[109] ::google::protobuf::Descriptor descriptor ();
[110] SubmapList_SubmapEntry default_instance ();
[165] bool has_pose () const;
[166] void clear_pose ();
[168] ::cartographer::transform::proto::Rigid3d pose () const;
[169] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[170] ::cartographer::transform::proto::Rigid3d release_pose ();
[171] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[174] void clear_submap_version ();
[176] ::google::protobuf::int32 submap_version () const;
[177] void set_submap_version (::google::protobuf::int32 value);
[272] int submap_size () const;
[273] void clear_submap ();
[275] ::cartographer::mapping::proto::SubmapList_SubmapEntry submap (int index) const;
[276] ::cartographer::mapping::proto::SubmapList_SubmapEntry mutable_submap (int index);
[277] ::cartographer::mapping::proto::SubmapList_SubmapEntry add_submap ();
[378] int trajectory_size () const;
[379] void clear_trajectory ();
[381] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList trajectory (int index) const;
[382] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList mutable_trajectory (int index);
[383] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList add_trajectory ();
[481] void clear_submap_index ();
[483] ::google::protobuf::int32 submap_index () const;
[484] void set_submap_index (::google::protobuf::int32 value);
[487] void clear_trajectory_id ();
[489] ::google::protobuf::int32 trajectory_id () const;
[490] void set_trajectory_id (::google::protobuf::int32 value);
[585] void clear_cells ();
[587] ::std::string cells () const;
[588] void set_cells (const ::std::string value);
[594] ::std::string mutable_cells ();
[595] ::std::string release_cells ();
[596] void set_allocated_cells (::std::string cells);
[599] bool has_slice_pose () const;
[600] void clear_slice_pose ();
[602] ::cartographer::transform::proto::Rigid3d slice_pose () const;
[603] ::cartographer::transform::proto::Rigid3d mutable_slice_pose ();
[604] ::cartographer::transform::proto::Rigid3d release_slice_pose ();
[605] void set_allocated_slice_pose (::cartographer::transform::proto::Rigid3d slice_pose);
[608] void clear_width ();
[610] ::google::protobuf::int32 width () const;
[611] void set_width (::google::protobuf::int32 value);
[614] void clear_height ();
[616] ::google::protobuf::int32 height () const;
[617] void set_height (::google::protobuf::int32 value);
[620] void clear_resolution ();
[622] double resolution () const;
[623] void set_resolution (double value);
[723] int textures_size () const;
[724] void clear_textures ();
[726] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture textures (int index) const;
[727] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture mutable_textures (int index);
[728] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture add_textures ();
[735] void clear_error_message ();
[737] ::std::string error_message () const;
[738] void set_error_message (const ::std::string value);
[744] ::std::string mutable_error_message ();
[745] ::std::string release_error_message ();
[746] void set_allocated_error_message (::std::string error_message);
[851] bool has_request () const;
[852] void clear_request ();
[854] ::cartographer::mapping::proto::SubmapQuery_Request request () const;
[855] ::cartographer::mapping::proto::SubmapQuery_Request mutable_request ();
[856] ::cartographer::mapping::proto::SubmapQuery_Request release_request ();
[857] void set_allocated_request (::cartographer::mapping::proto::SubmapQuery_Request request);
[860] bool has_response () const;
[861] void clear_response ();
[863] ::cartographer::mapping::proto::SubmapQuery_Response response () const;
[864] ::cartographer::mapping::proto::SubmapQuery_Response mutable_response ();
[865] ::cartographer::mapping::proto::SubmapQuery_Response release_response ();
[866] void set_allocated_response (::cartographer::mapping::proto::SubmapQuery_Response response);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory.pb.h  ( 49 )
[97] ::google::protobuf::Descriptor descriptor ();
[98] Trajectory_Node default_instance ();
[153] bool has_pose () const;
[154] void clear_pose ();
[156] ::cartographer::transform::proto::Rigid3d pose () const;
[157] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[158] ::cartographer::transform::proto::Rigid3d release_pose ();
[159] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[162] void clear_timestamp ();
[164] ::google::protobuf::int64 timestamp () const;
[165] void set_timestamp (::google::protobuf::int64 value);
[168] void clear_node_index ();
[170] ::google::protobuf::int32 node_index () const;
[171] void set_node_index (::google::protobuf::int32 value);
[276] void clear_submap_index ();
[278] ::google::protobuf::int32 submap_index () const;
[279] void set_submap_index (::google::protobuf::int32 value);
[377] int node_size () const;
[378] void clear_node ();
[380] ::cartographer::mapping::proto::Trajectory_Node node (int index) const;
[381] ::cartographer::mapping::proto::Trajectory_Node mutable_node (int index);
[382] ::cartographer::mapping::proto::Trajectory_Node add_node ();
[389] int submap_size () const;
[390] void clear_submap ();
[392] ::cartographer::mapping::proto::Trajectory_Submap submap (int index) const;
[393] ::cartographer::mapping::proto::Trajectory_Submap mutable_submap (int index);
[394] ::cartographer::mapping::proto::Trajectory_Submap add_submap ();
[401] void clear_trajectory_id ();
[403] ::google::protobuf::int32 trajectory_id () const;
[404] void set_trajectory_id (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/range_data_inserter_options.pb.h  ( 32 )
[70] bool RangeDataInserterOptions_RangeDataInserterType_IsValid (int value);
[75] ::google::protobuf::EnumDescriptor RangeDataInserterOptions_RangeDataInserterType_descriptor ();
[113] ::google::protobuf::Descriptor descriptor ();
[114] RangeDataInserterOptions default_instance ();
[195] bool has_probability_grid_range_data_inserter_options_2d () const;
[196] void clear_probability_grid_range_data_inserter_options_2d ();
[198] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d () const;
[199] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D mutable_probability_grid_range_data_inserter_options_2d ();
[200] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D release_probability_grid_range_data_inserter_options_2d ();
[201] void set_allocated_probability_grid_range_data_inserter_options_2d (::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d);
[204] void clear_range_data_inserter_type ();
[206] ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType range_data_inserter_type () const;
[207] void set_range_data_inserter_type (::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/serialization.pb.cc  ( 157 )
[228] void protobuf_AssignDescriptors ();
[236] void protobuf_AssignDescriptorsOnce ();
[241] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[481] ::google::protobuf::Descriptor Submap::descriptor ();
[486] Submap Submap::default_instance ();
[763] bool Submap::has_submap_id () const;
[766] void Submap::clear_submap_id ();
[770] ::cartographer::mapping::proto::SubmapId Submap::submap_id () const;
[776] ::cartographer::mapping::proto::SubmapId Submap::mutable_submap_id ();
[784] ::cartographer::mapping::proto::SubmapId Submap::release_submap_id ();
[791] void Submap::set_allocated_submap_id (::cartographer::mapping::proto::SubmapId submap_id);
[803] bool Submap::has_submap_2d () const;
[806] void Submap::clear_submap_2d ();
[810] ::cartographer::mapping::proto::Submap2D Submap::submap_2d () const;
[816] ::cartographer::mapping::proto::Submap2D Submap::mutable_submap_2d ();
[824] ::cartographer::mapping::proto::Submap2D Submap::release_submap_2d ();
[831] void Submap::set_allocated_submap_2d (::cartographer::mapping::proto::Submap2D submap_2d);
[843] bool Submap::has_submap_3d () const;
[846] void Submap::clear_submap_3d ();
[850] ::cartographer::mapping::proto::Submap3D Submap::submap_3d () const;
[856] ::cartographer::mapping::proto::Submap3D Submap::mutable_submap_3d ();
[864] ::cartographer::mapping::proto::Submap3D Submap::release_submap_3d ();
[871] void Submap::set_allocated_submap_3d (::cartographer::mapping::proto::Submap3D submap_3d);
[1181] bool Node::has_node_id () const;
[1184] void Node::clear_node_id ();
[1188] ::cartographer::mapping::proto::NodeId Node::node_id () const;
[1194] ::cartographer::mapping::proto::NodeId Node::mutable_node_id ();
[1202] ::cartographer::mapping::proto::NodeId Node::release_node_id ();
[1209] void Node::set_allocated_node_id (::cartographer::mapping::proto::NodeId node_id);
[1221] bool Node::has_node_data () const;
[1224] void Node::clear_node_data ();
[1228] ::cartographer::mapping::proto::TrajectoryNodeData Node::node_data () const;
[1234] ::cartographer::mapping::proto::TrajectoryNodeData Node::mutable_node_data ();
[1242] ::cartographer::mapping::proto::TrajectoryNodeData Node::release_node_data ();
[1249] void Node::set_allocated_node_data (::cartographer::mapping::proto::TrajectoryNodeData node_data);
[1550] void ImuData::clear_trajectory_id ();
[1553] ::google::protobuf::int32 ImuData::trajectory_id () const;
[1557] void ImuData::set_trajectory_id (::google::protobuf::int32 value);
[1564] bool ImuData::has_imu_data () const;
[1567] void ImuData::clear_imu_data ();
[1571] ::cartographer::sensor::proto::ImuData ImuData::imu_data () const;
[1577] ::cartographer::sensor::proto::ImuData ImuData::mutable_imu_data ();
[1585] ::cartographer::sensor::proto::ImuData ImuData::release_imu_data ();
[1592] void ImuData::set_allocated_imu_data (::cartographer::sensor::proto::ImuData imu_data);
[1907] bool OdometryData::has_odometry_data () const;
[1910] void OdometryData::clear_odometry_data ();
[1914] ::cartographer::sensor::proto::OdometryData OdometryData::odometry_data () const;
[1920] ::cartographer::sensor::proto::OdometryData OdometryData::mutable_odometry_data ();
[1928] ::cartographer::sensor::proto::OdometryData OdometryData::release_odometry_data ();
[1935] void OdometryData::set_allocated_odometry_data (::cartographer::sensor::proto::OdometryData odometry_data);
[2250] bool FixedFramePoseData::has_fixed_frame_pose_data () const;
[2253] void FixedFramePoseData::clear_fixed_frame_pose_data ();
[2257] ::cartographer::sensor::proto::FixedFramePoseData FixedFramePoseData::fixed_frame_pose_data () const;
[2263] ::cartographer::sensor::proto::FixedFramePoseData FixedFramePoseData::mutable_fixed_frame_pose_data ();
[2271] ::cartographer::sensor::proto::FixedFramePoseData FixedFramePoseData::release_fixed_frame_pose_data ();
[2278] void FixedFramePoseData::set_allocated_fixed_frame_pose_data (::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data);
[2593] bool LandmarkData::has_landmark_data () const;
[2596] void LandmarkData::clear_landmark_data ();
[2600] ::cartographer::sensor::proto::LandmarkData LandmarkData::landmark_data () const;
[2606] ::cartographer::sensor::proto::LandmarkData LandmarkData::mutable_landmark_data ();
[2614] ::cartographer::sensor::proto::LandmarkData LandmarkData::release_landmark_data ();
[2621] void LandmarkData::set_allocated_landmark_data (::cartographer::sensor::proto::LandmarkData landmark_data);
[3021] void TrajectoryData::clear_gravity_constant ();
[3024] double TrajectoryData::gravity_constant () const;
[3028] void TrajectoryData::set_gravity_constant (double value);
[3035] bool TrajectoryData::has_imu_calibration () const;
[3038] void TrajectoryData::clear_imu_calibration ();
[3042] ::cartographer::transform::proto::Quaterniond TrajectoryData::imu_calibration () const;
[3048] ::cartographer::transform::proto::Quaterniond TrajectoryData::mutable_imu_calibration ();
[3056] ::cartographer::transform::proto::Quaterniond TrajectoryData::release_imu_calibration ();
[3063] void TrajectoryData::set_allocated_imu_calibration (::cartographer::transform::proto::Quaterniond imu_calibration);
[3075] bool TrajectoryData::has_fixed_frame_origin_in_map () const;
[3078] void TrajectoryData::clear_fixed_frame_origin_in_map ();
[3082] ::cartographer::transform::proto::Rigid3d TrajectoryData::fixed_frame_origin_in_map () const;
[3088] ::cartographer::transform::proto::Rigid3d TrajectoryData::mutable_fixed_frame_origin_in_map ();
[3096] ::cartographer::transform::proto::Rigid3d TrajectoryData::release_fixed_frame_origin_in_map ();
[3103] void TrajectoryData::set_allocated_fixed_frame_origin_in_map (::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map);
[3447] void LocalSlamResultData::clear_timestamp ();
[3450] ::google::protobuf::int64 LocalSlamResultData::timestamp () const;
[3454] void LocalSlamResultData::set_timestamp (::google::protobuf::int64 value);
[3501] int LocalSlamResultData::submaps_size () const;
[3504] void LocalSlamResultData::clear_submaps ();
[3507] ::cartographer::mapping::proto::Submap LocalSlamResultData::submaps (int index) const;
[3511] ::cartographer::mapping::proto::Submap LocalSlamResultData::mutable_submaps (int index);
[3515] ::cartographer::mapping::proto::Submap LocalSlamResultData::add_submaps ();
[3771] void SerializationHeader::clear_format_version ();
[3774] ::google::protobuf::uint32 SerializationHeader::format_version () const;
[3778] void SerializationHeader::set_format_version (::google::protobuf::uint32 value);
[3902] void SerializedData::clear_data ();
[4470] bool SerializedData::has_pose_graph () const;
[4473] void SerializedData::set_has_pose_graph ();
[4476] void SerializedData::clear_pose_graph ();
[4482] ::cartographer::mapping::proto::PoseGraph SerializedData::pose_graph () const;
[4488] ::cartographer::mapping::proto::PoseGraph SerializedData::mutable_pose_graph ();
[4497] ::cartographer::mapping::proto::PoseGraph SerializedData::release_pose_graph ();
[4508] void SerializedData::set_allocated_pose_graph (::cartographer::mapping::proto::PoseGraph pose_graph);
[4518] bool SerializedData::has_all_trajectory_builder_options () const;
[4521] void SerializedData::set_has_all_trajectory_builder_options ();
[4524] void SerializedData::clear_all_trajectory_builder_options ();
[4530] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions SerializedData::all_trajectory_builder_options () const;
[4536] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions SerializedData::mutable_all_trajectory_builder_options ();
[4545] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions SerializedData::release_all_trajectory_builder_options ();
[4556] void SerializedData::set_allocated_all_trajectory_builder_options (::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options);
[4566] bool SerializedData::has_submap () const;
[4569] void SerializedData::set_has_submap ();
[4572] void SerializedData::clear_submap ();
[4578] ::cartographer::mapping::proto::Submap SerializedData::submap () const;
[4584] ::cartographer::mapping::proto::Submap SerializedData::mutable_submap ();
[4593] ::cartographer::mapping::proto::Submap SerializedData::release_submap ();
[4604] void SerializedData::set_allocated_submap (::cartographer::mapping::proto::Submap submap);
[4614] bool SerializedData::has_node () const;
[4617] void SerializedData::set_has_node ();
[4620] void SerializedData::clear_node ();
[4626] ::cartographer::mapping::proto::Node SerializedData::node () const;
[4632] ::cartographer::mapping::proto::Node SerializedData::mutable_node ();
[4641] ::cartographer::mapping::proto::Node SerializedData::release_node ();
[4652] void SerializedData::set_allocated_node (::cartographer::mapping::proto::Node node);
[4662] bool SerializedData::has_trajectory_data () const;
[4665] void SerializedData::set_has_trajectory_data ();
[4668] void SerializedData::clear_trajectory_data ();
[4674] ::cartographer::mapping::proto::TrajectoryData SerializedData::trajectory_data () const;
[4680] ::cartographer::mapping::proto::TrajectoryData SerializedData::mutable_trajectory_data ();
[4689] ::cartographer::mapping::proto::TrajectoryData SerializedData::release_trajectory_data ();
[4700] void SerializedData::set_allocated_trajectory_data (::cartographer::mapping::proto::TrajectoryData trajectory_data);
[4713] void SerializedData::set_has_imu_data ();
[4761] void SerializedData::set_has_odometry_data ();
[4809] void SerializedData::set_has_fixed_frame_pose_data ();
[4857] void SerializedData::set_has_landmark_data ();
[4902] bool SerializedData::has_ramp () const;
[4905] void SerializedData::set_has_ramp ();
[4908] void SerializedData::clear_ramp ();
[4914] ::cartographer::mapping::proto::Ramp SerializedData::ramp () const;
[4920] ::cartographer::mapping::proto::Ramp SerializedData::mutable_ramp ();
[4929] ::cartographer::mapping::proto::Ramp SerializedData::release_ramp ();
[4940] void SerializedData::set_allocated_ramp (::cartographer::mapping::proto::Ramp ramp);
[4949] bool SerializedData::has_data () const;
[4952] void SerializedData::clear_has_data ();
[4955] SerializedData::DataCase SerializedData::data_case () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.cc  ( 44 )
[75] void protobuf_AssignDescriptors ();
[83] void protobuf_AssignDescriptorsOnce ();
[88] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[203] ::google::protobuf::Descriptor CeresScanMatcherOptions3D::descriptor ();
[208] CeresScanMatcherOptions3D CeresScanMatcherOptions3D::default_instance ();
[567] int CeresScanMatcherOptions3D::occupied_space_weight_size () const;
[570] void CeresScanMatcherOptions3D::clear_occupied_space_weight ();
[573] double CeresScanMatcherOptions3D::occupied_space_weight (int index) const;
[577] void CeresScanMatcherOptions3D::set_occupied_space_weight (int index, double value);
[581] void CeresScanMatcherOptions3D::add_occupied_space_weight (double value);
[597] void CeresScanMatcherOptions3D::clear_translation_weight ();
[600] double CeresScanMatcherOptions3D::translation_weight () const;
[604] void CeresScanMatcherOptions3D::set_translation_weight (double value);
[611] void CeresScanMatcherOptions3D::clear_rotation_weight ();
[614] double CeresScanMatcherOptions3D::rotation_weight () const;
[618] void CeresScanMatcherOptions3D::set_rotation_weight (double value);
[625] void CeresScanMatcherOptions3D::clear_only_optimize_yaw ();
[628] bool CeresScanMatcherOptions3D::only_optimize_yaw () const;
[632] void CeresScanMatcherOptions3D::set_only_optimize_yaw (bool value);
[639] bool CeresScanMatcherOptions3D::has_ceres_solver_options () const;
[642] void CeresScanMatcherOptions3D::clear_ceres_solver_options ();
[646] ::cartographer::common::proto::CeresSolverOptions CeresScanMatcherOptions3D::ceres_solver_options () const;
[652] ::cartographer::common::proto::CeresSolverOptions CeresScanMatcherOptions3D::mutable_ceres_solver_options ();
[660] ::cartographer::common::proto::CeresSolverOptions CeresScanMatcherOptions3D::release_ceres_solver_options ();
[667] void CeresScanMatcherOptions3D::set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h  ( 33 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] RealTimeCorrelativeScanMatcherOptions default_instance ();
[149] void clear_linear_search_window ();
[151] double linear_search_window () const;
[152] void set_linear_search_window (double value);
[155] void clear_angular_search_window ();
[157] double angular_search_window () const;
[158] void set_angular_search_window (double value);
[161] void clear_translation_delta_cost_weight ();
[163] double translation_delta_cost_weight () const;
[164] void set_translation_delta_cost_weight (double value);
[167] void clear_rotation_delta_cost_weight ();
[169] double rotation_delta_cost_weight () const;
[170] void set_rotation_delta_cost_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.cc  ( 36 )
[74] void protobuf_AssignDescriptors ();
[82] void protobuf_AssignDescriptorsOnce ();
[87] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[188] ::google::protobuf::Descriptor RealTimeCorrelativeScanMatcherOptions::descriptor ();
[193] RealTimeCorrelativeScanMatcherOptions RealTimeCorrelativeScanMatcherOptions::default_instance ();
[485] void RealTimeCorrelativeScanMatcherOptions::clear_linear_search_window ();
[488] double RealTimeCorrelativeScanMatcherOptions::linear_search_window () const;
[492] void RealTimeCorrelativeScanMatcherOptions::set_linear_search_window (double value);
[499] void RealTimeCorrelativeScanMatcherOptions::clear_angular_search_window ();
[502] double RealTimeCorrelativeScanMatcherOptions::angular_search_window () const;
[506] void RealTimeCorrelativeScanMatcherOptions::set_angular_search_window (double value);
[513] void RealTimeCorrelativeScanMatcherOptions::clear_translation_delta_cost_weight ();
[516] double RealTimeCorrelativeScanMatcherOptions::translation_delta_cost_weight () const;
[520] void RealTimeCorrelativeScanMatcherOptions::set_translation_delta_cost_weight (double value);
[527] void RealTimeCorrelativeScanMatcherOptions::clear_rotation_delta_cost_weight ();
[530] double RealTimeCorrelativeScanMatcherOptions::rotation_delta_cost_weight () const;
[534] void RealTimeCorrelativeScanMatcherOptions::set_rotation_delta_cost_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h  ( 30 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] FastCorrelativeScanMatcherOptions2D default_instance ();
[149] void clear_linear_search_window ();
[151] double linear_search_window () const;
[152] void set_linear_search_window (double value);
[155] void clear_angular_search_window ();
[157] double angular_search_window () const;
[158] void set_angular_search_window (double value);
[161] void clear_branch_and_bound_depth ();
[163] ::google::protobuf::int32 branch_and_bound_depth () const;
[164] void set_branch_and_bound_depth (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h  ( 36 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] CeresScanMatcherOptions2D default_instance ();
[150] bool has_ceres_solver_options () const;
[151] void clear_ceres_solver_options ();
[153] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[154] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[155] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[156] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[159] void clear_occupied_space_weight ();
[161] double occupied_space_weight () const;
[162] void set_occupied_space_weight (double value);
[165] void clear_translation_weight ();
[167] double translation_weight () const;
[168] void set_translation_weight (double value);
[171] void clear_rotation_weight ();
[173] double rotation_weight () const;
[174] void set_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.cc  ( 39 )
[74] void protobuf_AssignDescriptors ();
[82] void protobuf_AssignDescriptorsOnce ();
[87] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[200] ::google::protobuf::Descriptor CeresScanMatcherOptions2D::descriptor ();
[205] CeresScanMatcherOptions2D CeresScanMatcherOptions2D::default_instance ();
[504] void CeresScanMatcherOptions2D::clear_occupied_space_weight ();
[507] double CeresScanMatcherOptions2D::occupied_space_weight () const;
[511] void CeresScanMatcherOptions2D::set_occupied_space_weight (double value);
[518] void CeresScanMatcherOptions2D::clear_translation_weight ();
[521] double CeresScanMatcherOptions2D::translation_weight () const;
[525] void CeresScanMatcherOptions2D::set_translation_weight (double value);
[532] void CeresScanMatcherOptions2D::clear_rotation_weight ();
[535] double CeresScanMatcherOptions2D::rotation_weight () const;
[539] void CeresScanMatcherOptions2D::set_rotation_weight (double value);
[546] bool CeresScanMatcherOptions2D::has_ceres_solver_options () const;
[549] void CeresScanMatcherOptions2D::clear_ceres_solver_options ();
[553] ::cartographer::common::proto::CeresSolverOptions CeresScanMatcherOptions2D::ceres_solver_options () const;
[559] ::cartographer::common::proto::CeresSolverOptions CeresScanMatcherOptions2D::mutable_ceres_solver_options ();
[567] ::cartographer::common::proto::CeresSolverOptions CeresScanMatcherOptions2D::release_ceres_solver_options ();
[574] void CeresScanMatcherOptions2D::set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h  ( 41 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] CeresScanMatcherOptions3D default_instance ();
[150] int occupied_space_weight_size () const;
[151] void clear_occupied_space_weight ();
[153] double occupied_space_weight (int index) const;
[154] void set_occupied_space_weight (int index, double value);
[155] void add_occupied_space_weight (double value);
[162] bool has_ceres_solver_options () const;
[163] void clear_ceres_solver_options ();
[165] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[166] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[167] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[168] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[171] void clear_translation_weight ();
[173] double translation_weight () const;
[174] void set_translation_weight (double value);
[177] void clear_rotation_weight ();
[179] double rotation_weight () const;
[180] void set_rotation_weight (double value);
[183] void clear_only_optimize_yaw ();
[185] bool only_optimize_yaw () const;
[186] void set_only_optimize_yaw (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.cc  ( 45 )
[77] void protobuf_AssignDescriptors ();
[85] void protobuf_AssignDescriptorsOnce ();
[90] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[197] ::google::protobuf::Descriptor FastCorrelativeScanMatcherOptions3D::descriptor ();
[202] FastCorrelativeScanMatcherOptions3D FastCorrelativeScanMatcherOptions3D::default_instance ();
[597] void FastCorrelativeScanMatcherOptions3D::clear_branch_and_bound_depth ();
[600] ::google::protobuf::int32 FastCorrelativeScanMatcherOptions3D::branch_and_bound_depth () const;
[604] void FastCorrelativeScanMatcherOptions3D::set_branch_and_bound_depth (::google::protobuf::int32 value);
[611] void FastCorrelativeScanMatcherOptions3D::clear_full_resolution_depth ();
[614] ::google::protobuf::int32 FastCorrelativeScanMatcherOptions3D::full_resolution_depth () const;
[618] void FastCorrelativeScanMatcherOptions3D::set_full_resolution_depth (::google::protobuf::int32 value);
[625] void FastCorrelativeScanMatcherOptions3D::clear_min_rotational_score ();
[628] double FastCorrelativeScanMatcherOptions3D::min_rotational_score () const;
[632] void FastCorrelativeScanMatcherOptions3D::set_min_rotational_score (double value);
[639] void FastCorrelativeScanMatcherOptions3D::clear_min_low_resolution_score ();
[642] double FastCorrelativeScanMatcherOptions3D::min_low_resolution_score () const;
[646] void FastCorrelativeScanMatcherOptions3D::set_min_low_resolution_score (double value);
[653] void FastCorrelativeScanMatcherOptions3D::clear_linear_xy_search_window ();
[656] double FastCorrelativeScanMatcherOptions3D::linear_xy_search_window () const;
[660] void FastCorrelativeScanMatcherOptions3D::set_linear_xy_search_window (double value);
[667] void FastCorrelativeScanMatcherOptions3D::clear_linear_z_search_window ();
[670] double FastCorrelativeScanMatcherOptions3D::linear_z_search_window () const;
[674] void FastCorrelativeScanMatcherOptions3D::set_linear_z_search_window (double value);
[681] void FastCorrelativeScanMatcherOptions3D::clear_angular_search_window ();
[684] double FastCorrelativeScanMatcherOptions3D::angular_search_window () const;
[688] void FastCorrelativeScanMatcherOptions3D::set_angular_search_window (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h  ( 42 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] FastCorrelativeScanMatcherOptions3D default_instance ();
[149] void clear_min_rotational_score ();
[151] double min_rotational_score () const;
[152] void set_min_rotational_score (double value);
[155] void clear_linear_xy_search_window ();
[157] double linear_xy_search_window () const;
[158] void set_linear_xy_search_window (double value);
[161] void clear_branch_and_bound_depth ();
[163] ::google::protobuf::int32 branch_and_bound_depth () const;
[164] void set_branch_and_bound_depth (::google::protobuf::int32 value);
[167] void clear_full_resolution_depth ();
[169] ::google::protobuf::int32 full_resolution_depth () const;
[170] void set_full_resolution_depth (::google::protobuf::int32 value);
[173] void clear_linear_z_search_window ();
[175] double linear_z_search_window () const;
[176] void set_linear_z_search_window (double value);
[179] void clear_angular_search_window ();
[181] double angular_search_window () const;
[182] void set_angular_search_window (double value);
[185] void clear_min_low_resolution_score ();
[187] double min_low_resolution_score () const;
[188] void set_min_low_resolution_score (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.cc  ( 33 )
[73] void protobuf_AssignDescriptors ();
[81] void protobuf_AssignDescriptorsOnce ();
[86] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[185] ::google::protobuf::Descriptor FastCorrelativeScanMatcherOptions2D::descriptor ();
[190] FastCorrelativeScanMatcherOptions2D FastCorrelativeScanMatcherOptions2D::default_instance ();
[451] void FastCorrelativeScanMatcherOptions2D::clear_linear_search_window ();
[454] double FastCorrelativeScanMatcherOptions2D::linear_search_window () const;
[458] void FastCorrelativeScanMatcherOptions2D::set_linear_search_window (double value);
[465] void FastCorrelativeScanMatcherOptions2D::clear_angular_search_window ();
[468] double FastCorrelativeScanMatcherOptions2D::angular_search_window () const;
[472] void FastCorrelativeScanMatcherOptions2D::set_angular_search_window (double value);
[479] void FastCorrelativeScanMatcherOptions2D::clear_branch_and_bound_depth ();
[482] ::google::protobuf::int32 FastCorrelativeScanMatcherOptions2D::branch_and_bound_depth () const;
[486] void FastCorrelativeScanMatcherOptions2D::set_branch_and_bound_depth (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.cc  ( 63 )
[82] void protobuf_AssignDescriptors ();
[90] void protobuf_AssignDescriptorsOnce ();
[95] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[223] ::google::protobuf::Descriptor OptimizationProblemOptions::descriptor ();
[228] OptimizationProblemOptions OptimizationProblemOptions::default_instance ();
[791] void OptimizationProblemOptions::clear_huber_scale ();
[794] double OptimizationProblemOptions::huber_scale () const;
[798] void OptimizationProblemOptions::set_huber_scale (double value);
[805] void OptimizationProblemOptions::clear_acceleration_weight ();
[808] double OptimizationProblemOptions::acceleration_weight () const;
[812] void OptimizationProblemOptions::set_acceleration_weight (double value);
[819] void OptimizationProblemOptions::clear_rotation_weight ();
[822] double OptimizationProblemOptions::rotation_weight () const;
[826] void OptimizationProblemOptions::set_rotation_weight (double value);
[833] void OptimizationProblemOptions::clear_local_slam_pose_translation_weight ();
[836] double OptimizationProblemOptions::local_slam_pose_translation_weight () const;
[840] void OptimizationProblemOptions::set_local_slam_pose_translation_weight (double value);
[847] void OptimizationProblemOptions::clear_local_slam_pose_rotation_weight ();
[850] double OptimizationProblemOptions::local_slam_pose_rotation_weight () const;
[854] void OptimizationProblemOptions::set_local_slam_pose_rotation_weight (double value);
[861] void OptimizationProblemOptions::clear_odometry_translation_weight ();
[864] double OptimizationProblemOptions::odometry_translation_weight () const;
[868] void OptimizationProblemOptions::set_odometry_translation_weight (double value);
[875] void OptimizationProblemOptions::clear_odometry_rotation_weight ();
[878] double OptimizationProblemOptions::odometry_rotation_weight () const;
[882] void OptimizationProblemOptions::set_odometry_rotation_weight (double value);
[889] void OptimizationProblemOptions::clear_fixed_frame_pose_translation_weight ();
[892] double OptimizationProblemOptions::fixed_frame_pose_translation_weight () const;
[896] void OptimizationProblemOptions::set_fixed_frame_pose_translation_weight (double value);
[903] void OptimizationProblemOptions::clear_fixed_frame_pose_rotation_weight ();
[906] double OptimizationProblemOptions::fixed_frame_pose_rotation_weight () const;
[910] void OptimizationProblemOptions::set_fixed_frame_pose_rotation_weight (double value);
[917] void OptimizationProblemOptions::clear_fix_z_in_3d ();
[920] bool OptimizationProblemOptions::fix_z_in_3d () const;
[924] void OptimizationProblemOptions::set_fix_z_in_3d (bool value);
[931] void OptimizationProblemOptions::clear_log_solver_summary ();
[934] bool OptimizationProblemOptions::log_solver_summary () const;
[938] void OptimizationProblemOptions::set_log_solver_summary (bool value);
[945] bool OptimizationProblemOptions::has_ceres_solver_options () const;
[948] void OptimizationProblemOptions::clear_ceres_solver_options ();
[952] ::cartographer::common::proto::CeresSolverOptions OptimizationProblemOptions::ceres_solver_options () const;
[958] ::cartographer::common::proto::CeresSolverOptions OptimizationProblemOptions::mutable_ceres_solver_options ();
[966] ::cartographer::common::proto::CeresSolverOptions OptimizationProblemOptions::release_ceres_solver_options ();
[973] void OptimizationProblemOptions::set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.cc  ( 69 )
[81] void protobuf_AssignDescriptors ();
[89] void protobuf_AssignDescriptorsOnce ();
[94] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[264] ::google::protobuf::Descriptor ConstraintBuilderOptions::descriptor ();
[269] ConstraintBuilderOptions ConstraintBuilderOptions::default_instance ();
[820] void ConstraintBuilderOptions::clear_sampling_ratio ();
[823] double ConstraintBuilderOptions::sampling_ratio () const;
[827] void ConstraintBuilderOptions::set_sampling_ratio (double value);
[834] void ConstraintBuilderOptions::clear_max_constraint_distance ();
[837] double ConstraintBuilderOptions::max_constraint_distance () const;
[841] void ConstraintBuilderOptions::set_max_constraint_distance (double value);
[848] void ConstraintBuilderOptions::clear_min_score ();
[851] double ConstraintBuilderOptions::min_score () const;
[855] void ConstraintBuilderOptions::set_min_score (double value);
[862] void ConstraintBuilderOptions::clear_global_localization_min_score ();
[865] double ConstraintBuilderOptions::global_localization_min_score () const;
[869] void ConstraintBuilderOptions::set_global_localization_min_score (double value);
[876] void ConstraintBuilderOptions::clear_loop_closure_translation_weight ();
[879] double ConstraintBuilderOptions::loop_closure_translation_weight () const;
[883] void ConstraintBuilderOptions::set_loop_closure_translation_weight (double value);
[890] void ConstraintBuilderOptions::clear_loop_closure_rotation_weight ();
[893] double ConstraintBuilderOptions::loop_closure_rotation_weight () const;
[897] void ConstraintBuilderOptions::set_loop_closure_rotation_weight (double value);
[904] void ConstraintBuilderOptions::clear_log_matches ();
[907] bool ConstraintBuilderOptions::log_matches () const;
[911] void ConstraintBuilderOptions::set_log_matches (bool value);
[918] bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options () const;
[921] void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options ();
[925] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D ConstraintBuilderOptions::fast_correlative_scan_matcher_options () const;
[931] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options ();
[939] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options ();
[946] void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options);
[958] bool ConstraintBuilderOptions::has_ceres_scan_matcher_options () const;
[961] void ConstraintBuilderOptions::clear_ceres_scan_matcher_options ();
[965] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ConstraintBuilderOptions::ceres_scan_matcher_options () const;
[971] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ConstraintBuilderOptions::mutable_ceres_scan_matcher_options ();
[979] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ConstraintBuilderOptions::release_ceres_scan_matcher_options ();
[986] void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options);
[998] bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options_3d () const;
[1001] void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options_3d ();
[1005] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D ConstraintBuilderOptions::fast_correlative_scan_matcher_options_3d () const;
[1011] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options_3d ();
[1019] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options_3d ();
[1026] void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options_3d (::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d);
[1038] bool ConstraintBuilderOptions::has_ceres_scan_matcher_options_3d () const;
[1041] void ConstraintBuilderOptions::clear_ceres_scan_matcher_options_3d ();
[1045] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ConstraintBuilderOptions::ceres_scan_matcher_options_3d () const;
[1051] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ConstraintBuilderOptions::mutable_ceres_scan_matcher_options_3d ();
[1059] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ConstraintBuilderOptions::release_ceres_scan_matcher_options_3d ();
[1066] void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options_3d (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h  ( 66 )
[97] ::google::protobuf::Descriptor descriptor ();
[98] ConstraintBuilderOptions default_instance ();
[153] bool has_fast_correlative_scan_matcher_options () const;
[154] void clear_fast_correlative_scan_matcher_options ();
[156] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options () const;
[157] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D mutable_fast_correlative_scan_matcher_options ();
[158] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D release_fast_correlative_scan_matcher_options ();
[159] void set_allocated_fast_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options);
[162] bool has_fast_correlative_scan_matcher_options_3d () const;
[163] void clear_fast_correlative_scan_matcher_options_3d ();
[165] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d () const;
[166] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D mutable_fast_correlative_scan_matcher_options_3d ();
[167] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D release_fast_correlative_scan_matcher_options_3d ();
[168] void set_allocated_fast_correlative_scan_matcher_options_3d (::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d);
[171] bool has_ceres_scan_matcher_options () const;
[172] void clear_ceres_scan_matcher_options ();
[174] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options () const;
[175] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D mutable_ceres_scan_matcher_options ();
[176] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D release_ceres_scan_matcher_options ();
[177] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options);
[180] bool has_ceres_scan_matcher_options_3d () const;
[181] void clear_ceres_scan_matcher_options_3d ();
[183] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d () const;
[184] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D mutable_ceres_scan_matcher_options_3d ();
[185] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D release_ceres_scan_matcher_options_3d ();
[186] void set_allocated_ceres_scan_matcher_options_3d (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d);
[189] void clear_sampling_ratio ();
[191] double sampling_ratio () const;
[192] void set_sampling_ratio (double value);
[195] void clear_max_constraint_distance ();
[197] double max_constraint_distance () const;
[198] void set_max_constraint_distance (double value);
[201] void clear_min_score ();
[203] double min_score () const;
[204] void set_min_score (double value);
[207] void clear_global_localization_min_score ();
[209] double global_localization_min_score () const;
[210] void set_global_localization_min_score (double value);
[213] void clear_log_matches ();
[215] bool log_matches () const;
[216] void set_log_matches (bool value);
[219] void clear_loop_closure_translation_weight ();
[221] double loop_closure_translation_weight () const;
[222] void set_loop_closure_translation_weight (double value);
[225] void clear_loop_closure_rotation_weight ();
[227] double loop_closure_rotation_weight () const;
[228] void set_loop_closure_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h  ( 60 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] OptimizationProblemOptions default_instance ();
[150] bool has_ceres_solver_options () const;
[151] void clear_ceres_solver_options ();
[153] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[154] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[155] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[156] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[159] void clear_huber_scale ();
[161] double huber_scale () const;
[162] void set_huber_scale (double value);
[165] void clear_acceleration_weight ();
[167] double acceleration_weight () const;
[168] void set_acceleration_weight (double value);
[171] void clear_rotation_weight ();
[173] double rotation_weight () const;
[174] void set_rotation_weight (double value);
[177] void clear_fixed_frame_pose_translation_weight ();
[179] double fixed_frame_pose_translation_weight () const;
[180] void set_fixed_frame_pose_translation_weight (double value);
[183] void clear_fixed_frame_pose_rotation_weight ();
[185] double fixed_frame_pose_rotation_weight () const;
[186] void set_fixed_frame_pose_rotation_weight (double value);
[189] void clear_fix_z_in_3d ();
[191] bool fix_z_in_3d () const;
[192] void set_fix_z_in_3d (bool value);
[195] void clear_log_solver_summary ();
[197] bool log_solver_summary () const;
[198] void set_log_solver_summary (bool value);
[201] void clear_local_slam_pose_translation_weight ();
[203] double local_slam_pose_translation_weight () const;
[204] void set_local_slam_pose_translation_weight (double value);
[207] void clear_local_slam_pose_rotation_weight ();
[209] double local_slam_pose_rotation_weight () const;
[210] void set_local_slam_pose_rotation_weight (double value);
[213] void clear_odometry_translation_weight ();
[215] double odometry_translation_weight () const;
[216] void set_odometry_translation_weight (double value);
[219] void clear_odometry_rotation_weight ();
[221] double odometry_rotation_weight () const;
[222] void set_odometry_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/submaps_options_3d.pb.cc  ( 42 )
[74] void protobuf_AssignDescriptors ();
[82] void protobuf_AssignDescriptorsOnce ();
[87] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[201] ::google::protobuf::Descriptor SubmapsOptions3D::descriptor ();
[206] SubmapsOptions3D SubmapsOptions3D::default_instance ();
[540] void SubmapsOptions3D::clear_high_resolution ();
[543] double SubmapsOptions3D::high_resolution () const;
[547] void SubmapsOptions3D::set_high_resolution (double value);
[554] void SubmapsOptions3D::clear_high_resolution_max_range ();
[557] double SubmapsOptions3D::high_resolution_max_range () const;
[561] void SubmapsOptions3D::set_high_resolution_max_range (double value);
[568] void SubmapsOptions3D::clear_low_resolution ();
[571] double SubmapsOptions3D::low_resolution () const;
[575] void SubmapsOptions3D::set_low_resolution (double value);
[582] void SubmapsOptions3D::clear_num_range_data ();
[585] ::google::protobuf::int32 SubmapsOptions3D::num_range_data () const;
[589] void SubmapsOptions3D::set_num_range_data (::google::protobuf::int32 value);
[596] bool SubmapsOptions3D::has_range_data_inserter_options () const;
[599] void SubmapsOptions3D::clear_range_data_inserter_options ();
[603] ::cartographer::mapping::proto::RangeDataInserterOptions3D SubmapsOptions3D::range_data_inserter_options () const;
[609] ::cartographer::mapping::proto::RangeDataInserterOptions3D SubmapsOptions3D::mutable_range_data_inserter_options ();
[617] ::cartographer::mapping::proto::RangeDataInserterOptions3D SubmapsOptions3D::release_range_data_inserter_options ();
[624] void SubmapsOptions3D::set_allocated_range_data_inserter_options (::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.cc  ( 81 )
[82] void protobuf_AssignDescriptors ();
[90] void protobuf_AssignDescriptorsOnce ();
[95] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[288] ::google::protobuf::Descriptor LocalTrajectoryBuilderOptions3D::descriptor ();
[293] LocalTrajectoryBuilderOptions3D LocalTrajectoryBuilderOptions3D::default_instance ();
[928] void LocalTrajectoryBuilderOptions3D::clear_min_range ();
[931] float LocalTrajectoryBuilderOptions3D::min_range () const;
[935] void LocalTrajectoryBuilderOptions3D::set_min_range (float value);
[942] void LocalTrajectoryBuilderOptions3D::clear_max_range ();
[945] float LocalTrajectoryBuilderOptions3D::max_range () const;
[949] void LocalTrajectoryBuilderOptions3D::set_max_range (float value);
[956] void LocalTrajectoryBuilderOptions3D::clear_num_accumulated_range_data ();
[959] ::google::protobuf::int32 LocalTrajectoryBuilderOptions3D::num_accumulated_range_data () const;
[963] void LocalTrajectoryBuilderOptions3D::set_num_accumulated_range_data (::google::protobuf::int32 value);
[970] void LocalTrajectoryBuilderOptions3D::clear_voxel_filter_size ();
[973] float LocalTrajectoryBuilderOptions3D::voxel_filter_size () const;
[977] void LocalTrajectoryBuilderOptions3D::set_voxel_filter_size (float value);
[984] bool LocalTrajectoryBuilderOptions3D::has_high_resolution_adaptive_voxel_filter_options () const;
[987] void LocalTrajectoryBuilderOptions3D::clear_high_resolution_adaptive_voxel_filter_options ();
[991] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions3D::high_resolution_adaptive_voxel_filter_options () const;
[997] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions3D::mutable_high_resolution_adaptive_voxel_filter_options ();
[1005] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions3D::release_high_resolution_adaptive_voxel_filter_options ();
[1012] void LocalTrajectoryBuilderOptions3D::set_allocated_high_resolution_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options);
[1024] bool LocalTrajectoryBuilderOptions3D::has_low_resolution_adaptive_voxel_filter_options () const;
[1027] void LocalTrajectoryBuilderOptions3D::clear_low_resolution_adaptive_voxel_filter_options ();
[1031] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions3D::low_resolution_adaptive_voxel_filter_options () const;
[1037] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions3D::mutable_low_resolution_adaptive_voxel_filter_options ();
[1045] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions3D::release_low_resolution_adaptive_voxel_filter_options ();
[1052] void LocalTrajectoryBuilderOptions3D::set_allocated_low_resolution_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options);
[1064] void LocalTrajectoryBuilderOptions3D::clear_use_online_correlative_scan_matching ();
[1067] bool LocalTrajectoryBuilderOptions3D::use_online_correlative_scan_matching () const;
[1071] void LocalTrajectoryBuilderOptions3D::set_use_online_correlative_scan_matching (bool value);
[1078] bool LocalTrajectoryBuilderOptions3D::has_real_time_correlative_scan_matcher_options () const;
[1081] void LocalTrajectoryBuilderOptions3D::clear_real_time_correlative_scan_matcher_options ();
[1085] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions LocalTrajectoryBuilderOptions3D::real_time_correlative_scan_matcher_options () const;
[1091] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions LocalTrajectoryBuilderOptions3D::mutable_real_time_correlative_scan_matcher_options ();
[1099] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions LocalTrajectoryBuilderOptions3D::release_real_time_correlative_scan_matcher_options ();
[1106] void LocalTrajectoryBuilderOptions3D::set_allocated_real_time_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options);
[1118] bool LocalTrajectoryBuilderOptions3D::has_ceres_scan_matcher_options () const;
[1121] void LocalTrajectoryBuilderOptions3D::clear_ceres_scan_matcher_options ();
[1125] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D LocalTrajectoryBuilderOptions3D::ceres_scan_matcher_options () const;
[1131] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D LocalTrajectoryBuilderOptions3D::mutable_ceres_scan_matcher_options ();
[1139] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D LocalTrajectoryBuilderOptions3D::release_ceres_scan_matcher_options ();
[1146] void LocalTrajectoryBuilderOptions3D::set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options);
[1158] bool LocalTrajectoryBuilderOptions3D::has_motion_filter_options () const;
[1161] void LocalTrajectoryBuilderOptions3D::clear_motion_filter_options ();
[1165] ::cartographer::mapping::proto::MotionFilterOptions LocalTrajectoryBuilderOptions3D::motion_filter_options () const;
[1171] ::cartographer::mapping::proto::MotionFilterOptions LocalTrajectoryBuilderOptions3D::mutable_motion_filter_options ();
[1179] ::cartographer::mapping::proto::MotionFilterOptions LocalTrajectoryBuilderOptions3D::release_motion_filter_options ();
[1186] void LocalTrajectoryBuilderOptions3D::set_allocated_motion_filter_options (::cartographer::mapping::proto::MotionFilterOptions motion_filter_options);
[1198] void LocalTrajectoryBuilderOptions3D::clear_imu_gravity_time_constant ();
[1201] double LocalTrajectoryBuilderOptions3D::imu_gravity_time_constant () const;
[1205] void LocalTrajectoryBuilderOptions3D::set_imu_gravity_time_constant (double value);
[1212] void LocalTrajectoryBuilderOptions3D::clear_rotational_histogram_size ();
[1215] ::google::protobuf::int32 LocalTrajectoryBuilderOptions3D::rotational_histogram_size () const;
[1219] void LocalTrajectoryBuilderOptions3D::set_rotational_histogram_size (::google::protobuf::int32 value);
[1226] bool LocalTrajectoryBuilderOptions3D::has_submaps_options () const;
[1229] void LocalTrajectoryBuilderOptions3D::clear_submaps_options ();
[1233] ::cartographer::mapping::proto::SubmapsOptions3D LocalTrajectoryBuilderOptions3D::submaps_options () const;
[1239] ::cartographer::mapping::proto::SubmapsOptions3D LocalTrajectoryBuilderOptions3D::mutable_submaps_options ();
[1247] ::cartographer::mapping::proto::SubmapsOptions3D LocalTrajectoryBuilderOptions3D::release_submaps_options ();
[1254] void LocalTrajectoryBuilderOptions3D::set_allocated_submaps_options (::cartographer::mapping::proto::SubmapsOptions3D submaps_options);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] RangeDataInserterOptions3D default_instance ();
[146] void clear_hit_probability ();
[148] double hit_probability () const;
[149] void set_hit_probability (double value);
[152] void clear_miss_probability ();
[154] double miss_probability () const;
[155] void set_miss_probability (double value);
[158] void clear_num_free_space_voxels ();
[160] ::google::protobuf::int32 num_free_space_voxels () const;
[161] void set_num_free_space_voxels (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.cc  ( 33 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[183] ::google::protobuf::Descriptor RangeDataInserterOptions3D::descriptor ();
[188] RangeDataInserterOptions3D RangeDataInserterOptions3D::default_instance ();
[449] void RangeDataInserterOptions3D::clear_hit_probability ();
[452] double RangeDataInserterOptions3D::hit_probability () const;
[456] void RangeDataInserterOptions3D::set_hit_probability (double value);
[463] void RangeDataInserterOptions3D::clear_miss_probability ();
[466] double RangeDataInserterOptions3D::miss_probability () const;
[470] void RangeDataInserterOptions3D::set_miss_probability (double value);
[477] void RangeDataInserterOptions3D::clear_num_free_space_voxels ();
[480] ::google::protobuf::int32 RangeDataInserterOptions3D::num_free_space_voxels () const;
[484] void RangeDataInserterOptions3D::set_num_free_space_voxels (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/submaps_options_3d.pb.h  ( 39 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] SubmapsOptions3D default_instance ();
[147] bool has_range_data_inserter_options () const;
[148] void clear_range_data_inserter_options ();
[150] ::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options () const;
[151] ::cartographer::mapping::proto::RangeDataInserterOptions3D mutable_range_data_inserter_options ();
[152] ::cartographer::mapping::proto::RangeDataInserterOptions3D release_range_data_inserter_options ();
[153] void set_allocated_range_data_inserter_options (::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options);
[156] void clear_high_resolution ();
[158] double high_resolution () const;
[159] void set_high_resolution (double value);
[162] void clear_high_resolution_max_range ();
[164] double high_resolution_max_range () const;
[165] void set_high_resolution_max_range (double value);
[168] void clear_low_resolution ();
[170] double low_resolution () const;
[171] void set_low_resolution (double value);
[174] void clear_num_range_data ();
[176] ::google::protobuf::int32 num_range_data () const;
[177] void set_num_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/hybrid_grid.pb.h  ( 44 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] HybridGrid default_instance ();
[146] int x_indices_size () const;
[147] void clear_x_indices ();
[149] ::google::protobuf::int32 x_indices (int index) const;
[150] void set_x_indices (int index, ::google::protobuf::int32 value);
[151] void add_x_indices (::google::protobuf::int32 value);
[158] int y_indices_size () const;
[159] void clear_y_indices ();
[161] ::google::protobuf::int32 y_indices (int index) const;
[162] void set_y_indices (int index, ::google::protobuf::int32 value);
[163] void add_y_indices (::google::protobuf::int32 value);
[170] int z_indices_size () const;
[171] void clear_z_indices ();
[173] ::google::protobuf::int32 z_indices (int index) const;
[174] void set_z_indices (int index, ::google::protobuf::int32 value);
[175] void add_z_indices (::google::protobuf::int32 value);
[182] int values_size () const;
[183] void clear_values ();
[185] ::google::protobuf::int32 values (int index) const;
[186] void set_values (int index, ::google::protobuf::int32 value);
[187] void add_values (::google::protobuf::int32 value);
[194] void clear_resolution ();
[196] float resolution () const;
[197] void set_resolution (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h  ( 78 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] LocalTrajectoryBuilderOptions3D default_instance ();
[151] bool has_high_resolution_adaptive_voxel_filter_options () const;
[152] void clear_high_resolution_adaptive_voxel_filter_options ();
[154] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options () const;
[155] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_high_resolution_adaptive_voxel_filter_options ();
[156] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_high_resolution_adaptive_voxel_filter_options ();
[157] void set_allocated_high_resolution_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options);
[160] bool has_ceres_scan_matcher_options () const;
[161] void clear_ceres_scan_matcher_options ();
[163] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options () const;
[164] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D mutable_ceres_scan_matcher_options ();
[165] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D release_ceres_scan_matcher_options ();
[166] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options);
[169] bool has_motion_filter_options () const;
[170] void clear_motion_filter_options ();
[172] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options () const;
[173] ::cartographer::mapping::proto::MotionFilterOptions mutable_motion_filter_options ();
[174] ::cartographer::mapping::proto::MotionFilterOptions release_motion_filter_options ();
[175] void set_allocated_motion_filter_options (::cartographer::mapping::proto::MotionFilterOptions motion_filter_options);
[178] bool has_submaps_options () const;
[179] void clear_submaps_options ();
[181] ::cartographer::mapping::proto::SubmapsOptions3D submaps_options () const;
[182] ::cartographer::mapping::proto::SubmapsOptions3D mutable_submaps_options ();
[183] ::cartographer::mapping::proto::SubmapsOptions3D release_submaps_options ();
[184] void set_allocated_submaps_options (::cartographer::mapping::proto::SubmapsOptions3D submaps_options);
[187] bool has_low_resolution_adaptive_voxel_filter_options () const;
[188] void clear_low_resolution_adaptive_voxel_filter_options ();
[190] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options () const;
[191] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_low_resolution_adaptive_voxel_filter_options ();
[192] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_low_resolution_adaptive_voxel_filter_options ();
[193] void set_allocated_low_resolution_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options);
[196] bool has_real_time_correlative_scan_matcher_options () const;
[197] void clear_real_time_correlative_scan_matcher_options ();
[199] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options () const;
[200] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions mutable_real_time_correlative_scan_matcher_options ();
[201] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions release_real_time_correlative_scan_matcher_options ();
[202] void set_allocated_real_time_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options);
[205] void clear_min_range ();
[207] float min_range () const;
[208] void set_min_range (float value);
[211] void clear_max_range ();
[213] float max_range () const;
[214] void set_max_range (float value);
[217] void clear_num_accumulated_range_data ();
[219] ::google::protobuf::int32 num_accumulated_range_data () const;
[220] void set_num_accumulated_range_data (::google::protobuf::int32 value);
[223] void clear_voxel_filter_size ();
[225] float voxel_filter_size () const;
[226] void set_voxel_filter_size (float value);
[229] void clear_imu_gravity_time_constant ();
[231] double imu_gravity_time_constant () const;
[232] void set_imu_gravity_time_constant (double value);
[235] void clear_use_online_correlative_scan_matching ();
[237] bool use_online_correlative_scan_matching () const;
[238] void set_use_online_correlative_scan_matching (bool value);
[241] void clear_rotational_histogram_size ();
[243] ::google::protobuf::int32 rotational_histogram_size () const;
[244] void set_rotational_histogram_size (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/hybrid_grid.pb.cc  ( 47 )
[74] void protobuf_AssignDescriptors ();
[82] void protobuf_AssignDescriptorsOnce ();
[87] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[186] ::google::protobuf::Descriptor HybridGrid::descriptor ();
[191] HybridGrid HybridGrid::default_instance ();
[630] void HybridGrid::clear_resolution ();
[633] float HybridGrid::resolution () const;
[637] void HybridGrid::set_resolution (float value);
[644] int HybridGrid::x_indices_size () const;
[647] void HybridGrid::clear_x_indices ();
[650] ::google::protobuf::int32 HybridGrid::x_indices (int index) const;
[654] void HybridGrid::set_x_indices (int index, ::google::protobuf::int32 value);
[658] void HybridGrid::add_x_indices (::google::protobuf::int32 value);
[674] int HybridGrid::y_indices_size () const;
[677] void HybridGrid::clear_y_indices ();
[680] ::google::protobuf::int32 HybridGrid::y_indices (int index) const;
[684] void HybridGrid::set_y_indices (int index, ::google::protobuf::int32 value);
[688] void HybridGrid::add_y_indices (::google::protobuf::int32 value);
[704] int HybridGrid::z_indices_size () const;
[707] void HybridGrid::clear_z_indices ();
[710] ::google::protobuf::int32 HybridGrid::z_indices (int index) const;
[714] void HybridGrid::set_z_indices (int index, ::google::protobuf::int32 value);
[718] void HybridGrid::add_z_indices (::google::protobuf::int32 value);
[734] int HybridGrid::values_size () const;
[737] void HybridGrid::clear_values ();
[740] ::google::protobuf::int32 HybridGrid::values (int index) const;
[744] void HybridGrid::set_values (int index, ::google::protobuf::int32 value);
[748] void HybridGrid::add_values (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/submaps_options_2d.pb.h  ( 36 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] SubmapsOptions2D default_instance ();
[148] bool has_grid_options_2d () const;
[149] void clear_grid_options_2d ();
[151] ::cartographer::mapping::proto::GridOptions2D grid_options_2d () const;
[152] ::cartographer::mapping::proto::GridOptions2D mutable_grid_options_2d ();
[153] ::cartographer::mapping::proto::GridOptions2D release_grid_options_2d ();
[154] void set_allocated_grid_options_2d (::cartographer::mapping::proto::GridOptions2D grid_options_2d);
[157] bool has_range_data_inserter_options () const;
[158] void clear_range_data_inserter_options ();
[160] ::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options () const;
[161] ::cartographer::mapping::proto::RangeDataInserterOptions mutable_range_data_inserter_options ();
[162] ::cartographer::mapping::proto::RangeDataInserterOptions release_range_data_inserter_options ();
[163] void set_allocated_range_data_inserter_options (::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options);
[166] void clear_num_range_data ();
[168] ::google::protobuf::int32 num_range_data () const;
[169] void set_num_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/grid_2d_options.pb.h  ( 29 )
[69] bool GridOptions2D_GridType_IsValid (int value);
[74] ::google::protobuf::EnumDescriptor GridOptions2D_GridType_descriptor ();
[112] ::google::protobuf::Descriptor descriptor ();
[113] GridOptions2D default_instance ();
[194] void clear_grid_type ();
[196] ::cartographer::mapping::proto::GridOptions2D_GridType grid_type () const;
[197] void set_grid_type (::cartographer::mapping::proto::GridOptions2D_GridType value);
[200] void clear_resolution ();
[202] float resolution () const;
[203] void set_resolution (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/probability_grid.pb.h  ( 21 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] ProbabilityGrid default_instance ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.cc  ( 90 )
[85] void protobuf_AssignDescriptors ();
[93] void protobuf_AssignDescriptorsOnce ();
[98] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[295] ::google::protobuf::Descriptor LocalTrajectoryBuilderOptions2D::descriptor ();
[300] LocalTrajectoryBuilderOptions2D LocalTrajectoryBuilderOptions2D::default_instance ();
[1032] void LocalTrajectoryBuilderOptions2D::clear_min_range ();
[1035] float LocalTrajectoryBuilderOptions2D::min_range () const;
[1039] void LocalTrajectoryBuilderOptions2D::set_min_range (float value);
[1046] void LocalTrajectoryBuilderOptions2D::clear_max_range ();
[1049] float LocalTrajectoryBuilderOptions2D::max_range () const;
[1053] void LocalTrajectoryBuilderOptions2D::set_max_range (float value);
[1060] void LocalTrajectoryBuilderOptions2D::clear_min_z ();
[1063] float LocalTrajectoryBuilderOptions2D::min_z () const;
[1067] void LocalTrajectoryBuilderOptions2D::set_min_z (float value);
[1074] void LocalTrajectoryBuilderOptions2D::clear_max_z ();
[1077] float LocalTrajectoryBuilderOptions2D::max_z () const;
[1081] void LocalTrajectoryBuilderOptions2D::set_max_z (float value);
[1088] void LocalTrajectoryBuilderOptions2D::clear_missing_data_ray_length ();
[1091] float LocalTrajectoryBuilderOptions2D::missing_data_ray_length () const;
[1095] void LocalTrajectoryBuilderOptions2D::set_missing_data_ray_length (float value);
[1102] void LocalTrajectoryBuilderOptions2D::clear_num_accumulated_range_data ();
[1105] ::google::protobuf::int32 LocalTrajectoryBuilderOptions2D::num_accumulated_range_data () const;
[1109] void LocalTrajectoryBuilderOptions2D::set_num_accumulated_range_data (::google::protobuf::int32 value);
[1116] void LocalTrajectoryBuilderOptions2D::clear_voxel_filter_size ();
[1119] float LocalTrajectoryBuilderOptions2D::voxel_filter_size () const;
[1123] void LocalTrajectoryBuilderOptions2D::set_voxel_filter_size (float value);
[1130] bool LocalTrajectoryBuilderOptions2D::has_adaptive_voxel_filter_options () const;
[1133] void LocalTrajectoryBuilderOptions2D::clear_adaptive_voxel_filter_options ();
[1137] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions2D::adaptive_voxel_filter_options () const;
[1143] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions2D::mutable_adaptive_voxel_filter_options ();
[1151] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions2D::release_adaptive_voxel_filter_options ();
[1158] void LocalTrajectoryBuilderOptions2D::set_allocated_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options);
[1170] bool LocalTrajectoryBuilderOptions2D::has_loop_closure_adaptive_voxel_filter_options () const;
[1173] void LocalTrajectoryBuilderOptions2D::clear_loop_closure_adaptive_voxel_filter_options ();
[1177] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions2D::loop_closure_adaptive_voxel_filter_options () const;
[1183] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions2D::mutable_loop_closure_adaptive_voxel_filter_options ();
[1191] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions LocalTrajectoryBuilderOptions2D::release_loop_closure_adaptive_voxel_filter_options ();
[1198] void LocalTrajectoryBuilderOptions2D::set_allocated_loop_closure_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options);
[1210] void LocalTrajectoryBuilderOptions2D::clear_use_online_correlative_scan_matching ();
[1213] bool LocalTrajectoryBuilderOptions2D::use_online_correlative_scan_matching () const;
[1217] void LocalTrajectoryBuilderOptions2D::set_use_online_correlative_scan_matching (bool value);
[1224] bool LocalTrajectoryBuilderOptions2D::has_real_time_correlative_scan_matcher_options () const;
[1227] void LocalTrajectoryBuilderOptions2D::clear_real_time_correlative_scan_matcher_options ();
[1231] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions LocalTrajectoryBuilderOptions2D::real_time_correlative_scan_matcher_options () const;
[1237] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions LocalTrajectoryBuilderOptions2D::mutable_real_time_correlative_scan_matcher_options ();
[1245] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions LocalTrajectoryBuilderOptions2D::release_real_time_correlative_scan_matcher_options ();
[1252] void LocalTrajectoryBuilderOptions2D::set_allocated_real_time_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options);
[1264] bool LocalTrajectoryBuilderOptions2D::has_ceres_scan_matcher_options () const;
[1267] void LocalTrajectoryBuilderOptions2D::clear_ceres_scan_matcher_options ();
[1271] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D LocalTrajectoryBuilderOptions2D::ceres_scan_matcher_options () const;
[1277] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D LocalTrajectoryBuilderOptions2D::mutable_ceres_scan_matcher_options ();
[1285] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D LocalTrajectoryBuilderOptions2D::release_ceres_scan_matcher_options ();
[1292] void LocalTrajectoryBuilderOptions2D::set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options);
[1304] bool LocalTrajectoryBuilderOptions2D::has_motion_filter_options () const;
[1307] void LocalTrajectoryBuilderOptions2D::clear_motion_filter_options ();
[1311] ::cartographer::mapping::proto::MotionFilterOptions LocalTrajectoryBuilderOptions2D::motion_filter_options () const;
[1317] ::cartographer::mapping::proto::MotionFilterOptions LocalTrajectoryBuilderOptions2D::mutable_motion_filter_options ();
[1325] ::cartographer::mapping::proto::MotionFilterOptions LocalTrajectoryBuilderOptions2D::release_motion_filter_options ();
[1332] void LocalTrajectoryBuilderOptions2D::set_allocated_motion_filter_options (::cartographer::mapping::proto::MotionFilterOptions motion_filter_options);
[1344] void LocalTrajectoryBuilderOptions2D::clear_imu_gravity_time_constant ();
[1347] double LocalTrajectoryBuilderOptions2D::imu_gravity_time_constant () const;
[1351] void LocalTrajectoryBuilderOptions2D::set_imu_gravity_time_constant (double value);
[1358] bool LocalTrajectoryBuilderOptions2D::has_submaps_options () const;
[1361] void LocalTrajectoryBuilderOptions2D::clear_submaps_options ();
[1365] ::cartographer::mapping::proto::SubmapsOptions2D LocalTrajectoryBuilderOptions2D::submaps_options () const;
[1371] ::cartographer::mapping::proto::SubmapsOptions2D LocalTrajectoryBuilderOptions2D::mutable_submaps_options ();
[1379] ::cartographer::mapping::proto::SubmapsOptions2D LocalTrajectoryBuilderOptions2D::release_submaps_options ();
[1386] void LocalTrajectoryBuilderOptions2D::set_allocated_submaps_options (::cartographer::mapping::proto::SubmapsOptions2D submaps_options);
[1398] void LocalTrajectoryBuilderOptions2D::clear_use_imu_data ();
[1401] bool LocalTrajectoryBuilderOptions2D::use_imu_data () const;
[1405] void LocalTrajectoryBuilderOptions2D::set_use_imu_data (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/cell_limits.pb.h  ( 27 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] CellLimits default_instance ();
[146] void clear_num_x_cells ();
[148] ::google::protobuf::int32 num_x_cells () const;
[149] void set_num_x_cells (::google::protobuf::int32 value);
[152] void clear_num_y_cells ();
[154] ::google::protobuf::int32 num_y_cells () const;
[155] void set_num_y_cells (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.cc  ( 33 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[184] ::google::protobuf::Descriptor ProbabilityGridRangeDataInserterOptions2D::descriptor ();
[189] ProbabilityGridRangeDataInserterOptions2D ProbabilityGridRangeDataInserterOptions2D::default_instance ();
[448] void ProbabilityGridRangeDataInserterOptions2D::clear_hit_probability ();
[451] double ProbabilityGridRangeDataInserterOptions2D::hit_probability () const;
[455] void ProbabilityGridRangeDataInserterOptions2D::set_hit_probability (double value);
[462] void ProbabilityGridRangeDataInserterOptions2D::clear_miss_probability ();
[465] double ProbabilityGridRangeDataInserterOptions2D::miss_probability () const;
[469] void ProbabilityGridRangeDataInserterOptions2D::set_miss_probability (double value);
[476] void ProbabilityGridRangeDataInserterOptions2D::clear_insert_free_space ();
[479] bool ProbabilityGridRangeDataInserterOptions2D::insert_free_space () const;
[483] void ProbabilityGridRangeDataInserterOptions2D::set_insert_free_space (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/map_limits.pb.h  ( 36 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] MapLimits default_instance ();
[148] bool has_max () const;
[149] void clear_max ();
[151] ::cartographer::transform::proto::Vector2d max () const;
[152] ::cartographer::transform::proto::Vector2d mutable_max ();
[153] ::cartographer::transform::proto::Vector2d release_max ();
[154] void set_allocated_max (::cartographer::transform::proto::Vector2d max);
[157] bool has_cell_limits () const;
[158] void clear_cell_limits ();
[160] ::cartographer::mapping::proto::CellLimits cell_limits () const;
[161] ::cartographer::mapping::proto::CellLimits mutable_cell_limits ();
[162] ::cartographer::mapping::proto::CellLimits release_cell_limits ();
[163] void set_allocated_cell_limits (::cartographer::mapping::proto::CellLimits cell_limits);
[166] void clear_resolution ();
[168] double resolution () const;
[169] void set_resolution (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/grid_2d_options.pb.cc  ( 32 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[136] ::google::protobuf::EnumDescriptor GridOptions2D_GridType_descriptor ();
[140] bool GridOptions2D_GridType_IsValid (int value);
[204] ::google::protobuf::Descriptor GridOptions2D::descriptor ();
[209] GridOptions2D GridOptions2D::default_instance ();
[439] void GridOptions2D::clear_grid_type ();
[442] ::cartographer::mapping::proto::GridOptions2D_GridType GridOptions2D::grid_type () const;
[446] void GridOptions2D::set_grid_type (::cartographer::mapping::proto::GridOptions2D_GridType value);
[453] void GridOptions2D::clear_resolution ();
[456] float GridOptions2D::resolution () const;
[460] void GridOptions2D::set_resolution (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/grid_2d.pb.cc  ( 70 )
[94] void protobuf_AssignDescriptors ();
[102] void protobuf_AssignDescriptorsOnce ();
[107] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[226] ::google::protobuf::Descriptor Grid2D_CellBox::descriptor ();
[231] Grid2D_CellBox Grid2D_CellBox::default_instance ();
[531] void Grid2D_CellBox::clear_max_x ();
[534] ::google::protobuf::int32 Grid2D_CellBox::max_x () const;
[538] void Grid2D_CellBox::set_max_x (::google::protobuf::int32 value);
[545] void Grid2D_CellBox::clear_max_y ();
[548] ::google::protobuf::int32 Grid2D_CellBox::max_y () const;
[552] void Grid2D_CellBox::set_max_y (::google::protobuf::int32 value);
[559] void Grid2D_CellBox::clear_min_x ();
[562] ::google::protobuf::int32 Grid2D_CellBox::min_x () const;
[566] void Grid2D_CellBox::set_min_x (::google::protobuf::int32 value);
[573] void Grid2D_CellBox::clear_min_y ();
[576] ::google::protobuf::int32 Grid2D_CellBox::min_y () const;
[580] void Grid2D_CellBox::set_min_y (::google::protobuf::int32 value);
[683] void Grid2D::clear_grid ();
[1102] bool Grid2D::has_limits () const;
[1105] void Grid2D::clear_limits ();
[1109] ::cartographer::mapping::proto::MapLimits Grid2D::limits () const;
[1115] ::cartographer::mapping::proto::MapLimits Grid2D::mutable_limits ();
[1123] ::cartographer::mapping::proto::MapLimits Grid2D::release_limits ();
[1130] void Grid2D::set_allocated_limits (::cartographer::mapping::proto::MapLimits limits);
[1142] int Grid2D::cells_size () const;
[1145] void Grid2D::clear_cells ();
[1148] ::google::protobuf::int32 Grid2D::cells (int index) const;
[1152] void Grid2D::set_cells (int index, ::google::protobuf::int32 value);
[1156] void Grid2D::add_cells (::google::protobuf::int32 value);
[1172] bool Grid2D::has_known_cells_box () const;
[1175] void Grid2D::clear_known_cells_box ();
[1179] ::cartographer::mapping::proto::Grid2D_CellBox Grid2D::known_cells_box () const;
[1185] ::cartographer::mapping::proto::Grid2D_CellBox Grid2D::mutable_known_cells_box ();
[1193] ::cartographer::mapping::proto::Grid2D_CellBox Grid2D::release_known_cells_box ();
[1200] void Grid2D::set_allocated_known_cells_box (::cartographer::mapping::proto::Grid2D_CellBox known_cells_box);
[1212] bool Grid2D::has_probability_grid_2d () const;
[1215] void Grid2D::set_has_probability_grid_2d ();
[1218] void Grid2D::clear_probability_grid_2d ();
[1224] ::cartographer::mapping::proto::ProbabilityGrid Grid2D::probability_grid_2d () const;
[1230] ::cartographer::mapping::proto::ProbabilityGrid Grid2D::mutable_probability_grid_2d ();
[1239] ::cartographer::mapping::proto::ProbabilityGrid Grid2D::release_probability_grid_2d ();
[1250] void Grid2D::set_allocated_probability_grid_2d (::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d);
[1260] void Grid2D::clear_min_correspondence_cost ();
[1263] float Grid2D::min_correspondence_cost () const;
[1267] void Grid2D::set_min_correspondence_cost (float value);
[1274] void Grid2D::clear_max_correspondence_cost ();
[1277] float Grid2D::max_correspondence_cost () const;
[1281] void Grid2D::set_max_correspondence_cost (float value);
[1287] bool Grid2D::has_grid () const;
[1290] void Grid2D::clear_has_grid ();
[1293] Grid2D::GridCase Grid2D::grid_case () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/cell_limits.pb.cc  ( 30 )
[71] void protobuf_AssignDescriptors ();
[79] void protobuf_AssignDescriptorsOnce ();
[84] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[179] ::google::protobuf::Descriptor CellLimits::descriptor ();
[184] CellLimits CellLimits::default_instance ();
[414] void CellLimits::clear_num_x_cells ();
[417] ::google::protobuf::int32 CellLimits::num_x_cells () const;
[421] void CellLimits::set_num_x_cells (::google::protobuf::int32 value);
[428] void CellLimits::clear_num_y_cells ();
[431] ::google::protobuf::int32 CellLimits::num_y_cells () const;
[435] void CellLimits::set_num_y_cells (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h  ( 87 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] LocalTrajectoryBuilderOptions2D default_instance ();
[151] bool has_adaptive_voxel_filter_options () const;
[152] void clear_adaptive_voxel_filter_options ();
[154] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options () const;
[155] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_adaptive_voxel_filter_options ();
[156] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_adaptive_voxel_filter_options ();
[157] void set_allocated_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options);
[160] bool has_real_time_correlative_scan_matcher_options () const;
[161] void clear_real_time_correlative_scan_matcher_options ();
[163] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options () const;
[164] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions mutable_real_time_correlative_scan_matcher_options ();
[165] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions release_real_time_correlative_scan_matcher_options ();
[166] void set_allocated_real_time_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options);
[169] bool has_ceres_scan_matcher_options () const;
[170] void clear_ceres_scan_matcher_options ();
[172] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options () const;
[173] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D mutable_ceres_scan_matcher_options ();
[174] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D release_ceres_scan_matcher_options ();
[175] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options);
[178] bool has_submaps_options () const;
[179] void clear_submaps_options ();
[181] ::cartographer::mapping::proto::SubmapsOptions2D submaps_options () const;
[182] ::cartographer::mapping::proto::SubmapsOptions2D mutable_submaps_options ();
[183] ::cartographer::mapping::proto::SubmapsOptions2D release_submaps_options ();
[184] void set_allocated_submaps_options (::cartographer::mapping::proto::SubmapsOptions2D submaps_options);
[187] bool has_motion_filter_options () const;
[188] void clear_motion_filter_options ();
[190] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options () const;
[191] ::cartographer::mapping::proto::MotionFilterOptions mutable_motion_filter_options ();
[192] ::cartographer::mapping::proto::MotionFilterOptions release_motion_filter_options ();
[193] void set_allocated_motion_filter_options (::cartographer::mapping::proto::MotionFilterOptions motion_filter_options);
[196] bool has_loop_closure_adaptive_voxel_filter_options () const;
[197] void clear_loop_closure_adaptive_voxel_filter_options ();
[199] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options () const;
[200] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_loop_closure_adaptive_voxel_filter_options ();
[201] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_loop_closure_adaptive_voxel_filter_options ();
[202] void set_allocated_loop_closure_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options);
[205] void clear_min_z ();
[207] float min_z () const;
[208] void set_min_z (float value);
[211] void clear_max_z ();
[213] float max_z () const;
[214] void set_max_z (float value);
[217] void clear_voxel_filter_size ();
[219] float voxel_filter_size () const;
[220] void set_voxel_filter_size (float value);
[223] void clear_use_online_correlative_scan_matching ();
[225] bool use_online_correlative_scan_matching () const;
[226] void set_use_online_correlative_scan_matching (bool value);
[229] void clear_use_imu_data ();
[231] bool use_imu_data () const;
[232] void set_use_imu_data (bool value);
[235] void clear_min_range ();
[237] float min_range () const;
[238] void set_min_range (float value);
[241] void clear_max_range ();
[243] float max_range () const;
[244] void set_max_range (float value);
[247] void clear_imu_gravity_time_constant ();
[249] double imu_gravity_time_constant () const;
[250] void set_imu_gravity_time_constant (double value);
[253] void clear_missing_data_ray_length ();
[255] float missing_data_ray_length () const;
[256] void set_missing_data_ray_length (float value);
[259] void clear_num_accumulated_range_data ();
[261] ::google::protobuf::int32 num_accumulated_range_data () const;
[262] void set_num_accumulated_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] ProbabilityGridRangeDataInserterOptions2D default_instance ();
[146] void clear_hit_probability ();
[148] double hit_probability () const;
[149] void set_hit_probability (double value);
[152] void clear_miss_probability ();
[154] double miss_probability () const;
[155] void set_miss_probability (double value);
[158] void clear_insert_free_space ();
[160] bool insert_free_space () const;
[161] void set_insert_free_space (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/submaps_options_2d.pb.cc  ( 39 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[206] ::google::protobuf::Descriptor SubmapsOptions2D::descriptor ();
[211] SubmapsOptions2D SubmapsOptions2D::default_instance ();
[484] void SubmapsOptions2D::clear_num_range_data ();
[487] ::google::protobuf::int32 SubmapsOptions2D::num_range_data () const;
[491] void SubmapsOptions2D::set_num_range_data (::google::protobuf::int32 value);
[498] bool SubmapsOptions2D::has_grid_options_2d () const;
[501] void SubmapsOptions2D::clear_grid_options_2d ();
[505] ::cartographer::mapping::proto::GridOptions2D SubmapsOptions2D::grid_options_2d () const;
[511] ::cartographer::mapping::proto::GridOptions2D SubmapsOptions2D::mutable_grid_options_2d ();
[519] ::cartographer::mapping::proto::GridOptions2D SubmapsOptions2D::release_grid_options_2d ();
[526] void SubmapsOptions2D::set_allocated_grid_options_2d (::cartographer::mapping::proto::GridOptions2D grid_options_2d);
[538] bool SubmapsOptions2D::has_range_data_inserter_options () const;
[541] void SubmapsOptions2D::clear_range_data_inserter_options ();
[545] ::cartographer::mapping::proto::RangeDataInserterOptions SubmapsOptions2D::range_data_inserter_options () const;
[551] ::cartographer::mapping::proto::RangeDataInserterOptions SubmapsOptions2D::mutable_range_data_inserter_options ();
[559] ::cartographer::mapping::proto::RangeDataInserterOptions SubmapsOptions2D::release_range_data_inserter_options ();
[566] void SubmapsOptions2D::set_allocated_range_data_inserter_options (::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/map_limits.pb.cc  ( 39 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[204] ::google::protobuf::Descriptor MapLimits::descriptor ();
[209] MapLimits MapLimits::default_instance ();
[480] void MapLimits::clear_resolution ();
[483] double MapLimits::resolution () const;
[487] void MapLimits::set_resolution (double value);
[494] bool MapLimits::has_max () const;
[497] void MapLimits::clear_max ();
[501] ::cartographer::transform::proto::Vector2d MapLimits::max () const;
[507] ::cartographer::transform::proto::Vector2d MapLimits::mutable_max ();
[515] ::cartographer::transform::proto::Vector2d MapLimits::release_max ();
[522] void MapLimits::set_allocated_max (::cartographer::transform::proto::Vector2d max);
[534] bool MapLimits::has_cell_limits () const;
[537] void MapLimits::clear_cell_limits ();
[541] ::cartographer::mapping::proto::CellLimits MapLimits::cell_limits () const;
[547] ::cartographer::mapping::proto::CellLimits MapLimits::mutable_cell_limits ();
[555] ::cartographer::mapping::proto::CellLimits MapLimits::release_cell_limits ();
[562] void MapLimits::set_allocated_cell_limits (::cartographer::mapping::proto::CellLimits cell_limits);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/grid_2d.pb.h  ( 65 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] Grid2D_CellBox default_instance ();
[151] void clear_max_x ();
[153] ::google::protobuf::int32 max_x () const;
[154] void set_max_x (::google::protobuf::int32 value);
[157] void clear_max_y ();
[159] ::google::protobuf::int32 max_y () const;
[160] void set_max_y (::google::protobuf::int32 value);
[163] void clear_min_x ();
[165] ::google::protobuf::int32 min_x () const;
[166] void set_min_x (::google::protobuf::int32 value);
[169] void clear_min_y ();
[171] ::google::protobuf::int32 min_y () const;
[172] void set_min_y (::google::protobuf::int32 value);
[276] int cells_size () const;
[277] void clear_cells ();
[279] ::google::protobuf::int32 cells (int index) const;
[280] void set_cells (int index, ::google::protobuf::int32 value);
[281] void add_cells (::google::protobuf::int32 value);
[288] bool has_limits () const;
[289] void clear_limits ();
[291] ::cartographer::mapping::proto::MapLimits limits () const;
[292] ::cartographer::mapping::proto::MapLimits mutable_limits ();
[293] ::cartographer::mapping::proto::MapLimits release_limits ();
[294] void set_allocated_limits (::cartographer::mapping::proto::MapLimits limits);
[297] bool has_known_cells_box () const;
[298] void clear_known_cells_box ();
[300] ::cartographer::mapping::proto::Grid2D_CellBox known_cells_box () const;
[301] ::cartographer::mapping::proto::Grid2D_CellBox mutable_known_cells_box ();
[302] ::cartographer::mapping::proto::Grid2D_CellBox release_known_cells_box ();
[303] void set_allocated_known_cells_box (::cartographer::mapping::proto::Grid2D_CellBox known_cells_box);
[306] void clear_min_correspondence_cost ();
[308] float min_correspondence_cost () const;
[309] void set_min_correspondence_cost (float value);
[312] void clear_max_correspondence_cost ();
[314] float max_correspondence_cost () const;
[315] void set_max_correspondence_cost (float value);
[318] bool has_probability_grid_2d () const;
[319] void clear_probability_grid_2d ();
[321] ::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d () const;
[322] ::cartographer::mapping::proto::ProbabilityGrid mutable_probability_grid_2d ();
[323] ::cartographer::mapping::proto::ProbabilityGrid release_probability_grid_2d ();
[324] void set_allocated_probability_grid_2d (::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d);
[326] GridCase grid_case () const;
[329] void set_has_probability_grid_2d ();
[332] void clear_grid ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/probability_grid.pb.cc  ( 24 )
[69] void protobuf_AssignDescriptors ();
[77] void protobuf_AssignDescriptorsOnce ();
[82] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[168] ::google::protobuf::Descriptor ProbabilityGrid::descriptor ();
[173] ProbabilityGrid ProbabilityGrid::default_instance ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/internal/legacy_serialized_data.pb.h  ( 63 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] LegacySerializedData default_instance ();
[147] bool has_submap () const;
[148] void clear_submap ();
[150] ::cartographer::mapping::proto::Submap submap () const;
[151] ::cartographer::mapping::proto::Submap mutable_submap ();
[152] ::cartographer::mapping::proto::Submap release_submap ();
[153] void set_allocated_submap (::cartographer::mapping::proto::Submap submap);
[156] bool has_node () const;
[157] void clear_node ();
[159] ::cartographer::mapping::proto::Node node () const;
[160] ::cartographer::mapping::proto::Node mutable_node ();
[161] ::cartographer::mapping::proto::Node release_node ();
[162] void set_allocated_node (::cartographer::mapping::proto::Node node);
[165] bool has_imu_data () const;
[166] void clear_imu_data ();
[168] ::cartographer::mapping::proto::ImuData imu_data () const;
[169] ::cartographer::mapping::proto::ImuData mutable_imu_data ();
[170] ::cartographer::mapping::proto::ImuData release_imu_data ();
[171] void set_allocated_imu_data (::cartographer::mapping::proto::ImuData imu_data);
[174] bool has_odometry_data () const;
[175] void clear_odometry_data ();
[177] ::cartographer::mapping::proto::OdometryData odometry_data () const;
[178] ::cartographer::mapping::proto::OdometryData mutable_odometry_data ();
[179] ::cartographer::mapping::proto::OdometryData release_odometry_data ();
[180] void set_allocated_odometry_data (::cartographer::mapping::proto::OdometryData odometry_data);
[183] bool has_fixed_frame_pose_data () const;
[184] void clear_fixed_frame_pose_data ();
[186] ::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data () const;
[187] ::cartographer::mapping::proto::FixedFramePoseData mutable_fixed_frame_pose_data ();
[188] ::cartographer::mapping::proto::FixedFramePoseData release_fixed_frame_pose_data ();
[189] void set_allocated_fixed_frame_pose_data (::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data);
[192] bool has_trajectory_data () const;
[193] void clear_trajectory_data ();
[195] ::cartographer::mapping::proto::TrajectoryData trajectory_data () const;
[196] ::cartographer::mapping::proto::TrajectoryData mutable_trajectory_data ();
[197] ::cartographer::mapping::proto::TrajectoryData release_trajectory_data ();
[198] void set_allocated_trajectory_data (::cartographer::mapping::proto::TrajectoryData trajectory_data);
[201] bool has_landmark_data () const;
[202] void clear_landmark_data ();
[204] ::cartographer::mapping::proto::LandmarkData landmark_data () const;
[205] ::cartographer::mapping::proto::LandmarkData mutable_landmark_data ();
[206] ::cartographer::mapping::proto::LandmarkData release_landmark_data ();
[207] void set_allocated_landmark_data (::cartographer::mapping::proto::LandmarkData landmark_data);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/internal/legacy_serialized_data.pb.cc  ( 66 )
[76] void protobuf_AssignDescriptors ();
[84] void protobuf_AssignDescriptorsOnce ();
[89] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[256] ::google::protobuf::Descriptor LegacySerializedData::descriptor ();
[261] LegacySerializedData LegacySerializedData::default_instance ();
[698] bool LegacySerializedData::has_submap () const;
[701] void LegacySerializedData::clear_submap ();
[705] ::cartographer::mapping::proto::Submap LegacySerializedData::submap () const;
[711] ::cartographer::mapping::proto::Submap LegacySerializedData::mutable_submap ();
[719] ::cartographer::mapping::proto::Submap LegacySerializedData::release_submap ();
[726] void LegacySerializedData::set_allocated_submap (::cartographer::mapping::proto::Submap submap);
[738] bool LegacySerializedData::has_node () const;
[741] void LegacySerializedData::clear_node ();
[745] ::cartographer::mapping::proto::Node LegacySerializedData::node () const;
[751] ::cartographer::mapping::proto::Node LegacySerializedData::mutable_node ();
[759] ::cartographer::mapping::proto::Node LegacySerializedData::release_node ();
[766] void LegacySerializedData::set_allocated_node (::cartographer::mapping::proto::Node node);
[778] bool LegacySerializedData::has_imu_data () const;
[781] void LegacySerializedData::clear_imu_data ();
[785] ::cartographer::mapping::proto::ImuData LegacySerializedData::imu_data () const;
[791] ::cartographer::mapping::proto::ImuData LegacySerializedData::mutable_imu_data ();
[799] ::cartographer::mapping::proto::ImuData LegacySerializedData::release_imu_data ();
[806] void LegacySerializedData::set_allocated_imu_data (::cartographer::mapping::proto::ImuData imu_data);
[818] bool LegacySerializedData::has_odometry_data () const;
[821] void LegacySerializedData::clear_odometry_data ();
[825] ::cartographer::mapping::proto::OdometryData LegacySerializedData::odometry_data () const;
[831] ::cartographer::mapping::proto::OdometryData LegacySerializedData::mutable_odometry_data ();
[839] ::cartographer::mapping::proto::OdometryData LegacySerializedData::release_odometry_data ();
[846] void LegacySerializedData::set_allocated_odometry_data (::cartographer::mapping::proto::OdometryData odometry_data);
[858] bool LegacySerializedData::has_fixed_frame_pose_data () const;
[861] void LegacySerializedData::clear_fixed_frame_pose_data ();
[865] ::cartographer::mapping::proto::FixedFramePoseData LegacySerializedData::fixed_frame_pose_data () const;
[871] ::cartographer::mapping::proto::FixedFramePoseData LegacySerializedData::mutable_fixed_frame_pose_data ();
[879] ::cartographer::mapping::proto::FixedFramePoseData LegacySerializedData::release_fixed_frame_pose_data ();
[886] void LegacySerializedData::set_allocated_fixed_frame_pose_data (::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data);
[898] bool LegacySerializedData::has_trajectory_data () const;
[901] void LegacySerializedData::clear_trajectory_data ();
[905] ::cartographer::mapping::proto::TrajectoryData LegacySerializedData::trajectory_data () const;
[911] ::cartographer::mapping::proto::TrajectoryData LegacySerializedData::mutable_trajectory_data ();
[919] ::cartographer::mapping::proto::TrajectoryData LegacySerializedData::release_trajectory_data ();
[926] void LegacySerializedData::set_allocated_trajectory_data (::cartographer::mapping::proto::TrajectoryData trajectory_data);
[938] bool LegacySerializedData::has_landmark_data () const;
[941] void LegacySerializedData::clear_landmark_data ();
[945] ::cartographer::mapping::proto::LandmarkData LegacySerializedData::landmark_data () const;
[951] ::cartographer::mapping::proto::LandmarkData LegacySerializedData::mutable_landmark_data ();
[959] ::cartographer::mapping::proto::LandmarkData LegacySerializedData::release_landmark_data ();
[966] void LegacySerializedData::set_allocated_landmark_data (::cartographer::mapping::proto::LandmarkData landmark_data);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/transform/proto/transform.pb.h  ( 49 )
[120] ::google::protobuf::Descriptor descriptor ();
[121] Vector2d default_instance ();
[176] void clear_x ();
[178] double x () const;
[179] void set_x (double value);
[182] void clear_y ();
[184] double y () const;
[185] void set_y (double value);
[396] void clear_z ();
[398] double z () const;
[399] void set_z (double value);
[624] void clear_t ();
[626] float  t() const;
[627] void set_t (float value);
[742] void clear_w ();
[744] double w () const;
[745] void set_w (double value);
[960] bool has_translation () const;
[961] void clear_translation ();
[963] ::cartographer::transform::proto::Vector2d translation () const;
[964] ::cartographer::transform::proto::Vector2d mutable_translation ();
[965] ::cartographer::transform::proto::Vector2d release_translation ();
[966] void set_allocated_translation (::cartographer::transform::proto::Vector2d translation);
[969] void clear_rotation ();
[971] double rotation () const;
[972] void set_rotation (double value);
[1183] bool has_rotation () const;
[1187] ::cartographer::transform::proto::Quaterniond mutable_rotation ();
[1188] ::cartographer::transform::proto::Quaterniond release_rotation ();
[1189] void set_allocated_rotation (::cartographer::transform::proto::Quaterniond rotation);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/transform/proto/transform.pb.cc  ( 52 )
[229] void protobuf_AssignDescriptors ();
[237] void protobuf_AssignDescriptorsOnce ();
[242] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[387] ::google::protobuf::Descriptor Vector2d::descriptor ();
[392] Vector2d Vector2d::default_instance ();
[618] void Vector2d::clear_x ();
[621] double Vector2d::x () const;
[625] void Vector2d::set_x (double value);
[632] void Vector2d::clear_y ();
[635] double Vector2d::y () const;
[639] void Vector2d::set_y (double value);
[1292] void Vector3d::clear_z ();
[1295] double Vector3d::z () const;
[1299] void Vector3d::set_z (double value);
[2048] void Vector4f::clear_t ();
[2051] float  Vector4f::t() const;
[2055] void Vector4f::set_t (float value);
[2450] void Quaterniond::clear_w ();
[2453] double Quaterniond::w () const;
[2457] void Quaterniond::set_w (double value);
[3153] bool Rigid2d::has_translation () const;
[3156] void Rigid2d::clear_translation ();
[3160] ::cartographer::transform::proto::Vector2d Rigid2d::translation () const;
[3166] ::cartographer::transform::proto::Vector2d Rigid2d::mutable_translation ();
[3174] ::cartographer::transform::proto::Vector2d Rigid2d::release_translation ();
[3181] void Rigid2d::set_allocated_translation (::cartographer::transform::proto::Vector2d translation);
[3193] void Rigid2d::clear_rotation ();
[3196] double Rigid2d::rotation () const;
[3200] void Rigid2d::set_rotation (double value);
[3886] bool Rigid3d::has_rotation () const;
[3899] ::cartographer::transform::proto::Quaterniond Rigid3d::mutable_rotation ();
[3907] ::cartographer::transform::proto::Quaterniond Rigid3d::release_rotation ();
[3914] void Rigid3d::set_allocated_rotation (::cartographer::transform::proto::Quaterniond rotation);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/common/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/common/proto/ceres_solver_options.pb.cc  ( 33 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[182] ::google::protobuf::Descriptor CeresSolverOptions::descriptor ();
[187] CeresSolverOptions CeresSolverOptions::default_instance ();
[450] void CeresSolverOptions::clear_use_nonmonotonic_steps ();
[453] bool CeresSolverOptions::use_nonmonotonic_steps () const;
[457] void CeresSolverOptions::set_use_nonmonotonic_steps (bool value);
[464] void CeresSolverOptions::clear_max_num_iterations ();
[467] ::google::protobuf::int32 CeresSolverOptions::max_num_iterations () const;
[471] void CeresSolverOptions::set_max_num_iterations (::google::protobuf::int32 value);
[478] void CeresSolverOptions::clear_num_threads ();
[481] ::google::protobuf::int32 CeresSolverOptions::num_threads () const;
[485] void CeresSolverOptions::set_num_threads (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/common/proto/ceres_solver_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] CeresSolverOptions default_instance ();
[146] void clear_use_nonmonotonic_steps ();
[148] bool use_nonmonotonic_steps () const;
[149] void set_use_nonmonotonic_steps (bool value);
[152] void clear_max_num_iterations ();
[154] ::google::protobuf::int32 max_num_iterations () const;
[155] void set_max_num_iterations (::google::protobuf::int32 value);
[158] void clear_num_threads ();
[160] ::google::protobuf::int32 num_threads () const;
[161] void set_num_threads (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/ground_truth/proto/relations.pb.cc  ( 44 )
[87] void protobuf_AssignDescriptors ();
[95] void protobuf_AssignDescriptorsOnce ();
[100] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[214] ::google::protobuf::Descriptor Relation::descriptor ();
[219] Relation Relation::default_instance ();
[522] void Relation::clear_timestamp1 ();
[525] ::google::protobuf::int64 Relation::timestamp1 () const;
[529] void Relation::set_timestamp1 (::google::protobuf::int64 value);
[536] void Relation::clear_timestamp2 ();
[539] ::google::protobuf::int64 Relation::timestamp2 () const;
[543] void Relation::set_timestamp2 (::google::protobuf::int64 value);
[550] bool Relation::has_expected () const;
[553] void Relation::clear_expected ();
[557] ::cartographer::transform::proto::Rigid3d Relation::expected () const;
[563] ::cartographer::transform::proto::Rigid3d Relation::mutable_expected ();
[571] ::cartographer::transform::proto::Rigid3d Relation::release_expected ();
[578] void Relation::set_allocated_expected (::cartographer::transform::proto::Rigid3d expected);
[590] void Relation::clear_covered_distance ();
[593] double Relation::covered_distance () const;
[597] void Relation::set_covered_distance (double value);
[848] int GroundTruth::relation_size () const;
[851] void GroundTruth::clear_relation ();
[854] ::cartographer::ground_truth::proto::Relation GroundTruth::relation (int index) const;
[858] ::cartographer::ground_truth::proto::Relation GroundTruth::mutable_relation (int index);
[862] ::cartographer::ground_truth::proto::Relation GroundTruth::add_relation ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/ground_truth/proto/relations.pb.h  ( 41 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] Relation default_instance ();
[150] bool has_expected () const;
[151] void clear_expected ();
[153] ::cartographer::transform::proto::Rigid3d expected () const;
[154] ::cartographer::transform::proto::Rigid3d mutable_expected ();
[155] ::cartographer::transform::proto::Rigid3d release_expected ();
[156] void set_allocated_expected (::cartographer::transform::proto::Rigid3d expected);
[159] void clear_timestamp1 ();
[161] ::google::protobuf::int64 timestamp1 () const;
[162] void set_timestamp1 (::google::protobuf::int64 value);
[165] void clear_timestamp2 ();
[167] ::google::protobuf::int64 timestamp2 () const;
[168] void set_timestamp2 (::google::protobuf::int64 value);
[171] void clear_covered_distance ();
[173] double covered_distance () const;
[174] void set_covered_distance (double value);
[271] int relation_size () const;
[272] void clear_relation ();
[274] ::cartographer::ground_truth::proto::Relation relation (int index) const;
[275] ::cartographer::ground_truth::proto::Relation mutable_relation (int index);
[276] ::cartographer::ground_truth::proto::Relation add_relation ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/sensor/proto/sensor.pb.h  ( 90 )
[112] ::google::protobuf::Descriptor descriptor ();
[113] CompressedPointCloud default_instance ();
[168] int point_data_size () const;
[169] void clear_point_data ();
[171] ::google::protobuf::int32 point_data (int index) const;
[172] void set_point_data (int index, ::google::protobuf::int32 value);
[173] void add_point_data (::google::protobuf::int32 value);
[180] void clear_num_points ();
[182] ::google::protobuf::int32 num_points () const;
[183] void set_num_points (::google::protobuf::int32 value);
[283] ::cartographer::transform::proto::Vector4f mutable_point_data (int index);
[291] bool has_origin () const;
[292] void clear_origin ();
[294] ::cartographer::transform::proto::Vector3f origin () const;
[295] ::cartographer::transform::proto::Vector3f mutable_origin ();
[296] ::cartographer::transform::proto::Vector3f release_origin ();
[297] void set_allocated_origin (::cartographer::transform::proto::Vector3f origin);
[300] void clear_timestamp ();
[302] ::google::protobuf::int64 timestamp () const;
[303] void set_timestamp (::google::protobuf::int64 value);
[399] int returns_size () const;
[400] void clear_returns ();
[402] ::cartographer::transform::proto::Vector3f returns (int index) const;
[403] ::cartographer::transform::proto::Vector3f mutable_returns (int index);
[404] ::cartographer::transform::proto::Vector3f add_returns ();
[411] int misses_size () const;
[412] void clear_misses ();
[414] ::cartographer::transform::proto::Vector3f misses (int index) const;
[415] ::cartographer::transform::proto::Vector3f mutable_misses (int index);
[416] ::cartographer::transform::proto::Vector3f add_misses ();
[525] bool has_linear_acceleration () const;
[526] void clear_linear_acceleration ();
[528] ::cartographer::transform::proto::Vector3d linear_acceleration () const;
[529] ::cartographer::transform::proto::Vector3d mutable_linear_acceleration ();
[530] ::cartographer::transform::proto::Vector3d release_linear_acceleration ();
[531] void set_allocated_linear_acceleration (::cartographer::transform::proto::Vector3d linear_acceleration);
[534] bool has_angular_velocity () const;
[535] void clear_angular_velocity ();
[537] ::cartographer::transform::proto::Vector3d angular_velocity () const;
[538] ::cartographer::transform::proto::Vector3d mutable_angular_velocity ();
[539] ::cartographer::transform::proto::Vector3d release_angular_velocity ();
[540] void set_allocated_angular_velocity (::cartographer::transform::proto::Vector3d angular_velocity);
[642] bool has_pose () const;
[643] void clear_pose ();
[645] ::cartographer::transform::proto::Rigid3d pose () const;
[646] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[647] ::cartographer::transform::proto::Rigid3d release_pose ();
[648] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[856] void clear_id ();
[858] ::std::string id () const;
[859] void set_id (const ::std::string value);
[865] ::std::string mutable_id ();
[866] ::std::string release_id ();
[867] void set_allocated_id (::std::string id);
[870] bool has_landmark_to_tracking_transform () const;
[871] void clear_landmark_to_tracking_transform ();
[873] ::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform () const;
[874] ::cartographer::transform::proto::Rigid3d mutable_landmark_to_tracking_transform ();
[875] ::cartographer::transform::proto::Rigid3d release_landmark_to_tracking_transform ();
[876] void set_allocated_landmark_to_tracking_transform (::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform);
[879] void clear_translation_weight ();
[881] double translation_weight () const;
[882] void set_translation_weight (double value);
[885] void clear_rotation_weight ();
[887] double rotation_weight () const;
[888] void set_rotation_weight (double value);
[987] int landmark_observations_size () const;
[988] void clear_landmark_observations ();
[990] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation landmark_observations (int index) const;
[991] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation mutable_landmark_observations (int index);
[992] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation add_landmark_observations ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.cc  ( 33 )
[72] void protobuf_AssignDescriptors ();
[80] void protobuf_AssignDescriptorsOnce ();
[85] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[182] ::google::protobuf::Descriptor AdaptiveVoxelFilterOptions::descriptor ();
[187] AdaptiveVoxelFilterOptions AdaptiveVoxelFilterOptions::default_instance ();
[446] void AdaptiveVoxelFilterOptions::clear_max_length ();
[449] float AdaptiveVoxelFilterOptions::max_length () const;
[453] void AdaptiveVoxelFilterOptions::set_max_length (float value);
[460] void AdaptiveVoxelFilterOptions::clear_min_num_points ();
[463] float AdaptiveVoxelFilterOptions::min_num_points () const;
[467] void AdaptiveVoxelFilterOptions::set_min_num_points (float value);
[474] void AdaptiveVoxelFilterOptions::clear_max_range ();
[477] float AdaptiveVoxelFilterOptions::max_range () const;
[481] void AdaptiveVoxelFilterOptions::set_max_range (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] AdaptiveVoxelFilterOptions default_instance ();
[146] void clear_max_length ();
[148] float max_length () const;
[149] void set_max_length (float value);
[152] void clear_min_num_points ();
[154] float min_num_points () const;
[155] void set_min_num_points (float value);
[158] void clear_max_range ();
[160] float max_range () const;
[161] void set_max_range (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/sensor/proto/sensor.pb.cc  ( 93 )
[181] void protobuf_AssignDescriptors ();
[189] void protobuf_AssignDescriptorsOnce ();
[194] void protobuf_RegisterTypes (const ::std::string) GOOGLE_ATTRIBUTE_COLD;
[342] ::google::protobuf::Descriptor CompressedPointCloud::descriptor ();
[347] CompressedPointCloud CompressedPointCloud::default_instance ();
[602] void CompressedPointCloud::clear_num_points ();
[605] ::google::protobuf::int32 CompressedPointCloud::num_points () const;
[609] void CompressedPointCloud::set_num_points (::google::protobuf::int32 value);
[616] int CompressedPointCloud::point_data_size () const;
[619] void CompressedPointCloud::clear_point_data ();
[622] ::google::protobuf::int32 CompressedPointCloud::point_data (int index) const;
[626] void CompressedPointCloud::set_point_data (int index, ::google::protobuf::int32 value);
[630] void CompressedPointCloud::add_point_data (::google::protobuf::int32 value);
[978] void TimedPointCloudData::clear_timestamp ();
[981] ::google::protobuf::int64 TimedPointCloudData::timestamp () const;
[985] void TimedPointCloudData::set_timestamp (::google::protobuf::int64 value);
[992] bool TimedPointCloudData::has_origin () const;
[995] void TimedPointCloudData::clear_origin ();
[999] ::cartographer::transform::proto::Vector3f TimedPointCloudData::origin () const;
[1005] ::cartographer::transform::proto::Vector3f TimedPointCloudData::mutable_origin ();
[1013] ::cartographer::transform::proto::Vector3f TimedPointCloudData::release_origin ();
[1020] void TimedPointCloudData::set_allocated_origin (::cartographer::transform::proto::Vector3f origin);
[1042] ::cartographer::transform::proto::Vector4f TimedPointCloudData::mutable_point_data (int index);
[1437] int RangeData::returns_size () const;
[1440] void RangeData::clear_returns ();
[1443] ::cartographer::transform::proto::Vector3f RangeData::returns (int index) const;
[1447] ::cartographer::transform::proto::Vector3f RangeData::mutable_returns (int index);
[1451] ::cartographer::transform::proto::Vector3f RangeData::add_returns ();
[1467] int RangeData::misses_size () const;
[1470] void RangeData::clear_misses ();
[1473] ::cartographer::transform::proto::Vector3f RangeData::misses (int index) const;
[1477] ::cartographer::transform::proto::Vector3f RangeData::mutable_misses (int index);
[1481] ::cartographer::transform::proto::Vector3f RangeData::add_misses ();
[1847] bool ImuData::has_linear_acceleration () const;
[1850] void ImuData::clear_linear_acceleration ();
[1854] ::cartographer::transform::proto::Vector3d ImuData::linear_acceleration () const;
[1860] ::cartographer::transform::proto::Vector3d ImuData::mutable_linear_acceleration ();
[1868] ::cartographer::transform::proto::Vector3d ImuData::release_linear_acceleration ();
[1875] void ImuData::set_allocated_linear_acceleration (::cartographer::transform::proto::Vector3d linear_acceleration);
[1887] bool ImuData::has_angular_velocity () const;
[1890] void ImuData::clear_angular_velocity ();
[1894] ::cartographer::transform::proto::Vector3d ImuData::angular_velocity () const;
[1900] ::cartographer::transform::proto::Vector3d ImuData::mutable_angular_velocity ();
[1908] ::cartographer::transform::proto::Vector3d ImuData::release_angular_velocity ();
[1915] void ImuData::set_allocated_angular_velocity (::cartographer::transform::proto::Vector3d angular_velocity);
[2230] bool OdometryData::has_pose () const;
[2233] void OdometryData::clear_pose ();
[2237] ::cartographer::transform::proto::Rigid3d OdometryData::pose () const;
[2243] ::cartographer::transform::proto::Rigid3d OdometryData::mutable_pose ();
[2251] ::cartographer::transform::proto::Rigid3d OdometryData::release_pose ();
[2258] void OdometryData::set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[2983] void LandmarkData_LandmarkObservation::clear_id ();
[2986] ::std::string LandmarkData_LandmarkObservation::id () const;
[2990] void LandmarkData_LandmarkObservation::set_id (const ::std::string value);
[3015] ::std::string LandmarkData_LandmarkObservation::mutable_id ();
[3020] ::std::string LandmarkData_LandmarkObservation::release_id ();
[3025] void LandmarkData_LandmarkObservation::set_allocated_id (::std::string id);
[3036] bool LandmarkData_LandmarkObservation::has_landmark_to_tracking_transform () const;
[3039] void LandmarkData_LandmarkObservation::clear_landmark_to_tracking_transform ();
[3043] ::cartographer::transform::proto::Rigid3d LandmarkData_LandmarkObservation::landmark_to_tracking_transform () const;
[3049] ::cartographer::transform::proto::Rigid3d LandmarkData_LandmarkObservation::mutable_landmark_to_tracking_transform ();
[3057] ::cartographer::transform::proto::Rigid3d LandmarkData_LandmarkObservation::release_landmark_to_tracking_transform ();
[3064] void LandmarkData_LandmarkObservation::set_allocated_landmark_to_tracking_transform (::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform);
[3076] void LandmarkData_LandmarkObservation::clear_translation_weight ();
[3079] double LandmarkData_LandmarkObservation::translation_weight () const;
[3083] void LandmarkData_LandmarkObservation::set_translation_weight (double value);
[3090] void LandmarkData_LandmarkObservation::clear_rotation_weight ();
[3093] double LandmarkData_LandmarkObservation::rotation_weight () const;
[3097] void LandmarkData_LandmarkObservation::set_rotation_weight (double value);
[3401] int LandmarkData::landmark_observations_size () const;
[3404] void LandmarkData::clear_landmark_observations ();
[3407] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation LandmarkData::landmark_observations (int index) const;
[3411] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation LandmarkData::mutable_landmark_observations (int index);
[3415] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation LandmarkData::add_landmark_observations ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/build/CMakeFiles/FindOpenMP/OpenMPCheckVersion.cpp  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/build/CMakeFiles/FindOpenMP/OpenMPTryFlag.cpp  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/local_slam_result_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/probability_values.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_kalman.h  ( 30 )
[56] void kalmanInit ();
[57] void newkalmaninit ();
[70] void sifFusePosKf (Eigen::Vector3d observation_pos);
[71] void sifFuseQuatKf (Eigen::Quaterniond observation_qua);
[72] void newFusePosKf (Eigen::Vector3d observation_pos,Eigen::Quaterniond observation_qua);
[73] void newFuseQuatKf (Eigen::Quaterniond observation_qua);
[74] void estimatePose (double dt_slam_odm, double dt_odm);
[75] void reset_q_parameter ();
[77] void kfCovUpdata (double dtime);
[78] void newkfCovUpdata (double dtime);
[79] void sifReviseNavKf (int fuse_type);
[80] void newReviseNavKf (int fuse_type);
[81] void sifReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
[82] void newReviseAttMissRef (double fPhiXr, double fPhiYr, double fPhiZr);
[84] void stateMove (Eigen::Vector3d observation_car_vel);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/detect_floors.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_node.h  ( 3 )
[70] common::Time time () const return constant_data->time };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/id.h  ( 23 )
[117] IteratorType begin () const return begin_ };
[118] IteratorType end () const return end_ };
[171] IdDataReference operator () const;
[189] ConstIterator operator-- ();
[276] ConstIterator find (const IdType id) const;
[312] Dat aType at(const IdType id) const;
[336] size _t size() const;
[345] Range<ConstIterator> trajectory (const int trajectory_id) const;
[351] Range<ConstTrajectoryIterator> trajectory_ids () const;
[362] bool empty () const return begin() == end() };
[369] ConstIterator lower_bound (const int trajectory_id, const common::Time time) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/submaps.h  ( 9 )
[78] transform::Rigid3d local_pose () const return local_pose_ };
[81] int num_range_data () const return num_range_data_ };
[82] void set_num_range_data (const int num_range_data);
[87] bool finished () const return finished_ };
[88] void set_finished (bool finished) finished_ = finished };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph.h  ( 22 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/grid_interface.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_tracker.h  ( 5 )
[49] common::Time time () const return time_ };
[53] Eigen::Quaterniond orientation () const return orientation_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder_interface.h  ( 12 )
[93] int num_trajectory_builders () const = 0;
[95] mapping::PoseGraphInterface pose_graph () = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_interface.h  ( 10 )
[151] std::vector<Constraint> constraints () const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/range_data_inserter_interface.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_builder_interface.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/Ramp.h  ( 11 )
[43] transform::Rigid2d local_pose1 () const return local_pose1_ };
[44] transform::Rigid2d local_pose2 () const return local_pose2_ };
[45] transform::Rigid2d local_pose3 () const return local_pose3_ };
[46] transform::Rigid2d local_pose4 () const return local_pose4_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_extrapolator.h  ( 27 )
[93] transform::Rigid3d ExtrapolatePose_frame_vel (common::Time time);
[96] bool judge_time_frame_vel (common::Time time);
[97] bool judge_time_imu (common::Time time);
[141] Eigen::Vector3d ExtrapolateTranslation_frame_vel (common::Time time);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder.h  ( 13 )
[87] mapping::PoseGraphInterface pose_graph () override;
[91] int num_trajectory_builders () const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_trimmer.h  ( 6 )
[32] int num_submaps (int trajectory_id) const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/hybrid_grid.h  ( 23 )
[84] int grid_size () return 1 << kBits };
[88] ValueType value (const Eigen::Array3i index) const;
[93] ValueType mutable_value (const Eigen::Array3i index);
[423] float resolution () const return resolution_ };
[449] Iterator begin () const return Iterator(this) };
[451] Iterator end () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/submap_3d.h  ( 12 )
[61] HybridGrid high_resolution_hybrid_grid () const;
[64] HybridGrid low_resolution_hybrid_grid () const;
[98] int matching_index () const;
[106] std::vector<std::shared_ptr<Submap3D>> submaps () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/range_data_inserter_3d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/grid_2d.h  ( 20 )
[42] MapLimits limits () const return limits_ };
[79] std::vector<uint16> correspondence_cost_cells () const;
[80] std::vector<int> update_indices () const return update_indices_ };
[81] Eigen::AlignedBox2i known_cells_box () const;
[85] std::vector<uint16> mutable_correspondence_cost_cells ();
[86] std::vector<int> mutable_update_indices () return update_indices_ };
[87] Eigen::AlignedBox2i mutable_known_cells_box () return known_cells_box_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/submap_2d.h  ( 21 )
[56] Grid2D grid () const return grid_.get() };
[66] void setFlag ();
[117] int matching_index () const;
[123] std::vector<std::shared_ptr<Submap2D>> submaps () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/xy_index.h  ( 3 )
[85] Eigen::Array2i operator () return xy_index_ };
[95] XYIndexRangeIterator begin ();
[99] XYIndexRangeIterator end ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/map_limits.h  ( 5 )
[57] double resolution () const return resolution_ };
[61] Eigen::Vector2d max () const return max_ };
[64] CellLimits cell_limits () const return cell_limits_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/ramp.pb.h  ( 48 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] Ramp default_instance ();
[147] bool has_pose1 () const;
[148] void clear_pose1 ();
[150] ::cartographer::transform::proto::Rigid2d pose1 () const;
[151] ::cartographer::transform::proto::Rigid2d mutable_pose1 ();
[152] ::cartographer::transform::proto::Rigid2d release_pose1 ();
[153] void set_allocated_pose1 (::cartographer::transform::proto::Rigid2d pose1);
[156] bool has_pose2 () const;
[157] void clear_pose2 ();
[159] ::cartographer::transform::proto::Rigid2d pose2 () const;
[160] ::cartographer::transform::proto::Rigid2d mutable_pose2 ();
[161] ::cartographer::transform::proto::Rigid2d release_pose2 ();
[162] void set_allocated_pose2 (::cartographer::transform::proto::Rigid2d pose2);
[165] bool has_pose3 () const;
[166] void clear_pose3 ();
[168] ::cartographer::transform::proto::Rigid2d pose3 () const;
[169] ::cartographer::transform::proto::Rigid2d mutable_pose3 ();
[170] ::cartographer::transform::proto::Rigid2d release_pose3 ();
[171] void set_allocated_pose3 (::cartographer::transform::proto::Rigid2d pose3);
[174] bool has_pose4 () const;
[175] void clear_pose4 ();
[177] ::cartographer::transform::proto::Rigid2d pose4 () const;
[178] ::cartographer::transform::proto::Rigid2d mutable_pose4 ();
[179] ::cartographer::transform::proto::Rigid2d release_pose4 ();
[180] void set_allocated_pose4 (::cartographer::transform::proto::Rigid2d pose4);
[183] void clear_trajectory_id ();
[185] ::google::protobuf::int32 trajectory_id () const;
[186] void set_trajectory_id (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph.pb.h  ( 86 )
[83] bool PoseGraph_Constraint_Tag_IsValid (int value);
[88] ::google::protobuf::EnumDescriptor PoseGraph_Constraint_Tag_descriptor ();
[126] ::google::protobuf::Descriptor descriptor ();
[127] SubmapId default_instance ();
[182] void clear_trajectory_id ();
[184] ::google::protobuf::int32 trajectory_id () const;
[185] void set_trajectory_id (::google::protobuf::int32 value);
[188] void clear_submap_index ();
[190] ::google::protobuf::int32 submap_index () const;
[191] void set_submap_index (::google::protobuf::int32 value);
[292] void clear_node_index ();
[294] ::google::protobuf::int32 node_index () const;
[295] void set_node_index (::google::protobuf::int32 value);
[416] bool has_submap_id () const;
[417] void clear_submap_id ();
[419] ::cartographer::mapping::proto::SubmapId submap_id () const;
[420] ::cartographer::mapping::proto::SubmapId mutable_submap_id ();
[421] ::cartographer::mapping::proto::SubmapId release_submap_id ();
[422] void set_allocated_submap_id (::cartographer::mapping::proto::SubmapId submap_id);
[425] bool has_node_id () const;
[426] void clear_node_id ();
[428] ::cartographer::mapping::proto::NodeId node_id () const;
[429] ::cartographer::mapping::proto::NodeId mutable_node_id ();
[430] ::cartographer::mapping::proto::NodeId release_node_id ();
[431] void set_allocated_node_id (::cartographer::mapping::proto::NodeId node_id);
[434] bool has_relative_pose () const;
[435] void clear_relative_pose ();
[437] ::cartographer::transform::proto::Rigid3d relative_pose () const;
[438] ::cartographer::transform::proto::Rigid3d mutable_relative_pose ();
[439] ::cartographer::transform::proto::Rigid3d release_relative_pose ();
[440] void set_allocated_relative_pose (::cartographer::transform::proto::Rigid3d relative_pose);
[443] void clear_translation_weight ();
[445] double translation_weight () const;
[446] void set_translation_weight (double value);
[449] void clear_rotation_weight ();
[451] double rotation_weight () const;
[452] void set_rotation_weight (double value);
[455] void clear_tag ();
[457] ::cartographer::mapping::proto::PoseGraph_Constraint_Tag tag () const;
[458] void set_tag (::cartographer::mapping::proto::PoseGraph_Constraint_Tag value);
[557] void clear_landmark_id ();
[559] ::std::string landmark_id () const;
[560] void set_landmark_id (const ::std::string value);
[566] ::std::string mutable_landmark_id ();
[567] ::std::string release_landmark_id ();
[568] void set_allocated_landmark_id (::std::string landmark_id);
[571] bool has_global_pose () const;
[572] void clear_global_pose ();
[574] ::cartographer::transform::proto::Rigid3d global_pose () const;
[575] ::cartographer::transform::proto::Rigid3d mutable_global_pose ();
[576] ::cartographer::transform::proto::Rigid3d release_global_pose ();
[577] void set_allocated_global_pose (::cartographer::transform::proto::Rigid3d global_pose);
[675] int constraint_size () const;
[676] void clear_constraint ();
[678] ::cartographer::mapping::proto::PoseGraph_Constraint constraint (int index) const;
[679] ::cartographer::mapping::proto::PoseGraph_Constraint mutable_constraint (int index);
[680] ::cartographer::mapping::proto::PoseGraph_Constraint add_constraint ();
[687] int trajectory_size () const;
[688] void clear_trajectory ();
[690] ::cartographer::mapping::proto::Trajectory trajectory (int index) const;
[691] ::cartographer::mapping::proto::Trajectory mutable_trajectory (int index);
[692] ::cartographer::mapping::proto::Trajectory add_trajectory ();
[699] int landmark_poses_size () const;
[700] void clear_landmark_poses ();
[702] ::cartographer::mapping::proto::PoseGraph_LandmarkPose landmark_poses (int index) const;
[703] ::cartographer::mapping::proto::PoseGraph_LandmarkPose mutable_landmark_poses (int index);
[704] ::cartographer::mapping::proto::PoseGraph_LandmarkPose add_landmark_poses ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_node_data.pb.h  ( 65 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] TrajectoryNodeData default_instance ();
[148] int rotational_scan_matcher_histogram_size () const;
[149] void clear_rotational_scan_matcher_histogram ();
[151] float rotational_scan_matcher_histogram (int index) const;
[152] void set_rotational_scan_matcher_histogram (int index, float value);
[153] void add_rotational_scan_matcher_histogram (float value);
[160] bool has_gravity_alignment () const;
[161] void clear_gravity_alignment ();
[163] ::cartographer::transform::proto::Quaterniond gravity_alignment () const;
[164] ::cartographer::transform::proto::Quaterniond mutable_gravity_alignment ();
[165] ::cartographer::transform::proto::Quaterniond release_gravity_alignment ();
[166] void set_allocated_gravity_alignment (::cartographer::transform::proto::Quaterniond gravity_alignment);
[169] bool has_filtered_gravity_aligned_point_cloud () const;
[170] void clear_filtered_gravity_aligned_point_cloud ();
[172] ::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud () const;
[173] ::cartographer::sensor::proto::CompressedPointCloud mutable_filtered_gravity_aligned_point_cloud ();
[174] ::cartographer::sensor::proto::CompressedPointCloud release_filtered_gravity_aligned_point_cloud ();
[175] void set_allocated_filtered_gravity_aligned_point_cloud (::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud);
[178] bool has_high_resolution_point_cloud () const;
[179] void clear_high_resolution_point_cloud ();
[181] ::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud () const;
[182] ::cartographer::sensor::proto::CompressedPointCloud mutable_high_resolution_point_cloud ();
[183] ::cartographer::sensor::proto::CompressedPointCloud release_high_resolution_point_cloud ();
[184] void set_allocated_high_resolution_point_cloud (::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud);
[187] bool has_low_resolution_point_cloud () const;
[188] void clear_low_resolution_point_cloud ();
[190] ::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud () const;
[191] ::cartographer::sensor::proto::CompressedPointCloud mutable_low_resolution_point_cloud ();
[192] ::cartographer::sensor::proto::CompressedPointCloud release_low_resolution_point_cloud ();
[193] void set_allocated_low_resolution_point_cloud (::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud);
[196] bool has_local_pose () const;
[197] void clear_local_pose ();
[199] ::cartographer::transform::proto::Rigid3d local_pose () const;
[200] ::cartographer::transform::proto::Rigid3d mutable_local_pose ();
[201] ::cartographer::transform::proto::Rigid3d release_local_pose ();
[202] void set_allocated_local_pose (::cartographer::transform::proto::Rigid3d local_pose);
[205] bool has_obstacles () const;
[206] void clear_obstacles ();
[208] ::cartographer::sensor::proto::CompressedPointCloud obstacles () const;
[209] ::cartographer::sensor::proto::CompressedPointCloud mutable_obstacles ();
[210] ::cartographer::sensor::proto::CompressedPointCloud release_obstacles ();
[211] void set_allocated_obstacles (::cartographer::sensor::proto::CompressedPointCloud obstacles);
[214] void clear_timestamp ();
[216] ::google::protobuf::int64 timestamp () const;
[217] void set_timestamp (::google::protobuf::int64 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_builder_options.pb.h  ( 99 )
[91] bool SensorId_SensorType_IsValid (int value);
[96] ::google::protobuf::EnumDescriptor SensorId_SensorType_descriptor ();
[134] ::google::protobuf::Descriptor descriptor ();
[135] InitialTrajectoryPose default_instance ();
[190] bool has_relative_pose () const;
[191] void clear_relative_pose ();
[193] ::cartographer::transform::proto::Rigid3d relative_pose () const;
[194] ::cartographer::transform::proto::Rigid3d mutable_relative_pose ();
[195] ::cartographer::transform::proto::Rigid3d release_relative_pose ();
[196] void set_allocated_relative_pose (::cartographer::transform::proto::Rigid3d relative_pose);
[199] void clear_timestamp ();
[201] ::google::protobuf::int64 timestamp () const;
[202] void set_timestamp (::google::protobuf::int64 value);
[205] void clear_to_trajectory_id ();
[207] ::google::protobuf::int32 to_trajectory_id () const;
[208] void set_to_trajectory_id (::google::protobuf::int32 value);
[304] void clear_min_covered_area ();
[306] double min_covered_area () const;
[307] void set_min_covered_area (double value);
[310] void clear_fresh_submaps_count ();
[312] ::google::protobuf::int32 fresh_submaps_count () const;
[313] void set_fresh_submaps_count (::google::protobuf::int32 value);
[316] void clear_min_added_submaps_count ();
[318] ::google::protobuf::int32 min_added_submaps_count () const;
[319] void set_min_added_submaps_count (::google::protobuf::int32 value);
[417] bool has_trajectory_builder_2d_options () const;
[418] void clear_trajectory_builder_2d_options ();
[420] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options () const;
[421] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D mutable_trajectory_builder_2d_options ();
[422] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D release_trajectory_builder_2d_options ();
[423] void set_allocated_trajectory_builder_2d_options (::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options);
[426] bool has_trajectory_builder_3d_options () const;
[427] void clear_trajectory_builder_3d_options ();
[429] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options () const;
[430] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D mutable_trajectory_builder_3d_options ();
[431] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D release_trajectory_builder_3d_options ();
[432] void set_allocated_trajectory_builder_3d_options (::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options);
[435] bool has_initial_trajectory_pose () const;
[436] void clear_initial_trajectory_pose ();
[438] ::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose () const;
[439] ::cartographer::mapping::proto::InitialTrajectoryPose mutable_initial_trajectory_pose ();
[440] ::cartographer::mapping::proto::InitialTrajectoryPose release_initial_trajectory_pose ();
[441] void set_allocated_initial_trajectory_pose (::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose);
[444] bool has_overlapping_submaps_trimmer_2d () const;
[445] void clear_overlapping_submaps_trimmer_2d ();
[447] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d () const;
[448] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D mutable_overlapping_submaps_trimmer_2d ();
[449] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D release_overlapping_submaps_trimmer_2d ();
[450] void set_allocated_overlapping_submaps_trimmer_2d (::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d);
[453] void clear_pure_localization ();
[455] bool pure_localization () const;
[456] void set_pure_localization (bool value);
[459] void clear_border_flag ();
[461] bool border_flag () const;
[462] void set_border_flag (bool value);
[595] void clear_id ();
[597] ::std::string id () const;
[598] void set_id (const ::std::string value);
[604] ::std::string mutable_id ();
[605] ::std::string release_id ();
[606] void set_allocated_id (::std::string id);
[609] void clear_type ();
[611] ::cartographer::mapping::proto::SensorId_SensorType type () const;
[612] void set_type (::cartographer::mapping::proto::SensorId_SensorType value);
[707] int sensor_id_size () const;
[708] void clear_sensor_id ();
[710] ::cartographer::mapping::proto::SensorId sensor_id (int index) const;
[711] ::cartographer::mapping::proto::SensorId mutable_sensor_id (int index);
[712] ::cartographer::mapping::proto::SensorId add_sensor_id ();
[719] bool has_trajectory_builder_options () const;
[720] void clear_trajectory_builder_options ();
[722] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options () const;
[723] ::cartographer::mapping::proto::TrajectoryBuilderOptions mutable_trajectory_builder_options ();
[724] ::cartographer::mapping::proto::TrajectoryBuilderOptions release_trajectory_builder_options ();
[725] void set_allocated_trajectory_builder_options (::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options);
[820] int options_with_sensor_ids_size () const;
[821] void clear_options_with_sensor_ids ();
[823] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids (int index) const;
[824] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds mutable_options_with_sensor_ids (int index);
[825] ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds add_options_with_sensor_ids ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap.pb.h  ( 51 )
[96] ::google::protobuf::Descriptor descriptor ();
[97] Submap2D default_instance ();
[152] bool has_local_pose () const;
[153] void clear_local_pose ();
[155] ::cartographer::transform::proto::Rigid3d local_pose () const;
[156] ::cartographer::transform::proto::Rigid3d mutable_local_pose ();
[157] ::cartographer::transform::proto::Rigid3d release_local_pose ();
[158] void set_allocated_local_pose (::cartographer::transform::proto::Rigid3d local_pose);
[161] bool has_grid () const;
[162] void clear_grid ();
[164] ::cartographer::mapping::proto::Grid2D grid () const;
[165] ::cartographer::mapping::proto::Grid2D mutable_grid ();
[166] ::cartographer::mapping::proto::Grid2D release_grid ();
[167] void set_allocated_grid (::cartographer::mapping::proto::Grid2D grid);
[170] void clear_num_range_data ();
[172] ::google::protobuf::int32 num_range_data () const;
[173] void set_num_range_data (::google::protobuf::int32 value);
[176] void clear_finished ();
[178] bool finished () const;
[179] void set_finished (bool value);
[285] bool has_high_resolution_hybrid_grid () const;
[286] void clear_high_resolution_hybrid_grid ();
[288] ::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid () const;
[289] ::cartographer::mapping::proto::HybridGrid mutable_high_resolution_hybrid_grid ();
[290] ::cartographer::mapping::proto::HybridGrid release_high_resolution_hybrid_grid ();
[291] void set_allocated_high_resolution_hybrid_grid (::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid);
[294] bool has_low_resolution_hybrid_grid () const;
[295] void clear_low_resolution_hybrid_grid ();
[297] ::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid () const;
[298] ::cartographer::mapping::proto::HybridGrid mutable_low_resolution_hybrid_grid ();
[299] ::cartographer::mapping::proto::HybridGrid release_low_resolution_hybrid_grid ();
[300] void set_allocated_low_resolution_hybrid_grid (::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/serialization.pb.h  ( 152 )
[124] ::google::protobuf::Descriptor descriptor ();
[125] Submap default_instance ();
[180] bool has_submap_id () const;
[181] void clear_submap_id ();
[183] ::cartographer::mapping::proto::SubmapId submap_id () const;
[184] ::cartographer::mapping::proto::SubmapId mutable_submap_id ();
[185] ::cartographer::mapping::proto::SubmapId release_submap_id ();
[186] void set_allocated_submap_id (::cartographer::mapping::proto::SubmapId submap_id);
[189] bool has_submap_2d () const;
[190] void clear_submap_2d ();
[192] ::cartographer::mapping::proto::Submap2D submap_2d () const;
[193] ::cartographer::mapping::proto::Submap2D mutable_submap_2d ();
[194] ::cartographer::mapping::proto::Submap2D release_submap_2d ();
[195] void set_allocated_submap_2d (::cartographer::mapping::proto::Submap2D submap_2d);
[198] bool has_submap_3d () const;
[199] void clear_submap_3d ();
[201] ::cartographer::mapping::proto::Submap3D submap_3d () const;
[202] ::cartographer::mapping::proto::Submap3D mutable_submap_3d ();
[203] ::cartographer::mapping::proto::Submap3D release_submap_3d ();
[204] void set_allocated_submap_3d (::cartographer::mapping::proto::Submap3D submap_3d);
[300] bool has_node_id () const;
[301] void clear_node_id ();
[303] ::cartographer::mapping::proto::NodeId node_id () const;
[304] ::cartographer::mapping::proto::NodeId mutable_node_id ();
[305] ::cartographer::mapping::proto::NodeId release_node_id ();
[306] void set_allocated_node_id (::cartographer::mapping::proto::NodeId node_id);
[309] bool has_node_data () const;
[310] void clear_node_data ();
[312] ::cartographer::mapping::proto::TrajectoryNodeData node_data () const;
[313] ::cartographer::mapping::proto::TrajectoryNodeData mutable_node_data ();
[314] ::cartographer::mapping::proto::TrajectoryNodeData release_node_data ();
[315] void set_allocated_node_data (::cartographer::mapping::proto::TrajectoryNodeData node_data);
[410] bool has_imu_data () const;
[411] void clear_imu_data ();
[413] ::cartographer::sensor::proto::ImuData imu_data () const;
[414] ::cartographer::sensor::proto::ImuData mutable_imu_data ();
[415] ::cartographer::sensor::proto::ImuData release_imu_data ();
[416] void set_allocated_imu_data (::cartographer::sensor::proto::ImuData imu_data);
[419] void clear_trajectory_id ();
[421] ::google::protobuf::int32 trajectory_id () const;
[422] void set_trajectory_id (::google::protobuf::int32 value);
[517] bool has_odometry_data () const;
[518] void clear_odometry_data ();
[520] ::cartographer::sensor::proto::OdometryData odometry_data () const;
[521] ::cartographer::sensor::proto::OdometryData mutable_odometry_data ();
[522] ::cartographer::sensor::proto::OdometryData release_odometry_data ();
[523] void set_allocated_odometry_data (::cartographer::sensor::proto::OdometryData odometry_data);
[624] bool has_fixed_frame_pose_data () const;
[625] void clear_fixed_frame_pose_data ();
[627] ::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data () const;
[628] ::cartographer::sensor::proto::FixedFramePoseData mutable_fixed_frame_pose_data ();
[629] ::cartographer::sensor::proto::FixedFramePoseData release_fixed_frame_pose_data ();
[630] void set_allocated_fixed_frame_pose_data (::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data);
[731] bool has_landmark_data () const;
[732] void clear_landmark_data ();
[734] ::cartographer::sensor::proto::LandmarkData landmark_data () const;
[735] ::cartographer::sensor::proto::LandmarkData mutable_landmark_data ();
[736] ::cartographer::sensor::proto::LandmarkData release_landmark_data ();
[737] void set_allocated_landmark_data (::cartographer::sensor::proto::LandmarkData landmark_data);
[838] bool has_imu_calibration () const;
[839] void clear_imu_calibration ();
[841] ::cartographer::transform::proto::Quaterniond imu_calibration () const;
[842] ::cartographer::transform::proto::Quaterniond mutable_imu_calibration ();
[843] ::cartographer::transform::proto::Quaterniond release_imu_calibration ();
[844] void set_allocated_imu_calibration (::cartographer::transform::proto::Quaterniond imu_calibration);
[847] bool has_fixed_frame_origin_in_map () const;
[848] void clear_fixed_frame_origin_in_map ();
[850] ::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map () const;
[851] ::cartographer::transform::proto::Rigid3d mutable_fixed_frame_origin_in_map ();
[852] ::cartographer::transform::proto::Rigid3d release_fixed_frame_origin_in_map ();
[853] void set_allocated_fixed_frame_origin_in_map (::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map);
[856] void clear_gravity_constant ();
[858] double gravity_constant () const;
[859] void set_gravity_constant (double value);
[962] int submaps_size () const;
[963] void clear_submaps ();
[965] ::cartographer::mapping::proto::Submap submaps (int index) const;
[966] ::cartographer::mapping::proto::Submap mutable_submaps (int index);
[967] ::cartographer::mapping::proto::Submap add_submaps ();
[983] void clear_timestamp ();
[985] ::google::protobuf::int64 timestamp () const;
[986] void set_timestamp (::google::protobuf::int64 value);
[1082] void clear_format_version ();
[1084] ::google::protobuf::uint32 format_version () const;
[1085] void set_format_version (::google::protobuf::uint32 value);
[1193] bool has_pose_graph () const;
[1194] void clear_pose_graph ();
[1196] ::cartographer::mapping::proto::PoseGraph pose_graph () const;
[1197] ::cartographer::mapping::proto::PoseGraph mutable_pose_graph ();
[1198] ::cartographer::mapping::proto::PoseGraph release_pose_graph ();
[1199] void set_allocated_pose_graph (::cartographer::mapping::proto::PoseGraph pose_graph);
[1202] bool has_all_trajectory_builder_options () const;
[1203] void clear_all_trajectory_builder_options ();
[1205] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options () const;
[1206] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions mutable_all_trajectory_builder_options ();
[1207] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions release_all_trajectory_builder_options ();
[1208] void set_allocated_all_trajectory_builder_options (::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options);
[1211] bool has_submap () const;
[1212] void clear_submap ();
[1214] ::cartographer::mapping::proto::Submap submap () const;
[1215] ::cartographer::mapping::proto::Submap mutable_submap ();
[1216] ::cartographer::mapping::proto::Submap release_submap ();
[1217] void set_allocated_submap (::cartographer::mapping::proto::Submap submap);
[1220] bool has_node () const;
[1221] void clear_node ();
[1223] ::cartographer::mapping::proto::Node node () const;
[1224] ::cartographer::mapping::proto::Node mutable_node ();
[1225] ::cartographer::mapping::proto::Node release_node ();
[1226] void set_allocated_node (::cartographer::mapping::proto::Node node);
[1229] bool has_trajectory_data () const;
[1230] void clear_trajectory_data ();
[1232] ::cartographer::mapping::proto::TrajectoryData trajectory_data () const;
[1233] ::cartographer::mapping::proto::TrajectoryData mutable_trajectory_data ();
[1234] ::cartographer::mapping::proto::TrajectoryData release_trajectory_data ();
[1235] void set_allocated_trajectory_data (::cartographer::mapping::proto::TrajectoryData trajectory_data);
[1274] bool has_ramp () const;
[1275] void clear_ramp ();
[1277] ::cartographer::mapping::proto::Ramp ramp () const;
[1278] ::cartographer::mapping::proto::Ramp mutable_ramp ();
[1279] ::cartographer::mapping::proto::Ramp release_ramp ();
[1280] void set_allocated_ramp (::cartographer::mapping::proto::Ramp ramp);
[1282] DataCase data_case () const;
[1285] void set_has_pose_graph ();
[1286] void set_has_all_trajectory_builder_options ();
[1287] void set_has_submap ();
[1288] void set_has_node ();
[1289] void set_has_trajectory_data ();
[1290] void set_has_imu_data ();
[1291] void set_has_odometry_data ();
[1292] void set_has_fixed_frame_pose_data ();
[1293] void set_has_landmark_data ();
[1294] void set_has_ramp ();
[1297] void clear_data ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/map_builder_options.pb.h  ( 39 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] MapBuilderOptions default_instance ();
[147] bool has_pose_graph_options () const;
[148] void clear_pose_graph_options ();
[150] ::cartographer::mapping::proto::PoseGraphOptions pose_graph_options () const;
[151] ::cartographer::mapping::proto::PoseGraphOptions mutable_pose_graph_options ();
[152] ::cartographer::mapping::proto::PoseGraphOptions release_pose_graph_options ();
[153] void set_allocated_pose_graph_options (::cartographer::mapping::proto::PoseGraphOptions pose_graph_options);
[156] void clear_use_trajectory_builder_2d ();
[158] bool use_trajectory_builder_2d () const;
[159] void set_use_trajectory_builder_2d (bool value);
[162] void clear_use_trajectory_builder_3d ();
[164] bool use_trajectory_builder_3d () const;
[165] void set_use_trajectory_builder_3d (bool value);
[168] void clear_collate_by_trajectory ();
[170] bool collate_by_trajectory () const;
[171] void set_collate_by_trajectory (bool value);
[174] void clear_num_background_threads ();
[176] ::google::protobuf::int32 num_background_threads () const;
[177] void set_num_background_threads (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/connected_components.pb.h  ( 31 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] ConnectedComponents_ConnectedComponent default_instance ();
[149] int trajectory_id_size () const;
[150] void clear_trajectory_id ();
[152] ::google::protobuf::int32 trajectory_id (int index) const;
[153] void set_trajectory_id (int index, ::google::protobuf::int32 value);
[154] void add_trajectory_id (::google::protobuf::int32 value);
[255] int connected_component_size () const;
[256] void clear_connected_component ();
[258] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent connected_component (int index) const;
[259] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent mutable_connected_component (int index);
[260] ::cartographer::mapping::proto::ConnectedComponents_ConnectedComponent add_connected_component ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph_options.pb.h  ( 54 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] PoseGraphOptions default_instance ();
[148] bool has_constraint_builder_options () const;
[149] void clear_constraint_builder_options ();
[151] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options () const;
[152] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions mutable_constraint_builder_options ();
[153] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions release_constraint_builder_options ();
[154] void set_allocated_constraint_builder_options (::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options);
[157] bool has_optimization_problem_options () const;
[158] void clear_optimization_problem_options ();
[160] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options () const;
[161] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions mutable_optimization_problem_options ();
[162] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions release_optimization_problem_options ();
[163] void set_allocated_optimization_problem_options (::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options);
[166] void clear_optimize_every_n_nodes ();
[168] ::google::protobuf::int32 optimize_every_n_nodes () const;
[169] void set_optimize_every_n_nodes (::google::protobuf::int32 value);
[172] void clear_max_num_final_iterations ();
[174] ::google::protobuf::int32 max_num_final_iterations () const;
[175] void set_max_num_final_iterations (::google::protobuf::int32 value);
[178] void clear_global_sampling_ratio ();
[180] double global_sampling_ratio () const;
[181] void set_global_sampling_ratio (double value);
[184] void clear_matcher_translation_weight ();
[186] double matcher_translation_weight () const;
[187] void set_matcher_translation_weight (double value);
[190] void clear_matcher_rotation_weight ();
[192] double matcher_rotation_weight () const;
[193] void set_matcher_rotation_weight (double value);
[196] void clear_global_constraint_search_after_n_seconds ();
[198] double global_constraint_search_after_n_seconds () const;
[199] void set_global_constraint_search_after_n_seconds (double value);
[202] void clear_log_residual_histograms ();
[204] bool log_residual_histograms () const;
[205] void set_log_residual_histograms (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/motion_filter_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] MotionFilterOptions default_instance ();
[146] void clear_max_time_seconds ();
[148] double max_time_seconds () const;
[149] void set_max_time_seconds (double value);
[152] void clear_max_distance_meters ();
[154] double max_distance_meters () const;
[155] void set_max_distance_meters (double value);
[158] void clear_max_angle_radians ();
[160] double max_angle_radians () const;
[161] void set_max_angle_radians (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap_visualization.pb.h  ( 90 )
[109] ::google::protobuf::Descriptor descriptor ();
[110] SubmapList_SubmapEntry default_instance ();
[165] bool has_pose () const;
[166] void clear_pose ();
[168] ::cartographer::transform::proto::Rigid3d pose () const;
[169] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[170] ::cartographer::transform::proto::Rigid3d release_pose ();
[171] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[174] void clear_submap_version ();
[176] ::google::protobuf::int32 submap_version () const;
[177] void set_submap_version (::google::protobuf::int32 value);
[272] int submap_size () const;
[273] void clear_submap ();
[275] ::cartographer::mapping::proto::SubmapList_SubmapEntry submap (int index) const;
[276] ::cartographer::mapping::proto::SubmapList_SubmapEntry mutable_submap (int index);
[277] ::cartographer::mapping::proto::SubmapList_SubmapEntry add_submap ();
[378] int trajectory_size () const;
[379] void clear_trajectory ();
[381] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList trajectory (int index) const;
[382] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList mutable_trajectory (int index);
[383] ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList add_trajectory ();
[481] void clear_submap_index ();
[483] ::google::protobuf::int32 submap_index () const;
[484] void set_submap_index (::google::protobuf::int32 value);
[487] void clear_trajectory_id ();
[489] ::google::protobuf::int32 trajectory_id () const;
[490] void set_trajectory_id (::google::protobuf::int32 value);
[585] void clear_cells ();
[587] ::std::string cells () const;
[588] void set_cells (const ::std::string value);
[594] ::std::string mutable_cells ();
[595] ::std::string release_cells ();
[596] void set_allocated_cells (::std::string cells);
[599] bool has_slice_pose () const;
[600] void clear_slice_pose ();
[602] ::cartographer::transform::proto::Rigid3d slice_pose () const;
[603] ::cartographer::transform::proto::Rigid3d mutable_slice_pose ();
[604] ::cartographer::transform::proto::Rigid3d release_slice_pose ();
[605] void set_allocated_slice_pose (::cartographer::transform::proto::Rigid3d slice_pose);
[608] void clear_width ();
[610] ::google::protobuf::int32 width () const;
[611] void set_width (::google::protobuf::int32 value);
[614] void clear_height ();
[616] ::google::protobuf::int32 height () const;
[617] void set_height (::google::protobuf::int32 value);
[620] void clear_resolution ();
[622] double resolution () const;
[623] void set_resolution (double value);
[723] int textures_size () const;
[724] void clear_textures ();
[726] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture textures (int index) const;
[727] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture mutable_textures (int index);
[728] ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture add_textures ();
[735] void clear_error_message ();
[737] ::std::string error_message () const;
[738] void set_error_message (const ::std::string value);
[744] ::std::string mutable_error_message ();
[745] ::std::string release_error_message ();
[746] void set_allocated_error_message (::std::string error_message);
[851] bool has_request () const;
[852] void clear_request ();
[854] ::cartographer::mapping::proto::SubmapQuery_Request request () const;
[855] ::cartographer::mapping::proto::SubmapQuery_Request mutable_request ();
[856] ::cartographer::mapping::proto::SubmapQuery_Request release_request ();
[857] void set_allocated_request (::cartographer::mapping::proto::SubmapQuery_Request request);
[860] bool has_response () const;
[861] void clear_response ();
[863] ::cartographer::mapping::proto::SubmapQuery_Response response () const;
[864] ::cartographer::mapping::proto::SubmapQuery_Response mutable_response ();
[865] ::cartographer::mapping::proto::SubmapQuery_Response release_response ();
[866] void set_allocated_response (::cartographer::mapping::proto::SubmapQuery_Response response);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory.pb.h  ( 49 )
[97] ::google::protobuf::Descriptor descriptor ();
[98] Trajectory_Node default_instance ();
[153] bool has_pose () const;
[154] void clear_pose ();
[156] ::cartographer::transform::proto::Rigid3d pose () const;
[157] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[158] ::cartographer::transform::proto::Rigid3d release_pose ();
[159] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[162] void clear_timestamp ();
[164] ::google::protobuf::int64 timestamp () const;
[165] void set_timestamp (::google::protobuf::int64 value);
[168] void clear_node_index ();
[170] ::google::protobuf::int32 node_index () const;
[171] void set_node_index (::google::protobuf::int32 value);
[276] void clear_submap_index ();
[278] ::google::protobuf::int32 submap_index () const;
[279] void set_submap_index (::google::protobuf::int32 value);
[377] int node_size () const;
[378] void clear_node ();
[380] ::cartographer::mapping::proto::Trajectory_Node node (int index) const;
[381] ::cartographer::mapping::proto::Trajectory_Node mutable_node (int index);
[382] ::cartographer::mapping::proto::Trajectory_Node add_node ();
[389] int submap_size () const;
[390] void clear_submap ();
[392] ::cartographer::mapping::proto::Trajectory_Submap submap (int index) const;
[393] ::cartographer::mapping::proto::Trajectory_Submap mutable_submap (int index);
[394] ::cartographer::mapping::proto::Trajectory_Submap add_submap ();
[401] void clear_trajectory_id ();
[403] ::google::protobuf::int32 trajectory_id () const;
[404] void set_trajectory_id (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/range_data_inserter_options.pb.h  ( 32 )
[70] bool RangeDataInserterOptions_RangeDataInserterType_IsValid (int value);
[75] ::google::protobuf::EnumDescriptor RangeDataInserterOptions_RangeDataInserterType_descriptor ();
[113] ::google::protobuf::Descriptor descriptor ();
[114] RangeDataInserterOptions default_instance ();
[195] bool has_probability_grid_range_data_inserter_options_2d () const;
[196] void clear_probability_grid_range_data_inserter_options_2d ();
[198] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d () const;
[199] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D mutable_probability_grid_range_data_inserter_options_2d ();
[200] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D release_probability_grid_range_data_inserter_options_2d ();
[201] void set_allocated_probability_grid_range_data_inserter_options_2d (::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d);
[204] void clear_range_data_inserter_type ();
[206] ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType range_data_inserter_type () const;
[207] void set_range_data_inserter_type (::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h  ( 33 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] RealTimeCorrelativeScanMatcherOptions default_instance ();
[149] void clear_linear_search_window ();
[151] double linear_search_window () const;
[152] void set_linear_search_window (double value);
[155] void clear_angular_search_window ();
[157] double angular_search_window () const;
[158] void set_angular_search_window (double value);
[161] void clear_translation_delta_cost_weight ();
[163] double translation_delta_cost_weight () const;
[164] void set_translation_delta_cost_weight (double value);
[167] void clear_rotation_delta_cost_weight ();
[169] double rotation_delta_cost_weight () const;
[170] void set_rotation_delta_cost_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h  ( 30 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] FastCorrelativeScanMatcherOptions2D default_instance ();
[149] void clear_linear_search_window ();
[151] double linear_search_window () const;
[152] void set_linear_search_window (double value);
[155] void clear_angular_search_window ();
[157] double angular_search_window () const;
[158] void set_angular_search_window (double value);
[161] void clear_branch_and_bound_depth ();
[163] ::google::protobuf::int32 branch_and_bound_depth () const;
[164] void set_branch_and_bound_depth (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h  ( 36 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] CeresScanMatcherOptions2D default_instance ();
[150] bool has_ceres_solver_options () const;
[151] void clear_ceres_solver_options ();
[153] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[154] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[155] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[156] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[159] void clear_occupied_space_weight ();
[161] double occupied_space_weight () const;
[162] void set_occupied_space_weight (double value);
[165] void clear_translation_weight ();
[167] double translation_weight () const;
[168] void set_translation_weight (double value);
[171] void clear_rotation_weight ();
[173] double rotation_weight () const;
[174] void set_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h  ( 41 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] CeresScanMatcherOptions3D default_instance ();
[150] int occupied_space_weight_size () const;
[151] void clear_occupied_space_weight ();
[153] double occupied_space_weight (int index) const;
[154] void set_occupied_space_weight (int index, double value);
[155] void add_occupied_space_weight (double value);
[162] bool has_ceres_solver_options () const;
[163] void clear_ceres_solver_options ();
[165] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[166] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[167] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[168] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[171] void clear_translation_weight ();
[173] double translation_weight () const;
[174] void set_translation_weight (double value);
[177] void clear_rotation_weight ();
[179] double rotation_weight () const;
[180] void set_rotation_weight (double value);
[183] void clear_only_optimize_yaw ();
[185] bool only_optimize_yaw () const;
[186] void set_only_optimize_yaw (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h  ( 42 )
[93] ::google::protobuf::Descriptor descriptor ();
[94] FastCorrelativeScanMatcherOptions3D default_instance ();
[149] void clear_min_rotational_score ();
[151] double min_rotational_score () const;
[152] void set_min_rotational_score (double value);
[155] void clear_linear_xy_search_window ();
[157] double linear_xy_search_window () const;
[158] void set_linear_xy_search_window (double value);
[161] void clear_branch_and_bound_depth ();
[163] ::google::protobuf::int32 branch_and_bound_depth () const;
[164] void set_branch_and_bound_depth (::google::protobuf::int32 value);
[167] void clear_full_resolution_depth ();
[169] ::google::protobuf::int32 full_resolution_depth () const;
[170] void set_full_resolution_depth (::google::protobuf::int32 value);
[173] void clear_linear_z_search_window ();
[175] double linear_z_search_window () const;
[176] void set_linear_z_search_window (double value);
[179] void clear_angular_search_window ();
[181] double angular_search_window () const;
[182] void set_angular_search_window (double value);
[185] void clear_min_low_resolution_score ();
[187] double min_low_resolution_score () const;
[188] void set_min_low_resolution_score (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h  ( 66 )
[97] ::google::protobuf::Descriptor descriptor ();
[98] ConstraintBuilderOptions default_instance ();
[153] bool has_fast_correlative_scan_matcher_options () const;
[154] void clear_fast_correlative_scan_matcher_options ();
[156] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options () const;
[157] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D mutable_fast_correlative_scan_matcher_options ();
[158] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D release_fast_correlative_scan_matcher_options ();
[159] void set_allocated_fast_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options);
[162] bool has_fast_correlative_scan_matcher_options_3d () const;
[163] void clear_fast_correlative_scan_matcher_options_3d ();
[165] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d () const;
[166] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D mutable_fast_correlative_scan_matcher_options_3d ();
[167] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D release_fast_correlative_scan_matcher_options_3d ();
[168] void set_allocated_fast_correlative_scan_matcher_options_3d (::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d);
[171] bool has_ceres_scan_matcher_options () const;
[172] void clear_ceres_scan_matcher_options ();
[174] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options () const;
[175] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D mutable_ceres_scan_matcher_options ();
[176] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D release_ceres_scan_matcher_options ();
[177] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options);
[180] bool has_ceres_scan_matcher_options_3d () const;
[181] void clear_ceres_scan_matcher_options_3d ();
[183] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d () const;
[184] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D mutable_ceres_scan_matcher_options_3d ();
[185] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D release_ceres_scan_matcher_options_3d ();
[186] void set_allocated_ceres_scan_matcher_options_3d (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d);
[189] void clear_sampling_ratio ();
[191] double sampling_ratio () const;
[192] void set_sampling_ratio (double value);
[195] void clear_max_constraint_distance ();
[197] double max_constraint_distance () const;
[198] void set_max_constraint_distance (double value);
[201] void clear_min_score ();
[203] double min_score () const;
[204] void set_min_score (double value);
[207] void clear_global_localization_min_score ();
[209] double global_localization_min_score () const;
[210] void set_global_localization_min_score (double value);
[213] void clear_log_matches ();
[215] bool log_matches () const;
[216] void set_log_matches (bool value);
[219] void clear_loop_closure_translation_weight ();
[221] double loop_closure_translation_weight () const;
[222] void set_loop_closure_translation_weight (double value);
[225] void clear_loop_closure_rotation_weight ();
[227] double loop_closure_rotation_weight () const;
[228] void set_loop_closure_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h  ( 60 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] OptimizationProblemOptions default_instance ();
[150] bool has_ceres_solver_options () const;
[151] void clear_ceres_solver_options ();
[153] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options () const;
[154] ::cartographer::common::proto::CeresSolverOptions mutable_ceres_solver_options ();
[155] ::cartographer::common::proto::CeresSolverOptions release_ceres_solver_options ();
[156] void set_allocated_ceres_solver_options (::cartographer::common::proto::CeresSolverOptions ceres_solver_options);
[159] void clear_huber_scale ();
[161] double huber_scale () const;
[162] void set_huber_scale (double value);
[165] void clear_acceleration_weight ();
[167] double acceleration_weight () const;
[168] void set_acceleration_weight (double value);
[171] void clear_rotation_weight ();
[173] double rotation_weight () const;
[174] void set_rotation_weight (double value);
[177] void clear_fixed_frame_pose_translation_weight ();
[179] double fixed_frame_pose_translation_weight () const;
[180] void set_fixed_frame_pose_translation_weight (double value);
[183] void clear_fixed_frame_pose_rotation_weight ();
[185] double fixed_frame_pose_rotation_weight () const;
[186] void set_fixed_frame_pose_rotation_weight (double value);
[189] void clear_fix_z_in_3d ();
[191] bool fix_z_in_3d () const;
[192] void set_fix_z_in_3d (bool value);
[195] void clear_log_solver_summary ();
[197] bool log_solver_summary () const;
[198] void set_log_solver_summary (bool value);
[201] void clear_local_slam_pose_translation_weight ();
[203] double local_slam_pose_translation_weight () const;
[204] void set_local_slam_pose_translation_weight (double value);
[207] void clear_local_slam_pose_rotation_weight ();
[209] double local_slam_pose_rotation_weight () const;
[210] void set_local_slam_pose_rotation_weight (double value);
[213] void clear_odometry_translation_weight ();
[215] double odometry_translation_weight () const;
[216] void set_odometry_translation_weight (double value);
[219] void clear_odometry_rotation_weight ();
[221] double odometry_rotation_weight () const;
[222] void set_odometry_rotation_weight (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] RangeDataInserterOptions3D default_instance ();
[146] void clear_hit_probability ();
[148] double hit_probability () const;
[149] void set_hit_probability (double value);
[152] void clear_miss_probability ();
[154] double miss_probability () const;
[155] void set_miss_probability (double value);
[158] void clear_num_free_space_voxels ();
[160] ::google::protobuf::int32 num_free_space_voxels () const;
[161] void set_num_free_space_voxels (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/submaps_options_3d.pb.h  ( 39 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] SubmapsOptions3D default_instance ();
[147] bool has_range_data_inserter_options () const;
[148] void clear_range_data_inserter_options ();
[150] ::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options () const;
[151] ::cartographer::mapping::proto::RangeDataInserterOptions3D mutable_range_data_inserter_options ();
[152] ::cartographer::mapping::proto::RangeDataInserterOptions3D release_range_data_inserter_options ();
[153] void set_allocated_range_data_inserter_options (::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options);
[156] void clear_high_resolution ();
[158] double high_resolution () const;
[159] void set_high_resolution (double value);
[162] void clear_high_resolution_max_range ();
[164] double high_resolution_max_range () const;
[165] void set_high_resolution_max_range (double value);
[168] void clear_low_resolution ();
[170] double low_resolution () const;
[171] void set_low_resolution (double value);
[174] void clear_num_range_data ();
[176] ::google::protobuf::int32 num_range_data () const;
[177] void set_num_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/hybrid_grid.pb.h  ( 44 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] HybridGrid default_instance ();
[146] int x_indices_size () const;
[147] void clear_x_indices ();
[149] ::google::protobuf::int32 x_indices (int index) const;
[150] void set_x_indices (int index, ::google::protobuf::int32 value);
[151] void add_x_indices (::google::protobuf::int32 value);
[158] int y_indices_size () const;
[159] void clear_y_indices ();
[161] ::google::protobuf::int32 y_indices (int index) const;
[162] void set_y_indices (int index, ::google::protobuf::int32 value);
[163] void add_y_indices (::google::protobuf::int32 value);
[170] int z_indices_size () const;
[171] void clear_z_indices ();
[173] ::google::protobuf::int32 z_indices (int index) const;
[174] void set_z_indices (int index, ::google::protobuf::int32 value);
[175] void add_z_indices (::google::protobuf::int32 value);
[182] int values_size () const;
[183] void clear_values ();
[185] ::google::protobuf::int32 values (int index) const;
[186] void set_values (int index, ::google::protobuf::int32 value);
[187] void add_values (::google::protobuf::int32 value);
[194] void clear_resolution ();
[196] float resolution () const;
[197] void set_resolution (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h  ( 78 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] LocalTrajectoryBuilderOptions3D default_instance ();
[151] bool has_high_resolution_adaptive_voxel_filter_options () const;
[152] void clear_high_resolution_adaptive_voxel_filter_options ();
[154] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options () const;
[155] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_high_resolution_adaptive_voxel_filter_options ();
[156] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_high_resolution_adaptive_voxel_filter_options ();
[157] void set_allocated_high_resolution_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options);
[160] bool has_ceres_scan_matcher_options () const;
[161] void clear_ceres_scan_matcher_options ();
[163] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options () const;
[164] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D mutable_ceres_scan_matcher_options ();
[165] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D release_ceres_scan_matcher_options ();
[166] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options);
[169] bool has_motion_filter_options () const;
[170] void clear_motion_filter_options ();
[172] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options () const;
[173] ::cartographer::mapping::proto::MotionFilterOptions mutable_motion_filter_options ();
[174] ::cartographer::mapping::proto::MotionFilterOptions release_motion_filter_options ();
[175] void set_allocated_motion_filter_options (::cartographer::mapping::proto::MotionFilterOptions motion_filter_options);
[178] bool has_submaps_options () const;
[179] void clear_submaps_options ();
[181] ::cartographer::mapping::proto::SubmapsOptions3D submaps_options () const;
[182] ::cartographer::mapping::proto::SubmapsOptions3D mutable_submaps_options ();
[183] ::cartographer::mapping::proto::SubmapsOptions3D release_submaps_options ();
[184] void set_allocated_submaps_options (::cartographer::mapping::proto::SubmapsOptions3D submaps_options);
[187] bool has_low_resolution_adaptive_voxel_filter_options () const;
[188] void clear_low_resolution_adaptive_voxel_filter_options ();
[190] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options () const;
[191] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_low_resolution_adaptive_voxel_filter_options ();
[192] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_low_resolution_adaptive_voxel_filter_options ();
[193] void set_allocated_low_resolution_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options);
[196] bool has_real_time_correlative_scan_matcher_options () const;
[197] void clear_real_time_correlative_scan_matcher_options ();
[199] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options () const;
[200] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions mutable_real_time_correlative_scan_matcher_options ();
[201] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions release_real_time_correlative_scan_matcher_options ();
[202] void set_allocated_real_time_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options);
[205] void clear_min_range ();
[207] float min_range () const;
[208] void set_min_range (float value);
[211] void clear_max_range ();
[213] float max_range () const;
[214] void set_max_range (float value);
[217] void clear_num_accumulated_range_data ();
[219] ::google::protobuf::int32 num_accumulated_range_data () const;
[220] void set_num_accumulated_range_data (::google::protobuf::int32 value);
[223] void clear_voxel_filter_size ();
[225] float voxel_filter_size () const;
[226] void set_voxel_filter_size (float value);
[229] void clear_imu_gravity_time_constant ();
[231] double imu_gravity_time_constant () const;
[232] void set_imu_gravity_time_constant (double value);
[235] void clear_use_online_correlative_scan_matching ();
[237] bool use_online_correlative_scan_matching () const;
[238] void set_use_online_correlative_scan_matching (bool value);
[241] void clear_rotational_histogram_size ();
[243] ::google::protobuf::int32 rotational_histogram_size () const;
[244] void set_rotational_histogram_size (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/submaps_options_2d.pb.h  ( 36 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] SubmapsOptions2D default_instance ();
[148] bool has_grid_options_2d () const;
[149] void clear_grid_options_2d ();
[151] ::cartographer::mapping::proto::GridOptions2D grid_options_2d () const;
[152] ::cartographer::mapping::proto::GridOptions2D mutable_grid_options_2d ();
[153] ::cartographer::mapping::proto::GridOptions2D release_grid_options_2d ();
[154] void set_allocated_grid_options_2d (::cartographer::mapping::proto::GridOptions2D grid_options_2d);
[157] bool has_range_data_inserter_options () const;
[158] void clear_range_data_inserter_options ();
[160] ::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options () const;
[161] ::cartographer::mapping::proto::RangeDataInserterOptions mutable_range_data_inserter_options ();
[162] ::cartographer::mapping::proto::RangeDataInserterOptions release_range_data_inserter_options ();
[163] void set_allocated_range_data_inserter_options (::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options);
[166] void clear_num_range_data ();
[168] ::google::protobuf::int32 num_range_data () const;
[169] void set_num_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d_options.pb.h  ( 29 )
[69] bool GridOptions2D_GridType_IsValid (int value);
[74] ::google::protobuf::EnumDescriptor GridOptions2D_GridType_descriptor ();
[112] ::google::protobuf::Descriptor descriptor ();
[113] GridOptions2D default_instance ();
[194] void clear_grid_type ();
[196] ::cartographer::mapping::proto::GridOptions2D_GridType grid_type () const;
[197] void set_grid_type (::cartographer::mapping::proto::GridOptions2D_GridType value);
[200] void clear_resolution ();
[202] float resolution () const;
[203] void set_resolution (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid.pb.h  ( 21 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] ProbabilityGrid default_instance ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/cell_limits.pb.h  ( 27 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] CellLimits default_instance ();
[146] void clear_num_x_cells ();
[148] ::google::protobuf::int32 num_x_cells () const;
[149] void set_num_x_cells (::google::protobuf::int32 value);
[152] void clear_num_y_cells ();
[154] ::google::protobuf::int32 num_y_cells () const;
[155] void set_num_y_cells (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/map_limits.pb.h  ( 36 )
[92] ::google::protobuf::Descriptor descriptor ();
[93] MapLimits default_instance ();
[148] bool has_max () const;
[149] void clear_max ();
[151] ::cartographer::transform::proto::Vector2d max () const;
[152] ::cartographer::transform::proto::Vector2d mutable_max ();
[153] ::cartographer::transform::proto::Vector2d release_max ();
[154] void set_allocated_max (::cartographer::transform::proto::Vector2d max);
[157] bool has_cell_limits () const;
[158] void clear_cell_limits ();
[160] ::cartographer::mapping::proto::CellLimits cell_limits () const;
[161] ::cartographer::mapping::proto::CellLimits mutable_cell_limits ();
[162] ::cartographer::mapping::proto::CellLimits release_cell_limits ();
[163] void set_allocated_cell_limits (::cartographer::mapping::proto::CellLimits cell_limits);
[166] void clear_resolution ();
[168] double resolution () const;
[169] void set_resolution (double value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h  ( 87 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] LocalTrajectoryBuilderOptions2D default_instance ();
[151] bool has_adaptive_voxel_filter_options () const;
[152] void clear_adaptive_voxel_filter_options ();
[154] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options () const;
[155] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_adaptive_voxel_filter_options ();
[156] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_adaptive_voxel_filter_options ();
[157] void set_allocated_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options);
[160] bool has_real_time_correlative_scan_matcher_options () const;
[161] void clear_real_time_correlative_scan_matcher_options ();
[163] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options () const;
[164] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions mutable_real_time_correlative_scan_matcher_options ();
[165] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions release_real_time_correlative_scan_matcher_options ();
[166] void set_allocated_real_time_correlative_scan_matcher_options (::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options);
[169] bool has_ceres_scan_matcher_options () const;
[170] void clear_ceres_scan_matcher_options ();
[172] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options () const;
[173] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D mutable_ceres_scan_matcher_options ();
[174] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D release_ceres_scan_matcher_options ();
[175] void set_allocated_ceres_scan_matcher_options (::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options);
[178] bool has_submaps_options () const;
[179] void clear_submaps_options ();
[181] ::cartographer::mapping::proto::SubmapsOptions2D submaps_options () const;
[182] ::cartographer::mapping::proto::SubmapsOptions2D mutable_submaps_options ();
[183] ::cartographer::mapping::proto::SubmapsOptions2D release_submaps_options ();
[184] void set_allocated_submaps_options (::cartographer::mapping::proto::SubmapsOptions2D submaps_options);
[187] bool has_motion_filter_options () const;
[188] void clear_motion_filter_options ();
[190] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options () const;
[191] ::cartographer::mapping::proto::MotionFilterOptions mutable_motion_filter_options ();
[192] ::cartographer::mapping::proto::MotionFilterOptions release_motion_filter_options ();
[193] void set_allocated_motion_filter_options (::cartographer::mapping::proto::MotionFilterOptions motion_filter_options);
[196] bool has_loop_closure_adaptive_voxel_filter_options () const;
[197] void clear_loop_closure_adaptive_voxel_filter_options ();
[199] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options () const;
[200] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions mutable_loop_closure_adaptive_voxel_filter_options ();
[201] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions release_loop_closure_adaptive_voxel_filter_options ();
[202] void set_allocated_loop_closure_adaptive_voxel_filter_options (::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options);
[205] void clear_min_z ();
[207] float min_z () const;
[208] void set_min_z (float value);
[211] void clear_max_z ();
[213] float max_z () const;
[214] void set_max_z (float value);
[217] void clear_voxel_filter_size ();
[219] float voxel_filter_size () const;
[220] void set_voxel_filter_size (float value);
[223] void clear_use_online_correlative_scan_matching ();
[225] bool use_online_correlative_scan_matching () const;
[226] void set_use_online_correlative_scan_matching (bool value);
[229] void clear_use_imu_data ();
[231] bool use_imu_data () const;
[232] void set_use_imu_data (bool value);
[235] void clear_min_range ();
[237] float min_range () const;
[238] void set_min_range (float value);
[241] void clear_max_range ();
[243] float max_range () const;
[244] void set_max_range (float value);
[247] void clear_imu_gravity_time_constant ();
[249] double imu_gravity_time_constant () const;
[250] void set_imu_gravity_time_constant (double value);
[253] void clear_missing_data_ray_length ();
[255] float missing_data_ray_length () const;
[256] void set_missing_data_ray_length (float value);
[259] void clear_num_accumulated_range_data ();
[261] ::google::protobuf::int32 num_accumulated_range_data () const;
[262] void set_num_accumulated_range_data (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] ProbabilityGridRangeDataInserterOptions2D default_instance ();
[146] void clear_hit_probability ();
[148] double hit_probability () const;
[149] void set_hit_probability (double value);
[152] void clear_miss_probability ();
[154] double miss_probability () const;
[155] void set_miss_probability (double value);
[158] void clear_insert_free_space ();
[160] bool insert_free_space () const;
[161] void set_insert_free_space (bool value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d.pb.h  ( 65 )
[95] ::google::protobuf::Descriptor descriptor ();
[96] Grid2D_CellBox default_instance ();
[151] void clear_max_x ();
[153] ::google::protobuf::int32 max_x () const;
[154] void set_max_x (::google::protobuf::int32 value);
[157] void clear_max_y ();
[159] ::google::protobuf::int32 max_y () const;
[160] void set_max_y (::google::protobuf::int32 value);
[163] void clear_min_x ();
[165] ::google::protobuf::int32 min_x () const;
[166] void set_min_x (::google::protobuf::int32 value);
[169] void clear_min_y ();
[171] ::google::protobuf::int32 min_y () const;
[172] void set_min_y (::google::protobuf::int32 value);
[276] int cells_size () const;
[277] void clear_cells ();
[279] ::google::protobuf::int32 cells (int index) const;
[280] void set_cells (int index, ::google::protobuf::int32 value);
[281] void add_cells (::google::protobuf::int32 value);
[288] bool has_limits () const;
[289] void clear_limits ();
[291] ::cartographer::mapping::proto::MapLimits limits () const;
[292] ::cartographer::mapping::proto::MapLimits mutable_limits ();
[293] ::cartographer::mapping::proto::MapLimits release_limits ();
[294] void set_allocated_limits (::cartographer::mapping::proto::MapLimits limits);
[297] bool has_known_cells_box () const;
[298] void clear_known_cells_box ();
[300] ::cartographer::mapping::proto::Grid2D_CellBox known_cells_box () const;
[301] ::cartographer::mapping::proto::Grid2D_CellBox mutable_known_cells_box ();
[302] ::cartographer::mapping::proto::Grid2D_CellBox release_known_cells_box ();
[303] void set_allocated_known_cells_box (::cartographer::mapping::proto::Grid2D_CellBox known_cells_box);
[306] void clear_min_correspondence_cost ();
[308] float min_correspondence_cost () const;
[309] void set_min_correspondence_cost (float value);
[312] void clear_max_correspondence_cost ();
[314] float max_correspondence_cost () const;
[315] void set_max_correspondence_cost (float value);
[318] bool has_probability_grid_2d () const;
[319] void clear_probability_grid_2d ();
[321] ::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d () const;
[322] ::cartographer::mapping::proto::ProbabilityGrid mutable_probability_grid_2d ();
[323] ::cartographer::mapping::proto::ProbabilityGrid release_probability_grid_2d ();
[324] void set_allocated_probability_grid_2d (::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d);
[326] GridCase grid_case () const;
[329] void set_has_probability_grid_2d ();
[332] void clear_grid ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/internal/legacy_serialized_data.pb.h  ( 63 )
[91] ::google::protobuf::Descriptor descriptor ();
[92] LegacySerializedData default_instance ();
[147] bool has_submap () const;
[148] void clear_submap ();
[150] ::cartographer::mapping::proto::Submap submap () const;
[151] ::cartographer::mapping::proto::Submap mutable_submap ();
[152] ::cartographer::mapping::proto::Submap release_submap ();
[153] void set_allocated_submap (::cartographer::mapping::proto::Submap submap);
[156] bool has_node () const;
[157] void clear_node ();
[159] ::cartographer::mapping::proto::Node node () const;
[160] ::cartographer::mapping::proto::Node mutable_node ();
[161] ::cartographer::mapping::proto::Node release_node ();
[162] void set_allocated_node (::cartographer::mapping::proto::Node node);
[165] bool has_imu_data () const;
[166] void clear_imu_data ();
[168] ::cartographer::mapping::proto::ImuData imu_data () const;
[169] ::cartographer::mapping::proto::ImuData mutable_imu_data ();
[170] ::cartographer::mapping::proto::ImuData release_imu_data ();
[171] void set_allocated_imu_data (::cartographer::mapping::proto::ImuData imu_data);
[174] bool has_odometry_data () const;
[175] void clear_odometry_data ();
[177] ::cartographer::mapping::proto::OdometryData odometry_data () const;
[178] ::cartographer::mapping::proto::OdometryData mutable_odometry_data ();
[179] ::cartographer::mapping::proto::OdometryData release_odometry_data ();
[180] void set_allocated_odometry_data (::cartographer::mapping::proto::OdometryData odometry_data);
[183] bool has_fixed_frame_pose_data () const;
[184] void clear_fixed_frame_pose_data ();
[186] ::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data () const;
[187] ::cartographer::mapping::proto::FixedFramePoseData mutable_fixed_frame_pose_data ();
[188] ::cartographer::mapping::proto::FixedFramePoseData release_fixed_frame_pose_data ();
[189] void set_allocated_fixed_frame_pose_data (::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data);
[192] bool has_trajectory_data () const;
[193] void clear_trajectory_data ();
[195] ::cartographer::mapping::proto::TrajectoryData trajectory_data () const;
[196] ::cartographer::mapping::proto::TrajectoryData mutable_trajectory_data ();
[197] ::cartographer::mapping::proto::TrajectoryData release_trajectory_data ();
[198] void set_allocated_trajectory_data (::cartographer::mapping::proto::TrajectoryData trajectory_data);
[201] bool has_landmark_data () const;
[202] void clear_landmark_data ();
[204] ::cartographer::mapping::proto::LandmarkData landmark_data () const;
[205] ::cartographer::mapping::proto::LandmarkData mutable_landmark_data ();
[206] ::cartographer::mapping::proto::LandmarkData release_landmark_data ();
[207] void set_allocated_landmark_data (::cartographer::mapping::proto::LandmarkData landmark_data);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/timestamped_transform.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/transform.h  ( 11 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/transform_interpolation_buffer.h  ( 6 )
[50] common::Time earliest_time () const;
[54] common::Time latest_time () const;
[57] bool empty () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform_test_helpers.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform.h  ( 14 )
[60] Rigid2<OtherType> cast () const;
[65] Vector translation () const return translation_ };
[67] Rotation2D rotation () const return rotation_ };
[69] double normalized_angle () const;
[73] Rigid2 inverse () const;
[98] Rigid2<FloatType> operator (const Rigid2<FloatType> lhs, const Rigid2<FloatType> rhs);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/proto/transform.pb.h  ( 49 )
[120] ::google::protobuf::Descriptor descriptor ();
[121] Vector2d default_instance ();
[176] void clear_x ();
[178] double x () const;
[179] void set_x (double value);
[182] void clear_y ();
[184] double y () const;
[185] void set_y (double value);
[396] void clear_z ();
[398] double z () const;
[399] void set_z (double value);
[624] void clear_t ();
[626] float  t() const;
[627] void set_t (float value);
[742] void clear_w ();
[744] double w () const;
[745] void set_w (double value);
[960] bool has_translation () const;
[961] void clear_translation ();
[963] ::cartographer::transform::proto::Vector2d translation () const;
[964] ::cartographer::transform::proto::Vector2d mutable_translation ();
[965] ::cartographer::transform::proto::Vector2d release_translation ();
[966] void set_allocated_translation (::cartographer::transform::proto::Vector2d translation);
[969] void clear_rotation ();
[971] double rotation () const;
[972] void set_rotation (double value);
[1183] bool has_rotation () const;
[1187] ::cartographer::transform::proto::Quaterniond mutable_rotation ();
[1188] ::cartographer::transform::proto::Quaterniond release_rotation ();
[1189] void set_allocated_rotation (::cartographer::transform::proto::Quaterniond rotation);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/task.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/histogram.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/rate_timer.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/ceres_solver_options.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/port.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/make_unique.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary.h  ( 24 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/optional.h  ( 2 )
[41] bool has_value () const return value_ != nullptr };
[43] T value () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/lua.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/mutex.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/configuration_file_resolver.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary_test_helpers.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/time.h  ( 8 )
[57] uint64_t getTimeNow ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/blocking_queue.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/thread_pool.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/math.h  ( 3 )
[70] T atan2 (const Eigen::Matrix<T, 2, 1> vector);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/DataChecking.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/lockless_queue.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/setting.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/fixed_ratio_sampler.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/proto/ceres_solver_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] CeresSolverOptions default_instance ();
[146] void clear_use_nonmonotonic_steps ();
[148] bool use_nonmonotonic_steps () const;
[149] void set_use_nonmonotonic_steps (bool value);
[152] void clear_max_num_iterations ();
[154] ::google::protobuf::int32 max_num_iterations () const;
[155] void set_max_num_iterations (::google::protobuf::int32 value);
[158] void clear_num_threads ();
[160] ::google::protobuf::int32 num_threads () const;
[161] void set_num_threads (::google::protobuf::int32 value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/ground_truth/relations_text_file.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/ground_truth/proto/relations.pb.h  ( 41 )
[94] ::google::protobuf::Descriptor descriptor ();
[95] Relation default_instance ();
[150] bool has_expected () const;
[151] void clear_expected ();
[153] ::cartographer::transform::proto::Rigid3d expected () const;
[154] ::cartographer::transform::proto::Rigid3d mutable_expected ();
[155] ::cartographer::transform::proto::Rigid3d release_expected ();
[156] void set_allocated_expected (::cartographer::transform::proto::Rigid3d expected);
[159] void clear_timestamp1 ();
[161] ::google::protobuf::int64 timestamp1 () const;
[162] void set_timestamp1 (::google::protobuf::int64 value);
[165] void clear_timestamp2 ();
[167] ::google::protobuf::int64 timestamp2 () const;
[168] void set_timestamp2 (::google::protobuf::int64 value);
[171] void clear_covered_distance ();
[173] double covered_distance () const;
[174] void set_covered_distance (double value);
[271] int relation_size () const;
[272] void clear_relation ();
[274] ::cartographer::ground_truth::proto::Relation relation (int index) const;
[275] ::cartographer::ground_truth::proto::Relation mutable_relation (int index);
[276] ::cartographer::ground_truth::proto::Relation add_relation ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/points_processor.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/coloring_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/xray_points_processor.h  ( 6 )
[58] Eigen::AlignedBox3i bounding_box () const return bounding_box_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/outlier_removing_points_processor.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/file_writer.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/fake_file_writer.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/min_max_range_filtering_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/submap_painter.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/serialization_format_migration.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_deserializer.h  ( 5 )
[42] mapping::proto::SerializationHeader header () return header_ };
[44] mapping::proto::PoseGraph pose_graph ();
[52] mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_interface.h  ( 4 )
[48] bool eof () const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/ply_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/frame_id_filtering_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/counting_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/intensity_to_color_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/image.h  ( 6 )
[67] int width () const return width_ };
[68] int height () const return height_ };
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/draw_trajectories.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/xyz_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/fixed_ratio_sampling_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/pcd_writing_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/probability_grid_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/points_processor_pipeline_builder.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/points_batch.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream.h  ( 6 )
[62] bool eof () const override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/color.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/hybrid_grid_points_processor.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/null_points_processor.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/collator_interface.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/range_data.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/timed_point_cloud_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/compressed_point_cloud.h  ( 9 )
[47] bool empty () const;
[48] size _t size() const;
[49] ConstIterator begin () const;
[50] ConstIterator end () const;
[76] Eigen::Vector3f operator () const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/map_by_time.h  ( 10 )
[115] DataType operator () const return iterator_->second };
[124] ConstIterator operator-- ();
[186] mapping::Range<ConstTrajectoryIterator> trajectory_ids () const;
[192] mapping::Range<ConstIterator> trajectory (const int trajectory_id) const;
[202] ConstIterator lower_bound (const int trajectory_id, const common::Time time) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/odometry_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/data.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/imu_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/fixed_frame_pose_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/point_cloud.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/landmark_data.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/sensor.pb.h  ( 90 )
[112] ::google::protobuf::Descriptor descriptor ();
[113] CompressedPointCloud default_instance ();
[168] int point_data_size () const;
[169] void clear_point_data ();
[171] ::google::protobuf::int32 point_data (int index) const;
[172] void set_point_data (int index, ::google::protobuf::int32 value);
[173] void add_point_data (::google::protobuf::int32 value);
[180] void clear_num_points ();
[182] ::google::protobuf::int32 num_points () const;
[183] void set_num_points (::google::protobuf::int32 value);
[283] ::cartographer::transform::proto::Vector4f mutable_point_data (int index);
[291] bool has_origin () const;
[292] void clear_origin ();
[294] ::cartographer::transform::proto::Vector3f origin () const;
[295] ::cartographer::transform::proto::Vector3f mutable_origin ();
[296] ::cartographer::transform::proto::Vector3f release_origin ();
[297] void set_allocated_origin (::cartographer::transform::proto::Vector3f origin);
[300] void clear_timestamp ();
[302] ::google::protobuf::int64 timestamp () const;
[303] void set_timestamp (::google::protobuf::int64 value);
[399] int returns_size () const;
[400] void clear_returns ();
[402] ::cartographer::transform::proto::Vector3f returns (int index) const;
[403] ::cartographer::transform::proto::Vector3f mutable_returns (int index);
[404] ::cartographer::transform::proto::Vector3f add_returns ();
[411] int misses_size () const;
[412] void clear_misses ();
[414] ::cartographer::transform::proto::Vector3f misses (int index) const;
[415] ::cartographer::transform::proto::Vector3f mutable_misses (int index);
[416] ::cartographer::transform::proto::Vector3f add_misses ();
[525] bool has_linear_acceleration () const;
[526] void clear_linear_acceleration ();
[528] ::cartographer::transform::proto::Vector3d linear_acceleration () const;
[529] ::cartographer::transform::proto::Vector3d mutable_linear_acceleration ();
[530] ::cartographer::transform::proto::Vector3d release_linear_acceleration ();
[531] void set_allocated_linear_acceleration (::cartographer::transform::proto::Vector3d linear_acceleration);
[534] bool has_angular_velocity () const;
[535] void clear_angular_velocity ();
[537] ::cartographer::transform::proto::Vector3d angular_velocity () const;
[538] ::cartographer::transform::proto::Vector3d mutable_angular_velocity ();
[539] ::cartographer::transform::proto::Vector3d release_angular_velocity ();
[540] void set_allocated_angular_velocity (::cartographer::transform::proto::Vector3d angular_velocity);
[642] bool has_pose () const;
[643] void clear_pose ();
[645] ::cartographer::transform::proto::Rigid3d pose () const;
[646] ::cartographer::transform::proto::Rigid3d mutable_pose ();
[647] ::cartographer::transform::proto::Rigid3d release_pose ();
[648] void set_allocated_pose (::cartographer::transform::proto::Rigid3d pose);
[856] void clear_id ();
[858] ::std::string id () const;
[859] void set_id (const ::std::string value);
[865] ::std::string mutable_id ();
[866] ::std::string release_id ();
[867] void set_allocated_id (::std::string id);
[870] bool has_landmark_to_tracking_transform () const;
[871] void clear_landmark_to_tracking_transform ();
[873] ::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform () const;
[874] ::cartographer::transform::proto::Rigid3d mutable_landmark_to_tracking_transform ();
[875] ::cartographer::transform::proto::Rigid3d release_landmark_to_tracking_transform ();
[876] void set_allocated_landmark_to_tracking_transform (::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform);
[879] void clear_translation_weight ();
[881] double translation_weight () const;
[882] void set_translation_weight (double value);
[885] void clear_rotation_weight ();
[887] double rotation_weight () const;
[888] void set_rotation_weight (double value);
[987] int landmark_observations_size () const;
[988] void clear_landmark_observations ();
[990] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation landmark_observations (int index) const;
[991] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation mutable_landmark_observations (int index);
[992] ::cartographer::sensor::proto::LandmarkData_LandmarkObservation add_landmark_observations ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h  ( 30 )
[90] ::google::protobuf::Descriptor descriptor ();
[91] AdaptiveVoxelFilterOptions default_instance ();
[146] void clear_max_length ();
[148] float max_length () const;
[149] void set_max_length (float value);
[152] void clear_min_num_points ();
[154] float min_num_points () const;
[155] void set_min_num_points (float value);
[158] void clear_max_range ();
[160] float max_range () const;
[161] void set_max_range (float value);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/register.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/histogram.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/counter.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/family_factory.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/gauge.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FORB.h  ( 6 )
[39] void meanValue (const std::vector<pDescriptor> descriptors, TDescriptor mean);
[47] int distance (const TDescriptor a, const TDescriptor b);
[54] std::string toString (const TDescriptor a);
[61] void fromString (TDescriptor a, const std::string s);
[69] void toMat32F (const std::vector<TDescriptor> descriptors, cv::Mat mat);
[72] void toMat8U (const std::vector<TDescriptor> descriptors, cv::Mat mat);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/TemplatedDatabase.h  ( 12 )
[107] void setVocabulary (const T voc, bool use_di, int di_levels = 0);
[121] void allocate (int nd = 0, int ni = 0);
[131] EntryId add (const std::vector<TDescriptor> features, BowVector bowvec = NULL, FeatureVector fvec = NULL);
[175] void query (const std::vector<TDescriptor> features, QueryResults ret, int max_results = 1, int max_id = -1) const;
[200] void save (const std::string filename) const;
[206] void load (const std::string filename);
[228] void queryL1 (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[232] void queryL2 (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[236] void queryChiSquare (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[240] void queryBhattacharyya (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[244] void queryKL (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
[248] void queryDotProduct (const BowVector vec, QueryResults ret, int max_results, int max_id) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FeatureVector.h  ( 1 )
[42] void addFeature (NodeId id, unsigned int i_feature);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h  ( 21 )
[98] void create  (const std::vector<std::vector<TDescriptor> > training_features);
[138] void transform (const std::vector<TDescriptor> features, BowVector v) const;
[173] NodeId getParentNode (WordId wid, int levelsup) const;
[181] void getWordsFromNode (NodeId nid, std::vector<WordId> words) const;
[199] float getEffectiveLevels () const;
[237] void setScoringType (ScoringType type);
[243] bool loadFromTextFile (const std::string filename);
[249] void saveToTextFile (const std::string filename) const;
[255] bool loadFromBinaryFile (const std::string filename);
[263] void saveToBinaryFile (const std::string filename) const;
[270] void save (const std::string filename) const;
[276] void load (const std::string filename);
[306] int stopWords (double minWeight);
[353] void createScoringObject ();
[362] void getFeatures ( const vector<vector<TDescriptor> > training_features, vector<pDescriptor> features) const;
[398] void initiateClusters (const vector<pDescriptor> descriptors, vector<TDescriptor> clusters) const;
[407] void initiateClustersKMpp (const vector<pDescriptor> descriptors, vector<TDescriptor> clusters) const;
[412] void createWords ();
[420] void setNodeWeights (const vector<vector<TDescriptor> > features);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FBrief.h  ( 5 )
[37] void meanValue (const std::vector<pDescriptor> descriptors, TDescriptor mean);
[45] double distance (const TDescriptor a, const TDescriptor b);
[52] std::string toString (const TDescriptor a);
[59] void fromString (TDescriptor a, const std::string s);
[67] void toMat32F (const std::vector<TDescriptor> descriptors, cv::Mat mat);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/DBoW2.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/BowVector.cpp  ( 4 )
[35] void BowVector::addWeight (WordId id, WordValue v);
[51] void BowVector::addIfNotExist (WordId id, WordValue v);
[63] void BowVector::normalize (LNorm norm_type);
[106] void BowVector::saveM (const std::string filename, size_t W) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FClass.h  ( 5 )
[36] void meanValue (const std::vector<pDescriptor> descriptors, TDescriptor mean) = 0;
[44] double distance (const TDescriptor a, const TDescriptor b);
[51] std::string toString (const TDescriptor a);
[58] void fromString (TDescriptor a, const std::string s);
[66] void toMat32F (const std::vector<TDescriptor> descriptors, cv::Mat mat);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/ScoringObject.h  ( 2 )
[28] double score (const BowVector v, const BowVector w) const = 0;
[36] bool mustNormalize (LNorm norm) const = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/QueryResults.h  ( 1 )
[188] void saveM (const std::string filename) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp  ( 1 )
[32] void FeatureVector::addFeature (NodeId id, unsigned int i_feature);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FORB.cpp  ( 7 )
[30] void FORB::meanValue (const std::vector<FORB::pDescriptor> descriptors, FORB::TDescriptor mean);
[42] vector<int> sum (FORB::L 8, 0);
[83] int FORB::distance (const FORB::TDescriptor a, const FORB::TDescriptor b);
[106] std::string FORB::toString (const FORB::TDescriptor a);
[121] void FORB::fromString (FORB::TDescriptor a, const std::string s);
[141] void FORB::toMat32F (const std::vector<TDescriptor> descriptors, cv::Mat mat);
[176] void FORB::toMat8U (const std::vector<TDescriptor> descriptors, cv::Mat mat);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp  ( 1 )
[24] double L1Scoring::score (const BowVector v1, const BowVector v2) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/BowVector.h  ( 4 )
[77] void addWeight (WordId id, WordValue v);
[84] void addIfNotExist (WordId id, WordValue v);
[90] void normalize (LNorm norm_type);
[104] void saveM (const std::string filename, size_t W) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/Timestamp.h  ( 7 )
[49] bool empty () const;
[54] void setToCurrentTime ();
[81] void setTime (const string stime);
[92] double getFloatTime () const;
[97] string getStringTime () const;
[105] double operator-  (const Timestamp t) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/Random.cpp  ( 6 )
[82] int DUtils::Random::UnrepeatedRandomizer::get ();
[98] void DUtils::Random::UnrepeatedRandomizer::createValues ();
[108] void DUtils::Random::UnrepeatedRandomizer::reset ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/Random.h  ( 8 )
[141] int get ();
[160] void reset ();
[167] void createValues ();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/Timestamp.cpp  ( 7 )
[52] bool Timestamp::empty () const;
[56] void Timestamp::setToCurrentTime ();
[73] void Timestamp::setTime (const string stime);
[93] double Timestamp::getFloatTime () const;
[97] string Timestamp::getStringTime () const;
[103] double Timestamp::operator-  (const Timestamp t) const;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/config.h  ( 0 )

Variable name:-------------------------------------------------------------------------------------
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/fusing_sensor.h  ( 166 )
[34] cartographer::common::Time imu_time;
[35] Eigen::Quaterniond imu_qua;
[52] double radio_reset
[58] Eigen::Quaterniond qua_odm
[58] int type_sense
[65] Eigen::Vector3d observation_car_vel
[66] Eigen::Vector3d observation_pos
[67] Eigen::Quaterniond observation_qua
[69] int flag_qua
[73] bool flag_new
[76] int fuse_type
[80] int estimate_stop
[83] int flag_judge
[89] bool stop_thread;
[90] bool is_stop;
[98] Eigen::Vector3d slip_vel
[129] std::deque<cartographer::sensor::ImuData> get_imu_data_fuse;
[130] std::deque<cartographer::sensor::OdometryData> get_odm_data_fuse;
[131] std::deque<cartographer::sensor::ImuData> imu_data_align_odm;
[132] std::deque<Imu_qua_data> imu_qua_deque;
[133] std::deque<cartographer::sensor::OdometryData> odm_inter_deque;
[134] std::deque<cartographer::sensor::OdometryData> odm_imu_deque;
[135] std::deque<cartographer::sensor::ImuData> imu_data_fuse;
[136] std::deque<cartographer::sensor::ImuData> imu_data_fuse_insert;
[138] std::deque<cartographer::sensor::OdometryData> odometry_data_fuse;
[145] std::deque<double> kl_deque;
[146] std::deque<double> kr_deque;
[148] std::thread m_thread_fuse;
[152] cartographer::common::Time last_imu_time;
[153] cartographer::common::Time last_input_odm_time;
[154] cartographer::common::Time last_com_odm_time;
[155] cartographer::common::Time last_com_imu_time;
[156] cartographer::common::Time slam_time;
[157] cartographer::common::Time last_slam_time;
[158] cartographer::common::Time last_car_time;
[159] cartographer::common::Time norm_odm_time;
[160] cartographer::common::Time first_odm_time;
[162] cartographer::transform::Rigid3d slam_pose;
[163] cartographer::transform::Rigid3d to1o2_pose;
[164] cartographer::transform::Rigid3d output_pose;
[165] cartographer::transform::Rigid3d last_odm_data;
[166] cartographer::transform::Rigid3d slip_odm_data;
[167] Parameter m_param;
[170] Eigen::Vector3d fvec_gyro_bias;
[171] Eigen::Vector3d bias_gyr_add;
[172] Eigen::Vector3d bias_gyr_;
[173] Eigen::Vector3d k_odm;
[176] std::ofstream ofs_fuse;
[177] std::ofstream ofs_tum;
[178] std::ofstream ofs_tum_test;
[180] std::ofstream ofs_obser;
[181] std::ofstream ofs_predic;
[182] std::ofstream ofs_p_fuse;
[183] std::ofstream ofs_error_state;
[184] std::ofstream ofs_odm_k;
[185] std::ofstream ofs_odm_rev3;
[186] std::ofstream ofs_fuse_call;
[187] std::ofstream ofs_fuse_sensor;
[188] std::ofstream ofs_imu_rev3;
[189] std::ofstream ofs_fuse_odm_imu;
[191] uint64_t last_set_res_time;
[192] uint64_t last_send_fuse_res_time;
[193] uint64_t global_res_time;
[194] int odm_still;
[195] int imu_still;
[196] int all_static;
[197] int num_bias;
[198] int need_reset;
[201] double now_imuz;
[203] bool modi_flag;
[204] bool open_laser_result_output;
[205] bool init_time;
[214] bool pose_init;
[215] bool first_get_odm;
[216] bool first_get_imu;
[217] int first_input_odm;
[218] int first_odm;
[219] int first_slam;
[220] int num_error_vel;
[221] double last_odm_yaw;
[222] double cur_odm_yaw;
[223] double cur_imu_yaw;
[224] double last_imu_yaw;
[225] double deta_pos;
[226] double deta_yaw_odm;
[227] double pure_odm_yaw;
[228] double odometry_time_delta;
[229] double car_velx_imu;
[230] double car_vely_imu;
[231] double car_vel_odm;
[232] double filter_vx;
[233] double filter_vel0;
[234] double filter_vel1;
[235] double filter_vel2;
[239] double wheel_L;
[240] double last_slam_yaw;
[241] double P_max_kk;
[242] double P_min_kk;
[243] double max_kl_steak;
[244] double max_kr_steak;
[245] double min_kl_steak;
[246] double min_kr_steak;
[247] int num_big_error;
[248] int flag_estimate;
[249] bool flag_imu_loss;
[250] Eigen::Quaterniond imu_qua_wb;
[251] Eigen::Quaterniond pure_imu_qua;
[252] Eigen::Vector3d imu_vel_wb;
[253] Eigen::Vector3d imu_pos_wb;
[254] Eigen::Vector3d odm_pos;
[255] Eigen::Vector3d imu_odm_pos;
[256] Eigen::Vector3d gyr_imu;
[257] Eigen::Vector3d length_odm_imu;
[258] Eigen::Vector3d odm_slip_vel;
[267] Eigen::Vector3d fvecdvsfm_n;
[268] Eigen::Vector3d fvecdvsfm_b;
[269] Eigen::Vector3d fvec_odmvel_n;
[270] Eigen::Vector3d odm_dposl;
[271] Eigen::Vector3d odm_dposr;
[274] Eigen::Quaterniond qua_ob;
[275] Eigen::Vector3d init_imu_pos;
[276] Eigen::Vector3d imu_car_vel;
[277] Eigen::Vector3d odm_bais_vel;
[280] cartographer::sensor::OdometryData last_odometry_data;
[281] cartographer::transform::Rigid3d base_trans;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/BlockQueue.h  ( 17 )
[52] std::deque<T> m_queue;
[55] std::condition_variable m_cond_empty;
[56] std::condition_variable m_cond_full;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SystemState.h  ( 71 )
[26] uint64_t rev_sensor_time;
[27] uint64_t rev_sys_time;
[28] uint64_t last_sensor_time;
[29] uint64_t last_sys_time;
[30] SensorType s_type ;
[51] SensorState laser_state;
[52] SensorState imu_state;
[53] SensorState odom_state;
[54] SensorState img_state;
[55] InfoType laser_info;
[56] InfoType imu_info;
[57] InfoType odom_info;
[58] InfoType img_info;
[59] ErrDataRecord curr_laser;
[60] ErrDataRecord curr_odom;
[61] ErrDataRecord curr_imu;
[62] ErrDataRecord curr_img;
[63] RunType run_type;
[64] int laser_ab_size;
[65] int imu_ab_size;
[66] int odom_ab_size;
[67] int img_ab_size;
[68] int elevator_layer;
[69] float laser_rev_freq;
[70] float imu_rev_freq;
[71] float odom_rev_freq;
[72] float img_rev_freq;
[73] float laser_size;
[74] float imu_size;
[75] float odom_size;
[76] float img_size;
[77] bool open_print;
[79] bool need_relocal;
[80] bool relocal_success;
[81] bool laser_points_abnormal;
[82] bool big_empty;
[192] uint64_t sensor_time
[192]  uint64_t last_time
[196] std::ofstream err_imu_m;
[197] std::ofstream err_odom_m;
[198] std::ofstream err_laser_m;
[199] std::ofstream err_log_m;
[201] std::mutex laser_points_ab_mtx_m;
[202] std::mutex big_empty_mtx_m;
[203] std::mutex slipping_mtx_m;
[204] std::mutex relocal_need_mtx_m;
[205] std::mutex relocal_success_mtx_m;
[208] RunningSystemState current_state_m;
[210] std::shared_ptr<std::thread> ptr_thread_m;
[212] int base_output_size_m;
[213] int base_check_time_m;
[215] bool stop_thread_success_m;
[217] std::vector<ErrDataRecord> LaserErrVec_m;
[218] std::mutex laser_mtx_m;
[219] std::vector<ErrDataRecord> ImuErrVec_m;
[220] std::mutex imu_mtx_m;
[221] std::vector<ErrDataRecord> OdomErrVec_m;
[222] std::mutex odom_mtx_m;
[223] std::vector<ErrDataRecord> ImgErrVec_m;
[224] std::mutex img_mtx_m;
[226] std::vector<ErrDataRecord> WaitLaserErrVec_m;
[227] std::vector<ErrDataRecord> WaitImuErrVec_m;
[228] std::vector<ErrDataRecord> WaitOdomErrVec_m;
[229] std::vector<ErrDataRecord> WaitImgErrVec_m;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Public.h  ( 17 )
[74] uint64_t sensor_time;
[75] uint64_t rev_sys_time;
[85] uint64_t track_imu_time;
[86] Eigen::Quaterniond track_imu_qua;
[87] Eigen::Vector3d cur_imu_gyr;
[110] cartographer::transform::Rigid3d last_pose;
[111] cartographer::transform::Rigid3d delt_pose;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/nodeOptions.h  ( 7 )
[21] ::cartographer::mapping::proto::MapBuilderOptions map_builder_options;
[22] std::string map_frame;
[23] double lookup_transform_timeout_sec;
[24] double submap_publish_period_sec;
[25] double pose_publish_period_sec;
[26] double trajectory_publish_period_sec;
[30]  ::cartographer::common::LuaParameterDictionary lua_parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/trajectory_options.h  ( 20 )
[21] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options;
[22] std::string tracking_frame;
[23] std::string published_frame;
[24] std::string odom_frame;
[25] bool provide_odom_frame;
[26] bool use_odometry;
[27] bool use_nav_sat;
[28] bool use_landmarks;
[29] bool publish_frame_projected_to_2d;
[30] int num_laser_scans;
[31] int num_multi_echo_laser_scans;
[32] int num_subdivisions_per_laser_scan;
[33] int num_point_clouds;
[34] double rangefinder_sampling_ratio;
[35] double odometry_sampling_ratio;
[36] double fixed_frame_pose_sampling_ratio;
[37] double imu_sampling_ratio;
[38] double landmarks_sampling_ratio;
[43]  ::cartographer::common::LuaParameterDictionary lua_parameter_dictionary
[50]  ::cartographer::common::LuaParameterDictionary initial_trajectory_pose
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/judge_imu_still.h  ( 34 )
[24] int num_imu;
[25] int num_still_imu;
[26] int cov_still_num;
[27] int cov_still_count;
[28] int norm_still_num;
[29] double acc_yuzhi;
[30] double gyr_yuzhi;
[31] double acc_mean_yuzhi;
[32] double gyr_mean_yuzhi;
[33] double accx_std;
[34] double accy_std;
[35] double accz_std;
[36] bool cov_judge;
[43] Eigen::Vector3d _acc;
[44] Eigen::Vector3d _gyr;
[47] Eigen::Vector3d data_acc
[47] Eigen::Vector3d data_gyr
[49] Imu_data imu_data_input
[53] Imu_data imu_data_cov
[54] Imu_data imu_data_still
[57] Eigen::Vector3d first_bias_gyr;
[58] Eigen::Vector3d first_bias_acc;
[59] Eigen::Vector3d global_bias_gyr;
[60] Eigen::Vector3d global_bias_acc;
[62] Eigen::Vector3d sum_acc;
[63] Eigen::Vector3d sum_gyr;
[66] std::list<Imu_data> maybe_imuList_still;
[68] bool still_flag_out;
[70] Eigen::Vector3d out_bias_gyr;
[71] Eigen::Vector3d out_bias_acc;
[72] int imu_tp;
[74] std::ofstream ofs_still_data2;
[75] std::ofstream ofs_still_data3;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/convert_tool.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataCorrect.h  ( 15 )
[38] cartographer::mapping::MapBuilderInterface map_builder
[65] std::string path_m;
[66] std::ofstream ofs_correct_path_m;
[67] std::ofstream ofs_correct_semantic_map_m;
[68] std::mutex l_semti_map;
[69] OnCorrectSemMap m_callback_correct_map_;
[70] std::shared_ptr<std::thread> ptr_deal_correct;
[71] perception_msgs::SenmaticMap all_sem_map_data;
[72] std::deque<perception_msgs::SenmaticMap> SentiMapDeque;
[73] std::deque<CorrectSentiMap> correct_senti_map_m;
[74] cartographer::mapping::NodeId last_search_id;
[80] bool stop_flag_m;
[81] bool stop_success_m;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/DataDealing.h  ( 63 )
[39] sensors_msgs::EncoderMsg last_encoder;
[40] Eigen::Matrix3d install_imu;
[41] Eigen::Vector3d odm_pos;
[42] ThreadState thread_state;
[43] int last_pl_odm;
[44] int last_pr_odm;
[45] int laser_angle_cut;
[46] bool laser_add_optimization;
[47] std::string imu_sensor_id;
[48] std::string odm_sensor_id;
[49] std::string laser_sensor_id;
[70] int first_track;
[71] uint64_t last_track_imu_time;
[72] Eigen::Quaterniond q_track_imu;
[73] Eigen::Vector3d gravity_vector_n;
[87] uint64_t last_still_imu_time;
[88] bool init_still_flag;
[149] OdmPose odom_data
[178] std::shared_ptr<cartographer::mapping::MapBuilderInterface> map_builder_ptr
[224] std::shared_ptr<cartographer::mapping::MapBuilderInterface> map_builder_m;
[226] std::shared_ptr<std::thread> ptr_thread_m;
[228] std::unique_ptr<fusing_sensor> ptr_fuse_m;
[232] DataState data_state_m;
[234] ImuStill imu_still_m;
[236] std::deque<SitllImu> still_imu_deque;
[238] judge_imu_still *my_judge_imu_still;
[240] std::mutex l_imu_still;
[242] ImuPreDeal Imu_qua_m;
[244] std::deque<Imu_qua> qua_for_odm;
[246] std::mutex qua_for_odm_lock;
[248] TrajectoryOptions trajectory_options_m;
[250] NodeOptions node_options_m;
[252] Parameter *param_use;
[254] BlockQueue<sensors_msgs::LaserScan> LaserBlockQueue_m;
[256] BlockQueue<sensors_msgs::ImuMsg> ImuBlockQueue_m;
[258] BlockQueue<OdmPose> OdomBlockQueue_m;
[264] bool stop_flag_m;
[265] bool stop_success_m;
[266] bool delete_imu_m;
[267] bool delete_odom_m;
[268] bool has_delete_imu;
[269] bool optimize_all;
[272] std::ofstream ofs_encoder;
[273] std::ofstream ofs_Transencoder;
[274] std::ofstream ofs_adddata;
[275] std::ofstream ofs_tack_imu_qua;
[276] std::ofstream ofs_imu_bias;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/SaveDataDefine.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/time_conversion.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/include/Parameter.h  ( 62 )
[24] RunType run_lable;
[25] RunModule run_module;
[26] LogLevel log_level;
[27] int trajectory_id;
[28] bool guess_bias;
[29] bool reset_imu_coordinate;
[30] bool use_odom;
[31] bool use_laser;
[32] bool use_img;
[33] bool use_imu;
[34] bool open_obstacle_map;
[38] bool Record_LoadMap;
[40] int scan_points;
[41] float empty_ration;
[42] float map_comp_ration;
[43] float map_comp_border;
[44] float min_match_score;
[45] int min_candi_num;
[46] float laser_angle_cut;
[47] int imu_delay;
[48] int odm_delay;
[49] float map_max_border;
[84] Eigen::Vector3d odm_T_;
[85] Eigen::Quaterniond odm_Q_;
[86] Eigen::Vector3d imu_T_;
[87] Eigen::Quaterniond imu_Q_;
[88] Eigen::Vector3f las_T_;
[89] Eigen::Quaternionf las_Q_;
[90] Eigen::Vector3d cam_T_;
[91] Eigen::Quaterniond cam_Q_;
[92] Eigen::Matrix3d install_imu;
[93] std::vector<double> normal_pitch_;
[94] double back_pitch_;
[96] float wheel_R_;
[97] float wheel_L_;
[98] float wheel_HZ_;
[125] float encoder_hz;
[126] double global_yaw;
[127] double global_yaw0;
[128] double odm_yaw_sum;
[129] Eigen::Vector3d init_kk_odm;
[130] Eigen::Vector3d k_odom;
[146] Eigen::Vector3d length_odm_imu;
[147] Eigen::Quaterniond qua_odm_imu;
[148] double error_atti ;
[149] double error_vel ;
[150] double error_pos ;
[151] double error_bg ;
[152] double error_ba;
[153] bool display_fuse;
[183] std::string config_path_m;
[185] EncoderParameter odom_param_m;
[186] CalibParameter calib_param_m;
[187] RunParameter run_param_m;
[188] FuseParam fuse_param_m;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/Parameter.cc  ( 13 )
[7] std::vector<T> Q
[67] Eigen::Quaterniond tmp_imu_q = calib_param_m.imu_Q_.normalized();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/trajectory_options.cc  ( 4 )
[76]  ::cartographer::common::LuaParameterDictionary lua_parameter_dictionary
[76]  ::cartographer::common::LuaParameterDictionary initial_trajectory_pose
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/fusing_sensor.cc  ( 65 )
[170] double radio_pk=1;
[171] double radio_ep =0.3;
[185] double error_atti = pow(m_param.fuse_param_m.error_atti,2);
[186] double error_vel = pow(m_param.fuse_param_m.error_vel,2);
[187] double error_pos = pow(m_param.fuse_param_m.error_pos,2)*radio_ep;
[188] double error_bg = pow(m_param.fuse_param_m.error_bg,2);
[189] double error_yaw_odm = pow(0.05,2);
[190] double error_k_odm = pow(0.0005,2)*radio_pk;
[191] double error_bias_odm = pow(0.0,2);
[216] double radio_reset
[222] double radio_err=1.0;
[223] double radio_p=10000;
[268] Eigen::Quaterniond qua_reset(qw,qx,qy,qz);
[274] Eigen::Vector3d vec_reset(x,y,z);
[309] Eigen::Vector3d input_acc(0,0,0);
[316] Eigen::Quaterniond qua_end(1,0,0,0);
[325] Eigen::Quaterniond gyr_qua = pure_imu_qua * dqua;
[328] Imu_qua_data tmp_imu_qua;
[335] Eigen::Matrix3d Rnb_start = imu_qua_wb.toRotationMatrix();
[345] Eigen::Vector3d vel_end(0,0,0);
[346] Eigen::Vector3d pos_end(0,0,0);
[375] double Dk = deta_pos;
[377] double Rodm=0;
[380] uint64_t start_tm0 = cartographer::common::getTimeNow();
[391] Eigen::Vector3d obser_car_vel;
[415] cartographer::sensor::OdometryData odm_imu_pose ;
[433] uint64_t standard_slam_time = cartographer::common::TimeToUint64(slam_time);
[434] uint64_t standard_odm_time = cartographer::common::TimeToUint64(last_odometry_data.time);
[441] cartographer::transform::Rigid3d predict_slam_pose = slam_pose * to1o2_pose;
[442] Eigen::Vector3d pos_slam = slam_pose.translation();
[443] Eigen::Quaterniond qua_slam = slam_pose.rotation();
[445] Eigen::Vector3d ofs_o1o2 = to1o2_pose.translation();
[449] Eigen::Vector3d pos_observation = predict_slam_pose.translation() ;
[450] Eigen::Quaterniond qua_observation = predict_slam_pose.rotation();
[451] Eigen::Vector3d delta_pos = pos_observation - odm_pos;
[491] cartographer::common::Setting::OutPut_data tmp_output_data;
[495] uint64_t c_time = cartographer::common::getTimeNow();
[496] uint64_t res_time = cartographer::common::TimeToUint64(tmp_output_data.time);
[531] cartographer::transform::Rigid3d Pose_init = cartographer::transform::Rigid3d (cartographer::common::Setting::t_init, cartographer::common::Setting::q_init);
[534] cartographer::transform::Rigid3d Pose_update= cartographer::transform::Rigid3d (cartographer::common::Setting::relocal_state.p, cartographer::common::Setting::relocal_state.q);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/DataDealing.cc  ( 59 )
[378] cartographer::transform::Rigid3d Pose_new = Pose_update;/
[399] double kk_l =1.0;
[400] double kk_r =1.0;
[413] double Dk = (odm_dpose[0] + odm_dpose[1]) * 0.5;
[424] Eigen::Quaterniond odm_qua;
[439] std::shared_ptr<cartographer::mapping::MapBuilderInterface> map_builder_ptr
[539] cartographer::common::Setting::CurrLaserState c_states;
[552] ::cartographer::sensor::PointCloudWithIntensities point_cloud;
[613] int imu_count = 0;
[619] cartographer::sensor::ImuData imu_data = TransformImu(imu);
[641] int odom_count = 0;
[646] cartographer::sensor::OdometryData odom_data = TransformOdom(odom);
[701] Eigen::Vector3d origin_gyr = Eigen::Vector3d::Zero();
[702] Eigen::Vector3d origin_acc = Eigen::Vector3d::Zero();
[710] Eigen::Vector3d new_acc = param_use->calib_param_m.install_imu*origin_acc;
[711] Eigen::Vector3d new_gyr = param_use->calib_param_m.install_imu*origin_gyr;
[752] cartographer::transform::Rigid3d R_trans = cartographer::transform::Rigid3d::Identity();
[753] cartographer::transform::Rigid3d R_trans2 = R_trans.Translation(origin);
[754] cartographer::transform::Rigid3d pose_trans = cartographer::transform::Rigid3d(odom_data.translation, odom_data.rotation);
[764] sensors_msgs::LaserScan laser_tmp;
[821] cartographer::sensor::Vector5f l_points;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/DataCorrect.cc  ( 23 )
[34] cartographer::mapping::MapBuilderInterface map_builder
[44] int last_update_size = 0;
[61] Eigen::Vector3d p_d = (correct_senti_map_m[i].pose.inverse()*pose.data.global_pose).translation();
[62] Eigen::Quaterniond q_d = (correct_senti_map_m[i].pose.inverse()*pose.data.global_pose).rotation();
[81] perception_msgs::SenmaticMap senti_map;
[97] int last_upate_count = 0;
[98] bool find_success = false;
[106] CorrectSentiMap last_data;
[108] double min_distance = 100;
[117] Eigen::Vector3d pose_1 = pose.data.global_pose.translation();
[126] double Distance = (pose_1(0) - senti_map.objects[i].locationWorld[0].x)*(pose_1(0) - senti_map.objects[i].locationWorld[0].x) +(pose_1(1) - senti_map.objects[i].locationWorld[0].y)*(pose_1(1) - senti_map.objects[i].locationWorld[0].y);
[230] int N = all_sem_map_data.objects.size();
[241] Eigen::Vector3d pose_old_1 = Eigen::Vector3d::Identity();
[246] cartographer::transform::Rigid3d pose_last_1 = cartographer::transform::Rigid3d(pose_old_1,correct_senti_map_m[j].last_pose.rotation());
[247] Eigen::Vector3d pose_new_1 = (pose_last_1 * correct_senti_map_m[j].delt_pose).translation();
[252] Eigen::Vector3d pose_old_2 = Eigen::Vector3d::Identity();
[257] cartographer::transform::Rigid3d pose_last_2 = cartographer::transform::Rigid3d(pose_old_2,correct_senti_map_m[j].last_pose.rotation());
[258] Eigen::Vector3d pose_new_2 = (pose_last_2 * correct_senti_map_m[j].delt_pose).translation();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/time_conversion.cc  ( 8 )
[15] int64_t uts_timestamp = ::cartographer::common::ToUniversal(time);
[21] double ns_since_unix_epoch = (uts_timestamp - ::cartographer::common::kUtsEpochOffsetFromUnixEpochInSeconds * 10000000ll) * 100ll;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/nodeOptions.cc  ( 4 )
[42] auto file_resolver = cartographer::common::make_unique< cartographer::common::ConfigurationFileResolver>( std::vector<std::string>{configuration_directory});
[46] cartographer::common::LuaParameterDictionary lua_parameter_dictionary( code, std::move(file_resolver));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/SlamInterface.cc  ( 127 )
[80] std::unique_ptr<SystemState> sys_state_m;
[81] std::unique_ptr<DataDealing> data_deal_m;
[82] std::unique_ptr<DataCorrect> data_correct_m;
[83] std::unique_ptr<cartographer::mapping::MapBuilderInterface> map_builder_m;
[86] DataRec last_imu;
[87] DataRec last_odom;
[88] DataRec last_laser;
[90] SensorState sensor_state;
[92] std::string param_path;
[94] uint64_t res_time;
[96] std::ofstream imu_rev_path;
[97] std::ofstream odom_rev_path;
[98] std::ofstream laser_rev_path;
[99] std::ofstream output_path;
[100] std::thread thd_PubImuData;
[101] std::thread thd_PubOdmData;
[102] std::thread thd_PubLaserData;
[104] std::thread thd_ReadImuData;
[105] std::thread thd_ReadOdmData;
[106] std::thread thd_ReadLaserData;
[108] std::queue<SaveImuData> imu_queue;
[109] std::queue<SaveOdmData> odm_queue;
[110] std::queue<SaveLaserData> laser_queue;
[111] std::mutex mutex_odom;
[112] std::mutex mutex_laser;
[113] std::mutex mutex_imu;
[120] bool first_imu = true;
[121] bool first_odm = true;
[122] bool first_laser = true;
[123] std::uint64_t first_time;
[125] std::ifstream ifs_imu_data;
[126] std::ifstream ifs_odm_data;
[127] std::ifstream ifs_laser_data;
[128] std::uint64_t read_first_time;
[129] bool read_first_imu = true;
[130] bool read_first_odm = true;
[131] bool read_first_laser = true;
[210] uint64_t sys_time = mind_os::util::now();
[340] static int save_count = 0;
[349] std::string map_path = "./slam_save_map.pbstream";
[401] cartographer::transform::Rigid3d Po = cartographer::transform::Rigid3d(t,q);
[425] grid g_tmp;
[459]  SlamResult now_data
[460] double dt_imu = (over_data.s_time - last_data.s_time);
[461] double dt_imu1 = (now_data.s_time - last_data.s_time);
[462] Eigen::Quaterniond last_qua_tm0;
[467] Eigen::Quaterniond over_qua_tm0;
[472] Eigen::Quaterniond qua_imu_tm0;
[473] Eigen::Quaterniond qua_imu_tm0_norm;
[474] Eigen::Quaterniond error_qua0 = last_qua_tm0 * over_qua_tm0.conjugate();
[487] Eigen::Vector3d last_pos_tm0;
[491] Eigen::Vector3d over_pos_tm0;
[495] Eigen::Vector3d pos_tm0 = last_pos_tm0 + (over_pos_tm0 - last_pos_tm0) * dt_imu1 / dt_imu;
[506] uint64_t req_time = request->s_timestamp*0.001;
[507] std::deque<SlamResult> tmp_output_data_deque;
[527] SlamResult end_odom = tmp_output_data_deque.back();
[528] SlamResult front_odom = tmp_output_data_deque.front();
[531] SlamResult over_odom;
[532] SlamResult now_odom;
[543] SlamResult tmp_pose = (*it);
[671] std::set<SensorId> expected_topics;
[694] std::string map_path_;
[695] bool load_flag = false;
[1018] std::string data_topic = NextData<std::string>(is);
[1102] static int check_num = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/SystemState.cc  ( 16 )
[74] float t_laser_rev_freq = (current_state_m.laser_size - current_state_m.laser_ab_size)/base_check_time_m;
[84] float t_imu_rev_freq = (current_state_m.imu_size - current_state_m.imu_ab_size)/base_check_time_m;
[93] float t_odom_rev_freq = (current_state_m.odom_size - current_state_m.odom_ab_size)/base_check_time_m;
[390] uint64_t sys_time = mind_os::util::now();
[558] uint64_t sensor_time
[558] uint64_t rev_sys_time
[558]  uint64_t last_time
[558] uint64_t last_sys_time
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/convert_tool.cc  ( 9 )
[8] Eigen::Quaterniond qua_reset(qw,qx,qy,qz);
[14] Eigen::Vector3d vec_reset(vecx,vecy,vecz);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/src/judge_imu_still.cc  ( 17 )
[65] Eigen::Vector3d data_acc
[65]  Eigen::Vector3d data_gyr
[67] Imu_data input_imu_data;
[70] double norm_acc = data_acc.norm();
[74] int norm_still_judge = 0;
[95] Imu_data imu_data_deal
[118] int num_data = imuList.size();
[126] Imu_data tmp_imu = (*it);
[144] double sum_accx_std = 0.0;
[145] double sum_accy_std = 0.0;
[146] double sum_accz_std = 0.0;
[162] Imu_data imu_data_still
[214] Eigen::Vector3d modify_gyr = imu_data_still._gyr - first_bias_gyr;
[218] int flag_still_gyr =0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/local_slam_result_data.h  ( 3 )
[33] int trajectory_id
[33]  PoseGraph pose_graph
[36] common::Time time_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/probability_values.h  ( 4 )
[116] bool update_carry = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_kalman.h  ( 101 )
[42] Eigen::Vector3d length_odm_imu;
[43] Eigen::Quaterniond qua_odm_imu;
[44] double error_atti =0.001;
[45] double error_vel = 0.02;
[46] double error_pos = 0.01;
[47] double error_bg = 0.0005;
[48] double error_ba = 0.0001;
[49] bool display_fuse;
[66] double dt_imu
[68] double dt_odm
[69] Eigen::Vector3d observation_car_vel
[69] int flag_lost
[70] Eigen::Vector3d observation_pos
[71] Eigen::Quaterniond observation_qua
[74] double dt_slam_odm
[79] int fuse_type
[89] std::ofstream ofs_test_estimate;
[93] KalmanParameter kalman_sensor;
[94] ImuParameter m_imu_parameter;
[96] std::deque<sensor::OdometryData> odometry_data_input;
[97] std::deque<sensor::ImuData> imu_data_use;
[98] std::deque<sensor::OdometryData> odometry_data_use;
[99] std::deque<sensor::ImuData> imu_data_track;
[100] std::deque<sensor::OdometryData> odometry_data_track;
[101] sensor::OdometryData last_odm_data;
[102] sensor::OdometryData last_odm_data_use;
[103] sensor::OdometryData last_odm_track;
[104] sensor::ImuData last_imu_data;
[105] sensor::ImuData last_imu_data_use;
[106] transform::Rigid3d cur_odm_pose;
[107] transform::Rigid3d cur_slam_pose;
[108] transform::Rigid3d last_slam_pose;
[109] transform::Rigid3d track_slam_pose;
[110] transform::Rigid3d Tob;
[111] transform::Rigid3d to1o2_pose;
[112] common::Time last_cov_time;
[113] common::Time cur_slam_time;
[114] common::Time last_slam_time;
[115] common::Time track_slam_time;
[116] common::Time last_track_slam_time;
[117] common::Time last_pre_imu_time;
[118] common::Time out_slam_time;
[126] Eigen::Quaterniond qua_ob;
[127] Eigen::Quaterniond imu_qua_wb;
[128] Eigen::Quaterniond pure_imu_qua;
[129] Eigen::Quaterniond track_imu_qua;
[130] Eigen::Quaterniond out_imu_qua;
[131] Eigen::Vector3d t_ob;
[132] Eigen::Vector3d last_odm_vel;
[133] Eigen::Vector3d old_odm_vel;
[134] Eigen::Vector3d imu_vel_wb;
[135] Eigen::Vector3d imu_pos_wb;
[136] Eigen::Vector3d imu_car_vel;
[137] Eigen::Vector3d fvecdvsfm_n;
[138] Eigen::Vector3d fvecdvsfm_b;
[139] Eigen::Vector3d fvecdvsfm_all;
[140] Eigen::Vector3d gravity_;
[141] Eigen::Vector3d fvec_gyro_bias;
[142] Eigen::Vector3d fvec_acc_bias;
[143] Eigen::Vector3d out_imu_vel;
[158] Eigen::Vector3d first_imu_pos ;
[159] Eigen::Vector3d odm_track_pos;
[160] Eigen::Vector3d car_vel_odm;
[161] Eigen::Vector3d fpos_angle;
[162] Eigen::Vector3d car_vel_b;
[163] Eigen::Vector3d fvec_odmvel_n;
[164] Eigen::Vector3d odm_dposl;
[165] Eigen::Vector3d odm_dposr;
[166] Eigen::Vector3d k_odm;
[167] double last_slam_yaw;
[168] double odm_yaw;
[169] double last_odm_yaw = 0;
[170] double wheel_L;
[171] double error_installz;
[172] double pure_odm_yaw;
[173] int first_slam;
[174] int first_slam_obser;
[175] int first_imu;
[176] int first_imu_use;
[177] int first_odm;
[178] int first_odm_use;
[179] int first_odm_track;
[180] int first_obser;
[181] int state_motion;
[182] int reset_p;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/detect_floors.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_node.h  ( 14 )
[36] transform::Rigid3d local_pose;
[39] transform::Rigid3d global_pose;
[42] common::optional<ConstantPoseData> constant_pose_data;
[44] double node_hight;
[53] Eigen::Quaterniond gravity_alignment;
[57] sensor::PointCloud filtered_gravity_aligned_point_cloud;
[60] sensor::PointCloud high_resolution_point_cloud;
[61] sensor::PointCloud low_resolution_point_cloud;
[63] Eigen::VectorXf rotational_scan_matcher_histogram;
[67] double conf_odm;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/id.h  ( 20 )
[58] int trajectory_id;
[59] int node_index;
[87] int submap_index;
[121] IteratorType begin_;
[122] IteratorType end_;
[138] int opti_count;
[396] bool can_append_ = true;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/submaps.h  ( 12 )
[67]  bool include_probability_grid_data
[92] int num_range_data_ = 0;
[93] bool finished_ = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph.h  ( 20 )
[51] int to_trajectory_id;
[52] transform::Rigid3d relative_pose;
[64] int trajectory_id
[142] int from_trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/grid_interface.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_tracker.h  ( 9 )
[57] common::Time time_;
[58] common::Time last_linear_acceleration_time_;
[59] Eigen::Quaterniond orientation_;
[60] Eigen::Vector3d gravity_vector_;
[61] Eigen::Vector3d imu_angular_velocity_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder_interface.h  ( 13 )
[63]  LocalSlamResultCallback local_slam_result_callback
[63]  LocalMapCallback local_map_callback
[63]  LocalAbnormalStateCallback local_ab_state_callback
[75]  int trajectory_id
[91]  bool load_frozen_state
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_interface.h  ( 24 )
[38] transform::Rigid3d zbar_ij;
[39] double translation_weight;
[40] double rotation_weight;
[43] SubmapId submap_id;
[44] NodeId node_id;
[53] bool is_pushed;
[58] int trajectory_id;
[60] transform::Rigid3d landmark_to_tracking_transform;
[64] std::vector<LandmarkObservation> landmark_observations;
[65] common::optional<transform::Rigid3d> global_landmark_pose;
[92] double gravity_constant = 9.8;
[94] common::optional<transform::Rigid3d> fixed_frame_origin_in_map;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/range_data_inserter_interface.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_builder_interface.h  ( 23 )
[52] NodeId node_id;
[67] double origin_x;
[68] double origin_y;
[71] std::vector<grid> grid_data;
[88] RUN_STATE states_;
[89] bool ON;
[153]  std::unique_ptr<mapping::LocalSlamResultData> local_slam_result_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/Ramp.h  ( 8 )
[55] transform::Rigid2d local_pose1_;
[56] transform::Rigid2d local_pose2_;
[57] transform::Rigid2d local_pose3_;
[58] transform::Rigid2d local_pose4_;
[59] int traj_id;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_extrapolator.h  ( 57 )
[75]  common::Duration pose_queue_duration
[75]  double imu_gravity_time_constant
[81] common::Time start_imu_time;
[82] common::Time time_preint;
[83] common::Time cur_imu_time;
[99] Eigen::Quaterniond start_qua;
[100] Eigen::Vector3d start_vel;
[101] Eigen::Vector3d start_velb;
[102] Eigen::Vector3d mean_velb;
[103] Eigen::Vector3d start_pos;
[107] int big_angle=0;
[108] int small_angle=0;
[110] double frame_h = 0.0;
[111] double odm_h =0;
[112] int imu_size;
[113] int first_odm = 1;
[114] bool long_loss_imu_time = false;
[118] Eigen::Vector3d linear_velocity_from_odometry_out = Eigen::Vector3d::Zero();
[119] Eigen::Vector3d linear_velocity_from_poses_out = Eigen::Vector3d::Zero();
[120] Eigen::Vector3d linear_dpos_from_poses_out = Eigen::Vector3d::Zero();
[121] Eigen::Vector3d angular_velocity_from_odometry_out = Eigen::Vector3d::Zero();
[122] Eigen::Vector3d angle_from_imu_out = Eigen::Vector3d::Zero();
[124] std::ofstream ofs_slam_vel;
[125] std::ofstream ofs_odom_vel;
[126] std::ofstream ofs_expolore;
[137]  ImuTracker imu_tracker
[151] transform::Rigid3d imu_vel;
[154] std::deque<TimedPose> timed_pose_queue_;
[155] std::deque<TimedVel> timed_vel_queue_;
[157] Eigen::Vector3d linear_velocity_from_poses_ = Eigen::Vector3d::Zero();
[158] Eigen::Vector3d angular_velocity_from_poses_ = Eigen::Vector3d::Zero();
[161] int imu_loss_flag = 0;
[162] std::deque<sensor::ImuData> imu_data_;
[163] std::deque<sensor::ImuData> pre_imu_data;
[164] std::deque<sensor::ImuData> kalman_imu_data;
[165] std::deque<sensor::ImuData> kalman_imu_use;
[166] std::unique_ptr<ImuTracker> imu_tracker_;
[167] std::unique_ptr<ImuTracker> odometry_imu_tracker_;
[168] std::unique_ptr<ImuTracker> extrapolation_imu_tracker_;
[169] std::unique_ptr<ImuKalman> kalman_imu_tracker;
[171] TimedPose cached_extrapolated_pose_;
[172] TimedPose cached_extrapolated_pose_error;
[174] std::deque<sensor::OdometryData> odometry_data_;
[175] std::deque<sensor::OdometryData> kalman_odometry_data;
[176] sensor::OdometryData last_odm_data;
[177] sensor::OdometryData imu_vel_data;
[178] Eigen::Vector3d linear_velocity_from_odometry_ = Eigen::Vector3d::Zero();
[179] Eigen::Vector3d angular_velocity_from_odometry_ = Eigen::Vector3d::Zero();
[180] Eigen::Quaterniond quab1b2_from_imu_ ;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder.h  ( 21 )
[71]  LocalSlamResultCallback local_slam_result_callback
[71]  LocalMapCallback local_map_callback_
[71]  LocalAbnormalStateCallback local_ab_states_callback
[77] int trajectory_id
[85]  bool load_frozen_state
[111] std::ofstream ofs_opti_node_loop;
[115] common::ThreadPool thread_pool_;
[118] std::unique_ptr<PoseGraph> pose_graph_;
[120] std::unique_ptr<sensor::CollatorInterface> sensor_collator_;
[122] std::vector<std::unique_ptr<mapping::TrajectoryBuilderInterface>> trajectory_builders_;
[124] std::vector<proto::TrajectoryBuilderOptionsWithSensorIds> all_trajectory_builder_options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_trimmer.h  ( 6 )
[32] int trajectory_id
[57] Trimmable pose_graph
[75] int num_submaps_to_keep_;
[76] bool finished_ = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/hybrid_grid.h  ( 23 )
[170] std::unique_ptr<WrappedGrid>& meta_cell = meta_cells_[ToFlatIndex(meta_index, kBits)];
[368] int bits_;
[389] std::vector<std::unique_ptr<WrappedGrid>> new_meta_cells_( 8 * meta_cells_.size());
[406] std::vector<std::unique_ptr<WrappedGrid>> meta_cells_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/submap_3d.h  ( 16 )
[42]  common::LuaParameterDictionary parameter_dictionary
[51]  bool include_probability_grid_data
[72]  int high_resolution_max_range
[76] std::unique_ptr<HybridGrid> high_resolution_hybrid_grid_;
[77] std::unique_ptr<HybridGrid> low_resolution_hybrid_grid_;
[112] int matching_submap_index_ = 0;
[113] std::vector<std::shared_ptr<Submap3D>> submaps_;
[114] RangeDataInserter3D range_data_inserter_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/range_data_inserter_3d.h  ( 6 )
[29]  common::LuaParameterDictionary parameter_dictionary
[41]  HybridGrid hybrid_grid
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/grid_2d.h  ( 9 )
[72] transform::Rigid3d local_pose
[93] MapLimits limits_;
[94] std::vector<uint16> correspondence_cost_cells_;
[95] float min_correspondence_cost_;
[96] float max_correspondence_cost_;
[97] std::vector<int> update_indices_;
[100] Eigen::AlignedBox2i known_cells_box_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.h  ( 6 )
[38]  common::LuaParameterDictionary parameter_dictionary
[70] std::vector<uint16> hit_table_;
[71] std::vector<uint16> miss_table_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid.h  ( 4 )
[54] transform::Rigid3d local_pose
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/submap_2d.h  ( 19 )
[42]  common::LuaParameterDictionary parameter_dictionary
[50]  bool include_probability_grid_data
[70] std::unique_ptr<Grid2D> grid_;
[71] bool local_flag = false;
[137] int matching_submap_index_ = 0;
[138] int windows_submap_index_ = 0;
[139] int base_map_size = 0;
[140] std::vector<std::shared_ptr<Submap2D>> submaps_;
[141] std::vector<sensor::RangeData> dealing_submaps_;
[142] std::vector<std::shared_ptr<Submap2D>> matching_windows_submap_;
[143] std::unique_ptr<RangeDataInserterInterface> range_data_inserter_;
[144] std::unique_ptr<RangeDataInserterInterface> windows_range_data_inserter_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/xy_index.h  ( 8 )
[43] int num_x_cells = 0;
[44] int num_y_cells = 0;
[106] Eigen::Array2i min_xy_index_;
[107] Eigen::Array2i max_xy_index_;
[108] Eigen::Array2i xy_index_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/map_limits.h  ( 6 )
[87] double resolution_;
[88] Eigen::Vector2d max_;
[89] CellLimits cell_limits_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/ramp.pb.h  ( 21 )
[39] extern RampDefaultTypeInternal _Ramp_default_instance_;
[191] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[196] ::google::protobuf::int32 trajectory_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph.pb.h  ( 50 )
[41] extern NodeIdDefaultTypeInternal _NodeId_default_instance_;
[44] extern PoseGraphDefaultTypeInternal _PoseGraph_default_instance_;
[47] extern PoseGraph_ConstraintDefaultTypeInternal _PoseGraph_Constraint_default_instance_;
[50] extern PoseGraph_LandmarkPoseDefaultTypeInternal _PoseGraph_LandmarkPose_default_instance_;
[53] extern SubmapIdDefaultTypeInternal _SubmapId_default_instance_;
[196] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[197] ::google::protobuf::int32 trajectory_id_;
[198] ::google::protobuf::int32 submap_index_;
[302] ::google::protobuf::int32 node_index_;
[422] ::cartographer::mapping::proto::SubmapId submap_id
[431] ::cartographer::mapping::proto::NodeId node_id
[440] ::cartographer::transform::proto::Rigid3d relative_pose
[467] double translation_weight_;
[468] double rotation_weight_;
[469] int tag_;
[568] ::std::string landmark_id
[577] ::cartographer::transform::proto::Rigid3d global_pose
[583] ::google::protobuf::internal::ArenaStringPtr landmark_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_node_data.pb.h  ( 27 )
[40] extern TrajectoryNodeDataDefaultTypeInternal _TrajectoryNodeData_default_instance_;
[166] ::cartographer::transform::proto::Quaterniond gravity_alignment
[175] ::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud
[184] ::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud
[193] ::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud
[202] ::cartographer::transform::proto::Rigid3d local_pose
[222] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[231] ::google::protobuf::int64 timestamp_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_builder_options.pb.h  ( 62 )
[42] extern AllTrajectoryBuilderOptionsDefaultTypeInternal _AllTrajectoryBuilderOptions_default_instance_;
[45] extern InitialTrajectoryPoseDefaultTypeInternal _InitialTrajectoryPose_default_instance_;
[48] extern SensorIdDefaultTypeInternal _SensorId_default_instance_;
[51] extern TrajectoryBuilderOptionsDefaultTypeInternal _TrajectoryBuilderOptions_default_instance_;
[54] extern TrajectoryBuilderOptionsWithSensorIdsDefaultTypeInternal _TrajectoryBuilderOptionsWithSensorIds_default_instance_;
[57] extern TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal _TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
[196] ::cartographer::transform::proto::Rigid3d relative_pose
[213] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[215] ::google::protobuf::int64 timestamp_;
[216] ::google::protobuf::int32 to_trajectory_id_;
[325] double min_covered_area_;
[326] ::google::protobuf::int32 fresh_submaps_count_;
[327] ::google::protobuf::int32 min_added_submaps_count_;
[423] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options
[432] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options
[441] ::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose
[450] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d
[472] bool pure_localization_;
[473] bool border_flag_;
[618] ::google::protobuf::internal::ArenaStringPtr id_;
[619] int type_;
[725] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap.pb.h  ( 24 )
[41] extern Submap2DDefaultTypeInternal _Submap2D_default_instance_;
[44] extern Submap3DDefaultTypeInternal _Submap3D_default_instance_;
[158] ::cartographer::transform::proto::Rigid3d local_pose
[184] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[187] ::google::protobuf::int32 num_range_data_;
[188] bool finished_;
[291] ::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid
[300] ::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/serialization.pb.h  ( 64 )
[45] extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
[48] extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
[51] extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
[54] extern LocalSlamResultDataDefaultTypeInternal _LocalSlamResultData_default_instance_;
[57] extern NodeDefaultTypeInternal _Node_default_instance_;
[60] extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
[63] extern SerializationHeaderDefaultTypeInternal _SerializationHeader_default_instance_;
[66] extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
[69] extern SubmapDefaultTypeInternal _Submap_default_instance_;
[72] extern TrajectoryDataDefaultTypeInternal _TrajectoryData_default_instance_;
[186] ::cartographer::mapping::proto::SubmapId submap_id
[195] ::cartographer::mapping::proto::Submap2D submap_2d
[204] ::cartographer::mapping::proto::Submap3D submap_3d
[209] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[306] ::cartographer::mapping::proto::NodeId node_id
[315] ::cartographer::mapping::proto::TrajectoryNodeData node_data
[416] ::cartographer::sensor::proto::ImuData imu_data
[429] ::google::protobuf::int32 trajectory_id_;
[523] ::cartographer::sensor::proto::OdometryData odometry_data
[630] ::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data
[737] ::cartographer::sensor::proto::LandmarkData landmark_data
[844] ::cartographer::transform::proto::Quaterniond imu_calibration
[853] ::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map
[873] double gravity_constant_;
[994] ::google::protobuf::int64 timestamp_;
[1091] ::google::protobuf::uint32 format_version_;
[1199] ::cartographer::mapping::proto::PoseGraph pose_graph
[1208] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options
[1235] ::cartographer::mapping::proto::TrajectoryData trajectory_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/map_builder_options.pb.h  ( 21 )
[39] extern MapBuilderOptionsDefaultTypeInternal _MapBuilderOptions_default_instance_;
[153] ::cartographer::mapping::proto::PoseGraphOptions pose_graph_options
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] bool use_trajectory_builder_2d_;
[185] bool use_trajectory_builder_3d_;
[186] bool collate_by_trajectory_;
[187] ::google::protobuf::int32 num_background_threads_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/connected_components.pb.h  ( 15 )
[38] extern ConnectedComponentsDefaultTypeInternal _ConnectedComponents_default_instance_;
[41] extern ConnectedComponents_ConnectedComponentDefaultTypeInternal _ConnectedComponents_ConnectedComponent_default_instance_;
[163] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph_options.pb.h  ( 29 )
[40] extern PoseGraphOptionsDefaultTypeInternal _PoseGraphOptions_default_instance_;
[154] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options
[163] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options
[210] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[213] ::google::protobuf::int32 optimize_every_n_nodes_;
[214] ::google::protobuf::int32 max_num_final_iterations_;
[215] double global_sampling_ratio_;
[216] double matcher_translation_weight_;
[217] double matcher_rotation_weight_;
[218] double global_constraint_search_after_n_seconds_;
[219] bool log_residual_histograms_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/motion_filter_options.pb.h  ( 17 )
[38] extern MotionFilterOptionsDefaultTypeInternal _MotionFilterOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double max_time_seconds_;
[168] double max_distance_meters_;
[169] double max_angle_radians_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap_visualization.pb.h  ( 47 )
[39] extern SubmapListDefaultTypeInternal _SubmapList_default_instance_;
[42] extern SubmapList_SubmapEntryDefaultTypeInternal _SubmapList_SubmapEntry_default_instance_;
[45] extern SubmapList_TrajectorySubmapListDefaultTypeInternal _SubmapList_TrajectorySubmapList_default_instance_;
[48] extern SubmapQueryDefaultTypeInternal _SubmapQuery_default_instance_;
[51] extern SubmapQuery_RequestDefaultTypeInternal _SubmapQuery_Request_default_instance_;
[54] extern SubmapQuery_ResponseDefaultTypeInternal _SubmapQuery_Response_default_instance_;
[57] extern SubmapQuery_Response_SubmapTextureDefaultTypeInternal _SubmapQuery_Response_SubmapTexture_default_instance_;
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] ::google::protobuf::int32 submap_version_;
[496] ::google::protobuf::int32 submap_index_;
[497] ::google::protobuf::int32 trajectory_id_;
[605] ::cartographer::transform::proto::Rigid3d slice_pose
[629] ::google::protobuf::internal::ArenaStringPtr cells_;
[631] ::google::protobuf::int32 width_;
[632] ::google::protobuf::int32 height_;
[633] double resolution_;
[746] ::std::string error_message
[759] ::google::protobuf::internal::ArenaStringPtr error_message_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory.pb.h  ( 26 )
[39] extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
[42] extern Trajectory_NodeDefaultTypeInternal _Trajectory_Node_default_instance_;
[45] extern Trajectory_SubmapDefaultTypeInternal _Trajectory_Submap_default_instance_;
[176] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[178] ::google::protobuf::int64 timestamp_;
[179] ::google::protobuf::int32 node_index_;
[286] ::google::protobuf::int32 submap_index_;
[412] ::google::protobuf::int32 trajectory_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/range_data_inserter_options.pb.h  ( 23 )
[40] extern RangeDataInserterOptionsDefaultTypeInternal _RangeDataInserterOptions_default_instance_;
[201] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d
[212] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[214] int range_data_inserter_type_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h  ( 19 )
[39] extern RealTimeCorrelativeScanMatcherOptionsDefaultTypeInternal _RealTimeCorrelativeScanMatcherOptions_default_instance_;
[175] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[176] double linear_search_window_;
[177] double angular_search_window_;
[178] double translation_delta_cost_weight_;
[179] double rotation_delta_cost_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h  ( 17 )
[39] extern FastCorrelativeScanMatcherOptions2DDefaultTypeInternal _FastCorrelativeScanMatcherOptions2D_default_instance_;
[169] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[170] double linear_search_window_;
[171] double angular_search_window_;
[172] ::google::protobuf::int32 branch_and_bound_depth_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h  ( 19 )
[40] extern CeresScanMatcherOptions2DDefaultTypeInternal _CeresScanMatcherOptions2D_default_instance_;
[156] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[179] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[181] double occupied_space_weight_;
[182] double translation_weight_;
[183] double rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h  ( 21 )
[40] extern CeresScanMatcherOptions3DDefaultTypeInternal _CeresScanMatcherOptions3D_default_instance_;
[168] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[191] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[195] double translation_weight_;
[196] double rotation_weight_;
[197] bool only_optimize_yaw_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h  ( 25 )
[39] extern FastCorrelativeScanMatcherOptions3DDefaultTypeInternal _FastCorrelativeScanMatcherOptions3D_default_instance_;
[193] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[194] double min_rotational_score_;
[195] double linear_xy_search_window_;
[196] ::google::protobuf::int32 branch_and_bound_depth_;
[197] ::google::protobuf::int32 full_resolution_depth_;
[198] double linear_z_search_window_;
[199] double angular_search_window_;
[200] double min_low_resolution_score_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h  ( 33 )
[43] extern ConstraintBuilderOptionsDefaultTypeInternal _ConstraintBuilderOptions_default_instance_;
[159] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options
[168] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d
[177] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options
[186] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d
[233] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[238] double sampling_ratio_;
[239] double max_constraint_distance_;
[240] double min_score_;
[241] double global_localization_min_score_;
[242] bool log_matches_;
[243] double loop_closure_translation_weight_;
[244] double loop_closure_rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h  ( 35 )
[40] extern OptimizationProblemOptionsDefaultTypeInternal _OptimizationProblemOptions_default_instance_;
[156] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[227] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[229] double huber_scale_;
[230] double acceleration_weight_;
[231] double rotation_weight_;
[232] double fixed_frame_pose_translation_weight_;
[233] double fixed_frame_pose_rotation_weight_;
[234] bool fix_z_in_3d_;
[235] bool log_solver_summary_;
[236] double local_slam_pose_translation_weight_;
[237] double local_slam_pose_rotation_weight_;
[238] double odometry_translation_weight_;
[239] double odometry_rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.h  ( 17 )
[38] extern RangeDataInserterOptions3DDefaultTypeInternal _RangeDataInserterOptions3D_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double hit_probability_;
[168] double miss_probability_;
[169] ::google::protobuf::int32 num_free_space_voxels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/submaps_options_3d.pb.h  ( 21 )
[39] extern SubmapsOptions3DDefaultTypeInternal _SubmapsOptions3D_default_instance_;
[153] ::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] double high_resolution_;
[185] double high_resolution_max_range_;
[186] double low_resolution_;
[187] ::google::protobuf::int32 num_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/hybrid_grid.pb.h  ( 18 )
[38] extern HybridGridDefaultTypeInternal _HybridGrid_default_instance_;
[202] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[211] float resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h  ( 37 )
[43] extern LocalTrajectoryBuilderOptions3DDefaultTypeInternal _LocalTrajectoryBuilderOptions3D_default_instance_;
[157] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options
[166] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options
[175] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options
[184] ::cartographer::mapping::proto::SubmapsOptions3D submaps_options
[193] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options
[202] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options
[249] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[256] float min_range_;
[257] float max_range_;
[258] ::google::protobuf::int32 num_accumulated_range_data_;
[259] float voxel_filter_size_;
[260] double imu_gravity_time_constant_;
[261] bool use_online_correlative_scan_matching_;
[262] ::google::protobuf::int32 rotational_histogram_size_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/submaps_options_2d.pb.h  ( 17 )
[40] extern SubmapsOptions2DDefaultTypeInternal _SubmapsOptions2D_default_instance_;
[154] ::cartographer::mapping::proto::GridOptions2D grid_options_2d
[163] ::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options
[174] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[177] ::google::protobuf::int32 num_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d_options.pb.h  ( 23 )
[39] extern GridOptions2DDefaultTypeInternal _GridOptions2D_default_instance_;
[208] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[209] int grid_type_;
[210] float resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid.pb.h  ( 10 )
[38] extern ProbabilityGridDefaultTypeInternal _ProbabilityGrid_default_instance_;
[148] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/cell_limits.pb.h  ( 15 )
[38] extern CellLimitsDefaultTypeInternal _CellLimits_default_instance_;
[160] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[161] ::google::protobuf::int32 num_x_cells_;
[162] ::google::protobuf::int32 num_y_cells_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/map_limits.pb.h  ( 17 )
[40] extern MapLimitsDefaultTypeInternal _MapLimits_default_instance_;
[163] ::cartographer::mapping::proto::CellLimits cell_limits
[174] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[177] double resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h  ( 43 )
[43] extern LocalTrajectoryBuilderOptions2DDefaultTypeInternal _LocalTrajectoryBuilderOptions2D_default_instance_;
[157] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options
[166] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options
[175] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options
[184] ::cartographer::mapping::proto::SubmapsOptions2D submaps_options
[193] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options
[202] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options
[267] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[274] float min_z_;
[275] float max_z_;
[276] float voxel_filter_size_;
[277] bool use_online_correlative_scan_matching_;
[278] bool use_imu_data_;
[279] float min_range_;
[280] float max_range_;
[281] double imu_gravity_time_constant_;
[282] float missing_data_ray_length_;
[283] ::google::protobuf::int32 num_accumulated_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.h  ( 17 )
[38] extern ProbabilityGridRangeDataInserterOptions2DDefaultTypeInternal _ProbabilityGridRangeDataInserterOptions2D_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double hit_probability_;
[168] double miss_probability_;
[169] bool insert_free_space_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d.pb.h  ( 32 )
[40] extern Grid2DDefaultTypeInternal _Grid2D_default_instance_;
[43] extern Grid2D_CellBoxDefaultTypeInternal _Grid2D_CellBox_default_instance_;
[177] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[178] ::google::protobuf::int32 max_x_;
[179] ::google::protobuf::int32 max_y_;
[180] ::google::protobuf::int32 min_x_;
[181] ::google::protobuf::int32 min_y_;
[303] ::cartographer::mapping::proto::Grid2D_CellBox known_cells_box
[324] ::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d
[340] float min_correspondence_cost_;
[341] float max_correspondence_cost_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/internal/legacy_serialized_data.pb.h  ( 24 )
[39] extern LegacySerializedDataDefaultTypeInternal _LegacySerializedData_default_instance_;
[171] ::cartographer::mapping::proto::ImuData imu_data
[180] ::cartographer::mapping::proto::OdometryData odometry_data
[189] ::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data
[198] ::cartographer::mapping::proto::TrajectoryData trajectory_data
[207] ::cartographer::mapping::proto::LandmarkData landmark_data
[212] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/timestamped_transform.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/transform.h  ( 11 )
[63] Eigen::Quaternion<T> normalized_quaternion = quaternion.normalized();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/transform_interpolation_buffer.h  ( 3 )
[60] std::vector<TimestampedTransform> timestamped_transforms_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform_test_helpers.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform.h  ( 13 )
[92] Vector translation_;
[93] Rotation2D rotation_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/transform/proto/transform.pb.h  ( 36 )
[38] extern QuaterniondDefaultTypeInternal _Quaterniond_default_instance_;
[41] extern QuaternionfDefaultTypeInternal _Quaternionf_default_instance_;
[44] extern Rigid2dDefaultTypeInternal _Rigid2d_default_instance_;
[47] extern Rigid2fDefaultTypeInternal _Rigid2f_default_instance_;
[50] extern Rigid3dDefaultTypeInternal _Rigid3d_default_instance_;
[53] extern Rigid3fDefaultTypeInternal _Rigid3f_default_instance_;
[56] extern Vector2dDefaultTypeInternal _Vector2d_default_instance_;
[59] extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
[62] extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
[65] extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
[68] extern Vector4fDefaultTypeInternal _Vector4f_default_instance_;
[190] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[191] double x_;
[192] double y_;
[407] double z_;
[636] float t_;
[754] double w_;
[979] double rotation_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/task.h  ( 4 )
[52] Task dependent_task
[58] void SetThreadPool(ThreadPoolInterface* thread_pool) EXCLUDES(mutex_);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/histogram.h  ( 3 )
[34] std::vector<float> values_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/rate_timer.h  ( 11 )
[117] double squared_sum = 0.;
[129] std::deque<Event> events_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/ceres_solver_options.h  ( 2 )
[28]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/port.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/make_unique.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary.h  ( 13 )
[53]  std::unique_ptr<FileResolver> file_resolver
[109]  ReferenceCount reference_count
[123] static int LuaRead(lua_State* L);
[126] static int LuaInclude(lua_State* L);
[129] int index_into_reference_table_;
[143] std::vector<std::string> included_files_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/optional.h  ( 2 )
[63] std::unique_ptr<T> value_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/lua.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/mutex.h  ( 6 )
[75] void Await(Predicate predicate) REQUIRES(this) {
[87] std::unique_lock<std::mutex> lock_;
[91] std::condition_variable condition_;
[92] std::mutex mutex_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/configuration_file_resolver.h  ( 2 )
[43] std::vector<std::string> configuration_files_directories_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary_test_helpers.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/time.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/blocking_queue.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/thread_pool.h  ( 2 )
[73] void NotifyDependenciesCompleted(Task* task) EXCLUDES(mutex_) override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/math.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/DataChecking.h  ( 24 )
[43] uint64_t SYS_time;
[45] mapping::SubmapId s_id;
[48] transform::Rigid3d global_Pose;
[49] transform::Rigid3d local_Pose;
[50] int range_data_size;
[66]  DataType last_data
[68] uint64_t sys_time
[70] uint64_t delt_time
[70] Eigen::Vector3d curr_v
[72] Eigen::Vector3d curr_theta
[92] DataType last_data_m;
[94] bool data_checking_init_m;
[96] bool openLog_m;
[98] int base_time_count_m;
[100] std::mutex update_data_lck;
[102] std::mutex init_data_lck;
[104] std::ofstream ofs_localdata_checking;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/lockless_queue.h  ( 4 )
[97] std::atomic<Node> list_head
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/setting.h  ( 62 )
[19] transform::Rigid3d Unopti_pose;
[20] transform::Rigid3d Opti_pose;
[29] transform::Rigid3d output_pose;
[47] bool relocal_success;
[68] bool closure_success;
[69] bool update_home;
[104] SensorType imu_state;
[105] SensorType odm_state;
[113] extern std::string gridmap_save_path;
[114] extern bool IsSaveGridMap;
[115] extern bool IsReadGridMap;
[119] extern std::string stop_sensor_id;
[120] extern std::string save_path;
[121] extern Eigen::Quaterniond q_init;
[122] extern Eigen::Vector3d t_init;
[123] extern bool run_T_init_pose;
[124] extern Eigen::Quaterniond q_end;
[125] extern Eigen::Vector3d t_end;
[126] extern Eigen::Vector3d t_ob;
[127] extern Eigen::Vector3d k_odom;
[128] extern Eigen::Vector3d init_kk_odm;
[129] extern bool run_T_end_pose;
[130] extern Opti_Unopti_pose pose_control;
[131] extern RelocalState relocal_state;
[132] extern ClosureState closure_state;
[133] extern Eigen::Vector3d odm_slip_vel;
[136] extern std::vector<mapping::NodeId> bad_lidars;
[137] extern std::vector<mapping::NodeId> corridor_lidars;
[138] extern std::vector<Point2f> candia_pos;
[139] extern std::vector<Point2f> candia_pos_check;
[140] extern std::vector<double> candia_angle;
[141] extern std::vector<double> best_csm_pose;
[142] extern bool border_flag;
[143] extern bool is_final_opti;
[144] extern bool is_lidar_bad;
[145] extern bool is_corridor;
[146] extern bool slip_state;
[147] extern bool IsRelocation;
[148] extern bool RelocationOK;
[149] extern bool open_obstacle_map;
[150] extern bool open_print;
[151] extern int imu_type;
[152] extern int Clean_state;
[153] extern int stable_kk;
[154] extern int OldNodeNum;
[155] extern int open_debug_log;
[157] extern int current_submap_id;
[158] extern RunType run_type;
[159] extern bool need_stop;
[160] extern float MIN_MATCH_SCORE;
[161] extern int MIN_CANDI_NUM;
[162] extern double relocal_distance;
[163] extern float map_comp_ration;
[164] extern int last_loop_node;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/fixed_ratio_sampler.h  ( 3 )
[48] int64 num_pulses_ = 0;
[49] int64 num_samples_ = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/common/proto/ceres_solver_options.pb.h  ( 17 )
[38] extern CeresSolverOptionsDefaultTypeInternal _CeresSolverOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] bool use_nonmonotonic_steps_;
[168] ::google::protobuf::int32 max_num_iterations_;
[169] ::google::protobuf::int32 num_threads_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/ground_truth/relations_text_file.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/ground_truth/proto/relations.pb.h  ( 22 )
[39] extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
[42] extern RelationDefaultTypeInternal _Relation_default_instance_;
[179] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[181] ::google::protobuf::int64 timestamp1_;
[182] ::google::protobuf::int64 timestamp2_;
[183] double covered_distance_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/points_processor.h  ( 1 )
[43] std::unique_ptr<PointsBatch> points_batch
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/coloring_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/xray_points_processor.h  ( 19 )
[51]  FileWriterFactory file_writer_factory
[62] float sum_r = 0.;
[63] float sum_g = 0.;
[64] float sum_b = 0.;
[79] FileWriterFactory file_writer_factory_;
[83] std::vector<mapping::Floor> floors_;
[89] std::vector<Aggregation> aggregations_;
[92] Eigen::AlignedBox3i bounding_box_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/outlier_removing_points_processor.h  ( 8 )
[80] State state_;
[81] mapping::HybridGridBase<VoxelData> voxels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/file_writer.h  ( 4 )
[62] std::ofstream out_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/fake_file_writer.h  ( 5 )
[42] bool is_closed_;
[43] std::shared_ptr<std::vector<char>> content_;
[44] std::string filename_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/min_max_range_filtering_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/submap_painter.h  ( 17 )
[51] ::cartographer::transform::Rigid3d slice_pose;
[54] std::vector<uint32_t> cairo_data;
[58] int metadata_version = -1;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/serialization_format_migration.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_deserializer.h  ( 5 )
[64] mapping::proto::SerializationHeader header_;
[65] mapping::proto::SerializedData pose_graph_;
[66] mapping::proto::SerializedData all_trajectory_builder_options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_interface.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/ply_writing_points_processor.h  ( 9 )
[29] PlyWritingPointsProcessor(std::unique_ptr<FileWriter> file_writer, PointsProcessor* next);
[47] int64 num_points_;
[48] bool has_colors_;
[49] bool has_intensities_;
[50] std::unique_ptr<FileWriter> file_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/frame_id_filtering_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/counting_points_processor.h  ( 4 )
[45] int64 num_points_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/intensity_to_color_points_processor.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/image.h  ( 9 )
[41] UniqueCairoSurfacePtr MakeUniqueCairoSurfacePtr(cairo_surface_t* surface);
[47] UniqueCairoPtr MakeUniqueCairoPtr(cairo_t* surface);
[56] void WritePng(FileWriter* const file_writer);
[71] int width_;
[72] int height_;
[73] std::vector<uint32> pixels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/draw_trajectories.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/xyz_writing_points_processor.h  ( 5 )
[52] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/fixed_ratio_sampling_points_processor.h  ( 5 )
[55] std::unique_ptr<common::FixedRatioSampler> sampler_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/pcd_writing_points_processor.h  ( 8 )
[31] PcdWritingPointsProcessor(std::unique_ptr<FileWriter> file_writer, PointsProcessor* next);
[35]  FileWriterFactory file_writer_factory
[49] int64 num_points_;
[50] bool has_colors_;
[51] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/probability_grid_points_processor.h  ( 13 )
[69] std::unique_ptr<FileWriter> file_writer_;
[71] mapping::ProbabilityGridRangeDataInserter2D range_data_inserter_;
[72] mapping::ProbabilityGrid probability_grid_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/points_processor_pipeline_builder.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/points_batch.h  ( 9 )
[41] common::Time start_time;
[49] std::string frame_id;
[52] int trajectory_id;
[69] std::unordered_set<int> to_remove
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream.h  ( 5 )
[49] std::ofstream out_;
[65] std::string decompressed_data
[67] std::ifstream in_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/color.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/hybrid_grid_points_processor.h  ( 7 )
[47] mapping::RangeDataInserter3D range_data_inserter_;
[48] mapping::HybridGrid hybrid_grid_;
[49] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/io/null_points_processor.h  ( 1 )
[31] std::unique_ptr<PointsBatch> points_batch
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/collator_interface.h  ( 5 )
[46]  int trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/range_data.h  ( 9 )
[53]  float min_z
[53]  float max_z
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/timed_point_cloud_data.h  ( 12 )
[33] bool is_good_to_add_optimization;
[34] common::Setting::CurrLaserState c_states;
[39] Eigen::Vector4f point_time;
[41] size_t origin_index;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/compressed_point_cloud.h  ( 9 )
[56] std::vector<int32> point_data_;
[57] size_t num_points_;
[86] size_t remaining_points_;
[87] int32 remaining_points_in_current_block_;
[88] Eigen::Vector3f current_point_;
[89] Eigen::Vector3i current_block_coordinates_;
[90] std::vector<int32>::const_iterator input_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/map_by_time.h  ( 11 )
[75] auto data_it = trajectory.lower_bound(gap_start);
[76] auto data_end = trajectory.upper_bound(gap_end);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/odometry_data.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/data.h  ( 2 )
[40]  mapping::TrajectoryBuilderInterface trajectory_builder
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/imu_data.h  ( 5 )
[29] Eigen::Vector3d linear_acceleration;
[30] Eigen::Vector3d angular_velocity;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/fixed_frame_pose_data.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/point_cloud.h  ( 8 )
[63]  float min_z
[63]  float max_z
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/landmark_data.h  ( 8 )
[34] transform::Rigid3d landmark_to_tracking_transform;
[35] double translation_weight;
[36] double rotation_weight;
[41] std::vector<LandmarkObservation> landmark_observations;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/sensor.pb.h  ( 44 )
[39] extern CompressedPointCloudDefaultTypeInternal _CompressedPointCloud_default_instance_;
[42] extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
[45] extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
[48] extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
[51] extern LandmarkData_LandmarkObservationDefaultTypeInternal _LandmarkData_LandmarkObservation_default_instance_;
[54] extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
[57] extern RangeDataDefaultTypeInternal _RangeData_default_instance_;
[60] extern TimedPointCloudDataDefaultTypeInternal _TimedPointCloudData_default_instance_;
[188] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[191] ::google::protobuf::int32 num_points_;
[311] ::google::protobuf::int64 timestamp_;
[531] ::cartographer::transform::proto::Vector3d linear_acceleration
[540] ::cartographer::transform::proto::Vector3d angular_velocity
[876] ::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform
[894] ::google::protobuf::internal::ArenaStringPtr id_;
[896] double translation_weight_;
[897] double rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h  ( 17 )
[38] extern AdaptiveVoxelFilterOptionsDefaultTypeInternal _AdaptiveVoxelFilterOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] float max_length_;
[168] float min_num_points_;
[169] float max_range_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/register.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/histogram.h  ( 6 )
[33]  int num_finite_buckets
[35]  double scale_factor
[35]  double max_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/counter.h  ( 1 )
[33] double by_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/family_factory.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer/usr/local/include/cartographer/metrics/gauge.h  ( 2 )
[33] double by_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FORB.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/TemplatedDatabase.h  ( 35 )
[29] static int MIN_COMMON_WORDS = 5;
[107]  bool use_di
[107]  int di_levels = 0
[175]  int max_results = 1
[175]  int max_id = -1
[258] EntryId entry_id;
[261] WordValue word_weight;
[303] bool m_use_di;
[307] int m_dilevels;
[310] InvertedFile m_ifile;
[313] DirectFile m_dfile;
[316] int m_nentries;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FeatureVector.h  ( 2 )
[42]  unsigned int i_feature
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h  ( 78 )
[109]  int L
[328] WordId word_id;
[390] NodeId parent_id
[390]  int current_level
[425] int m_k;
[428] int m_L;
[431] WeightingType m_weighting;
[434] ScoringType m_scoring;
[440] std::vector<Node> m_nodes;
[627] int expected_nodes = (int)((pow((double)m_k, (double)m_L + 1) - 1)/(m_k - 1));
[736] bool first_time = true;
[740] vector<int> last_association, current_association;
[795] double best_dist = F::distance(*(*fit), clusters[0]);
[921] vector<double> min_dists(pfeatures.size(), std::numeric_limits<double>::max());
[953] double dist_sum = std::accumulate(min_dists.begin(), min_dists.end(), 0.0);
[957] double cut_d;
[963] double d_up_now = 0;
[1217] unsigned int i_feature = 0;
[1299] NodeId final_id = 0;
[1308] double best_d = F::distance(feature, m_nodes[final_id].descriptor);
[1571] unsigned int nb_nodes, size_node;
[1621] float _weight;
[1622] unsigned int size_node = sizeof(m_nodes[0].parent) + F::L*sizeof(char) + sizeof(_weight) + sizeof(bool);
[1634] bool is_leaf = node.isLeaf(); f.write((char*)&is_leaf, sizeof(is_leaf));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FBrief.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/DBoW2.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/BowVector.cpp  ( 13 )
[63] LNorm norm_type
[106]  size_t W
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FClass.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/ScoringObject.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/QueryResults.h  ( 9 )
[26] EntryId Id;
[29] double Score;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FeatureVector.cpp  ( 3 )
[32]  unsigned int i_feature
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/FORB.cpp  ( 18 )
[42] FORB::L 8
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/ScoringObject.cpp  ( 4 )
[25] BowVector::const_iterator v1_it, v2_it;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DBoW2/BowVector.h  ( 5 )
[90] LNorm norm_type
[104]  size_t W
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/Timestamp.h  ( 8 )
[184] bool machine_friendly = false
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/Random.cpp  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/Random.h  ( 10 )
[105] static bool m_already_seeded;
[172] int m_min;
[174] int m_max;
[177] std::vector<int> m_values;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/Timestamp.cpp  ( 12 )
[81] string s_usecs = stime.substr(p+1, 6);
[198] bool machine_friendly
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/DUtils/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DBoW2/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/IO.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Types.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/DUtilsCV.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/GUI.h  ( 15 )
[262] bool m_attached;
[265] std::queue<tEvent> m_events;
[268] std::vector<int> m_valid_events;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Mat.h  ( 4 )
[80] int end_row = m.rows;
[81] int i_idx = (int)rows.size() - 1;
[84] int j_idx = i_idx - 1;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Drawing.h  ( 43 )
[212] cv::Scalar m_bg;
[215] int m_margin;
[218] cv::Mat m_canvas;
[221] double m_cx, m_cy, m_uppx, m_uppy;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Transformations.h  ( 9 )
[49] double X
[49]  double Y
[49]  double Z
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtilsCV/Geometry.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/BRIEF256.h  ( 22 )
[123]  bool treat_image = true
[181] int m_patch_size;
[184] Type m_type;
[187] std::vector<int> m_x1, m_x2;
[188] std::vector<int> m_y1, m_y2;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/DVision.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/BRIEF.h  ( 9 )
[121]  bool treat_image = true
[179] int m_bit_length;
[182] int m_patch_size;
[185] Type m_type;
[188] std::vector<int> m_x1, m_x2;
[189] std::vector<int> m_y1, m_y2;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/PLYFile.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/BundleCamera.h  ( 7 )
[36] cv::Mat R;
[114]  int N
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/HSolver.h  ( 11 )
[68]  double reprojection_error
[68]  int min_points = 5
[68]  int max_its = 500
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/Matches.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/PatchFile.h  ( 11 )
[35] std::vector<int> strong_visibility_list;
[37] std::vector<int> weak_visibility_list;
[48]  bool use_weak_list = false
[75]  int pt_idx
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/FSolver.h  ( 15 )
[66]  double reprojection_error
[66]  int min_points = 9
[66]  int max_its = 500
[90]  cv::Mat Q
[116] cv::Mat m_N;
[119] cv::Mat m_N_t;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/PMVSCamera.h  ( 6 )
[31] cv::Mat P;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/ImageFunctions.h  ( 7 )
[42]  int final_size = -1
[52]  unsigned int patch_size
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DVision/PixelPointFile.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/LineFile.h  ( 6 )
[186] FILE_MODES m_mode;
[188] std::fstream m_f;
[190] std::string m_next_line;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/Timestamp.h  ( 8 )
[183] bool machine_friendly = false
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/ConfigFile.h  ( 11 )
[212] LineFile m_file;
[214] int m_unknowns;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/FileModes.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/Profiler.h  ( 15 )
[214] std::string m_last_profile;
[217] float m_scale;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/FileFunctions.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/Random.h  ( 10 )
[105] static bool m_already_seeded;
[172] int m_min;
[174] int m_max;
[177] std::vector<int> m_values;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/BinaryFile.h  ( 8 )
[241] FILE_MODES m_mode;
[243] std::fstream m_f;
[248] int m_is_little_endian;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/StringFunctions.h  ( 11 )
[35]  int max_splits = -1
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/DebugFunctions.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/DUtils.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/dirent_win.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/DException.h  ( 1 )
[58] std::string m_message;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/LUT.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/TimeManager.h  ( 15 )
[92]  bool moving_backwards = false
[107] float m_frequency;
[137]  bool decrease_indexes
[236] std::vector<tEntry> m_entries;
[238] bool m_is_sorted;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/STL.h  ( 13 )
[36]  bool preserve_order = true
[191] int i_idx = (int)indices.size() - 1;
[219] int j_idx = i_idx - 1;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/include/DUtils/Math.hpp  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Mat.cpp  ( 4 )
[39] int i_idx = (int)rows.size() - 1;
[85] int end_row = m.rows;
[89] int j_idx = i_idx - 1;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/IO.cpp  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Geometry.cpp  ( 6 )
[25] int N = (a.rows > 1 ? a.rows : a.cols);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Drawing.cpp  ( 65 )
[228]  std::vector<cv::Point2f> _box
[266] cv::Mat P;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/GUI.cpp  ( 32 )
[65]  tWinHandler _hwnd
[77] cv::Mat image_rgb;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Transformations.cpp  ( 28 )
[21]  double X
[21]  double Y
[21]  double Z
[163] cv::Mat Rt = R.t();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtilsCV/Types.cpp  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/BRIEF.cpp  ( 19 )
[45]  bool treat_image
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/Matches.cpp  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/BundleCamera.cpp  ( 9 )
[201]  int N
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/PMVSCamera.cpp  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/PatchFile.cpp  ( 10 )
[126]  bool use_weak_list
[172]  int pt_idx
[184] int img_idx;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/PLYFile.cpp  ( 7 )
[119] int N;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/FSolver.cpp  ( 43 )
[58]  double reprojection_error
[58]  int min_points
[58]  int max_its
[60] cv::Mat F = findFundamentalMat(P1, P2, reprojection_error, min_points, NULL, false, p, max_its);
[69]  bool compute_F
[69]  int MAX_ITS
[72] int N = (P1.rows > P1.cols ? P1.rows : P1.cols);
[96] cv::Mat Q1, Q2;
[97] cv::Mat Qc1, Qc2;
[105] int best_ninliers = 0;
[106] cv::Mat best_status;
[135] cv::Mat Fc = _computeF(Qc1, Qc2, i_model);
[146] cv::Mat sq_ab, norms;
[214] cv::Mat Fc12 = _computeF(Qc1, Qc2, best_i);
[232]  cv::Mat Q
[347] double inv_cond = svd.w.ptr<double>()[ svd.w.rows-1 ] / svd.w.ptr<double>()[0];
[353] cv::Mat Fm = svd.vt.row(8).reshape(0, 3);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/PixelPointFile.cpp  ( 6 )
[61] int N;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/HSolver.cpp  ( 39 )
[43]  double reprojection_error
[43]  int min_points
[43]  int max_its
[45] cv::Mat H = findHomography(P1, P2, reprojection_error, min_points, NULL, false, p, max_its);
[54]  bool compute_H
[54]  int MAX_ITS
[57] int N = (P1.rows > P1.cols ? P1.rows : P1.cols);
[81] cv::Mat Q1, Q2;
[82] cv::Mat Qc1, Qc2;
[90] int best_ninliers = 0;
[91] cv::Mat best_status;
[120] cv::Mat Hc = _computeH(Qc1, Qc2, i_model);
[140] cv::Mat sq_ab;
[196] cv::Mat Hc12 = _computeH(Qc1, Qc2, best_i);
[266] double inv_cond = svd.w.ptr<double>()[ svd.w.rows-1 ] / svd.w.ptr<double>()[0];
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DVision/ImageFunctions.cpp  ( 19 )
[22]  int final_size
[29] float rotation_margin = kp.size / 2.f * 0.414213562373095;
[48] cv::Mat r_patch;
[81]  unsigned int patch_size
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/BinaryFile.cpp  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/Random.cpp  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/Profiler.cpp  ( 16 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/LineFile.cpp  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/TimeManager.cpp  ( 15 )
[73]  bool decrease_indexes
[75] int removed_id = -1;
[197] Timestamp desired_time;
[262]  bool moving_backwards
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/Timestamp.cpp  ( 12 )
[81] string s_usecs = stime.substr(p+1, 6);
[198] bool machine_friendly
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/FileFunctions.cpp  ( 15 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/DebugFunctions.cpp  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/StringFunctions.cpp  ( 17 )
[21]  int max_splits
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/LUT.cpp  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/src/DUtils/ConfigFile.cpp  ( 13 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/DLib/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetGridMapSrv.h  ( 1 )
[24] slam_msgs::OccupancyGrid s_grid_map;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/CorrectSemanticMapSrv.h  ( 2 )
[23] perception_msgs::SenmaticMap s_sen_map;
[24] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/InitSlamSrv.h  ( 2 )
[16] slam_msgs::SlamInitInfo s_info;
[21] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetRampPointSrv.h  ( 3 )
[15] int s_x;
[16] int s_y;
[28] std::vector<RampCoordinate> s_ramp_points;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/SetMapOperationSrv.h  ( 2 )
[25] MapOpType s_op_map;
[30] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetPoseSrv.h  ( 3 )
[20] std::uint64_t s_timestamp;
[26] slam_msgs::SlamResult s_pose;
[27] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/StartSlamSrv.h  ( 2 )
[16] slam_msgs::SlamStartInfo s_info;
[21] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/PauseSlamSrv.h  ( 2 )
[21] std::uint64_t s_timestamp;
[22] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetCurrentPoseSrv.h  ( 1 )
[25] slam_msgs::SlamResult s_pose;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/StopSlamSrv.h  ( 2 )
[17] slam_msgs::SlamEndInfo s_end_info;
[22] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/GetHighReflectionPointSrv.h  ( 3 )
[15] int s_x;
[16] int s_y;
[28] std::vector<RefCoordinate> s_ref_points;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/SetRelocalizationSrv.h  ( 1 )
[21] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/WakeupSlamSrv.h  ( 1 )
[21] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/slam/DeInitSlamSrv.h  ( 3 )
[16] uint64_t s_time;
[17] slam_msgs::PoseInit s_pose;
[22] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/StartSrv.h  ( 1 )
[19] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/StopSrv.h  ( 2 )
[17] uint64_t s_time;
[22] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/GetPoseSrv.h  ( 2 )
[25] recurrence_msgs::Result s_pose;
[26] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/DeInitSrv.h  ( 2 )
[16] uint64_t s_time;
[21] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/recurrence/InitSrv.h  ( 2 )
[21] bool s_success;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/ResumeNavSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/StopNavSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/SelectModeNavSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/InitNavSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/CancelNavSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/PauseNavSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/DeInitNavSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/TaskNavSrv.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/EmergencyPauseNavSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/StartNavSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/nav/GridMap.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerPauseSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerInitSrv.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerDeInitSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerResultSrv.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerStartSrv.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/marker/MarkerStopSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCInitSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCResultSrv.h  ( 4 )
[18] cv::Mat K1, D1, R1, P1;
[19] cv::Mat K2, D2, R2, P2;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCDeInitSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCPauseSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCStartSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sscc/SSCCStopSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/DeInitDepthSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/RestartDepthSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/StartDepthSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/StopDepthSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/InitDepthSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/depth/PauseDepthSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImuFreqSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/WifiConfigSrv.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorStop.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImseeParamSrv.h  ( 40 )
[9] double _a_max;
[10] double _g_max;
[11] double _sigma_g_c;
[12] double _sigma_a_c;
[13] double _sigma_bg;
[14] double _sigma_ba;
[15] double _sigma_gw_c;
[16] double _sigma_aw_c;
[17] double _tau;
[18] double _g;
[35] bool s_d_receive;
[36] bool s_d_result;
[37] bool s_d_track;
[38] bool s_d_lba;
[39] bool s_d_map;
[40] bool s_d_lpc;
[41] bool s_d_opt;
[44] int _numKeyframes;
[45] int _numImuFrames;
[46] int _ceres_minIterations;
[47] int _ceres_maxIterations;
[48] double _ceres_timeLimit;
[49] int detection_threshold;
[50] int detection_octaves;
[51] int detection_maxNoKeypoints;
[63] int _width;
[65] int _height;
[145] int _camera_channel = 1;
[146] double _baseline = 0.12;
[147] IMUParameter _imu;
[148] ModuleInfo _device;
[149] SlamParameter _slam;
[150] sensor_srvs::SDebugSet _s_debug;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorServiceTypes.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/BluetoothSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImseeAutoLightSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImseeIrSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/MemorySrv.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/AudioSrv.h  ( 4 )
[11] std::string MusicFile;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorInit.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/ImseeTxSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorControl.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/AutoChargeSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/LaserCtrl.h  ( 5 )
[15] LaserCmdType Type;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SysTimeSrv.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SetLedSrv.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorDeinit.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/CpuTemperatureSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SensorStart.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/sensor/SelfTest.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/DeInitTopoSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/CreateTopoSrv.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/SetTopoMapSrv.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/RoutePath.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/InitTopoSrv.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/GridMap.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/topo/GetPathViaUUID.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/SaveMap.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/Stop.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/Start.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/Init.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/LoadMap.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/srv/perception/DeInit.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/SlamResult.h  ( 3 )
[24] std::uint64_t s_time;
[27] SlamRunState s_state;
[28] ElevatorState s_elevator;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/SlamInitInfo.h  ( 3 )
[8] std::uint64_t s_timestamp;
[9] std::string s_param_path;
[10] std::string s_log_path;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/OccupancyGrid.h  ( 8 )
[10] int s_x;
[11] int s_y;
[23] std::uint64_t s_time;
[24] int s_width;
[25] int s_height;
[26] float s_resolution;
[27] MapState s_map_state;
[28] std::vector<grid> s_grid_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/EndInfo.h  ( 3 )
[19] std::uint64_t s_timestamp;
[20] std::string s_map_path;
[21] PoseEnd s_end_pose;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/StartInfo.h  ( 7 )
[14] std::uint64_t s_timestamp;
[15] RunMode s_run_mode;
[16] std::string s_param_path;
[17] std::string s_log_path;
[18] std::string s_map_path;
[19] PoseInit s_init_pose;
[20] ElevatorInfo s_elevator_info;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/ElevatorInfo.h  ( 5 )
[23] ElevatorRunMode s_elevator_mode;
[24] PoseInit s_pose;
[25] std::string s_map_path;
[26] int s_elevator_num;
[27] int s_elevator_serial_num;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/SlamState.h  ( 2 )
[22] std::uint64_t s_timestamp;
[23] SlamSystemState s_slamstate;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/slam/SlamErrorInfo.h  ( 1 )
[8] error_msgs::ErrorMessage s_error_msg;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/recurrence/Result.h  ( 1 )
[8] std::uint64_t s_time;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/recurrence/InitInfo.h  ( 3 )
[7] std::uint64_t s_timestamp;
[8] std::string s_param_path;
[9] std::string s_log_path;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/server/state/Result.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/server/state/ResultTest.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/nav/TaskStatus.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/nav/SpeedControl.h  ( 4 )
[9] int Id;
[10] double Speed_Linear;
[11] double Speed_Angle;
[12] std::uint64_t TimeStamp;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/nav/GetWorkLengthNTime.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/common/error/ErrorCode.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/common/error/ErrorMessage.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/common/base/Time.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/common/base/Data.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/marker/MarkerResult.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/depth/DepthPointCloud.h  ( 9 )
[18] std::uint64_t frame_id;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/depth/DepthMatrix.h  ( 5 )
[7] std::uint64_t frame_id;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/depth/CalibrationImage.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/DropEvent.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/MachineMode.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/PointCloud2.h  ( 14 )
[34] bool is_bigendian;
[35] std::uint32_t point_step;
[36] std::uint32_t row_step;
[38] bool is_dense;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/BumperEvent.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/TofGrayImg.h  ( 5 )
[15] std::uint64_t time_stamp;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/TofDepthImg.h  ( 5 )
[16] std::uint64_t time_stamp;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/UltraData.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/TofDepthData.h  ( 12 )
[12] float X;
[13] float Y;
[14] float Z;
[27] std::uint64_t time_stamp;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/CliffEvent.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/SensorTopicTypes.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/BluetoothMsg.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/ImgMsg.h  ( 14 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/TofPointCloud.h  ( 9 )
[9] float X;
[10] float Y;
[11] float Z;
[21] std::uint64_t time_stamp;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/WifiStatus.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/WallSensorMsg.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/PowerBoardData.h  ( 15 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/WheelSpeedMsg.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/LightFlowMsg.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/ChargePosition.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/LaserScan.h  ( 10 )
[15] float angle_min;
[16] float angle_max;
[17] float angle_increment;
[18] float time_increment;
[19] float scan_time;
[20] float range_min;
[21] float range_max;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/EncoderMsg.h  ( 4 )
[11] std::uint64_t EncodeR;
[12] std::uint64_t EncodeL;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/sensor/ImuMsg.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/hmi/generated/request_generated.h  ( 172 )
[318] flatbuffers::FlatBufferBuilder &fbb_;
[319] flatbuffers::uoffset_t start_;
[338] FRequestVideoBuilder builder_(_fbb);
[415] flatbuffers::Offset<RBN100::FSenceInfo> sence_info
[458] flatbuffers::Offset<RBN100::FMapInfo> map_info
[586] flatbuffers::Offset<RBN100::FPoseNodeInfo> pose_info
[629] flatbuffers::Offset<RBN100::FStartNodeInfo> start_info
[672] flatbuffers::Offset<RBN100::FStandByNodeInfo> standby_info
[715] flatbuffers::Offset<RBN100::FPassNodeInfo> pass_info
[758] flatbuffers::Offset<RBN100::FJMRNodeInfo> jmr_info
[897] int64_t ct_time
[900] int64_t first_upload_tm
[903] int64_t modify_tm
[906] flatbuffers::Offset<flatbuffers::String> test_ver
[909] flatbuffers::Offset<flatbuffers::String> operate_ver
[912] flatbuffers::Offset<flatbuffers::String> core_min_ver
[915] flatbuffers::Offset<flatbuffers::String> proj_min_ver
[918] flatbuffers::Offset<flatbuffers::String> sence_name
[924] flatbuffers::Offset<flatbuffers::String> ct_user
[927] flatbuffers::Offset<flatbuffers::String> proj_id
[930] flatbuffers::Offset<flatbuffers::String> proj_name
[933] flatbuffers::Offset<flatbuffers::String> area_id
[936] flatbuffers::Offset<flatbuffers::String> area_name
[939] flatbuffers::Offset<flatbuffers::String> rely_db_path
[942] flatbuffers::Offset<flatbuffers::String> rely_file_path
[1016] auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
[1017] auto test_ver__ = test_ver ? _fbb.CreateString(test_ver) : 0;
[1018] auto operate_ver__ = operate_ver ? _fbb.CreateString(operate_ver) : 0;
[1019] auto core_min_ver__ = core_min_ver ? _fbb.CreateString(core_min_ver) : 0;
[1020] auto proj_min_ver__ = proj_min_ver ? _fbb.CreateString(proj_min_ver) : 0;
[1021] auto sence_name__ = sence_name ? _fbb.CreateString(sence_name) : 0;
[1022] auto addr__ = addr ? _fbb.CreateString(addr) : 0;
[1023] auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
[1024] auto proj_id__ = proj_id ? _fbb.CreateString(proj_id) : 0;
[1025] auto proj_name__ = proj_name ? _fbb.CreateString(proj_name) : 0;
[1026] auto area_id__ = area_id ? _fbb.CreateString(area_id) : 0;
[1027] auto area_name__ = area_name ? _fbb.CreateString(area_name) : 0;
[1028] auto rely_db_path__ = rely_db_path ? _fbb.CreateString(rely_db_path) : 0;
[1029] auto rely_file_path__ = rely_file_path ? _fbb.CreateString(rely_file_path) : 0;
[1274] flatbuffers::Offset<flatbuffers::String> env_map_ver
[1277] flatbuffers::Offset<flatbuffers::String> soft_core
[1283] flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> area_outline
[1292] flatbuffers::Offset<flatbuffers::String> ct_dev
[1301] flatbuffers::Offset<flatbuffers::String> modify_user
[1304] flatbuffers::Offset<flatbuffers::String> modify_dev
[1307] flatbuffers::Offset<flatbuffers::String> slam_env_mappath
[1310] flatbuffers::Offset<flatbuffers::String> slam_reflex_mappath
[1313] flatbuffers::Offset<flatbuffers::String> slam_trans_mappath
[1316] flatbuffers::Offset<flatbuffers::String> slam_obs_base_mappath
[1319] float ui_map_angle
[1322] flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> ui_crop_range
[1325] float ui_display_scale
[1328] flatbuffers::Offset<RBN100::FPoseTransParm> ui_parm
[1331] flatbuffers::Offset<flatbuffers::String> ui_env_thumb_path
[1334] flatbuffers::Offset<flatbuffers::String> ui_env_base_path
[1337] flatbuffers::Offset<flatbuffers::String> nav_obs_path
[1340] flatbuffers::Offset<flatbuffers::String> nav_run_mapconfig_path
[1343] flatbuffers::Offset<flatbuffers::String> nav_virwall_auto_path
[1346] flatbuffers::Offset<flatbuffers::String> nav_virwall_path
[1349] flatbuffers::Offset<flatbuffers::String> nav_run_track_path
[1352] flatbuffers::Offset<flatbuffers::String> per_senmatic_map_path
[1355] flatbuffers::Offset<flatbuffers::String> slam_3d_env_path
[1478] auto proj__ = proj ? _fbb.CreateString(proj) : 0;
[1479] auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
[1480] auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
[1481] auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
[1482] auto env_map_ver__ = env_map_ver ? _fbb.CreateString(env_map_ver) : 0;
[1483] auto soft_core__ = soft_core ? _fbb.CreateString(soft_core) : 0;
[1484] auto area_outline__ = area_outline ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FPoint>>(*area_outline) : 0;
[1486] auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
[1487] auto modify_user__ = modify_user ? _fbb.CreateString(modify_user) : 0;
[1488] auto modify_dev__ = modify_dev ? _fbb.CreateString(modify_dev) : 0;
[1489] auto slam_env_mappath__ = slam_env_mappath ? _fbb.CreateString(slam_env_mappath) : 0;
[1490] auto slam_reflex_mappath__ = slam_reflex_mappath ? _fbb.CreateString(slam_reflex_mappath) : 0;
[1491] auto slam_trans_mappath__ = slam_trans_mappath ? _fbb.CreateString(slam_trans_mappath) : 0;
[1492] auto slam_obs_base_mappath__ = slam_obs_base_mappath ? _fbb.CreateString(slam_obs_base_mappath) : 0;
[1493] auto ui_crop_range__ = ui_crop_range ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FPoint>>(*ui_crop_range) : 0;
[1494] auto ui_env_thumb_path__ = ui_env_thumb_path ? _fbb.CreateString(ui_env_thumb_path) : 0;
[1495] auto ui_env_base_path__ = ui_env_base_path ? _fbb.CreateString(ui_env_base_path) : 0;
[1496] auto nav_obs_path__ = nav_obs_path ? _fbb.CreateString(nav_obs_path) : 0;
[1497] auto nav_run_mapconfig_path__ = nav_run_mapconfig_path ? _fbb.CreateString(nav_run_mapconfig_path) : 0;
[1498] auto nav_virwall_auto_path__ = nav_virwall_auto_path ? _fbb.CreateString(nav_virwall_auto_path) : 0;
[1499] auto nav_virwall_path__ = nav_virwall_path ? _fbb.CreateString(nav_virwall_path) : 0;
[1500] auto nav_run_track_path__ = nav_run_track_path ? _fbb.CreateString(nav_run_track_path) : 0;
[1501] auto per_senmatic_map_path__ = per_senmatic_map_path ? _fbb.CreateString(per_senmatic_map_path) : 0;
[1502] auto slam_3d_env_path__ = slam_3d_env_path ? _fbb.CreateString(slam_3d_env_path) : 0;
[1745] int32_t show_level
[1748] flatbuffers::Offset<flatbuffers::String> by_proj
[1751] int32_t node_type
[1766] int64_t ct_tm
[1778] flatbuffers::Offset<flatbuffers::String> soft_ver
[1781] flatbuffers::Offset<flatbuffers::String> proj_soft_ver
[1790] float node_area
[1793] float node_angle
[1796] bool is_release
[1802] bool is_coordinate
[1808] bool is_tf_return
[1811] bool is_ntf_return
[1814] bool is_all_return
[1817] flatbuffers::Offset<flatbuffers::String> link_node
[1823] float action_x
[1826] float action_y
[1829] float action_z
[1955] auto by_proj__ = by_proj ? _fbb.CreateString(by_proj) : 0;
[1956] auto sence__ = sence ? _fbb.CreateString(sence) : 0;
[1957] auto envmap__ = envmap ? _fbb.CreateString(envmap) : 0;
[1960] auto soft_ver__ = soft_ver ? _fbb.CreateString(soft_ver) : 0;
[1961] auto proj_soft_ver__ = proj_soft_ver ? _fbb.CreateString(proj_soft_ver) : 0;
[1962] auto link_node__ = link_node ? _fbb.CreateString(link_node) : 0;
[2266] flatbuffers::Offset<flatbuffers::String> action_uuid
[2391] auto action_uuid__ = action_uuid ? _fbb.CreateString(action_uuid) : 0;
[3747] auto name__ = name ? _fbb.CreateString(name) : 0;
[3837] int32_t communication_mode
[3843] int32_t communication_list
[3909] auto plugin__ = plugin ? _fbb.CreateString(plugin) : 0;
[3910] auto floorinfo__ = floorinfo ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FFloorIndex>>(*floorinfo) : 0;
[3945] flatbuffers::Offset<RBN100::FElevatorInfo> elevator_info
[4414] flatbuffers::Offset<RBN100::FElevatorOutNodeInfo> ele_out_info
[4883] flatbuffers::Offset<RBN100::FJMRNodeInfo> ele_transf_info
[5005] flatbuffers::Offset<flatbuffers::String> node_uuid
[5008] flatbuffers::Offset<flatbuffers::String> sence_uuid
[5020] float l_x
[5023] float l_y
[5026] float l_z
[5029] int32_t dis_pre
[5032] int32_t angle_pre
[5113] auto node_uuid__ = node_uuid ? _fbb.CreateString(node_uuid) : 0;
[5114] auto sence_uuid__ = sence_uuid ? _fbb.CreateString(sence_uuid) : 0;
[5115] auto id__ = id ? _fbb.CreateString(id) : 0;
[5158] flatbuffers::Offset<RBN100::FActionStandBy> action_standby
[5433] flatbuffers::Offset<RBN100::FActionJMR> action_jmr
[5580] flatbuffers::Offset<RBN100::FActionStart> action_start
[5729] flatbuffers::Offset<RBN100::FActionElevatorOut> action_elevator_out
[5878] flatbuffers::Offset<RBN100::FActionElevatorIn> action_elevator_in
[6153] flatbuffers::Offset<RBN100::FActionElevatorTransf> action_ele_transf
[6350] RBN100::FRequestDataField message_type
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/hmi/generated/response_generated.h  ( 17 )
[141] flatbuffers::FlatBufferBuilder &fbb_;
[142] flatbuffers::uoffset_t start_;
[149] RBN100::FResponseDataField message_type
[173] ResponseBuilder builder_(_fbb);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/hmi/generated/public_generated.h  ( 14 )
[273] flatbuffers::FlatBufferBuilder &fbb_;
[274] flatbuffers::uoffset_t start_;
[297] FPointBuilder builder_(_fbb);
[353] float q_w
[356] float q_x
[359] float q_y
[362] float q_z
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/hmi/generated/report_generated.h  ( 32 )
[149] flatbuffers::FlatBufferBuilder &fbb_;
[150] flatbuffers::uoffset_t start_;
[173] FReportImageBuilder builder_(_fbb);
[183] auto image__ = image ? _fbb.CreateVector<uint8_t>(*image) : 0;
[342] void add_value(int8_t value) {
[416] auto map__ = map ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FGrid>>(*map) : 0;
[526] RBN100::FReportDataField data_type
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/perception/Object.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/RBNMess/msg/perception/SenmaticMap.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/local_slam_result_data.h  ( 3 )
[33] int trajectory_id
[33]  PoseGraph pose_graph
[36] common::Time time_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/submaps_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/probability_values.h  ( 4 )
[116] bool update_carry = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_kalman.h  ( 101 )
[42] Eigen::Vector3d length_odm_imu;
[43] Eigen::Quaterniond qua_odm_imu;
[44] double error_atti =0.001;
[45] double error_vel = 0.02;
[46] double error_pos = 0.01;
[47] double error_bg = 0.0005;
[48] double error_ba = 0.0001;
[49] bool display_fuse;
[66] double dt_imu
[68] double dt_odm
[69] Eigen::Vector3d observation_car_vel
[69] int flag_lost
[70] Eigen::Vector3d observation_pos
[71] Eigen::Quaterniond observation_qua
[74] double dt_slam_odm
[79] int fuse_type
[89] std::ofstream ofs_test_estimate;
[93] KalmanParameter kalman_sensor;
[94] ImuParameter m_imu_parameter;
[96] std::deque<sensor::OdometryData> odometry_data_input;
[97] std::deque<sensor::ImuData> imu_data_use;
[98] std::deque<sensor::OdometryData> odometry_data_use;
[99] std::deque<sensor::ImuData> imu_data_track;
[100] std::deque<sensor::OdometryData> odometry_data_track;
[101] sensor::OdometryData last_odm_data;
[102] sensor::OdometryData last_odm_data_use;
[103] sensor::OdometryData last_odm_track;
[104] sensor::ImuData last_imu_data;
[105] sensor::ImuData last_imu_data_use;
[106] transform::Rigid3d cur_odm_pose;
[107] transform::Rigid3d cur_slam_pose;
[108] transform::Rigid3d last_slam_pose;
[109] transform::Rigid3d track_slam_pose;
[110] transform::Rigid3d Tob;
[111] transform::Rigid3d to1o2_pose;
[112] common::Time last_cov_time;
[113] common::Time cur_slam_time;
[114] common::Time last_slam_time;
[115] common::Time track_slam_time;
[116] common::Time last_track_slam_time;
[117] common::Time last_pre_imu_time;
[118] common::Time out_slam_time;
[126] Eigen::Quaterniond qua_ob;
[127] Eigen::Quaterniond imu_qua_wb;
[128] Eigen::Quaterniond pure_imu_qua;
[129] Eigen::Quaterniond track_imu_qua;
[130] Eigen::Quaterniond out_imu_qua;
[131] Eigen::Vector3d t_ob;
[132] Eigen::Vector3d last_odm_vel;
[133] Eigen::Vector3d old_odm_vel;
[134] Eigen::Vector3d imu_vel_wb;
[135] Eigen::Vector3d imu_pos_wb;
[136] Eigen::Vector3d imu_car_vel;
[137] Eigen::Vector3d fvecdvsfm_n;
[138] Eigen::Vector3d fvecdvsfm_b;
[139] Eigen::Vector3d fvecdvsfm_all;
[140] Eigen::Vector3d gravity_;
[141] Eigen::Vector3d fvec_gyro_bias;
[142] Eigen::Vector3d fvec_acc_bias;
[143] Eigen::Vector3d out_imu_vel;
[158] Eigen::Vector3d first_imu_pos ;
[159] Eigen::Vector3d odm_track_pos;
[160] Eigen::Vector3d car_vel_odm;
[161] Eigen::Vector3d fpos_angle;
[162] Eigen::Vector3d car_vel_b;
[163] Eigen::Vector3d fvec_odmvel_n;
[164] Eigen::Vector3d odm_dposl;
[165] Eigen::Vector3d odm_dposr;
[166] Eigen::Vector3d k_odm;
[167] double last_slam_yaw;
[168] double odm_yaw;
[169] double last_odm_yaw = 0;
[170] double wheel_L;
[171] double error_installz;
[172] double pure_odm_yaw;
[173] int first_slam;
[174] int first_slam_obser;
[175] int first_imu;
[176] int first_imu_use;
[177] int first_odm;
[178] int first_odm_use;
[179] int first_odm_track;
[180] int first_obser;
[181] int state_motion;
[182] int reset_p;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/id_test.cc  ( 14 )
[104] std::deque<int> expected_data = {0, 7, 42};
[200] std::uniform_int_distribution<int> dt_dist(1, kMaxTimeIncrement);
[201] std::uniform_int_distribution<int> N_dist(1, kMaxNumNodes);
[211] std::uniform_int_distribution<int> t0_dist(1, N * kMaxTimeIncrement + 1);
[218] auto ground_truth = std::lower_bound( map_by_id.BeginOfTrajectory(kTrajectoryId), map_by_id.EndOfTrajectory(kTrajectoryId), CreateTime(t0), [](MapById<SubmapId, Data>::IdDataReference a, const common::Time& t) {
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_builder_interface.cc  ( 4 )
[33] auto options_dictionary = parameter_dictionary->GetDictionary(kDictionaryKey);
[64] proto::SensorId sensor_id_proto;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/detect_floors.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_node.h  ( 14 )
[36] transform::Rigid3d local_pose;
[39] transform::Rigid3d global_pose;
[42] common::optional<ConstantPoseData> constant_pose_data;
[44] double node_hight;
[53] Eigen::Quaterniond gravity_alignment;
[57] sensor::PointCloud filtered_gravity_aligned_point_cloud;
[60] sensor::PointCloud high_resolution_point_cloud;
[61] sensor::PointCloud low_resolution_point_cloud;
[63] Eigen::VectorXf rotational_scan_matcher_histogram;
[67] double conf_odm;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/id.h  ( 20 )
[58] int trajectory_id;
[59] int node_index;
[87] int submap_index;
[121] IteratorType begin_;
[122] IteratorType end_;
[138] int opti_count;
[396] bool can_append_ = true;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_trimmer.cc  ( 1 )
[35] auto submap_ids = pose_graph->GetSubmapIds(trajectory_id_);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/probability_values.cc  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_node_test.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/submaps.h  ( 12 )
[67]  bool include_probability_grid_data
[92] int num_range_data_ = 0;
[93] bool finished_ = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph.cc  ( 13 )
[101] proto::PoseGraph::Constraint constraint_proto;
[152] auto constraints_copy = constraints();
[158] auto landmarks_copy = GetLandmarkPoses();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph.h  ( 20 )
[51] int to_trajectory_id;
[52] transform::Rigid3d relative_pose;
[64] int trajectory_id
[142] int from_trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/Ramp.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_kalman.cc  ( 110 )
[75] double error_atti = pow(m_imu_parameter.error_atti,2);
[76] double error_vel = pow(m_imu_parameter.error_vel,2);
[77] double error_pos = pow(m_imu_parameter.error_pos,2);
[78] double error_bg = pow(m_imu_parameter.error_bg,2);
[79] double error_ba = pow(m_imu_parameter.error_ba,2);
[102] double error_yaw_odm = pow(0.003,2)*1;
[103] double error_k_odm = pow(0.0002,2)*1;
[104] double error_install_angle = pow(0.0003,2)*1;
[119] Eigen::Quaterniond qua_odm
[119] int type_sense
[120] Eigen::Matrix3d R_init;
[123] Eigen::Matrix3d Rbn=(qua_odm.toRotationMatrix()*R_init).transpose();
[176] sensor::ImuData tmp_imu_data = imu_data_use.front();
[195] sensor::OdometryData tmp_odm_data = odometry_data_use.front();
[229] sensor::ImuData imu_data_tmp = imu_data_track.front();
[230] double dt_imu = common::ToSeconds(imu_data_tmp.time - last_imu_data_use.time) ;
[239] double dt_sensors = common::ToSeconds(tmp_odm_data.time - last_imu_data_use.time);
[240] double dt_encoder = common::ToSeconds(tmp_odm_data.time - last_odm_data_use.time);
[256] double dt_odm = common::ToSeconds(tmp_odm_data.time - last_odm_data_use.time);
[271] double dt_slam_odm = common::ToSeconds(track_slam_time - last_odm_data_use.time);
[273] cartographer::transform::Rigid3d predict_slam_pose = track_slam_pose * to1o2_pose;
[274] Eigen::Quaterniond qua_slam_tmp = track_slam_pose.rotation();
[275] Eigen::Vector3d pos_slam_tmp = track_slam_pose.translation();
[276] Eigen::Vector3d pos_slam_obser = predict_slam_pose.translation();
[277] Eigen::Quaterniond qua_slam_obser = predict_slam_pose.rotation();
[318] Eigen::Quaterniond dqua_tm12 = last_slam_pose.rotation().conjugate()*cur_odm_pose.rotation();
[319] Eigen::Vector3d angle_vel_tm12 = cartographer::transform::RotationQuaternionToAngleAxisVector(dqua_tm12)/dt_odm;
[320] Eigen::Quaterniond deta_qua_time = cartographer::transform::AngleAxisVectorToRotationQuaternion(Eigen::Vector3d(angle_vel_tm12*dt_slam_odm));
[321] Eigen::Quaterniond new_qua_imu_time1 = last_slam_pose.rotation() * deta_qua_time;
[323] Eigen::Vector3d last_pos_time1 = last_slam_pose.translation();
[324] Eigen::Vector3d over_pos_time1 = cur_odm_pose.translation();
[325] Eigen::Vector3d pos_time1 = last_pos_time1 + (over_pos_time1 - last_pos_time1)*dt_slam_odm/dt_odm;
[328] cartographer::transform::Rigid3d Pose_time1 = cartographer::transform::Rigid3d{pos_time1, new_qua_imu_time1};
[333] Eigen::Quaterniond observation_qua
[334] Eigen::Quaterniond Quat_conj;
[335] Eigen::Quaterniond err_quat;
[390] Eigen::Vector3d observation_pos
[422] double deta_yaw0 = pure_odm_yaw - angle_obser[2]/57.3 ;
[423] double deta_slam_yaw =angle_obser[2] -last_slam_yaw;
[506] int fuse_type
[528] int num_imu = imu_data_input.size();
[529] int num_odm = odometry_data_input.size();
[530] int count_odm=0;
[531] int flag_lost_data=0;
[532] sensor::OdometryData odm_data_pre;
[543] sensor::ImuData imu_data_pre = imu_data_input[ii];
[545] double imu_last_dt = common::ToSeconds(imu_data_pre.time - last_imu_data.time);
[546] double imu_odm_dt = common::ToSeconds(imu_data_pre.time - odm_data_pre.time);
[547] double imu_slam_dt = common::ToSeconds(imu_data_pre.time - cur_slam_time);
[548] double imu_dt = imu_last_dt;
[578] double cov_dt = common::ToSeconds(imu_data_pre.time - last_cov_time);
[584] Eigen::Vector3d vel_odm = odm_data_pre.pose.translation();
[650] Eigen::Vector3d observation_car_vel
[651] Eigen::Vector3d delta_vel1 = observation_car_vel - last_odm_vel;
[652] Eigen::Vector3d delta_vel0 = last_odm_vel - old_odm_vel;
[653] int no_rotate =1;
[676] Eigen::Vector3d imu_gyr_ = imu_data_input.angular_velocity;
[681] Eigen::Quaterniond qua_end;
[694] Eigen::Vector3d dv_odm = odm_data_input.pose.translation()*dt_odm;
[700] Eigen::Quaterniond deta_qua_odm = last_odm_track.pose.rotation().conjugate()*odm_data_input.pose.rotation();
[702] Eigen::Vector3d deta_odm_angle = cartographer::transform::RotationQuaternionToAngleAxisVector(deta_qua_odm);
[703] double dr_odm = (deta_odm_angle(2)*wheel_L+dv_odm(0)*2)/2;
[704] double dl_odm = (dv_odm(0)*2 - deta_odm_angle(2)*wheel_L)/2;
[711] double new_dl_odm = k_odm(0) * dl_odm;
[712] double new_dr_odm = k_odm(1) * dr_odm;
[713] double new_odm_angle =(new_dr_odm- new_dl_odm)/wheel_L;
[715] Eigen::Vector3d dpos_odm;
[716] Eigen::Vector3d dpos_odm_b;
[740] Eigen::Vector3d odm_dpos = fmatcno*dpos_odm_b;
[757] Eigen::Vector3d imu_acc_ = imu_data_input.linear_acceleration*9.806;
[761] Eigen::Vector3d input_acc;
[776] Eigen::Matrix3d Rnb_start = imu_qua_wb.toRotationMatrix();
[782] Eigen::Vector3d vel_end,pos_end;
[799] Eigen::Matrix3d syn_fn;
[801] Eigen::Matrix3d syn_odm_vel;
[803] Eigen::Matrix3d Ez;
[840] Eigen::Matrix3d E3;
[843] Eigen::Vector3d fVecdv_n = fvecdvsfm_all/dtime;
[868] int flag_lost
[915] double error_x = fabs(innovVel(0,0));
[916] double error_y = fabs(innovVel(1,0));
[1109] double radio_quaxy =1.0;
[1110] double radio_quaz =1.0;
[1153] Eigen::Quaterniond Q0;
[1155] Eigen::Quaterniond tmp_qua;
[1163] Eigen::Quaterniond qua_install(fmatRinstall);
[1205] sensor::OdometryData tmp_data;
[1207] transform::Rigid3d out_pose{out_imu_vel,out_imu_qua};
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/grid_interface.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/range_data_inserter_interface.cc  ( 3 )
[29] proto::RangeDataInserterOptions_RangeDataInserterType range_data_inserter_type;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_tracker.h  ( 9 )
[57] common::Time time_;
[58] common::Time last_linear_acceleration_time_;
[59] Eigen::Quaterniond orientation_;
[60] Eigen::Vector3d gravity_vector_;
[61] Eigen::Vector3d imu_angular_velocity_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/map_builder_interface.h  ( 13 )
[63]  LocalSlamResultCallback local_slam_result_callback
[63]  LocalMapCallback local_map_callback
[63]  LocalAbnormalStateCallback local_ab_state_callback
[75]  int trajectory_id
[91]  bool load_frozen_state
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_interface.h  ( 24 )
[38] transform::Rigid3d zbar_ij;
[39] double translation_weight;
[40] double rotation_weight;
[43] SubmapId submap_id;
[44] NodeId node_id;
[53] bool is_pushed;
[58] int trajectory_id;
[60] transform::Rigid3d landmark_to_tracking_transform;
[64] std::vector<LandmarkObservation> landmark_observations;
[65] common::optional<transform::Rigid3d> global_landmark_pose;
[92] double gravity_constant = 9.8;
[94] common::optional<transform::Rigid3d> fixed_frame_origin_in_map;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/range_data_inserter_interface.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_test.cc  ( 3 )
[31] proto::PoseGraph::Constraint expected_constraint = test::CreateFakeConstraint( test::CreateFakeNode(1, 2), test::CreateFakeSubmap3D(2, 3));
[33] ::google::protobuf::RepeatedPtrField<proto::PoseGraph::Constraint> constraint_protos;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_builder_interface.h  ( 23 )
[52] NodeId node_id;
[67] double origin_x;
[68] double origin_y;
[71] std::vector<grid> grid_data;
[88] RUN_STATE states_;
[89] bool ON;
[153]  std::unique_ptr<mapping::LocalSlamResultData> local_slam_result_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/probability_values_test.cc  ( 12 )
[79] std::vector<uint16> probability_table = ComputeLookupTableToApplyOdds(Odds(0.9f));
[81] std::vector<uint16> correspondence_table = ComputeLookupTableToApplyCorrespondenceCostOdds(Odds(0.9f));
[82] uint16 cell_pg_pre_update = 0;
[83] uint16 cell_cg_pre_update = 0;
[84] uint16 cell_pg_post_update = probability_table[cell_pg_pre_update];
[85] uint16 cell_cg_post_update = correspondence_table[cell_cg_pre_update];
[86] float p_post = ValueToProbability(cell_pg_post_update);
[87] float c_post = ValueToCorrespondenceCost(cell_cg_post_update);
[89] int num_evaluations = 5000;
[101] float p_value = (common::Clamp(p, kMinProbability, kMaxProbability) - kMinProbability) * (32766.f / (kMaxProbability - kMinProbability));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/detect_floors.cc  ( 22 )
[44] int start_index;
[45] int end_index;
[46] std::vector<double> z_values;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_tracker.cc  ( 8 )
[94] Eigen::Quaterniond rotation_tmp = rotation.normalized();
[95] Eigen::Quaterniond norm_rotation = (orientation_ * rotation_tmp);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator_test.cc  ( 20 )
[41] Eigen::Vector3d angular_velocity(0, 0, 0);
[51] common::Time time_present = common::FromUniversal(123);
[58] common::Time time_in_past = time_present - common::FromSeconds(10);
[61] common::Time time_in_future = time_present + common::FromSeconds(20);
[67] Eigen::Vector3d initial_gravity_acceleration(1.6, 2.0, 8.0);
[69] common::Time current_time = common::FromUniversal(123);
[70] sensor::ImuData imu_data{current_time, initial_gravity_acceleration,
[74] Eigen::Quaterniond expected_orientation;
[81] Eigen::Vector3d gravity_acceleration(1.6, 2.0, 8.0);
[100] transform::Rigid3d current_pose = transform::Rigid3d::Translation(Eigen::Vector3d(0.3, 0.7, 0.2));
[105] transform::Rigid3d motion_per_second( velocity, Eigen::AngleAxisd(angular_velocity.norm(), angular_velocity.normalized()));
[122] transform::Rigid3d expected_pose = current_pose * transform::Rigid3d( kExtrapolateDuration * velocity, Eigen::AngleAxisd(kExtrapolateDuration * angular_velocity.norm(), angular_velocity.normalized()));
[131] Eigen::AngleAxisd gravity_axis( extrapolator.EstimateGravityOrientation(current_time));
[139] Eigen::Vector3d initial_angular_velocity(0, 0, 0);
[155] Eigen::Vector3d angular_velocity_yaw(0, 0, 0.1);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/Ramp.h  ( 8 )
[55] transform::Rigid2d local_pose1_;
[56] transform::Rigid2d local_pose2_;
[57] transform::Rigid2d local_pose3_;
[58] transform::Rigid2d local_pose4_;
[59] int traj_id;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.cc  ( 68 )
[55] Eigen::Quaterniond qua_odm
[56] Eigen::Matrix3d R_init;
[58] Eigen::Matrix3d Rbn=(qua_odm.toRotationMatrix()*R_init).transpose();
[142] common::Time tracker_start = time;
[197] double delta_time_imu = fabs(common::ToSeconds(time - cur_imu_time));
[280] double dt_odm = common::ToSeconds(odometry_data.time - last_odm_data.time) ;
[283] Eigen::Vector3d my_odm_pos = odometry_data.pose.translation();
[284] transform::Rigid3d odm_dpose = last_odm_data.pose.inverse()*odometry_data.pose;
[285] Eigen::Vector3d vel_odm = odm_dpose.translation()/dt_odm;
[291] Eigen::Quaterniond odm_rotation = odometry_data.pose.rotation();
[292] sensor::OdometryData odmetry_vel;
[353] int num_angle =25;
[386] double mean_anglex = sum_angle[0] / num_angle;
[387] double mean_angley = sum_angle[1] / num_angle;
[390] Eigen::Vector2d tmp_angle = (*itm);
[476] ImuTracker imu_tracker = *imu_tracker_;
[499] transform::Rigid3d pose_o1o2 = oldest_pose.inverse()*newest_pose;
[501] double norm_pos = pose_o1o2.translation().norm();
[502] Eigen::Matrix3d R_no = oldest_pose.rotation().toRotationMatrix();
[503] double norm_r = sqrt( R_no(0,0)*R_no(0,0)+R_no(1,0)*R_no(1,0));
[504] double norm_pos2 = norm_pos/norm_r;
[515] Eigen::Vector3d frame_dpos = oldest_pose.rotation() * linear_dpos_from_poses_out;
[560] double delta_time = common::ToSeconds (kalman_imu_data.back().time- timed_pose_queue_.back().time);
[594] double delta_time_old = common::ToSeconds (timed_pose_queue_.front().time - kalman_imu_data.front().time);
[631] double deta_extra_time =0.0;
[640] Eigen::Vector3d tmp_imu_pos;
[641] Eigen::Quaterniond tmp_imu_qua;
[644] transform::Rigid3d tmp_out_pose{tmp_imu_pos,tmp_imu_qua};
[658] std::deque<sensor::ImuData> tmp_imu_que = pre_imu_data;
[670] Eigen::Vector3d input_start_vel = start_vel;
[671] Eigen::Vector3d tob_tmp;
[675] Eigen::Vector3d delta_imu_pos;
[677] Eigen::Vector3d odm_pos_start = start_pos - start_qua.toRotationMatrix()*tob_tmp;
[684] sensor::ImuData pre_imu_time = tmp_imu_que.front();
[700] Eigen::Vector3d odm_pos_end = start_pos - start_qua.toRotationMatrix()*tob_tmp;
[721] transform::Rigid3d out_pose{delta_imu_pos,start_qua};
[728] Eigen::Vector3d pre_acc = pre_imu_time.linear_acceleration;
[729] Eigen::Vector3d pre_gyr = pre_imu_time.angular_velocity;
[730] double dt_imu = common::ToSeconds(pre_imu_time.time - time_preint);
[745] Eigen::Matrix3d Rwb = start_qua.toRotationMatrix();
[746] Eigen::Vector3d gravity_(0,0,-9.7);
[747] Eigen::Vector3d end_vel;
[748] Eigen::Vector3d end_pos;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/map_builder_test.cc  ( 15 )
[44] auto map_builder_parameters = test::ResolveLuaParameters(kMapBuilderLua);
[55] auto trajectory_builder_parameters = test::ResolveLuaParameters(kTrajectoryBuilderLua);
[94] std::unique_ptr<MapBuilderInterface> map_builder_;
[95] proto::MapBuilderOptions map_builder_options_;
[96] proto::TrajectoryBuilderOptions trajectory_builder_options_;
[97] std::vector<::cartographer::transform::Rigid3d> local_slam_result_poses_;
[103] int trajectory_id = map_builder_->AddTrajectoryBuilder( {kRangeSensorId}, trajectory_builder_options_,
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/map_builder.cc  ( 49 )
[47] std::vector<std::string> range_sensor_ids;
[115]  LocalSlamResultCallback local_slam_result_callback
[115]  LocalMapCallback local_map_callback
[115]  LocalAbnormalStateCallback local_states_callback
[118] std::unique_ptr<LocalTrajectoryBuilder3D> local_trajectory_builder;
[187] proto::TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids_proto;
[220] std::vector<cv::Point2f> cur_points;
[223] uint64_t kf_time = cartographer::common::TimeToUint64(node_pose.data.constant_pose_data.value().time) * 1000;
[259] PoseGraphInterface::RampData r_data;
[315]  bool load_frozen_state
[321] bool load_flag = false;
[332] proto::PoseGraph pose_graph_proto = deserializer.pose_graph();
[447] auto ramp_data_proto = proto.mutable_ramp();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_trimmer_test.cc  ( 4 )
[32] testing::FakeTrimmable fake_pose_graph(kTrajectoryId, 17);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_extrapolator.h  ( 57 )
[75]  common::Duration pose_queue_duration
[75]  double imu_gravity_time_constant
[81] common::Time start_imu_time;
[82] common::Time time_preint;
[83] common::Time cur_imu_time;
[99] Eigen::Quaterniond start_qua;
[100] Eigen::Vector3d start_vel;
[101] Eigen::Vector3d start_velb;
[102] Eigen::Vector3d mean_velb;
[103] Eigen::Vector3d start_pos;
[107] int big_angle=0;
[108] int small_angle=0;
[110] double frame_h = 0.0;
[111] double odm_h =0;
[112] int imu_size;
[113] int first_odm = 1;
[114] bool long_loss_imu_time = false;
[118] Eigen::Vector3d linear_velocity_from_odometry_out = Eigen::Vector3d::Zero();
[119] Eigen::Vector3d linear_velocity_from_poses_out = Eigen::Vector3d::Zero();
[120] Eigen::Vector3d linear_dpos_from_poses_out = Eigen::Vector3d::Zero();
[121] Eigen::Vector3d angular_velocity_from_odometry_out = Eigen::Vector3d::Zero();
[122] Eigen::Vector3d angle_from_imu_out = Eigen::Vector3d::Zero();
[124] std::ofstream ofs_slam_vel;
[125] std::ofstream ofs_odom_vel;
[126] std::ofstream ofs_expolore;
[137]  ImuTracker imu_tracker
[151] transform::Rigid3d imu_vel;
[154] std::deque<TimedPose> timed_pose_queue_;
[155] std::deque<TimedVel> timed_vel_queue_;
[157] Eigen::Vector3d linear_velocity_from_poses_ = Eigen::Vector3d::Zero();
[158] Eigen::Vector3d angular_velocity_from_poses_ = Eigen::Vector3d::Zero();
[161] int imu_loss_flag = 0;
[162] std::deque<sensor::ImuData> imu_data_;
[163] std::deque<sensor::ImuData> pre_imu_data;
[164] std::deque<sensor::ImuData> kalman_imu_data;
[165] std::deque<sensor::ImuData> kalman_imu_use;
[166] std::unique_ptr<ImuTracker> imu_tracker_;
[167] std::unique_ptr<ImuTracker> odometry_imu_tracker_;
[168] std::unique_ptr<ImuTracker> extrapolation_imu_tracker_;
[169] std::unique_ptr<ImuKalman> kalman_imu_tracker;
[171] TimedPose cached_extrapolated_pose_;
[172] TimedPose cached_extrapolated_pose_error;
[174] std::deque<sensor::OdometryData> odometry_data_;
[175] std::deque<sensor::OdometryData> kalman_odometry_data;
[176] sensor::OdometryData last_odm_data;
[177] sensor::OdometryData imu_vel_data;
[178] Eigen::Vector3d linear_velocity_from_odometry_ = Eigen::Vector3d::Zero();
[179] Eigen::Vector3d angular_velocity_from_odometry_ = Eigen::Vector3d::Zero();
[180] Eigen::Quaterniond quab1b2_from_imu_ ;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/map_builder.h  ( 21 )
[71]  LocalSlamResultCallback local_slam_result_callback
[71]  LocalMapCallback local_map_callback_
[71]  LocalAbnormalStateCallback local_ab_states_callback
[77] int trajectory_id
[85]  bool load_frozen_state
[111] std::ofstream ofs_opti_node_loop;
[115] common::ThreadPool thread_pool_;
[118] std::unique_ptr<PoseGraph> pose_graph_;
[120] std::unique_ptr<sensor::CollatorInterface> sensor_collator_;
[122] std::vector<std::unique_ptr<mapping::TrajectoryBuilderInterface>> trajectory_builders_;
[124] std::vector<proto::TrajectoryBuilderOptionsWithSensorIds> all_trajectory_builder_options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/pose_graph_trimmer.h  ( 6 )
[32] int trajectory_id
[57] Trimmable pose_graph
[75] int num_submaps_to_keep_;
[76] bool finished_ = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/imu_tracker_test.cc  ( 5 )
[53] Eigen::Vector3d angular_velocity_;
[54] std::unique_ptr<ImuTracker> imu_tracker_;
[55] Eigen::Vector3d linear_acceleration_;
[56] common::Time time_ = common::FromUniversal(12345678);
[85] Eigen::Quaterniond expected_orientation;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/trajectory_node.cc  ( 3 )
[56] Eigen::VectorXf rotational_scan_matcher_histogram( proto.rotational_scan_matcher_histogram_size());
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/hybrid_grid.h  ( 23 )
[170] std::unique_ptr<WrappedGrid>& meta_cell = meta_cells_[ToFlatIndex(meta_index, kBits)];
[368] int bits_;
[389] std::vector<std::unique_ptr<WrappedGrid>> new_meta_cells_( 8 * meta_cells_.size());
[406] std::vector<std::unique_ptr<WrappedGrid>> meta_cells_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/hybrid_grid_test.cc  ( 18 )
[30] HybridGrid hybrid_grid(1.f);
[128] std::uniform_real_distribution<float> value_distribution(kMinProbability, kMaxProbability);
[129] std::uniform_int_distribution<int> xyz_distribution(-3000, 2999);
[146] HybridGrid hybrid_grid_;
[148] ValueMap values_;
[188] ValueMap proto_map;
[195] ValueMap hybrid_grid_map;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/submap_3d.cc  ( 45 )
[31] int min_z = INT_MAX;
[32] int max_z = INT_MIN;
[34] float probability_sum = 0.f;
[35] float max_probability = 0.5f;
[56] std::vector<PixelData> accumulated_pixel_data(width * height);
[117] std::string cell_data;
[182]  common::LuaParameterDictionary parameter_dictionary
[217]  bool include_probability_grid_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/range_data_inserter_3d_test.cc  ( 9 )
[33] auto parameter_dictionary = common::MakeDictionary( "return { "
[63] HybridGrid hybrid_grid_;
[64] std::unique_ptr<RangeDataInserter3D> range_data_inserter_;
[65] proto::RangeDataInserterOptions3D options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/submap_3d.h  ( 16 )
[42]  common::LuaParameterDictionary parameter_dictionary
[51]  bool include_probability_grid_data
[72]  int high_resolution_max_range
[76] std::unique_ptr<HybridGrid> high_resolution_hybrid_grid_;
[77] std::unique_ptr<HybridGrid> low_resolution_hybrid_grid_;
[112] int matching_submap_index_ = 0;
[113] std::vector<std::shared_ptr<Submap3D>> submaps_;
[114] RangeDataInserter3D range_data_inserter_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/submap_3d_test.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/range_data_inserter_3d.h  ( 6 )
[29]  common::LuaParameterDictionary parameter_dictionary
[41]  HybridGrid hybrid_grid
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/3d/range_data_inserter_3d.cc  ( 13 )
[31]  HybridGrid hybrid_grid
[57]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid.cc  ( 26 )
[30] std::ofstream ofgrid_mapsize;
[84] uint64_t correspondence_index = tmp_limits.cell_limits().num_x_cells * cell_index.y() + cell_index.x();
[98] CellLimits cell_limits;
[105] std::unique_ptr<ProbabilityGrid> cropped_grid = common::make_unique<ProbabilityGrid>( MapLimits(resolution, max, cell_limits));
[115] transform::Rigid3d local_pose
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid_test.cc  ( 5 )
[53] ProbabilityGrid probability_grid( MapLimits(1., Eigen::Vector2d(1., 1.), CellLimits(2, 2)));
[169] std::uniform_real_distribution<float> value_distribution(kMinProbability, kMaxProbability);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/grid_2d.h  ( 9 )
[72] transform::Rigid3d local_pose
[93] MapLimits limits_;
[94] std::vector<uint16> correspondence_cost_cells_;
[95] float min_correspondence_cost_;
[96] float max_correspondence_cost_;
[97] std::vector<int> update_indices_;
[100] Eigen::AlignedBox2i known_cells_box_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.h  ( 6 )
[38]  common::LuaParameterDictionary parameter_dictionary
[70] std::vector<uint16> hit_table_;
[71] std::vector<uint16> miss_table_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/map_limits_test.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid.h  ( 4 )
[54] transform::Rigid3d local_pose
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/submap_2d.h  ( 19 )
[42]  common::LuaParameterDictionary parameter_dictionary
[50]  bool include_probability_grid_data
[70] std::unique_ptr<Grid2D> grid_;
[71] bool local_flag = false;
[137] int matching_submap_index_ = 0;
[138] int windows_submap_index_ = 0;
[139] int base_map_size = 0;
[140] std::vector<std::shared_ptr<Submap2D>> submaps_;
[141] std::vector<sensor::RangeData> dealing_submaps_;
[142] std::vector<std::shared_ptr<Submap2D>> matching_windows_submap_;
[143] std::unique_ptr<RangeDataInserterInterface> range_data_inserter_;
[144] std::unique_ptr<RangeDataInserterInterface> windows_range_data_inserter_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/range_data_inserter_2d_test.cc  ( 6 )
[38] auto parameter_dictionary = common::MakeDictionary( "return { "
[50] sensor::RangeData range_data;
[61] ProbabilityGrid probability_grid_;
[62] std::unique_ptr<ProbabilityGridRangeDataInserter2D> range_data_inserter_;
[63] proto::ProbabilityGridRangeDataInserterOptions2D options_;
[87] Eigen::Array2i cell_index(row, column);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/submap_2d.cc  ( 10 )
[47] bool valid_range_data_inserter_grid_combination = false;
[82]  bool include_probability_grid_data
[173] int num_ranges_submap = options_.num_range_data();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/xy_index_test.cc  ( 7 )
[49] int num_indices = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/xy_index.h  ( 8 )
[43] int num_x_cells = 0;
[44] int num_y_cells = 0;
[106] Eigen::Array2i min_xy_index_;
[107] Eigen::Array2i max_xy_index_;
[108] Eigen::Array2i xy_index_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/map_limits.h  ( 6 )
[87] double resolution_;
[88] Eigen::Vector2d max_;
[89] CellLimits cell_limits_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/grid_2d.cc  ( 18 )
[22] std::mutex mutex_cost_cells;
[29] proto::GridOptions2D_GridType grid_type;
[108] uint64_t correspondence_index = tmp_limits.cell_limits().num_x_cells * cell_index.y() + cell_index.x();
[116] bool tmp_limits_flag = tmp_limits.Contains(cell_index);
[117] bool corr_flag;
[163] std::vector<uint16> new_cells(new_size, kUnknownCorrespondenceValue);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.cc  ( 4 )
[33]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/2d/submap_2d_test.cc  ( 8 )
[38] auto parameter_dictionary = common::MakeDictionary( "return {"
[56] std::set<std::shared_ptr<Submap2D>> all_submaps;
[68] int correct_num_range_data = 0;
[80] MapLimits expected_map_limits(1., Eigen::Vector2d(2., 3.), CellLimits(100, 110));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/trajectory_connectivity_state.h  ( 4 )
[46] int trajectory_id
[52] int trajectory_id_a
[52]  int trajectory_id_b
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.h  ( 6 )
[41]  std::unique_ptr<LocalTrajectoryBuilder2D> local_trajectory_builder
[54]  metrics::FamilyFactory family_factory
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/trajectory_connectivity_state_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/gvalues_gridmap.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/collated_trajectory_builder.cc  ( 4 )
[39] std::unordered_set<std::string> expected_sensor_id_strings;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/submap_controller.h  ( 4 )
[33] mapping::SubmapId submap_id{proto.submap_id().trajectory_id(),
[35] std::shared_ptr<SubmapType> submap_ptr;
[36] auto submap_it = unfinished_submaps_.find(submap_id);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/connected_components_test.cc  ( 4 )
[32] ConnectedComponents connected_components;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/build_gridmap.h  ( 35 )
[42] std::shared_ptr<TrajectoryBuilderInterface::OccupancyGrid> occupancy_grid
[50] TrajectoryBuilderInterface::LocalMapCallback m_callback_slam_map_;
[53] bool stop_flag_;
[54] bool finished_flag_;
[55] bool first_send_map_flag_;
[56] bool save_map_flag_;
[57] bool gridboundary_init_;
[58] bool final_send_map_flag_;
[60] int height_;
[61] int width_;
[62] int max_up_grid_;
[63] int max_down_grid_;
[64] int max_left_grid_;
[65] int max_right_grid_;
[67] int max_active_submap_num_;
[68] int last_map_height_;
[69] int last_map_width_;
[70] int grid_threshold_;
[71] int grid_hit_to_miss_threshold_;
[73] double resolution_;
[74] std::vector<TrajectoryBuilderInterface::grid> last_pub_laser_grids_;
[77] std::ofstream ofgrid_map;
[78] std::ofstream ofpose_submap;
[79] std::ofstream ofpose_submap_time;
[80] std::ofstream ofsave_gridmap;
[81] std::thread m_tMap_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/trajectory_connectivity_state.cc  ( 8 )
[33] auto sorted_pair = std::minmax(trajectory_id_a, trajectory_id_b);
[44] std::vector<int> component_a = connected_components_.GetComponent(trajectory_id_a);
[46] std::vector<int> component_b = connected_components_.GetComponent(trajectory_id_b);
[49] auto id_pair = std::minmax(id_a, id_b);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/range_data_collator.cc  ( 11 )
[72] common::Time oldest_timestamp = common::Time::max();
[84] bool warned_for_dropped_points = false;
[93] auto overlap_begin = ranges.begin();
[99] auto overlap_end = overlap_begin;
[116] std::size_t origin_index = result.origins.size();
[118] double time_correction = common::ToSeconds(data.time - current_end_);
[137] common::Setting::CurrLaserState c_states = common::Setting::CurrLaserState();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/global_trajectory_builder.cc  ( 29 )
[96] uint64_t last_sys_time = cartographer::common::getTimeNow();
[100] uint64_t current_sys_time = cartographer::common::getTimeNow();
[109] std::unique_ptr<InsertionResult> insertion_result;
[115] auto node_id = pose_graph_->AddNode( matching_result->insertion_result->constant_data, trajectory_id_, matching_result->insertion_result->insertion_submaps);
[139] uint64_t res_time = ::cartographer::common::TimeToUint64(matching_result->time);
[140] double double_time = ::cartographer::common::Uint64ToDouble(res_time);
[151] transform::Rigid3d Two_modify = matching_result->local_pose;
[154] transform::Rigid3d tmp_pose = matching_result->local_pose;
[155] transform::Rigid3d tmp_modi_pos = common::Setting::pose_control.Unopti_pose.inverse()* common::Setting::pose_control.Opti_pose;
[218] std::unique_ptr<mapping::LocalSlamResultData> local_slam_result_data
[225] double last_send_map_time;
[230] LocalSlamResultCallback local_slam_result_callback_;
[231] LocalMapCallback loca_map_callback_;
[232] LocalAbnormalStateCallback local_ab_states_callback_;
[245]  std::unique_ptr<LocalTrajectoryBuilder2D> local_trajectory_builder
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/range_data_collator_test.cc  ( 19 )
[37] double relative_time = (1.f - fraction) * -duration;
[57] auto output_0 = collator.AddRangeData(sensor_id, CreateFakeRangeData(200, 300));
[63] auto output_1 = collator.AddRangeData(sensor_id, CreateFakeRangeData(300, 500));
[73] auto output_2 = collator.AddRangeData(sensor_id, CreateFakeRangeData(-1000, 510));
[84] sensor::TimedPointCloudData empty_data{common::FromUniversal(300)};
[139] auto output_3 = collator.AddRangeData(sensor_0, CreateFakeRangeData(600, 700));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/point_gridmap.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/motion_filter.h  ( 8 )
[31]  common::LuaParameterDictionary parameter_dictionary
[45] int num_total_ = 0;
[46] int num_different_ = 0;
[47] common::Time last_time_;
[48] transform::Rigid3d last_pose_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/connected_components.h  ( 7 )
[44] void Add(int trajectory_id) EXCLUDES(lock_);
[49] int trajectory_id_a
[49]  int trajectory_id_b
[68] std::vector<int> GetComponent(int trajectory_id) EXCLUDES(lock_);
[72] int FindSet(int trajectory_id) REQUIRES(lock_);
[75] common::Mutex lock_;
[85]  std::vector<std::vector<int>> connected_components
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/connected_components.cc  ( 13 )
[40] auto sorted_pair = std::minmax(trajectory_id_a, trajectory_id_b);
[98] std::vector<int> trajectory_ids;
[116]  std::vector<std::vector<int>> connected_components
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/build_gridmap.cc  ( 52 )
[151] cartographer::mapping::proto::SubmapQuery::Response response_proto;
[185] std::set<SubmapId> submap_ids_to_delete;
[192] int fetched_textures_num = 0;
[203] SubmapSlice &submap_slice = submap_slices_[id];
[216] auto fetched_textures = FetchSubmapTextures(id);
[242] auto &slice_to_submap = slices_to_submap[id];
[267] ::cartographer::io::PaintSubmapSlicesResult painted_slices;
[278] std::shared_ptr<TrajectoryBuilderInterface::OccupancyGrid> occupancy_grid = std::make_shared<TrajectoryBuilderInterface::OccupancyGrid>();
[286] cv::Mat gray_map(width,height,CV_8UC1);
[295] float origin_x = -painted_slices.origin.x() * resolution_;
[296] float origin_y = (-height + painted_slices.origin.y()) * resolution_;
[338] int grid_x = x + origin_x / resolution_ + height_ / 2;
[339] int grid_y = (height - 1 - y) + origin_y / resolution_ + height_ / 2;
[363] TrajectoryBuilderInterface::grid grid_to_pub;
[394] std::ofstream map_yaml(common::Setting::gridmap_save_path+".yaml");
[465] ::cartographer::sensor::RangeData correct_range_data = local_trajectory_builder_->GetCorrectRangeData();
[471] std::vector<GridLineTraversalLine> line_lists_;
[473] std::vector<TrajectoryBuilderInterface::grid> pub_laser_grids_returns;
[474] std::vector<TrajectoryBuilderInterface::grid> pub_laser_grids;
[489] Eigen::Vector3f return_point = correct_range_data.returns[i];
[491] int return_x = return_point(0) / resolution_ + height_ / 2;
[492] int return_y = return_point(1) / resolution_ + height_ / 2;
[511] Eigen::Vector3f misses_point = correct_range_data.misses[i];
[512] int misses_x = misses_point(0) / resolution_ + height_ / 2;
[513] int misses_y = misses_point(1) / resolution_ + height_ / 2;
[553] int grid_origin_x = origin_x / resolution_ + height_ / 2;
[554] int grid_origin_y = origin_y / resolution_ + height_ / 2;
[555] int up_grid = grid_origin_y + height / 2;
[556] int down_grid = grid_origin_y - height / 2;
[557] int left_grid = grid_origin_x - width / 2;
[558] int right_grid = grid_origin_x + width / 2;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/obstacles_interface.h  ( 12 )
[42] Eigen::Vector3d world_pose;
[43] Eigen::Vector3d world_angle;
[53] NodeId node_id;
[54] SubmapId submap_id;
[55] Size_obs size_o;
[56] ObsType type_o;
[58] std::mutex m_init_;
[80] ObsInfo o_info
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/gridlinetraversal_gridmap.h  ( 10 )
[13] int num_points;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/collated_trajectory_builder.h  ( 11 )
[83] std::unique_ptr<mapping::LocalSlamResultData> local_slam_result_data
[95] std::unique_ptr<TrajectoryBuilderInterface> wrapped_trajectory_builder_;
[98] std::chrono::steady_clock::time_point last_logging_time_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/motion_filter.cc  ( 5 )
[47] double max_distance_key = options_.max_distance_meters();
[48] double max_angle_key = options_.max_angle_radians();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/range_data_collator.h  ( 5 )
[53] common::Time current_start_ = common::Time::min();
[54] common::Time current_end_ = common::Time::min();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/submap_controller.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/motion_filter_test.cc  ( 4 )
[30] auto parameter_dictionary = common::MakeDictionary( "return {"
[42] proto::MotionFilterOptions options_;
[46] MotionFilter motion_filter(options_);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/scan_matching/real_time_correlative_scan_matcher.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/scan_matching/real_time_correlative_scan_matcher.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_options_3d.cc  ( 2 )
[30]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_slam_result_3d.h  ( 6 )
[40] void AddToTrajectoryBuilder( TrajectoryBuilderInterface* const trajectory_builder) override;
[41] int trajectory_id
[41]  PoseGraph pose_graph
[46] SubmapController<mapping::Submap3D>* submap_controller_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/rotation_parameterization.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_3d.h  ( 25 )
[52] transform::Rigid3d local_pose;
[53] sensor::RangeData range_data_in_local;
[80] metrics::FamilyFactory family_factory
[96] mapping::ActiveSubmaps3D active_submaps_;
[98] mapping::MotionFilter motion_filter_;
[100] std::unique_ptr<scan_matching::RealTimeCorrelativeScanMatcher3D> real_time_correlative_scan_matcher_;
[101] std::unique_ptr<scan_matching::CeresScanMatcher3D> ceres_scan_matcher_;
[103] std::unique_ptr<mapping::PoseExtrapolator> extrapolator_;
[105] int num_accumulated_ = 0;
[106] sensor::RangeData accumulated_range_data_;
[107] std::chrono::steady_clock::time_point accumulation_started_;
[109] RangeDataCollator range_data_collator_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_3d.cc  ( 40 )
[76] auto synchronized_data = range_data_collator_.AddRangeData(sensor_id, unsynchronized_data);
[105] std::vector<transform::Rigid3f> hits_poses;
[109] common::Time time_point = time + common::FromSeconds(hit.point_time[3]);
[152] transform::Rigid3f current_pose = extrapolator_->ExtrapolatePose(time).cast<float>();
[180] transform::Rigid3d initial_ceres_pose = matching_submap->local_pose().inverse() * pose_prediction;
[182] sensor::AdaptiveVoxelFilter adaptive_voxel_filter( options_.high_resolution_adaptive_voxel_filter_options());
[197] transform::Rigid3d pose_observation_in_submap;
[201] sensor::AdaptiveVoxelFilter low_resolution_adaptive_voxel_filter( options_.low_resolution_adaptive_voxel_filter_options());
[219] double residual_distance = (pose_observation_in_submap.translation() - initial_ceres_pose.translation()) .norm();
[222] double residual_angle = pose_observation_in_submap.rotation().angularDistance( initial_ceres_pose.rotation());
[231] sensor::RangeData filtered_range_data_in_local = sensor::TransformRangeData( filtered_range_data_in_tracking, pose_estimate.cast<float>());
[235] std::unique_ptr<InsertionResult> insertion_result = InsertIntoSubmap( time, filtered_range_data_in_local, filtered_range_data_in_tracking, high_resolution_point_cloud_in_tracking, low_resolution_point_cloud_in_tracking, pose_estimate, gravity_alignment);
[295]  metrics::FamilyFactory family_factory
[301] auto score_boundaries = metrics::Histogram::FixedWidth(0.05, 20);
[307] auto cost_boundaries = metrics::Histogram::ScaledPowersOf(2, 0.01, 100);
[312] auto distance_boundaries = metrics::Histogram::ScaledPowersOf(2, 0.01, 10);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/pose_graph_3d.h  ( 37 )
[79]  int trajectory_id
[95] bool IsTrajectoryFinished(int trajectory_id) const override REQUIRES(mutex_);
[97] bool IsTrajectoryFrozen(int trajectory_id) const override REQUIRES(mutex_);
[117] transform::Rigid3d GetLocalToGlobalTransform(int trajectory_id) const EXCLUDES(mutex_) override;
[140] void SetRampData(RampData &data) override EXCLUDES(mutex_){}
[146] int from_trajectory_id
[146]  int to_trajectory_id
[153] TrajectoryBuilderInterface::LocalAbnormalStateCallback m_callback_state_;
[171] std::set<NodeId> node_ids;
[182] void AddTrajectoryIfNeeded(int trajectory_id) REQUIRES(mutex_);
[195]  bool newly_finished_submap
[238] GlobalSlamOptimizationCallback global_slam_optimization_callback_;
[247] TrajectoryConnectivityState trajectory_connectivity_state_;
[260] std::unique_ptr<optimization::OptimizationProblem3D> optimization_problem_;
[312] bool IsFinished(int trajectory_id) const override REQUIRES(parent_->mutex_);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/pose_graph_3d.cc  ( 63 )
[209] std::vector<TrajectoryNode> submap_nodes;
[379] TrimmingHandle trimming_handle(this);
[418] std::ostringstream progress_info;
[515] TrajectoryData trajectory_data;
[592] common::Histogram rotational_residual;
[593] common::Histogram translational_residual;
[648] auto node_it = std::next(trajectory_nodes_.find(last_optimized_node_id));
[677] common::optional<TrajectoryNodePose::ConstantPoseData> constant_pose_data;
[806] auto submap_data = GetSubmapDataUnderLock(submap_id_data.id);
[818] auto begin_it = global_submap_poses.BeginOfTrajectory(trajectory_id);
[911] std::set<NodeId> nodes_to_retain;
[919] std::set<NodeId> nodes_to_remove;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_3d_test.cc  ( 35 )
[52] auto parameter_dictionary = common::MakeDictionary(R"text( return {
[179] sensor::TimedPointCloud directions_in_rangefinder_frame;
[182] sensor::Vector5f first_point;
[192] sensor::Vector5f second_point;
[206] sensor::TimedPointCloud returns_in_world_frame;
[212] sensor::Vector5f return_point;
[235] common::Time current_time = common::FromUniversal(12345678);
[256]  double expected_accuracy
[257] int num_poses = 0;
[261] common::Setting::CurrLaserState c_states;
[275] std::unique_ptr<LocalTrajectoryBuilder3D> local_trajectory_builder_;
[276] std::vector<Eigen::Vector3f> bubbles_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/pose_graph_3d_test.cc  ( 23 )
[66] auto pose_graph_parameters = test::ResolveLuaParameters(kPoseGraphLua);
[73] auto optimization_problem = common::make_unique<optimization::OptimizationProblem3D>( pose_graph_options_.optimization_problem_options());
[87] proto::PoseGraphOptions pose_graph_options_;
[88] std::unique_ptr<common::ThreadPool> thread_pool_;
[89] std::unique_ptr<PoseGraph3DForTesting> pose_graph_;
[102] proto::PoseGraph empty_proto;
[110] auto fake_node = test::CreateFakeNode();
[113] auto fake_submap = test::CreateFakeSubmap3D();
[123] proto::PoseGraph actual_proto = pose_graph_->ToProto();
[145] int submap_index = (i < 3) ? 42 + i : 100 + i;
[149] int node_index = 7 + num_nodes_per_submap * submap_index + j;
[202] Trimmable pose_graph
[203] auto submap_ids = pose_graph->GetSubmapIds(trajectory_id_);
[214] int trajectory_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/imu_integration.h  ( 7 )
[36] Eigen::Quaternion<T> delta_rotation;
[54] common::Time current_time = start_time;
[59] common::Time next_imu_data = common::Time::max();
[63] common::Time next_time = std::min(next_imu_data, end_time);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_trajectory_builder_options_3d.h  ( 1 )
[27]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/local_slam_result_3d.cc  ( 2 )
[30] int trajectory_id
[30]  PoseGraph pose_graph
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/precomputation_grid_3d.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/occupied_space_cost_function_3d.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/fast_correlative_scan_matcher_3d.h  ( 31 )
[42]  common::LuaParameterDictionary parameter_dictionary
[57] std::vector<PrecomputationGrid3D> precomputation_grids_;
[70] transform::Rigid3d pose_estimate;
[71] float rotational_score;
[72] float low_resolution_score;
[92]  float min_score
[130]  int num_discrete_scans
[140]  int candidate_depth
[148] std::unique_ptr<PrecomputationGridStack3D> precomputation_grid_stack_;
[150] RotationalScanMatcher rotational_scan_matcher_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/low_resolution_matcher.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/translation_delta_cost_functor_3d.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotational_scan_matcher.h  ( 6 )
[33]  int histogram_size
[47]  float initial_angle
[50] Eigen::VectorXf histogram_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/ceres_scan_matcher_3d_test.cc  ( 10 )
[51] auto parameter_dictionary = common::MakeDictionary(R"text( return {
[77] HybridGrid hybrid_grid_;
[78] transform::Rigid3d expected_pose_;
[79] sensor::PointCloud point_cloud_;
[80] proto::CeresScanMatcherOptions3D options_;
[81] std::unique_ptr<CeresScanMatcher3D> ceres_scan_matcher_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/fast_correlative_scan_matcher_3d.cc  ( 61 )
[64] Eigen::Array3i last_width = Eigen::Array3i::Ones();
[82] std::vector<std::vector<Eigen::Array3i>> cell_indices_per_depth;
[83] float rotational_score;
[95] int scan_index;
[106] float low_resolution_score = 0.f;
[169] float max_point_distance = 0.f;
[225] std::vector<Eigen::Array3i> full_resolution_cell_indices;
[273] float max_scan_range = 3.f * resolution_;
[421] Candidate3D best_high_resolution_candidate = Candidate3D::Unsuccessful();
[427] std::vector<Candidate3D> higher_resolution_candidates;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotational_scan_matcher_test.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/real_time_correlative_scan_matcher_3d_test.cc  ( 8 )
[53] auto parameter_dictionary = common::MakeDictionary(R"text( return {
[74] HybridGrid hybrid_grid_;
[75] transform::Rigid3d expected_pose_;
[76] sensor::PointCloud point_cloud_;
[78] std::unique_ptr<RealTimeCorrelativeScanMatcher3D> real_time_correlative_scan_matcher_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/interpolated_grid.h  ( 38 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/low_resolution_matcher.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/ceres_scan_matcher_3d.cc  ( 7 )
[87] optimization::CeresPose ceres_pose( initial_pose_estimate, nullptr , options_.only_optimize_yaw() ? std::unique_ptr<ceres::LocalParameterization>( common::make_unique<ceres::AutoDiffLocalParameterization< YawOnlyQuaternionPlus, 4, 1>>()) : std::unique_ptr<ceres::LocalParameterization>( common::make_unique<ceres::QuaternionParameterization>()), &problem);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/real_time_correlative_scan_matcher_3d.cc  ( 19 )
[37]  transform::Rigid3d pose_estimate
[39] float best_score = -1.f;
[63] float max_scan_range = 3.f * resolution;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotation_delta_cost_functor_3d_test.cc  ( 8 )
[33] std::unique_ptr<ceres::CostFunction> cost_function( RotationDeltaCostFunctor3D::CreateAutoDiffCostFunction(scaling_factor, target_rotation));
[40] double sum_of_squares = 0;
[67] double expected_cost = std::pow(scaling_factor * std::sin(angle / 2.0), 2);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/fast_correlative_scan_matcher_3d_test.cc  ( 19 )
[66] auto parameter_dictionary = common::MakeDictionary( "return {"
[127] std::mt19937 prng_ = std::mt19937(42);
[129] std::uniform_real_distribution<float> distribution_ = std::uniform_real_distribution<float>(-1.f, 1.f);
[130] RangeDataInserter3D range_data_inserter_;
[132] sensor::PointCloud point_cloud_;
[133] std::unique_ptr<HybridGrid> hybrid_grid_;
[143] std::unique_ptr<FastCorrelativeScanMatcher3D> fast_correlative_scan_matcher( GetFastCorrelativeScanMatcher(options_, expected_pose));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/real_time_correlative_scan_matcher_3d.h  ( 8 )
[50]  transform::Rigid3d pose_estimate
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/precomputation_grid_3d.h  ( 5 )
[50]  bool half_resolution
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotation_delta_cost_functor_3d.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/interpolated_grid_test.cc  ( 9 )
[46] HybridGrid hybrid_grid_;
[47] InterpolatedGrid interpolated_grid_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/ceres_scan_matcher_3d.h  ( 8 )
[35]  common::LuaParameterDictionary parameter_dictionary
[56]  transform::Rigid3d pose_estimate
[60] ceres::Solver::Options ceres_solver_options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/precomputation_grid_3d_test.cc  ( 11 )
[32] HybridGrid hybrid_grid(2.f);
[35] std::uniform_int_distribution<int> coordinate_distribution(-50, 49);
[37] std::uniform_real_distribution<float> value_distribution(kMinProbability, kMaxProbability);
[46] std::vector<PrecomputationGrid3D> precomputed_grids;
[60] float max_probability = 0.;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/3d/scan_matching/rotational_scan_matcher.cc  ( 29 )
[71] Eigen::Vector3f last_point = slice.front();
[103] std::vector<SortableAnglePointPair> by_angle;
[125] int full_buckets = common::RoundToInt(rotate_by_buckets - 0.5f);
[130] Eigen::VectorXf rotated_histogram_0 = Eigen::VectorXf::Zero(histogram.size());
[131] Eigen::VectorXf rotated_histogram_1 = Eigen::VectorXf::Zero(histogram.size());
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.cc  ( 142 )
[45] int basic_count = 0;
[102] Eigen::Quaterniond qua_odm
[103] Eigen::Matrix3d R_init;
[105] Eigen::Matrix3d Rbn=(qua_odm.toRotationMatrix()*R_init).transpose();
[246] std::shared_ptr<Submap2D> matching_submap = active_submaps_.WindowsSubmaps();
[251] transform::Rigid2d initial_ceres_pose = pose_prediction;
[252] transform::Rigid2d initial_ceres_pose0 = pose_prediction;
[255] sensor::AdaptiveVoxelFilter adaptive_voxel_filter( options_.adaptive_voxel_filter_options());
[270] auto pose_observation = common::make_unique<transform::Rigid2d>();
[273] TrajectoryBuilderInterface::Ab_state s_states;
[357] double residual_distance = (pose_observation->translation() - pose_prediction.translation()) .norm();
[360] double residual_angle = std::abs(pose_observation->rotation().angle() - pose_prediction.rotation().angle());
[374] int flag_error
[374] bool flag_wall
[386] Eigen::Vector2d init_csm_pos = initial_ceres_pose.translation();
[403] Eigen::Vector3d score_vec = real_time_correlative_scan_matcher_.Match( pose_prediction, filtered_gravity_aligned_point_cloud, *static_cast<const ProbabilityGrid*>(matching_submap->grid()), &initial_ceres_pose,flag_error);
[480] Eigen::Vector2d after_csm_pos = initial_ceres_pose.translation();
[481] Eigen::Vector2d deta_csm = after_csm_pos - init_csm_pos;
[489] double radio_confi =0.01;
[494] Eigen::Vector2d init_2d_pos = initial_ceres_pose0.translation() ;
[535]  Eigen::Vector3d dpos_odm 
[535]  Eigen::Vector3d dpos_imu
[535]  Eigen::Vector3d dpos_frame_vel
[536] double slip_dpos =0.01;
[537] int enable_imu =1;
[544] double deta_pos_vo = (dpos_frame_vel- dpos_odm).norm();
[545] double deta_pos_io = (dpos_imu- dpos_odm).norm();
[546] double deta_pos_iv = (dpos_imu - dpos_frame_vel).norm();
[644] auto synchronized_data = range_data_collator_.AddRangeData(sensor_id, unsynchronized_data);
[645] uint64_t time_1 = common::getTimeNow();
[656] transform::Rigid3d T_init = transform::Rigid3d(common::Setting::t_init,common::Setting::q_init);
[663] uint64_t time_2 = common::getTimeNow();
[685] uint64_t time_3 = common::getTimeNow();
[699] std::vector<transform::Rigid3f> range_data_poses;
[702] std::vector<transform::Rigid3f> error_range_data_poses;
[706] int num_laser =0;
[708] double deta_tm;
[709] double deta_frame_tm;
[719] uint64_t time_4 = common::getTimeNow();
[729] common::Time time_point = time + common::FromSeconds(range.point_time[3]);
[758] Eigen::Vector3d deta_vel = cur_odm_vel - cur_frame_vel;
[859] int temp_first_frame = first_frame;
[872] transform::Rigid3d vel_time = extrapolator_->ExtrapolateImuVel(time);
[874] int flag_imu_loss =0;
[891] int use_model =1;
[903] common::DataType data_detecting_current;
[904] common::ErrType e_state = common::ErrType::E_WAIT_INIT;
[905] transform::Rigid3f Rota_1 = error_range_data_poses.back();
[956] uint64_t time_45 = common::getTimeNow();
[966] bool flag_long_imu_loss = extrapolator_->long_loss_imu_time;
[971] std::unique_ptr<transform::Rigid2d> pose_estimate_2d = ScanMatch(time, pose_prediction, gravity_aligned_range_data);
[972] uint64_t time_46 = common::getTimeNow();
[985] transform::Rigid3d Two_modify = pose_estimate;
[988] transform::Rigid3d tmp_pose;
[989] transform::Rigid3d tmp_modi_pos = common::Setting::pose_control.Unopti_pose.inverse()* common::Setting::pose_control.Opti_pose;
[1010] Eigen::Vector3d tmp_frame_pos = pose_estimate.translation();
[1011] Eigen::Quaterniond tmp_modi_qua = Two_modify.rotation();
[1012] Eigen::Quaterniond tmp_frame_qua = pose_estimate.rotation();
[1015] uint64_t tmp_time = common::TimeToUint64(time);
[1034] double dn_time = tmp_time * 0.001;
[1043] sensor::RangeData range_data_in_local = TransformRangeData(gravity_aligned_range_data, transform::Embed3D(pose_estimate_2d->cast<float>()));
[1047] sensor::RangeData range_data_in_local_new = TransformRangeData(gravity_aligned_range_data, gravity_alignment.inverse().cast<float>());
[1049] uint64_t time_47 = common::getTimeNow();
[1064] std::unique_ptr<InsertionResult> insertion_result = InsertIntoSubmap(time, range_data_in_local, gravity_aligned_range_data, pose_estimate, gravity_alignment.rotation());
[1068] uint64_t time_48 = common::getTimeNow();
[1094] int is_clip =0;
[1104] std::unique_ptr<transform::Rigid2d> error_pose_estimate_2d = ScanMatch(time, pose_prediction2, error_gravity_aligned_range_data,1,flag_wall);
[1119] Eigen::Vector2d deta_frame_pos = pose_estimate_2d->translation() - pose_prediction.translation();
[1120] Eigen::Vector2d deta_error_pos = error_pose_estimate_2d->translation() - pose_prediction2.translation();
[1121] double deta_frame_norm = deta_frame_pos.norm();
[1122] double deta_odm_norm = deta_error_pos.norm();
[1123] double deta_score = score_frame_vel - score_odm_vel;
[1125] bool opti_vel_odm1 = (deta_frame_norm<0.012||(deta_odm_norm - deta_frame_norm>=0.007));
[1127] bool opti_vel_odm2 = ((deta_odm_norm - deta_frame_norm>=0.008)&&deta_score>-0.05);
[1136] bool flag_pre_slip = (old_slip_flag>0&&last_slip_flag>0) ;
[1137] bool flag_imu_frame = (init_slip_state==1&&( mabe_clip>0 || opti_vel_odm1 ));
[1138] bool flag_change_vel = (init_slip_state ==2&&(deta_score>0.03||opti_vel_odm2));
[1159] transform::Rigid3d insert_pose;
[1160] sensor::RangeData inser_gravity_aligned_range_data ;
[1161] transform::Rigid3f insert_pose_estimate_2d;
[1193] double deta_time = common::ToSeconds(time - last_frame_time);
[1203] transform::Rigid3d slip_pose = error_pose_prediction.inverse()*insert_pose;
[1244] double radio_filter = 0.7;
[1265] double deta_slip = common::Setting::odm_slip_vel(0)-slip_vel(0);
[1386] std::string time_name;
[1388] std::ofstream laser_;
[1410] double confi_odm =1;
[1421] int flag_reloc = 1;
[1610]  metrics::FamilyFactory family_factory
[1616] auto score_boundaries = metrics::Histogram::FixedWidth(0.05, 20);
[1622] auto cost_boundaries = metrics::Histogram::ScaledPowersOf(2, 0.01, 100);
[1627] auto distance_boundaries = metrics::Histogram::ScaledPowersOf(2, 0.01, 10);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_2d.h  ( 94 )
[54] transform::Rigid3d local_pose;
[55] sensor::RangeData range_data_in_local;
[82] metrics::FamilyFactory family_factory
[86] common::DataChecking *m_datacheck_ptr;
[113]  double confi_odm
[123] int flag_error
[123] bool flag_wall
[128] transform::Rigid3d T_init
[131]  Eigen::Vector3d dpos_odm 
[131]  Eigen::Vector3d dpos_imu
[131]  Eigen::Vector3d dpos_frame_vel
[133] TrajectoryBuilderInterface::LocalAbnormalStateCallback m_callback_state_;
[136] ActiveSubmaps2D active_submaps_;
[138] MotionFilter motion_filter_;
[140] scan_matching::RealTimeCorrelativeScanMatcher2D real_time_correlative_scan_matcher_;
[141] scan_matching::CeresScanMatcher2D ceres_scan_matcher_;
[143] transform::Rigid3d non_gravity_aligned_pose_prediction;
[144] transform::Rigid3d error_pose_prediction;
[147] std::unique_ptr<PoseExtrapolator> extrapolator_;
[148] common::Time time_first;
[149] common::Time last_frame_time;
[150] uint64_t start_frame_time;
[152] double max_xn=0.0;
[153] double max_yn=0.0;
[154] double min_xn=0.0;
[155] double min_yn=0.0;
[157] int hight_wall = 0;
[158] bool corridor_is_on_;
[159] bool empty_is_on_;
[160] bool slip_is_on_;
[162] std::ofstream ofs_frame_angle;
[163] std::ofstream ofs_frame;
[164] std::ofstream ofs_frame_tum;
[166] std::ofstream ofs_state_slip;
[167] std::ofstream ofs_dvel;
[168] std::ofstream ofs_wall_state;
[169] std::ofstream ofs_empty_state;
[170] std::ofstream ofs_csm_frame;
[171] std::ofstream ofs_local_deal_time;
[172] std::ofstream ofs_local_front_deal_time;
[173] std::ofstream ofs_node_points;
[174] std::ofstream ofs_h_nodes;
[177] int num_node =0;
[178] int laser_points =0;
[179] int first_frame =1;
[180] int num_frame =0;
[181] int last_loss_laser=0;
[182] int now_loss_laser =0;
[183] int mabe_clip = 0;
[184] int num_accumulated_ = 0;
[185] int odm_bad =0;
[187] int laser_frame_clip_count = 0;
[188] int no_hit_frame_count = 0;
[189] bool first_csm = true;
[190] bool flag_imu_lost = false;
[192] int last_slip_flag =0;
[193] int old_slip_flag =0;
[194] int laser_state =0;
[195] int init_slip_state=1;
[197] double score_frame_vel;
[198] double score_odm_vel;
[199] double deta_vel_norm;
[200] double last_deta_vel_norm;
[201] double delta_frame_time;
[203] double deta_angle;
[204] double max_h_point;
[206] Eigen::Vector3d last_odm_vel;
[207] Eigen::Vector3d cur_odm_vel;
[208] Eigen::Vector3d last_frame_vel;
[209] Eigen::Vector3d cur_frame_vel;
[210] Eigen::Vector3d cur_odm_angle_vel;
[211] Eigen::Vector3d cur_odm_angle;
[212] Eigen::Vector3d cur_imu_angle;
[213] Eigen::Vector3d last_frame_pos;
[217] Eigen::Vector3d slip_vel;
[218] sensor::RangeData accumulated_range_data_;
[219] sensor::RangeData error_accumulated_range_data_;
[220] sensor::RangeData curr_correct_range_data_;
[221] std::chrono::steady_clock::time_point accumulation_started_;
[223] RangeDataCollator range_data_collator_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_options_2d.h  ( 1 )
[27]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/ray_casting.h  ( 5 )
[36]  bool insert_free_space
[36]  ProbabilityGrid probability_grid
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.cc  ( 74 )
[44] std::ofstream ofs_frame_modi;
[106] SubmapId submap_id = delete_submaps_.at(i);
[115] std::set<NodeId> nodes_to_remove;
[137] auto node_data_ = optimization_problem_->node_data();
[167] int trajectory_id
[393] int num_low_node =0;
[394] int num_max_node = 69;
[468] transform::Rigid2d node_link_submap_2d=constraints::ComputeSubmapPose(*insertion_submaps.front()).inverse() * local_pose_2d;
[508] int num_low =0;
[509] int num_media =0;
[510] int num_large =0;
[511] int num_max =16;
[512] std::vector<int> vec_submap;
[598] int optimize_every_n_nodes=options_.optimize_every_n_nodes();
[670] TrimmingHandle trimming_handle(this);
[708] std::ostringstream progress_info;
[958] transform::Rigid3d Fix_local_to_new_global;
[1063] transform::Rigid3d pose_last = transform::Rigid3d(common::Setting::closure_state.p,common::Setting::closure_state.q);
[1064] transform::Rigid3d pose_new = old_global_to_new_global* pose_last;
[1082] auto node_it = std::next(trajectory_nodes_.find(last_optimized_node_id));
[1106] common::optional<TrajectoryNodePose::ConstantPoseData> constant_pose_data;
[1158] std::vector<PoseGraphInterface::RampData> r_data;
[1257] auto submap_data = GetSubmapDataUnderLock(submap_id_data.id);
[1269] auto begin_it = global_submap_poses.BeginOfTrajectory(trajectory_id);
[1365] std::set<NodeId> nodes_to_retain;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_slam_result_2d.h  ( 6 )
[40] void AddToTrajectoryBuilder( TrajectoryBuilderInterface* const trajectory_builder) override;
[41] int trajectory_id
[41]  PoseGraph pose_graph
[46] SubmapController<mapping::Submap2D>* submap_controller_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.h  ( 6 )
[38] Trimmable pose_graph
[49] uint16 current_submap_count_ = 0;
[51] bool finished_ = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/ray_casting.cc  ( 19 )
[73] int64 sub_y = (2 * (begin.y() % kSubpixelScale) + 1) * dx;
[150] Eigen::AlignedBox2f bounding_box(range_data.origin.head<2>());
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_trajectory_builder_options_2d.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/local_slam_result_2d.cc  ( 2 )
[30] int trajectory_id
[30]  PoseGraph pose_graph
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d_test.cc  ( 14 )
[45]  int submap_index
[45]  int num_cells
[45]  bool is_finished
[46] proto::Submap2D submap_2d;
[76] int node_index
[85]  bool is_intra_submap
[94] testing::FakeTrimmable fake_pose_graph_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d.h  ( 40 )
[76] int trajectory_id
[78] std::vector<SubmapId> delete_submaps_;
[105] bool IsTrajectoryFinished(int trajectory_id) const override REQUIRES(mutex_);
[107] bool IsTrajectoryFrozen(int trajectory_id) const override REQUIRES(mutex_);
[127] transform::Rigid3d GetLocalToGlobalTransform(int trajectory_id) const EXCLUDES(mutex_) override;
[150] void SetRampData(RampData &data) override EXCLUDES(mutex_);
[156] int from_trajectory_id
[156]  int to_trajectory_id
[163] TrajectoryBuilderInterface::LocalAbnormalStateCallback m_callback_state_;
[176] std::set<NodeId> node_ids;
[181] double node_odm_confi = 0.0;
[189] void AddTrajectoryIfNeeded(int trajectory_id) REQUIRES(mutex_);
[202]  bool newly_finished_submap
[243] GlobalSlamOptimizationCallback global_slam_optimization_callback_;
[252] TrajectoryConnectivityState trajectory_connectivity_state_;
[268] std::unique_ptr<optimization::OptimizationProblem2D> optimization_problem_;
[309] std::vector<SubmapId> submaps_pose;
[328] bool IsFinished(int trajectory_id) const override REQUIRES(parent_->mutex_);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/overlapping_submaps_trimmer_2d.cc  ( 30 )
[39] CellId cell_id{common::RoundToInt64((offset_(0) - point(0)) / resolution_),
[47] Eigen::Vector2d offset_;
[48] double resolution_;
[58]  SubmapCoverageGrid2D coverage_grid
[59] std::set<SubmapId> all_submap_ids;
[70] CellLimits cell_limits;
[116] auto submap_to_node = submap_to_latest_node.find(constraint.submap_id);
[128] auto submap_data_item = submap_data.find(submap_id_to_node_id.first);
[138] auto latest_node_id = trajectory_nodes.find(submap_id_to_node_id.second);
[150]  uint16 fresh_submaps_count
[150]  uint16 min_covered_cells_count
[172] std::vector<SubmapId> submap_ids_to_keep;
[188] Trimmable pose_graph
[190] int new_map=0;
[191] int last_index=0;
[202] std::vector<SubmapId> to_remove;
[203] std::vector<SubmapId> to_save;
[226] double norm_dis=sqrt((submap_.data.pose.translation().x()- submap_data.at(to_save.at(i)).pose.translation().x())* (submap_.data.pose.translation().x()-submap_data.at(to_save.at(i)).pose.translation().x())+ (submap_.data.pose.translation().y()-submap_data.at(to_save.at(i)).pose.translation().y())* (submap_.data.pose.translation().y()-submap_data.at(to_save.at(i)).pose.translation().y()));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/pose_graph_2d_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/ceres_scan_matcher_2d.h  ( 11 )
[35]  common::LuaParameterDictionary parameter_dictionary
[53]  transform::Rigid2d pose_estimate
[64] ceres::Solver::Options ceres_solver_options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/correlative_scan_matcher_test.cc  ( 7 )
[54] Candidate2D bigger_candidate(3, 4, 5, search_parameters);
[60] sensor::PointCloud point_cloud;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/rotation_delta_cost_functor_2d.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.h  ( 9 )
[70]  transform::Rigid2d pose_estimate
[79] int flag_new
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d.cc  ( 39 )
[37] std::ofstream ofs_csm_state;
[39]  float best_score
[48] bool is_exist=false;
[94] int num_candidates = 0;
[135] int scan_index = 0;
[219]  transform::Rigid2d pose_estimate
[219]  int flag_new
[264] int flag_wall = 0;
[287] Eigen::Vector3d out_data;
[323] std::vector<sensor::PointCloud> imu_rotated_scans;
[345] std::vector<Candidate2D> imu_candidates = GenerateExhaustiveSearchCandidatesForImu(search_parameters);
[346] std::vector<Candidate2D> imu_candidates_noWeight = imu_candidates;
[393] double MeanScore = 0.0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/correlative_scan_matcher_2d.cc  ( 16 )
[34] float max_scan_range = 3.f * resolution;
[118] Eigen::Array2i min_bound = Eigen::Array2i::Zero();
[119] Eigen::Array2i max_bound = Eigen::Array2i::Zero();
[136] std::vector<sensor::PointCloud> rotated_scans;
[140] double delta_theta = -search_parameters.num_angular_perturbations * search_parameters.angular_perturbation_step_size;
[154] std::vector<DiscreteScan2D> discrete_scans;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/ceres_scan_matcher_2d_test.cc  ( 9 )
[47] auto parameter_dictionary = common::MakeDictionary(R"text( return {
[76] ProbabilityGrid probability_grid_;
[77] sensor::PointCloud point_cloud_;
[78] std::unique_ptr<CeresScanMatcher2D> ceres_scan_matcher_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d.h  ( 26 )
[44]  common::LuaParameterDictionary parameter_dictionary
[92] std::vector<uint8> cells_;
[108] std::vector<PrecomputationGrid2D> precomputation_grids_;
[129]  float min_score
[129]  transform::Rigid2d pose_estimate
[149]  SearchParameters search_parameters
[162]  int candidate_depth
[165] MapLimits limits_;
[166] std::unique_ptr<PrecomputationGridStack2D> precomputation_grid_stack_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d_test.cc  ( 18 )
[43] ProbabilityGrid probability_grid( MapLimits(0.05, Eigen::Vector2d(5., 5.), CellLimits(250, 250)));
[44] std::vector<float> reusable_intermediate_grid;
[47] PrecomputationGrid2D precomputation_grid_dummy( probability_grid, probability_grid.limits().cell_limits(), 1, &reusable_intermediate_grid);
[58] PrecomputationGrid2D precomputation_grid( probability_grid, probability_grid.limits().cell_limits(), width, &reusable_intermediate_grid);
[61] float max_score = -std::numeric_limits<float>::infinity();
[120] auto parameter_dictionary = common::MakeDictionary(R"text( return {
[144] ProbabilityGridRangeDataInserter2D range_data_inserter( CreateRangeDataInserterTestOptions2D());
[148] sensor::PointCloud point_cloud;
[174] FastCorrelativeScanMatcher2D fast_correlative_scan_matcher(probability_grid, options);
[175] transform::Rigid2d pose_estimate;
[196] sensor::PointCloud unperturbed_point_cloud;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/real_time_correlative_scan_matcher_2d_test.cc  ( 8 )
[44] auto parameter_dictionary = common::MakeDictionary( "return { "
[80] ProbabilityGrid probability_grid_;
[81] std::unique_ptr<ProbabilityGridRangeDataInserter2D> range_data_inserter_;
[82] sensor::PointCloud point_cloud_;
[84] std::unique_ptr<RealTimeCorrelativeScanMatcher2D> real_time_correlative_scan_matcher_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/fast_correlative_scan_matcher_2d.cc  ( 37 )
[73] std::deque<float> non_ascending_maxima_;
[109] SlidingWindowMaximum current_values;
[177] std::vector<float> reusable_intermediate_grid;
[201]  transform::Rigid2d pose_estimate
[307] int num_candidates = 0;
[373] Candidate2D best_high_resolution_candidate(0, 0, 0, search_parameters);
[382] std::vector<Candidate2D> higher_resolution_candidates;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/correlative_scan_matcher_2d.h  ( 22 )
[38] int min_x;
[39] int max_x;
[40] int min_y;
[41] int max_y;
[58] int num_angular_perturbations;
[59] double angular_perturbation_step_size;
[61] int num_scans;
[62] std::vector<LinearBounds> linear_bounds;
[90] int scan_index = 0;
[93] int x_index_offset = 0;
[94] int y_index_offset = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/ceres_scan_matcher_2d.cc  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/translation_delta_cost_functor_2d.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/2d/scan_matching/occupied_space_cost_function_2d.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_3d.h  ( 18 )
[115] metrics::FamilyFactory family_factory
[122] std::unique_ptr<scan_matching::FastCorrelativeScanMatcher3D> fast_correlative_scan_matcher;
[123] std::weak_ptr<common::Task> creation_task_handle;
[143]  bool match_full_submap
[149] common::Mutex mutex_;
[176] common::FixedRatioSampler sampler_;
[177] scan_matching::CeresScanMatcher3D ceres_scan_matcher_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_3d_test.cc  ( 10 )
[50] auto constraint_builder_parameters = test::ResolveLuaParameters(R"text( include "pose_graph.lua" POSE_GRAPH.constraint_builder.sampling_ratio = 1 POSE_GRAPH.constraint_builder.min_score = 0 POSE_GRAPH.constraint_builder.global_localization_min_score = 0 POSE_GRAPH.constraint_builder.fast_correlative_scan_matcher_3d.min_low_resolution_score = 0 POSE_GRAPH.constraint_builder.fast_correlative_scan_matcher_3d.min_rotational_score = 0 return POSE_GRAPH.constraint_builder)text");
[56] std::unique_ptr<ConstraintBuilder3D> constraint_builder_;
[57] MockCallback mock_;
[58] common::testing::ThreadPoolForTesting thread_pool_;
[73] auto node_data = std::make_shared<TrajectoryNode::Data>();
[82] std::vector<TrajectoryNode> submap_nodes = {node};
[83] SubmapId submap_id{0, 1};
[85] int expected_nodes = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d.h  ( 24 )
[110] metrics::FamilyFactory family_factory
[113] TrajectoryBuilderInterface::LocalAbnormalStateCallback m_callback_state_;
[119] std::unique_ptr<scan_matching::FastCorrelativeScanMatcher2D> fast_correlative_scan_matcher;
[120] std::weak_ptr<common::Task> creation_task_handle;
[137]  bool match_full_submap
[149] common::Mutex mutex_;
[176] common::FixedRatioSampler sampler_;
[177] scan_matching::CeresScanMatcher2D ceres_scan_matcher_;
[182] bool relocation_is_on_;
[184] std::ofstream ofs_error_loop;
[185] std::ofstream ofs_constraint_data;
[186] std::ofstream ofs_relocation_data;
[187] std::ofstream ofs_loop_points;
[188] std::ofstream ofs_relocal_constraint_p;
[192] scan_matching::RealTimeCorrelativeScanMatcher2D real_time_correlative_scan_matcher_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d_test.cc  ( 9 )
[47] auto constraint_builder_parameters = test::ResolveLuaParameters(R"text( include "pose_graph.lua" POSE_GRAPH.constraint_builder.sampling_ratio = 1 POSE_GRAPH.constraint_builder.min_score = 0 POSE_GRAPH.constraint_builder.global_localization_min_score = 0 return POSE_GRAPH.constraint_builder)text");
[53] std::unique_ptr<ConstraintBuilder2D> constraint_builder_;
[54] MockCallback mock_;
[55] common::testing::ThreadPoolForTesting thread_pool_;
[69] TrajectoryNode::Data node_data;
[74] SubmapId submap_id{0, 1};
[75] MapLimits map_limits(1., Eigen::Vector2d(2., 3.), CellLimits(100, 110));
[78] int expected_nodes = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_3d.cc  ( 24 )
[99] auto constraint_task = common::make_unique<common::Task>();
[107] auto constraint_task_handle = thread_pool_->Schedule(std::move(constraint_task));
[149] auto finish_node_task_handle = thread_pool_->Schedule(std::move(finish_node_task_));
[182] auto scan_matcher_task = common::make_unique<common::Task>();
[202]  bool match_full_submap
[207] std::unique_ptr<scan_matching::FastCorrelativeScanMatcher3D::Result> match_result;
[260] ceres::Solver::Summary unused_summary;
[261] transform::Rigid3d constraint_transform;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder.h  ( 1 )
[28]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/constraints/constraint_builder_2d.cc  ( 49 )
[138] auto constraint_task = common::make_unique<common::Task>();
[148] auto constraint_task_handle = thread_pool_->Schedule(std::move(constraint_task));
[222] auto finish_node_task_handle = thread_pool_->Schedule(std::move(finish_node_task_));
[250] auto &submap_scan_matcher = submap_scan_matchers_[submap_id];
[252] auto &scan_matcher_options = options_.fast_correlative_scan_matcher_options();
[253] auto scan_matcher_task = common::make_unique<common::Task>();
[272]  bool match_full_submap
[302] transform::Rigid2d pose_estimate = transform::Rigid2d::Identity();
[396] ceres::Solver::Summary unused_summary;
[409] double score_csm=real_time_correlative_scan_matcher_.MatchCheck(pose_estimate, constant_data->filtered_gravity_aligned_point_cloud, *static_cast<const ProbabilityGrid*>(submap->grid()),&poesSCM);
[424] Eigen::Vector3d pos_init;
[425] Eigen::Quaterniond q_init(cos(pose_estimate.rotation().angle() / 2.0), 0, 0, sin(pose_estimate.rotation().angle() / 2.0));
[431] transform::Rigid3d pose_init_3d(pos_init, q_init);
[452] TrajectoryBuilderInterface::Ab_state s_states;
[504] double error_pos_norm = (initial_pose.inverse() * pose_estimate).translation().norm();
[505] double error_angle_norm = (initial_pose.inverse() * pose_estimate).rotation().angle()*57.3;
[506] double check_pos=3.5;
[759] auto *queue_length = factory->NewGaugeFamily( "mapping_internal_constraints_constraint_builder_2d_queue_length", "Queue length");
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/mock_map_builder.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/mock_trajectory_builder.h  ( 1 )
[50] std::unique_ptr<mapping::LocalSlamResultData> local_slam_result_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/fake_trimmable.h  ( 6 )
[45] std::vector<SubmapId> submap_ids;
[102] std::vector<SubmapId> trimmed_submaps_;
[104] std::vector<PoseGraphInterface::Constraint> constraints_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/test_helpers.cc  ( 26 )
[34] auto file_resolver = ::cartographer::common::make_unique< ::cartographer::common::ConfigurationFileResolver>( std::vector<std::string>{
[43] double travel_distance
[43]  double time_step
[45] cartographer::sensor::TimedPointCloud point_cloud;
[74] int trajectory_id
[74]  int submap_index
[84]  int node_index
[114]  proto::PoseGraph pose_graph
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/mock_pose_graph.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/testing/test_helpers.h  ( 16 )
[35] double travel_distance
[35]  double time_step
[37] int trajectory_id = 1
[37]  int submap_index = 1
[39]  int node_index = 1
[45]  proto::PoseGraph pose_graph
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_3d.cc  ( 61 )
[128]  bool freeze_landmarks
[268] ceres::Problem::Options problem_options;
[284] bool first_submap = true;
[366] auto imu_it = imu_data.begin();
[367] auto prev_node_it = node_it;
[385] auto imu_it2 = imu_it;
[501] bool fixed_frame_pose_initialized = false;
[517] transform::Rigid3d fixed_frame_pose_in_map;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_interface.h  ( 8 )
[54] int trajectory_id
[67] int32 max_num_iterations
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_3d.h  ( 21 )
[46] transform::Rigid3d local_pose;
[47] transform::Rigid3d global_pose;
[65] int trajectory_id
[78] int32 max_num_iterations
[124] optimization::proto::OptimizationProblemOptions options_;
[128] sensor::MapByTime<sensor::ImuData> imu_data_;
[129] sensor::MapByTime<sensor::OdometryData> odometry_data_;
[130] sensor::MapByTime<sensor::FixedFramePoseData> fixed_frame_pose_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/isam_problem_2d.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.cc  ( 84 )
[40] double delta_pos = 0.05;
[41] double delta_angle = 0.006;
[96]  bool freeze_landmarks
[266] int id_to_push = node_data_.size() / 1000;
[309] ceres::Problem::Options problem_options;
[321] bool first_submap = true;
[323] int new_map = 0;
[357] bool first_node = true;
[414] bool to_continue = false;
[431] transform::Rigid2d now_pose = submap_data_.at(constraint.submap_id).global_pose * transform::Project2D(constraint.pose.zbar_ij);
[433] transform::Rigid2d new_pose = submap_data_.at(constraintCheck.submap_id).global_pose * transform::Project2D(constraintCheck.pose.zbar_ij);
[490] auto prev_node_it = node_it;
[504] double adjust_weight = 1;
[514] std::unique_ptr<transform::Rigid3d> relative_odometry = CalculateOdometryBetweenNodes(trajectory_id, first_node_data, second_node_data);
[816] std::vector<std::vector<transform::Rigid2d>> cons_pose
[816]  int old_map
[822] std::vector<ErrId> err_constraint_tmp;
[834] std::string path_name = cartographer::common::Setting::save_path + "/loop_constraint.txt";
[835] std::string err_path_name = cartographer::common::Setting::save_path + "/loop_constraint_err.txt";
[842] std::ofstream ofs_loop;
[843] std::ofstream ofs_loop0;
[853] std::vector<ConstraintTest> id_nodes;
[860] ConstraintTest tmp_constraint_test;
[867] ConstraintTest last_node_id = id_nodes[0];
[873] NodeId cur_nodeid;
[874] NodeId last_nodeid;
[882] NodeId cur_node_id = cur_nodeid;
[883] NodeId last_node_id_ = last_nodeid;
[884] transform::Rigid2d trans_pose1 = last_node_id.relative_pose2d;
[885] transform::Rigid2d trans_pose2 = id_nodes[ii].relative_pose2d;
[887] transform::Rigid2d relative_pose_node = node_data_.at(last_node_id_).local_pose_2d.inverse() * node_data_.at(cur_node_id).local_pose_2d;
[888] transform::Rigid2d relative_pose_constraint = trans_pose1.inverse() * trans_pose2;
[889] transform::Rigid2d check_result = relative_pose_node.inverse() * relative_pose_constraint;
[890] double error_pos_norm = check_result.translation().norm();
[891] double error_angle_norm = check_result.normalized_angle();
[894] ErrId cur_errcon;
[895] ErrId cur_errcon0;
[967] int old_map_num = 0;
[1052] std::ofstream add_loop;
[1053] std::ofstream add_loop_old;
[1239] std::vector<NodeId> nodes_to_remove;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_3d_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/isam_problem_2d.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_options.h  ( 1 )
[28]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_options.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/ceres_pose.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/optimization_problem_2d.h  ( 36 )
[45] transform::Rigid2d local_pose_2d;
[46] transform::Rigid2d global_pose_2d;
[47] Eigen::Quaterniond gravity_alignment;
[48] double odm_confi;
[50] bool is_pushed ;
[54] transform::Rigid2d global_pose;
[59] transform::Rigid2d relative_pose2d;
[60] int nodes_id;
[64] int node_index;
[65] int submap_index;
[79] int trajectory_id
[92] int32 max_num_iterations
[93]  int old_map
[95] NodeId cur_node_id 
[95] NodeId last_node_id 
[95] transform::Rigid2d trans_pose1 
[95] transform::Rigid2d trans_pose2
[137] std::ofstream ofs_confi;
[138] int count_opti=0;
[147] std::vector<ErrId> err_constraint_;
[148] std::vector<ErrId> err_constraint_old;
[149] ConstraintTest constraint_test;
[150] optimization::proto::OptimizationProblemOptions options_;
[156] sensor::MapByTime<sensor::ImuData> imu_data_;
[157] sensor::MapByTime<sensor::OdometryData> odometry_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/isam_problem_interface.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/ceres_pose.h  ( 2 )
[56] std::shared_ptr<Data> data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/rotation_cost_function_3d.h  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/cost_helpers.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_3d.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_2d.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_2d.cc  ( 11 )
[91] bool Evaluate(double const* const* parameters, double* residuals, double** jacobians) const override {
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_3d.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/cost_helpers_impl.h  ( 14 )
[116] T prev_scale(1. - factor);
[117] T next_scale(factor);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_2d_test.cc  ( 2 )
[37] NodeSpec2D prev_node;
[40] NodeSpec2D next_node;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/spa_cost_function_2d_test.cc  ( 10 )
[78] ResidualType residuals_;
[79] JacobianType jacobian_;
[81] PoseGraphInterface::Constraint::Pose constraint_;
[82] std::unique_ptr<ceres::CostFunction> auto_diff_cost_;
[83] std::unique_ptr<ceres::CostFunction> analytical_cost_;
[92] ResidualType auto_diff_residual, analytical_residual;
[93] JacobianType auto_diff_jacobian, analytical_jacobian;
[115] auto residuals_and_jacobian = EvaluateAnalyticalCost(parameter_blocks);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/acceleration_cost_function_3d.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_2d.h  ( 9 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/mapping/internal/optimization/cost_functions/landmark_cost_function_3d_test.cc  ( 2 )
[37] NodeSpec3D prev_node;
[39] NodeSpec3D next_node;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/timestamped_transform.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/rigid_transform_test.cc  ( 10 )
[52] std::mt19937 prng_ = std::mt19937(42);
[54] std::uniform_real_distribution<T> distribution_ = std::uniform_real_distribution<T>(-1., 1.);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform.h  ( 11 )
[63] Eigen::Quaternion<T> normalized_quaternion = quaternion.normalized();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform_interpolation_buffer.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform_interpolation_buffer.h  ( 3 )
[60] std::vector<TimestampedTransform> timestamped_transforms_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/rigid_transform_test_helpers.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/rigid_transform.h  ( 13 )
[92] Vector translation_;
[93] Rotation2D rotation_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform_interpolation_buffer_test.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/transform_test.cc  ( 12 )
[31] std::uniform_real_distribution<float> angle_distribution(0.f, M_PI);
[32] std::uniform_real_distribution<float> position_distribution(-1.f, 1.f);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/timestamped_transform.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/transform/rigid_transform.cc  ( 10 )
[52] auto rotation_dictionary = dictionary->GetDictionary("rotation");
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/task.h  ( 4 )
[52] Task dependent_task
[58] void SetThreadPool(ThreadPoolInterface* thread_pool) EXCLUDES(mutex_);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/histogram.h  ( 3 )
[34] std::vector<float> values_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/rate_timer_test.cc  ( 2 )
[49] RateTimer<SimulatedClock> rate_timer(common::FromSeconds(1.));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/rate_timer.h  ( 11 )
[117] double squared_sum = 0.;
[129] std::deque<Event> events_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/ceres_solver_options.h  ( 2 )
[28]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/task.cc  ( 7 )
[41] std::shared_ptr<Task> shared_dependency;
[54] ThreadPoolInterface thread_pool
[66] Task dependent_task
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua_parameter_dictionary.cc  ( 32 )
[44] void QuoteStringOnStack(lua_State* L) {
[46] int current_index = lua_gettop(L);
[65] void SetDictionaryInRegistry(lua_State* L, LuaParameterDictionary* dictionary) {
[82] void CheckForLuaErrors(lua_State* L, int status) {
[87] int LuaChoose(lua_State* L) {
[101] void PushValue(lua_State* L, const int key) { lua_pushinteger(L, key); }
[109] void GetValueFromLuaTable(lua_State* L, const T& key) {
[115] void CheckTableIsAtTopOfStack(lua_State* L) {
[121] bool HasKeyOfType(lua_State* L, const T& key) {
[133] void GetArrayValues(lua_State* L, const std::function<void()>& pop_value) {
[150]  std::unique_ptr<FileResolver> file_resolver
[291]  ReferenceCount reference_count
[303] bool dictionary_is_empty = true;
[440] std::string error_msg = "Tried to include " + filename + " twice. Already included files in order of inclusion: ";
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua_parameter_dictionary_test.cc  ( 7 )
[75] std::unique_ptr<LuaParameterDictionary> sub_dict(dict->GetDictionary("blah"));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/port.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/blocking_queue_test.cc  ( 3 )
[31] BlockingQueue<std::unique_ptr<int>> blocking_queue;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/histogram.cc  ( 11 )
[48] float lower_bound = min;
[49] int total_count = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/thread_pool_test.cc  ( 19 )
[73] auto task_2 = common::make_unique<Task>();
[75] auto task_1 = common::make_unique<Task>();
[77] auto weak_task_1 = pool.Schedule(std::move(task_1));
[106] auto dependency_task = common::make_unique<Task>();
[122] auto dependency_handle = pool.Schedule(std::move(dependency_task));
[138] auto task_2a = common::make_unique<Task>();
[140] auto task_2b = common::make_unique<Task>();
[142] auto task_3 = common::make_unique<Task>();
[149] auto weak_task_2a = pool.Schedule(std::move(task_2a));
[153] auto weak_task_2b = pool.Schedule(std::move(task_2b));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/thread_pool.cc  ( 6 )
[71] std::shared_ptr<Task> shared_task;
[76] auto insert_result = tasks_not_ready_.insert(std::make_pair(task.get(), std::move(task)));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/make_unique.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua_parameter_dictionary.h  ( 13 )
[53]  std::unique_ptr<FileResolver> file_resolver
[109]  ReferenceCount reference_count
[123] static int LuaRead(lua_State* L);
[126] static int LuaInclude(lua_State* L);
[129] int index_into_reference_table_;
[143] std::vector<std::string> included_files_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/optional.h  ( 2 )
[63] std::unique_ptr<T> value_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/ceres_solver_options.cc  ( 4 )
[23]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/fixed_ratio_sampler.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/mutex.h  ( 6 )
[75] void Await(Predicate predicate) REQUIRES(this) {
[87] std::unique_lock<std::mutex> lock_;
[91] std::condition_variable condition_;
[92] std::mutex mutex_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/configuration_file_resolver.h  ( 2 )
[43] std::vector<std::string> configuration_files_directories_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/DataChecking.cc  ( 28 )
[13] Eigen::Quaterniond qua_odm
[13] int type_sense
[14] Eigen::Matrix3d R_init;
[17] Eigen::Matrix3d Rbn=(qua_odm.toRotationMatrix()*R_init).transpose();
[92]  DataType last_data
[97] Eigen::Quaterniond data_q = data.local_Pose.rotation();
[98] Eigen::Vector3d data_tt = data.local_Pose.translation();
[102] Eigen::Quaterniond last_data_q = last_data.local_Pose.rotation();
[103] Eigen::Vector3d last_data_tt = last_data.local_Pose.translation();
[112] uint64_t sys_time
[128] uint64_t delt_time
[128] Eigen::Vector3d curr_v
[143] Eigen::Vector3d curr_theta
[157] ErrType e_curr = TimeCheck(data.time,data.SYS_time) ;
[174] Eigen::Quaterniond new_rotation = (last_data_m.local_Pose.rotation() * delt_rotation).normalized();
[177] double yaw_ = angle_insert[2]/57.3;
[178] Eigen::Vector3d delt_pose;
[179] Eigen::Vector3d new_pose;
[204] ErrType e_current;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lua_parameter_dictionary_test_helpers.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/setting.cc  ( 48 )
[16] Opti_Unopti_pose pose_control(false);
[17] RunType run_type = RunType::NONE;
[18] RelocalState relocal_state = RelocalState();
[19] ClosureState closure_state = ClosureState();
[23] std::vector<mapping::NodeId> bad_lidars;
[24] std::vector<mapping::NodeId> corridor_lidars;
[25] std::vector<Point2f> candia_pos;
[26] std::vector<Point2f> candia_pos_check;
[27] std::vector<double> candia_angle;
[28] std::vector<double> best_csm_pose;
[30] Eigen::Quaterniond q_init = Eigen::Quaterniond::Identity();
[31] Eigen::Quaterniond q_end = Eigen::Quaterniond::Identity();
[33] Eigen::Vector3d k_odom= Eigen::Vector3d::Ones();
[34] Eigen::Vector3d init_kk_odm = Eigen::Vector3d::Ones();
[35] Eigen::Vector3d t_init = Eigen::Vector3d::Zero();
[36] Eigen::Vector3d t_end = Eigen::Vector3d::Zero();
[37] Eigen::Vector3d odm_slip_vel(0,0,0);
[38] Eigen::Vector3d t_ob(0,0,0);
[45] double relocal_distance = 3;
[46] float map_comp_ration = 0.0;
[47] float MIN_MATCH_SCORE = 0.5;
[48] int MIN_CANDI_NUM = 6;
[49] int stable_kk = 0;
[50] int OldNodeNum = 0;
[51] int Clean_state = 0;
[52] int imu_type =0;
[53] int open_debug_log = 0;
[55] int current_submap_id = 0;
[56] int last_loop_node=0;
[57] std::string gridmap_save_path = "null";
[58] std::string stop_sensor_id = "null";
[59] std::string save_path = "./log";
[61] bool run_T_init_pose = false;
[62] bool run_T_end_pose = false;
[63] bool slip_state = false;
[64] bool need_stop = false;
[65] bool is_lidar_bad=false;
[66] bool is_corridor=false;
[67] bool IsRelocation=true;
[68] bool RelocationOK=false;
[69] bool open_obstacle_map = false;
[70] bool IsSaveGridMap = false;
[71] bool IsReadGridMap = false;
[72] bool open_print = false;
[73] bool border_flag = false;
[74] bool is_final_opti=false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/time.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/configuration_file_resolver.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/math_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/blocking_queue.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/thread_pool.h  ( 2 )
[73] void NotifyDependenciesCompleted(Task* task) EXCLUDES(mutex_) override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/time.cc  ( 10 )
[25] int64_t uts_timestamp = ::cartographer::common::ToUniversal(time);
[29] uint64_t ns_since_unix_epoch = (uts_timestamp - ::cartographer::common::kUtsEpochOffsetFromUnixEpochInSeconds * 10000000ll) * 1e-4;
[38] double time_double = sec + nsec * 1e-9;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/math.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/DataChecking.h  ( 24 )
[43] uint64_t SYS_time;
[45] mapping::SubmapId s_id;
[48] transform::Rigid3d global_Pose;
[49] transform::Rigid3d local_Pose;
[50] int range_data_size;
[66]  DataType last_data
[68] uint64_t sys_time
[70] uint64_t delt_time
[70] Eigen::Vector3d curr_v
[72] Eigen::Vector3d curr_theta
[92] DataType last_data_m;
[94] bool data_checking_init_m;
[96] bool openLog_m;
[98] int base_time_count_m;
[100] std::mutex update_data_lck;
[102] std::mutex init_data_lck;
[104] std::ofstream ofs_localdata_checking;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/configuration_files_test.cc  ( 3 )
[37] auto file_resolver = ::cartographer::common::make_unique< ::cartographer::common::ConfigurationFileResolver>( std::vector<std::string>{
[41] ::cartographer::common::LuaParameterDictionary lua_parameter_dictionary( kCode, std::move(file_resolver));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/task_test.cc  ( 19 )
[45] std::shared_ptr<Task> shared_task;
[63] std::deque<std::shared_ptr<Task>> task_queue_;
[70] FakeThreadPool thread_pool_;
[78] auto shared_a = thread_pool()->Schedule(std::move(a)).lock();
[90] MockCallback callback_a;
[92] MockCallback callback_b;
[104] auto shared_b = thread_pool()->Schedule(std::move(b)).lock();
[127] MockCallback callback_c;
[129] MockCallback callback_d;
[140] auto shared_c = thread_pool()->Schedule(std::move(c)).lock();
[144] auto shared_d = thread_pool()->Schedule(std::move(d)).lock();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lockless_queue.h  ( 4 )
[97] std::atomic<Node> list_head
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/optional_test.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/setting.h  ( 62 )
[19] transform::Rigid3d Unopti_pose;
[20] transform::Rigid3d Opti_pose;
[29] transform::Rigid3d output_pose;
[47] bool relocal_success;
[68] bool closure_success;
[69] bool update_home;
[104] SensorType imu_state;
[105] SensorType odm_state;
[113] extern std::string gridmap_save_path;
[114] extern bool IsSaveGridMap;
[115] extern bool IsReadGridMap;
[119] extern std::string stop_sensor_id;
[120] extern std::string save_path;
[121] extern Eigen::Quaterniond q_init;
[122] extern Eigen::Vector3d t_init;
[123] extern bool run_T_init_pose;
[124] extern Eigen::Quaterniond q_end;
[125] extern Eigen::Vector3d t_end;
[126] extern Eigen::Vector3d t_ob;
[127] extern Eigen::Vector3d k_odom;
[128] extern Eigen::Vector3d init_kk_odm;
[129] extern bool run_T_end_pose;
[130] extern Opti_Unopti_pose pose_control;
[131] extern RelocalState relocal_state;
[132] extern ClosureState closure_state;
[133] extern Eigen::Vector3d odm_slip_vel;
[136] extern std::vector<mapping::NodeId> bad_lidars;
[137] extern std::vector<mapping::NodeId> corridor_lidars;
[138] extern std::vector<Point2f> candia_pos;
[139] extern std::vector<Point2f> candia_pos_check;
[140] extern std::vector<double> candia_angle;
[141] extern std::vector<double> best_csm_pose;
[142] extern bool border_flag;
[143] extern bool is_final_opti;
[144] extern bool is_lidar_bad;
[145] extern bool is_corridor;
[146] extern bool slip_state;
[147] extern bool IsRelocation;
[148] extern bool RelocationOK;
[149] extern bool open_obstacle_map;
[150] extern bool open_print;
[151] extern int imu_type;
[152] extern int Clean_state;
[153] extern int stable_kk;
[154] extern int OldNodeNum;
[155] extern int open_debug_log;
[157] extern int current_submap_id;
[158] extern RunType run_type;
[159] extern bool need_stop;
[160] extern float MIN_MATCH_SCORE;
[161] extern int MIN_CANDI_NUM;
[162] extern double relocal_distance;
[163] extern float map_comp_ration;
[164] extern int last_loop_node;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/fixed_ratio_sampler.h  ( 3 )
[48] int64 num_pulses_ = 0;
[49] int64 num_samples_ = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/fixed_ratio_sampler_test.cc  ( 1 )
[26] FixedRatioSampler fixed_ratio_sampler(1.);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/lockless_queue_test.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/internal/testing/thread_pool_for_testing.cc  ( 5 )
[57] std::shared_ptr<Task> shared_task;
[63] auto insert_result = tasks_not_ready_.insert(std::make_pair(task.get(), std::move(task)));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/common/internal/testing/thread_pool_for_testing.h  ( 2 )
[47] void NotifyDependenciesCompleted(Task* task) EXCLUDES(mutex_) override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_interface.h  ( 3 )
[55]  std::unique_ptr<mapping::MapBuilderInterface> map_builder
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_interface.cc  ( 3 )
[15]  std::unique_ptr<mapping::MapBuilderInterface> map_builder
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_main.cc  ( 9 )
[52] proto::MapBuilderServerOptions map_builder_server_options = LoadMapBuilderServerOptions(configuration_directory, configuration_basename);
[58] auto map_builder = common::make_unique<mapping::MapBuilder>( map_builder_server_options.map_builder_options());
[61] std::unique_ptr<MapBuilderServerInterface> map_builder_server = CreateMapBuilderServer(map_builder_server_options, std::move(map_builder));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_options.cc  ( 6 )
[27]  common::LuaParameterDictionary lua_parameter_dictionary
[28] proto::MapBuilderServerOptions map_builder_server_options;
[51] auto file_resolver = common::make_unique<common::ConfigurationFileResolver>( std::vector<std::string>{configuration_directory});
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/map_builder_server_options.h  ( 3 )
[29]  common::LuaParameterDictionary lua_parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/client/map_builder_stub.h  ( 14 )
[42]  LocalSlamResultCallback local_slam_result_callback
[42]  LocalMapCallback local_map_callback
[42]  LocalAbnormalStateCallback local_ab_state_callback
[47]  int trajectory_id
[54]  bool load_frozen_state
[61] std::shared_ptr<::grpc::Channel> client_channel_;
[62] std::unique_ptr<mapping::PoseGraphInterface> pose_graph_stub_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/client/map_builder_stub.cc  ( 14 )
[55]  LocalSlamResultCallback local_slam_result_callback
[83]  int trajectory_id
[98]  mapping::proto::SubmapQuery::Response submap_query_response
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_context_impl.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_server.h  ( 22 )
[53]  int trajectory_id
[58] int subscription_index
[70] mapping::SubmapController<SubmapType> submap_controller_;
[98] metrics::FamilyFactory family_factory
[112]  transform::Rigid3d local_pose
[112]  sensor::RangeData range_data
[127] bool shutting_down_ = false;
[128] std::unique_ptr<std::thread> slam_thread_;
[129] std::unique_ptr<async_grpc::Server> grpc_server_;
[130] std::unique_ptr<mapping::MapBuilderInterface> map_builder_;
[132] common::BlockingQueue<std::unique_ptr<MapBuilderContextInterface::Data>> incoming_data_queue_;
[133] common::Mutex subscriptions_lock_;
[134] int current_subscription_index_ = 0;
[140] std::unique_ptr<LocalTrajectoryUploaderInterface> local_trajectory_uploader_;
[141] int starting_submap_index_ = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/local_trajectory_uploader.h  ( 7 )
[46]  std::unique_ptr<proto::SensorData> sensor_data
[49]  int local_trajectory_id
[59]  int batch_size
[59]  bool enable_ssl_encryption
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_context_impl.cc  ( 2 )
[31] map_builder_server_->incoming_data_queue_.Push(common::make_unique<Data>( Data{trajectory_id,
[33] common::make_unique<mapping::LocalSlamResult2D>( sensor_id, local_slam_result_data, &submap_controller_)}));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client_server_test.cc  ( 32 )
[67] auto map_builder_server_parameters = mapping::test::ResolveLuaParameters(kMapBuilderServerLua);
[82] auto uploading_map_builder_server_parameters = mapping::test::ResolveLuaParameters(kUploadingMapBuilderServerLua);
[92] auto trajectory_builder_parameters = mapping::test::ResolveLuaParameters(kTrajectoryBuilderLua);
[114] auto map_builder = common::make_unique<MapBuilder>( map_builder_server_options_.map_builder_options());
[129] auto mock_map_builder = common::make_unique<MockMapBuilder>();
[166] proto::MapBuilderServerOptions map_builder_server_options_;
[167] proto::MapBuilderServerOptions uploading_map_builder_server_options_;
[169] std::unique_ptr<MockPoseGraph> mock_pose_graph_;
[170] std::unique_ptr<MockTrajectoryBuilder> mock_trajectory_builder_;
[172] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options_;
[173] std::unique_ptr<MapBuilderServer> server_;
[174] std::unique_ptr<MapBuilderServer> uploading_server_;
[175] std::unique_ptr<MapBuilderStub> stub_;
[176] std::unique_ptr<MapBuilderStub> stub_for_uploading_server_;
[178] TrajectoryBuilderInterface::LocalSlamResultCallback local_slam_result_callback_;
[179] std::condition_variable local_slam_result_condition_;
[180] std::condition_variable local_slam_result_upload_condition_;
[181] std::mutex local_slam_result_mutex_;
[182] std::mutex local_slam_result_upload_mutex_;
[183] std::vector<transform::Rigid3d> local_slam_result_poses_;
[184] int number_of_insertion_results_;
[198] int trajectory_id = stub_->AddTrajectoryBuilder( {kImuSensorId}, trajectory_builder_options_, nullptr);
[210] std::set<SensorId> expected_sensor_ids = {kImuSensorId};
[235] sensor::ImuData imu_data{common::FromUniversal(42),
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/local_trajectory_uploader.cc  ( 19 )
[56]  int local_trajectory_id
[58] std::unique_ptr<proto::SensorData> sensor_data
[67] proto::SensorMetadata sensor_metadata
[69] std::shared_ptr<::grpc::Channel> client_channel_;
[70] int batch_size_;
[72] common::BlockingQueue<std::unique_ptr<proto::SensorData>> send_queue_;
[73] bool shutting_down_ = false;
[74] std::unique_ptr<std::thread> upload_thread_;
[114] proto::AddSensorDataBatchRequest batch_request;
[118] proto::SensorData *added_sensor_data = batch_request.add_sensor_data();
[147] int cloud_trajectory_id = local_to_cloud_trajectory_id_map_.at(sensor_metadata->trajectory_id());
[195]  int batch_size
[195]  bool enable_ssl_encryption
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_server.cc  ( 15 )
[57] async_grpc::Server::Builder server_builder;
[148] std::unique_ptr<MapBuilderContextInterface::Data> sensor_data = incoming_data_queue_.PopWithTimeout(kPopTimeout);
[168]  int trajectory_id
[168]  transform::Rigid3d local_pose
[168]  sensor::RangeData range_data
[170] auto shared_range_data = std::make_shared<sensor::RangeData>(std::move(range_data));
[181] auto sensor_id = grpc_server_->GetUnsynchronizedContext<MapBuilderContextInterface>() ->local_trajectory_uploader() ->GetLocalSlamResultSensorId(trajectory_id);
[201] auto copy_of_insertion_result = insertion_result ? common::make_unique< const mapping::TrajectoryBuilderInterface::InsertionResult>( *insertion_result) : nullptr;
[255]  int subscription_index
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/map_builder_context_interface.h  ( 10 )
[37] int trajectory_id;
[39] transform::Rigid3d local_pose;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client/pose_graph_stub.h  ( 5 )
[39]  int trajectory_id
[57] std::shared_ptr<::grpc::Channel> client_channel_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client/trajectory_builder_stub.h  ( 19 )
[42] TrajectoryBuilderStub(std::shared_ptr<::grpc::Channel> client_channel, const int trajectory_id, LocalSlamResultCallback local_slam_result_callback);
[60] std::unique_ptr<mapping::LocalSlamResultData> local_slam_result_data
[67]  async_grpc::Client<handlers::ReceiveLocalSlamResultsSignature> client_reader
[67]  LocalSlamResultCallback local_slam_result_callback
[69] std::shared_ptr<::grpc::Channel> client_channel_;
[72] std::unique_ptr<async_grpc::Client<handlers::AddRangefinderDataSignature>> add_rangefinder_client_;
[74] std::unique_ptr<async_grpc::Client<handlers::AddImuDataSignature>> add_imu_client_;
[76] std::unique_ptr<async_grpc::Client<handlers::AddOdometryDataSignature>> add_odometry_client_;
[78] std::unique_ptr<async_grpc::Client<handlers::AddFixedFramePoseDataSignature>> add_fixed_frame_pose_client_;
[80] std::unique_ptr<async_grpc::Client<handlers::AddLandmarkDataSignature>> add_landmark_client_;
[82] async_grpc::Client<handlers::ReceiveLocalSlamResultsSignature> receive_local_slam_results_client_;
[83] std::unique_ptr<std::thread> receive_local_slam_results_thread_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client/pose_graph_stub.cc  ( 7 )
[70]  int trajectory_id
[93] common::optional<mapping::TrajectoryNodePose::ConstantPoseData> constant_pose_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/client/trajectory_builder_stub.cc  ( 16 )
[143]  std::unique_ptr<mapping::LocalSlamResultData> local_slam_result_data
[149]  LocalSlamResultCallback local_slam_result_callback
[152] int trajectory_id = response.trajectory_id();
[154] transform::Rigid3d local_pose = transform::ToRigid3(response.local_pose());
[155] sensor::RangeData range_data = sensor::FromProto(response.range_data());
[159] auto insertion_result = response.has_insertion_result() ? common::make_unique<InsertionResult>( InsertionResult{mapping::NodeId{
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/mock_local_trajectory_uploader.h  ( 1 )
[33]  std::unique_ptr<proto::SensorData> data_request
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/mock_map_builder_context.h  ( 2 )
[56] int trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/test_helpers.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/handler_test.h  ( 4 )
[72] MockMapBuilderContext *mock_map_builder_context_;
[73] std::unique_ptr<MockLocalTrajectoryUploader> mock_local_trajectory_uploader_;
[74] std::unique_ptr<mapping::testing::MockMapBuilder> mock_map_builder_;
[75] std::unique_ptr<mapping::testing::MockPoseGraph> mock_pose_graph_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/testing/test_helpers.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/sensor/serialization.h  ( 11 )
[33]  int trajectory_id
[59]  int starting_submap_index
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/sensor/serialization.cc  ( 12 )
[78]  int starting_submap_index
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_landmark_poses_handler.cc  ( 3 )
[35] auto landmark_poses = GetContext<MapBuilderContextInterface>() ->map_builder() .pose_graph() ->GetLandmarkPoses();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_trajectory_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/set_landmark_pose_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/is_trajectory_finished_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_sensor_data_batch_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_all_submap_poses.cc  ( 3 )
[35] auto submap_poses = GetContext<MapBuilderContextInterface>() ->map_builder() .pose_graph() ->GetAllSubmapPoses();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/is_trajectory_frozen_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_imu_data_handler_test.cc  ( 3 )
[74] proto::SensorData sensor_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_rangefinder_data_handler_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/load_state_handler.h  ( 2 )
[40] io::InMemoryProtoStreamReader reader_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/finish_trajectory_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_imu_data_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_odometry_data_handler_test.cc  ( 3 )
[76] proto::SensorData sensor_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_local_to_global_transform_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/write_state_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/run_final_optimization_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_constraints_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_trajectory_handler_test.cc  ( 5 )
[86] std::set<mapping::TrajectoryBuilderInterface::SensorId> expected_sensor_ids;
[93] std::unique_ptr<mapping::testing::MockMapBuilder> mock_map_builder_;
[123] auto upstream_trajectory_builder_options = request.trajectory_builder_options();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/load_state_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_landmark_data_handler.cc  ( 2 )
[47] auto sensor_data = common::make_unique<proto::SensorData>();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/receive_global_slam_optimizations_handler.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/set_landmark_pose_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_all_submap_poses.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_fixed_frame_pose_data_handler.cc  ( 2 )
[48] auto sensor_data = common::make_unique<proto::SensorData>();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/write_state_handler.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/receive_local_slam_results_handler.cc  ( 5 )
[32]  std::unique_ptr<MapBuilderContextInterface::LocalSlamResult> local_slam_result
[60] MapBuilderContextInterface::LocalSlamSubscriptionId subscription_id = GetUnsynchronizedContext<MapBuilderContextInterface>() ->SubscribeLocalSlamResults( request.trajectory_id(), [writer]( std::unique_ptr<MapBuilderContextInterface::LocalSlamResult> local_slam_result) {
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_landmark_data_handler_test.cc  ( 3 )
[81] proto::SensorData sensor_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_imu_data_handler.cc  ( 2 )
[46] auto sensor_data = common::make_unique<proto::SensorData>();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_sensor_data_batch_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_constraints_handler.cc  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/set_landmark_pose_handler_test.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_fixed_frame_pose_data_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_local_to_global_transform_handler.cc  ( 3 )
[37] auto local_to_global = GetContext<MapBuilderContextInterface>() ->map_builder() .pose_graph() ->GetLocalToGlobalTransform(request.trajectory_id());
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/receive_global_slam_optimizations_handler.h  ( 2 )
[42] common::optional<int> subscription_index_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_submap_handler.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_landmark_poses_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_trajectory_handler.cc  ( 6 )
[33] auto local_slam_result_callback = GetUnsynchronizedContext<MapBuilderContextInterface>() ->GetLocalSlamResultCallbackForSubscriptions();
[34] std::set<mapping::TrajectoryBuilderInterface::SensorId> expected_sensor_ids;
[46] auto trajectory_builder_options = request.trajectory_builder_options();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_fixed_frame_pose_data_handler_test.cc  ( 3 )
[77] proto::SensorData sensor_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_trajectory_node_poses_handler.cc  ( 3 )
[35] auto node_poses = GetContext<MapBuilderContextInterface>() ->map_builder() .pose_graph() ->GetTrajectoryNodePoses();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_trajectory_node_poses_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_landmark_poses_handler_test.cc  ( 2 )
[72] proto::GetLandmarkPosesResponse expected_response;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/receive_local_slam_results_handler.h  ( 2 )
[43] std::unique_ptr<MapBuilderContextInterface::LocalSlamSubscriptionId> subscription_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/run_final_optimization_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_rangefinder_data_handler.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/get_submap_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_landmark_data_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_odometry_data_handler.cc  ( 2 )
[47] auto sensor_data = common::make_unique<proto::SensorData>();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_odometry_data_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/is_trajectory_frozen_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/add_rangefinder_data_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/finish_trajectory_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/internal/handlers/is_trajectory_finished_handler.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/metrics/prometheus/metrics_test.cc  ( 8 )
[60] double expected_value = 1 + 5;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/metrics/prometheus/family_factory.h  ( 4 )
[58] std::shared_ptr<::prometheus::Registry> registry_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/cloud/metrics/prometheus/family_factory.cc  ( 12 )
[39] void Increment(double by_value) override { prometheus_->Increment(by_value); }
[61] ::prometheus::Family<::prometheus::Counter>* prometheus_;
[62] std::vector<std::unique_ptr<Counter>> wrappers_;
[70] void Decrement(double by_value) override { prometheus_->Decrement(by_value); }
[73] void Set(double value) override { prometheus_->Set(value); }
[103] void Observe(double value) override { prometheus_->Observe(value); }
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/autogenerate_ground_truth_main.cc  ( 28 )
[52] std::vector<double> covered_distance;
[72] std::vector<int> submap_to_node_index;
[104] int num_outliers = 0;
[105] proto::GroundTruth ground_truth;
[128] double covered_distance_in_constraint = std::abs(covered_distance.at(matched_node) - covered_distance.at(representative_node));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/relations_text_file.cc  ( 8 )
[31] double unix_time
[42] proto::GroundTruth ground_truth;
[43] std::ifstream relations_stream(relations_filename.c_str());
[44] double unix_time_1, unix_time_2, x, y, z, roll, pitch, yaw;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/compute_relations_metrics_main.cc  ( 35 )
[56] double translational_squared;
[57] double rotational_squared;
[78] double sum_of_squared_differences = 0.;
[91] std::vector<double> translational_errors;
[92] std::vector<double> squared_translational_errors;
[93] std::vector<double> rotational_errors_degrees;
[94] std::vector<double> squared_rotational_errors_degrees;
[119] std::ofstream relation_errors_file;
[120] std::string log_file_path;
[134] double translational_error = std::sqrt(error.translational_squared);
[135] double squared_translational_error = error.translational_squared;
[137] double rotational_errors_degree = common::RadToDeg(std::sqrt(error.rotational_squared));
[139] double squared_rotational_errors_degree = common::Pow2(rotational_errors_degree);
[177] mapping::proto::PoseGraph pose_graph = io::DeserializePoseGraphFromFile(pose_graph_filename);
[189] std::ifstream ground_truth_stream(relations_filename.c_str(), std::ios::binary);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/ground_truth/relations_text_file.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_processor.h  ( 1 )
[43] std::unique_ptr<PointsBatch> points_batch
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/coloring_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/coloring_points_processor.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/xray_points_processor.h  ( 19 )
[51]  FileWriterFactory file_writer_factory
[62] float sum_r = 0.;
[63] float sum_g = 0.;
[64] float sum_b = 0.;
[79] FileWriterFactory file_writer_factory_;
[83] std::vector<mapping::Floor> floors_;
[89] std::vector<Aggregation> aggregations_;
[92] Eigen::AlignedBox3i bounding_box_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/outlier_removing_points_processor.h  ( 8 )
[80] State state_;
[81] mapping::HybridGridBase<VoxelData> voxels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/file_writer.h  ( 4 )
[62] std::ofstream out_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/serialization_format_migration.cc  ( 6 )
[34]  ProtoMap proto_map
[52] mapping::proto::LegacySerializedData legacy_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/xray_points_processor.cc  ( 28 )
[37] size_t num_occupied_cells_in_column = 0;
[38] float mean_r = 0.;
[39] float mean_g = 0.;
[40] float mean_b = 0.;
[122]  FileWriterFactory file_writer_factory
[163] PixelDataMatrix pixel_data_matrix = PixelDataMatrix(ysize, xsize);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fake_file_writer.h  ( 5 )
[42] bool is_closed_;
[43] std::shared_ptr<std::vector<char>> content_;
[44] std::string filename_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/min_max_range_filtering_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/intensity_to_color_points_processor.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/min_max_range_filtering_points_processor.cc  ( 3 )
[41] std::unordered_set<int> to_remove;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/submap_painter.h  ( 17 )
[51] ::cartographer::transform::Rigid3d slice_pose;
[54] std::vector<uint32_t> cairo_data;
[58] int metadata_version = -1;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_deserializer_test.cc  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/serialization_format_migration.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/counting_points_processor.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_deserializer.h  ( 5 )
[64] mapping::proto::SerializationHeader header_;
[65] mapping::proto::SerializedData pose_graph_;
[66] mapping::proto::SerializedData all_trajectory_builder_options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/frame_id_filtering_points_processor.cc  ( 4 )
[30] std::vector<std::string> keep_frames, drop_frames;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_interface.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/ply_writing_points_processor.h  ( 9 )
[29] PlyWritingPointsProcessor(std::unique_ptr<FileWriter> file_writer, PointsProcessor* next);
[47] int64 num_points_;
[48] bool has_colors_;
[49] bool has_intensities_;
[50] std::unique_ptr<FileWriter> file_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/image.cc  ( 13 )
[41] UniqueCairoSurfacePtr MakeUniqueCairoSurfacePtr(cairo_surface_t* surface) {
[45] UniqueCairoPtr MakeUniqueCairoPtr(cairo_t* surface) {
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/frame_id_filtering_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_test.cc  ( 7 )
[42] std::string test_directory_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/counting_points_processor.h  ( 4 )
[45] int64 num_points_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/probability_grid_points_processor.cc  ( 14 )
[49] float probability_from_grid
[129] mapping::CellLimits cell_limits;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/color.cc  ( 11 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/intensity_to_color_points_processor.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_processor_pipeline_builder_test.cc  ( 2 )
[32] FileWriterFactory dummy_factory = [](const std::string& filename) -> std::unique_ptr<FileWriter> {
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/image.h  ( 9 )
[41] UniqueCairoSurfacePtr MakeUniqueCairoSurfacePtr(cairo_surface_t* surface);
[47] UniqueCairoPtr MakeUniqueCairoPtr(cairo_t* surface);
[56] void WritePng(FileWriter* const file_writer);
[71] int width_;
[72] int height_;
[73] std::vector<uint32> pixels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_batch.cc  ( 6 )
[22] std::unordered_set<int> to_remove
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/file_writer.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream.cc  ( 10 )
[52] std::string compressed_data;
[85] std::string decompressed_data
[86] uint64 compressed_size;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/draw_trajectories.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/submap_painter.cc  ( 28 )
[65] Eigen::AlignedBox2f bounding_box;
[115] ::cartographer::transform::Rigid3d local_pose;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/draw_trajectories.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/ply_writing_points_processor.cc  ( 12 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/outlier_removing_points_processor.cc  ( 6 )
[109] std::unordered_set<int> to_remove;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/xyz_writing_points_processor.h  ( 5 )
[52] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/xyz_writing_points_processor.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream_deserializer.cc  ( 8 )
[27] mapping::proto::SerializationHeader ReadHeaderOrDie( ProtoStreamReaderInterface* const reader) {
[43] bool load_flag = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_processor_pipeline_builder.cc  ( 10 )
[41] void RegisterPlainPointsProcessor( PointsProcessorPipelineBuilder* const builder) {
[129] auto factory_it = factories_.find(action);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/migrate_serialization_format_main.cc  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fixed_ratio_sampling_points_processor.h  ( 5 )
[55] std::unique_ptr<common::FixedRatioSampler> sampler_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/pcd_writing_points_processor.h  ( 8 )
[31] PcdWritingPointsProcessor(std::unique_ptr<FileWriter> file_writer, PointsProcessor* next);
[35]  FileWriterFactory file_writer_factory
[49] int64 num_points_;
[50] bool has_colors_;
[51] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fake_file_writer.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/probability_grid_points_processor.h  ( 13 )
[69] std::unique_ptr<FileWriter> file_writer_;
[71] mapping::ProbabilityGridRangeDataInserter2D range_data_inserter_;
[72] mapping::ProbabilityGrid probability_grid_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_processor_pipeline_builder.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/points_batch.h  ( 9 )
[41] common::Time start_time;
[49] std::string frame_id;
[52] int trajectory_id;
[69] std::unordered_set<int> to_remove
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/hybrid_grid_points_processor.cc  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/serialization_format_migration_test.cc  ( 15 )
[44] std::string msg_string;
[50] mapping::proto::PoseGraph pose_graph;
[51] mapping::proto::AllTrajectoryBuilderOptions all_options;
[56] mapping::proto::LegacySerializedData imu_data;
[58] mapping::proto::LegacySerializedData odometry_data;
[60] mapping::proto::LegacySerializedData fixed_frame_pose;
[62] mapping::proto::LegacySerializedData trajectory_data;
[64] mapping::proto::LegacySerializedData landmark_data;
[78] InMemoryProtoStreamReader reader_;
[79] std::unique_ptr<ForwardingProtoStreamWriter> writer_;
[80] std::vector<std::string> output_messages_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/proto_stream.h  ( 5 )
[49] std::ofstream out_;
[65] std::string decompressed_data
[67] std::ifstream in_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/color.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/pcd_writing_points_processor.cc  ( 12 )
[37] std::string color_header_field = !has_color ? "" : " rgb";
[38] std::string color_header_type = !has_color ? "" : " U";
[39] std::string color_header_size = !has_color ? "" : " 4";
[40] std::string color_header_count = !has_color ? "" : " 1";
[84]  FileWriterFactory file_writer_factory
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fixed_ratio_sampling_points_processor.cc  ( 3 )
[45] std::unordered_set<int> to_remove;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/hybrid_grid_points_processor.h  ( 7 )
[47] mapping::RangeDataInserter3D range_data_inserter_;
[48] mapping::HybridGrid hybrid_grid_;
[49] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/fake_file_writer_test.cc  ( 7 )
[118] std::vector<char> expected_output = header;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/null_points_processor.h  ( 1 )
[31] std::unique_ptr<PointsBatch> points_batch
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/mapping_state_serialization.cc  ( 11 )
[35] mapping::proto::AllTrajectoryBuilderOptions all_options_proto;
[99] auto ramp_data_proto = proto.mutable_ramp();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/mapping_state_serialization.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/in_memory_proto_stream.h  ( 3 )
[47] WriterCallback writer_callback_;
[72] std::queue<std::unique_ptr<google::protobuf::Message>> state_chunks_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/in_memory_proto_stream.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/io/internal/in_memory_proto_stream_test.cc  ( 5 )
[39] PoseGraph pose_graph_;
[40] SerializedData serialized_data_;
[50] PoseGraph actual_pose_graph;
[55] SerializedData actual_serialized_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/odometry_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/compressed_point_cloud_test.cc  ( 8 )
[99] PointCloud point_cloud;
[108] std::vector<float> x_coord;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/collator_interface.h  ( 5 )
[46]  int trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/range_data.h  ( 9 )
[53]  float min_z
[53]  float max_z
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/timed_point_cloud_data.h  ( 12 )
[33] bool is_good_to_add_optimization;
[34] common::Setting::CurrLaserState c_states;
[39] Eigen::Vector4f point_time;
[41] size_t origin_index;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/range_data_test.cc  ( 3 )
[39] Eigen::Vector3f origin_;
[40] std::vector<Eigen::Vector3f> returns_;
[41] std::vector<Eigen::Vector3f> misses_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/map_by_time_test.cc  ( 4 )
[41] MapByTime<Data> map_by_time;
[45] std::deque<Data> expected_data = {Data{CreateTime(42)}, Data{CreateTime(43)}};
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/fixed_frame_pose_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/compressed_point_cloud.h  ( 9 )
[56] std::vector<int32> point_data_;
[57] size_t num_points_;
[86] size_t remaining_points_;
[87] int32 remaining_points_in_current_block_;
[88] Eigen::Vector3f current_point_;
[89] Eigen::Vector3i current_block_coordinates_;
[90] std::vector<int32>::const_iterator input_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/map_by_time.h  ( 11 )
[75] auto data_it = trajectory.lower_bound(gap_start);
[76] auto data_end = trajectory.upper_bound(gap_end);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/imu_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/timed_point_cloud_data.cc  ( 6 )
[39] TimedPointCloud timed_point_cloud;
[40] TimedPointCloud obscals_cloud;
[47] bool is_good_to_add_optimization = true;
[49] common::Setting::CurrLaserState c_states;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/odometry_data.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/landmark_data_test.cc  ( 3 )
[63] std::vector<LandmarkObservation> observations_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/data.h  ( 2 )
[40]  mapping::TrajectoryBuilderInterface trajectory_builder
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/point_cloud_test.cc  ( 4 )
[29] PointCloud point_cloud;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/imu_data.h  ( 5 )
[29] Eigen::Vector3d linear_acceleration;
[30] Eigen::Vector3d angular_velocity;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/fixed_frame_pose_data.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/point_cloud.h  ( 8 )
[63]  float min_z
[63]  float max_z
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/compressed_point_cloud.cc  ( 11 )
[54] ConstIterator end_iterator(compressed_point_cloud);
[108] int num_blocks = 0;
[116] Eigen::Array3i raster_point;
[117] Eigen::Array3i block_coordinate;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/range_data.cc  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/landmark_data.cc  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/point_cloud.cc  ( 7 )
[41] sensor::Vector5f result_point;
[52] PointCloud cropped_point_cloud;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/landmark_data.h  ( 8 )
[34] transform::Rigid3d landmark_to_tracking_transform;
[35] double translation_weight;
[36] double rotation_weight;
[41] std::vector<LandmarkObservation> landmark_observations;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/trajectory_collator_test.cc  ( 3 )
[41] std::vector<CollatorInput> input_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/ordered_multi_queue.cc  ( 17 )
[165] std::vector<QueueKey> unfinished_queues;
[202] QueueKey next_queue_key;
[203] int count_queue = queues_.size();
[334] std::unique_ptr<Data> next_data_owner = next_queue->queue.Pop();
[360] auto emplace_result = common_start_time_per_trajectory_.emplace( trajectory_id, common::Time::min());
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/collator_test.cc  ( 4 )
[42] std::vector<CollatorInput> input_data;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/trajectory_collator.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/collator.cc  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/ordered_multi_queue_test.cc  ( 6 )
[53] std::vector<std::unique_ptr<Data>> values_;
[54] OrderedMultiQueue queue_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/ordered_multi_queue.h  ( 11 )
[35] int trajectory_id;
[36] std::string sensor_id;
[97] common::Time last_dispatched_time_ = common::Time::min();
[101] QueueKey blocker_;
[102] Callback odom_callback_;
[103] Callback imu_callback_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/voxel_filter.h  ( 9 )
[65] float resolution_;
[66] std::unordered_set<KeyType> voxel_set_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/collator.h  ( 6 )
[47] int trajectory_id
[65] OrderedMultiQueue queue_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/voxel_filter.cc  ( 16 )
[42] float tmp_min_points = options.min_num_points();
[57] float low_length = high_length / 2.f;
[145] auto it_inserted = voxel_set_.insert(IndexToKey(GetCellIndex(point)));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/test_helpers.h  ( 7 )
[48] int trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/voxel_filter_test.cc  ( 3 )
[30] PointCloud point_cloud = {{0.f, 0.f, 0.f},
[48] TimedPointCloud timed_point_cloud;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/dispatchable.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/sensor/internal/trajectory_collator.h  ( 5 )
[45] int trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/register.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/histogram.h  ( 6 )
[33]  int num_finite_buckets
[35]  double scale_factor
[35]  double max_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/counter.h  ( 1 )
[33] double by_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/family_factory.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/histogram.cc  ( 8 )
[35] static NullHistogram null_histogram;
[40]  int num_finite_buckets
[52]  double scale_factor
[52]  double max_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/gauge.cc  ( 1 )
[37] static NullGauge null_gauge;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/gauge.h  ( 2 )
[33] double by_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/counter.cc  ( 1 )
[34] static NullCounter null_counter;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/cartographer/metrics/register.cc  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/bazel/third_party/cairo/cairo-features.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/bazel/third_party/cairo/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/bazel/third_party/fontconfig/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/bazel/third_party/pixman/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/ramp.pb.h  ( 21 )
[39] extern RampDefaultTypeInternal _Ramp_default_instance_;
[191] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[196] ::google::protobuf::int32 trajectory_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph.pb.cc  ( 21 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<SubmapId> _instance;
[326] ::google::protobuf::uint32 cached_has_bits = 0;
[444] size_t total_size = 0;
[465] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[1364] ::cartographer::mapping::proto::SubmapId submap_id
[1404] ::cartographer::mapping::proto::NodeId node_id
[1444] ::cartographer::transform::proto::Rigid3d relative_pose
[1846] ::std::string landmark_id
[1885] ::cartographer::transform::proto::Rigid3d global_pose
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/connected_components.pb.cc  ( 17 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<ConnectedComponents_ConnectedComponent> _instance;
[212] ::google::protobuf::uint32 cached_has_bits = 0;
[323] size_t total_size = 0;
[333] size_t data_size = ::google::protobuf::internal::WireFormatLite:: Int32Size(this->trajectory_id_);
[339] int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph.pb.h  ( 50 )
[41] extern NodeIdDefaultTypeInternal _NodeId_default_instance_;
[44] extern PoseGraphDefaultTypeInternal _PoseGraph_default_instance_;
[47] extern PoseGraph_ConstraintDefaultTypeInternal _PoseGraph_Constraint_default_instance_;
[50] extern PoseGraph_LandmarkPoseDefaultTypeInternal _PoseGraph_LandmarkPose_default_instance_;
[53] extern SubmapIdDefaultTypeInternal _SubmapId_default_instance_;
[196] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[197] ::google::protobuf::int32 trajectory_id_;
[198] ::google::protobuf::int32 submap_index_;
[302] ::google::protobuf::int32 node_index_;
[422] ::cartographer::mapping::proto::SubmapId submap_id
[431] ::cartographer::mapping::proto::NodeId node_id
[440] ::cartographer::transform::proto::Rigid3d relative_pose
[467] double translation_weight_;
[468] double rotation_weight_;
[469] int tag_;
[568] ::std::string landmark_id
[577] ::cartographer::transform::proto::Rigid3d global_pose
[583] ::google::protobuf::internal::ArenaStringPtr landmark_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory_node_data.pb.h  ( 27 )
[40] extern TrajectoryNodeDataDefaultTypeInternal _TrajectoryNodeData_default_instance_;
[166] ::cartographer::transform::proto::Quaterniond gravity_alignment
[175] ::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud
[184] ::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud
[193] ::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud
[202] ::cartographer::transform::proto::Rigid3d local_pose
[222] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[231] ::google::protobuf::int64 timestamp_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph_options.pb.cc  ( 16 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<PoseGraphOptions> _instance;
[247] ::google::protobuf::uint32 cached_has_bits = 0;
[543] size_t total_size = 0;
[603] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[749] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options
[817] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/motion_filter_options.pb.cc  ( 14 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<MotionFilterOptions> _instance;
[202] ::google::protobuf::uint32 cached_has_bits = 0;
[344] size_t total_size = 0;
[366] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory_builder_options.pb.h  ( 62 )
[42] extern AllTrajectoryBuilderOptionsDefaultTypeInternal _AllTrajectoryBuilderOptions_default_instance_;
[45] extern InitialTrajectoryPoseDefaultTypeInternal _InitialTrajectoryPose_default_instance_;
[48] extern SensorIdDefaultTypeInternal _SensorId_default_instance_;
[51] extern TrajectoryBuilderOptionsDefaultTypeInternal _TrajectoryBuilderOptions_default_instance_;
[54] extern TrajectoryBuilderOptionsWithSensorIdsDefaultTypeInternal _TrajectoryBuilderOptionsWithSensorIds_default_instance_;
[57] extern TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal _TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
[196] ::cartographer::transform::proto::Rigid3d relative_pose
[213] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[215] ::google::protobuf::int64 timestamp_;
[216] ::google::protobuf::int32 to_trajectory_id_;
[325] double min_covered_area_;
[326] ::google::protobuf::int32 fresh_submaps_count_;
[327] ::google::protobuf::int32 min_added_submaps_count_;
[423] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options
[432] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options
[441] ::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose
[450] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d
[472] bool pure_localization_;
[473] bool border_flag_;
[618] ::google::protobuf::internal::ArenaStringPtr id_;
[619] int type_;
[725] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/submap.pb.h  ( 24 )
[41] extern Submap2DDefaultTypeInternal _Submap2D_default_instance_;
[44] extern Submap3DDefaultTypeInternal _Submap3D_default_instance_;
[158] ::cartographer::transform::proto::Rigid3d local_pose
[184] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[187] ::google::protobuf::int32 num_range_data_;
[188] bool finished_;
[291] ::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid
[300] ::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/serialization.pb.h  ( 64 )
[45] extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
[48] extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
[51] extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
[54] extern LocalSlamResultDataDefaultTypeInternal _LocalSlamResultData_default_instance_;
[57] extern NodeDefaultTypeInternal _Node_default_instance_;
[60] extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
[63] extern SerializationHeaderDefaultTypeInternal _SerializationHeader_default_instance_;
[66] extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
[69] extern SubmapDefaultTypeInternal _Submap_default_instance_;
[72] extern TrajectoryDataDefaultTypeInternal _TrajectoryData_default_instance_;
[186] ::cartographer::mapping::proto::SubmapId submap_id
[195] ::cartographer::mapping::proto::Submap2D submap_2d
[204] ::cartographer::mapping::proto::Submap3D submap_3d
[209] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[306] ::cartographer::mapping::proto::NodeId node_id
[315] ::cartographer::mapping::proto::TrajectoryNodeData node_data
[416] ::cartographer::sensor::proto::ImuData imu_data
[429] ::google::protobuf::int32 trajectory_id_;
[523] ::cartographer::sensor::proto::OdometryData odometry_data
[630] ::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data
[737] ::cartographer::sensor::proto::LandmarkData landmark_data
[844] ::cartographer::transform::proto::Quaterniond imu_calibration
[853] ::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map
[873] double gravity_constant_;
[994] ::google::protobuf::int64 timestamp_;
[1091] ::google::protobuf::uint32 format_version_;
[1199] ::cartographer::mapping::proto::PoseGraph pose_graph
[1208] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options
[1235] ::cartographer::mapping::proto::TrajectoryData trajectory_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory_builder_options.pb.cc  ( 23 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<InitialTrajectoryPose> _instance;
[379] ::google::protobuf::uint32 cached_has_bits = 0;
[526] size_t total_size = 0;
[554] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[662] ::cartographer::transform::proto::Rigid3d relative_pose
[1554] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options
[1594] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options
[1648] ::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose
[1688] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d
[2430] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory.pb.cc  ( 17 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<Trajectory_Node> _instance;
[257] ::google::protobuf::uint32 cached_has_bits = 0;
[404] size_t total_size = 0;
[432] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/submap.pb.cc  ( 18 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<Submap2D> _instance;
[264] ::google::protobuf::uint32 cached_has_bits = 0;
[440] size_t total_size = 0;
[473] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[585] ::cartographer::transform::proto::Rigid3d local_pose
[1182] ::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid
[1222] ::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/range_data_inserter_options.pb.cc  ( 15 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<RangeDataInserterOptions> _instance;
[239] ::google::protobuf::uint32 cached_has_bits = 0;
[363] size_t total_size = 0;
[383] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[501] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/submap_visualization.pb.cc  ( 22 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<SubmapList_SubmapEntry> _instance;
[336] ::google::protobuf::uint32 cached_has_bits = 0;
[457] size_t total_size = 0;
[478] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[1997] ::cartographer::transform::proto::Rigid3d slice_pose
[2435] ::std::string error_message
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory_node_data.pb.cc  ( 23 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryNodeData> _instance;
[277] ::google::protobuf::uint32 cached_has_bits = 0;
[585] size_t total_size = 0;
[595] size_t data_size = 4UL * count;
[601] int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
[797] ::cartographer::transform::proto::Quaterniond gravity_alignment
[837] ::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud
[877] ::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud
[917] ::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud
[987] ::cartographer::transform::proto::Rigid3d local_pose
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/ramp.pb.cc  ( 18 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<Ramp> _instance;
[243] ::google::protobuf::uint32 cached_has_bits = 0;
[451] size_t total_size = 0;
[493] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/map_builder_options.pb.h  ( 21 )
[39] extern MapBuilderOptionsDefaultTypeInternal _MapBuilderOptions_default_instance_;
[153] ::cartographer::mapping::proto::PoseGraphOptions pose_graph_options
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] bool use_trajectory_builder_2d_;
[185] bool use_trajectory_builder_3d_;
[186] bool collate_by_trajectory_;
[187] ::google::protobuf::int32 num_background_threads_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/map_builder_options.pb.cc  ( 15 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<MapBuilderOptions> _instance;
[221] ::google::protobuf::uint32 cached_has_bits = 0;
[416] size_t total_size = 0;
[452] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[610] ::cartographer::mapping::proto::PoseGraphOptions pose_graph_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/connected_components.pb.h  ( 15 )
[38] extern ConnectedComponentsDefaultTypeInternal _ConnectedComponents_default_instance_;
[41] extern ConnectedComponents_ConnectedComponentDefaultTypeInternal _ConnectedComponents_ConnectedComponent_default_instance_;
[163] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph_options.pb.h  ( 29 )
[40] extern PoseGraphOptionsDefaultTypeInternal _PoseGraphOptions_default_instance_;
[154] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options
[163] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options
[210] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[213] ::google::protobuf::int32 optimize_every_n_nodes_;
[214] ::google::protobuf::int32 max_num_final_iterations_;
[215] double global_sampling_ratio_;
[216] double matcher_translation_weight_;
[217] double matcher_rotation_weight_;
[218] double global_constraint_search_after_n_seconds_;
[219] bool log_residual_histograms_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/motion_filter_options.pb.h  ( 17 )
[38] extern MotionFilterOptionsDefaultTypeInternal _MotionFilterOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double max_time_seconds_;
[168] double max_distance_meters_;
[169] double max_angle_radians_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/submap_visualization.pb.h  ( 47 )
[39] extern SubmapListDefaultTypeInternal _SubmapList_default_instance_;
[42] extern SubmapList_SubmapEntryDefaultTypeInternal _SubmapList_SubmapEntry_default_instance_;
[45] extern SubmapList_TrajectorySubmapListDefaultTypeInternal _SubmapList_TrajectorySubmapList_default_instance_;
[48] extern SubmapQueryDefaultTypeInternal _SubmapQuery_default_instance_;
[51] extern SubmapQuery_RequestDefaultTypeInternal _SubmapQuery_Request_default_instance_;
[54] extern SubmapQuery_ResponseDefaultTypeInternal _SubmapQuery_Response_default_instance_;
[57] extern SubmapQuery_Response_SubmapTextureDefaultTypeInternal _SubmapQuery_Response_SubmapTexture_default_instance_;
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] ::google::protobuf::int32 submap_version_;
[496] ::google::protobuf::int32 submap_index_;
[497] ::google::protobuf::int32 trajectory_id_;
[605] ::cartographer::transform::proto::Rigid3d slice_pose
[629] ::google::protobuf::internal::ArenaStringPtr cells_;
[631] ::google::protobuf::int32 width_;
[632] ::google::protobuf::int32 height_;
[633] double resolution_;
[746] ::std::string error_message
[759] ::google::protobuf::internal::ArenaStringPtr error_message_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/trajectory.pb.h  ( 26 )
[39] extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
[42] extern Trajectory_NodeDefaultTypeInternal _Trajectory_Node_default_instance_;
[45] extern Trajectory_SubmapDefaultTypeInternal _Trajectory_Submap_default_instance_;
[176] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[178] ::google::protobuf::int64 timestamp_;
[179] ::google::protobuf::int32 node_index_;
[286] ::google::protobuf::int32 submap_index_;
[412] ::google::protobuf::int32 trajectory_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/range_data_inserter_options.pb.h  ( 23 )
[40] extern RangeDataInserterOptionsDefaultTypeInternal _RangeDataInserterOptions_default_instance_;
[201] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d
[212] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[214] int range_data_inserter_type_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/serialization.pb.cc  ( 33 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<Submap> _instance;
[501] ::google::protobuf::uint32 cached_has_bits = 0;
[655] size_t total_size = 0;
[683] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[791] ::cartographer::mapping::proto::SubmapId submap_id
[831] ::cartographer::mapping::proto::Submap2D submap_2d
[871] ::cartographer::mapping::proto::Submap3D submap_3d
[1209] ::cartographer::mapping::proto::NodeId node_id
[1249] ::cartographer::mapping::proto::TrajectoryNodeData node_data
[1592] ::cartographer::sensor::proto::ImuData imu_data
[1935] ::cartographer::sensor::proto::OdometryData odometry_data
[2278] ::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data
[2621] ::cartographer::sensor::proto::LandmarkData landmark_data
[3063] ::cartographer::transform::proto::Quaterniond imu_calibration
[3103] ::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map
[4508] ::cartographer::mapping::proto::PoseGraph pose_graph
[4556] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options
[4700] ::cartographer::mapping::proto::TrajectoryData trajectory_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.cc  ( 18 )
[27] ::google::protobuf::internal::ExplicitlyConstructed<CeresScanMatcherOptions3D> _instance;
[223] ::google::protobuf::uint32 cached_has_bits = 0;
[436] size_t total_size = 0;
[446] size_t data_size = 8UL * count;
[452] int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
[667] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h  ( 19 )
[39] extern RealTimeCorrelativeScanMatcherOptionsDefaultTypeInternal _RealTimeCorrelativeScanMatcherOptions_default_instance_;
[175] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[176] double linear_search_window_;
[177] double angular_search_window_;
[178] double translation_delta_cost_weight_;
[179] double rotation_delta_cost_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.cc  ( 14 )
[27] ::google::protobuf::internal::ExplicitlyConstructed<RealTimeCorrelativeScanMatcherOptions> _instance;
[208] ::google::protobuf::uint32 cached_has_bits = 0;
[374] size_t total_size = 0;
[401] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h  ( 17 )
[39] extern FastCorrelativeScanMatcherOptions2DDefaultTypeInternal _FastCorrelativeScanMatcherOptions2D_default_instance_;
[169] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[170] double linear_search_window_;
[171] double angular_search_window_;
[172] ::google::protobuf::int32 branch_and_bound_depth_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h  ( 19 )
[40] extern CeresScanMatcherOptions2DDefaultTypeInternal _CeresScanMatcherOptions2D_default_instance_;
[156] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[179] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[181] double occupied_space_weight_;
[182] double translation_weight_;
[183] double rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.cc  ( 15 )
[27] ::google::protobuf::internal::ExplicitlyConstructed<CeresScanMatcherOptions2D> _instance;
[220] ::google::protobuf::uint32 cached_has_bits = 0;
[391] size_t total_size = 0;
[420] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[574] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h  ( 21 )
[40] extern CeresScanMatcherOptions3DDefaultTypeInternal _CeresScanMatcherOptions3D_default_instance_;
[168] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[191] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[195] double translation_weight_;
[196] double rotation_weight_;
[197] bool only_optimize_yaw_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.cc  ( 14 )
[27] ::google::protobuf::internal::ExplicitlyConstructed<FastCorrelativeScanMatcherOptions3D> _instance;
[217] ::google::protobuf::uint32 cached_has_bits = 0;
[455] size_t total_size = 0;
[501] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h  ( 25 )
[39] extern FastCorrelativeScanMatcherOptions3DDefaultTypeInternal _FastCorrelativeScanMatcherOptions3D_default_instance_;
[193] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[194] double min_rotational_score_;
[195] double linear_xy_search_window_;
[196] ::google::protobuf::int32 branch_and_bound_depth_;
[197] ::google::protobuf::int32 full_resolution_depth_;
[198] double linear_z_search_window_;
[199] double angular_search_window_;
[200] double min_low_resolution_score_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.cc  ( 14 )
[27] ::google::protobuf::internal::ExplicitlyConstructed<FastCorrelativeScanMatcherOptions2D> _instance;
[205] ::google::protobuf::uint32 cached_has_bits = 0;
[347] size_t total_size = 0;
[371] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.cc  ( 15 )
[27] ::google::protobuf::internal::ExplicitlyConstructed<OptimizationProblemOptions> _instance;
[243] ::google::protobuf::uint32 cached_has_bits = 0;
[606] size_t total_size = 0;
[675] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[973] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.cc  ( 18 )
[27] ::google::protobuf::internal::ExplicitlyConstructed<ConstraintBuilderOptions> _instance;
[284] ::google::protobuf::uint32 cached_has_bits = 0;
[638] size_t total_size = 0;
[708] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[946] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options
[986] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options
[1026] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d
[1066] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h  ( 33 )
[43] extern ConstraintBuilderOptionsDefaultTypeInternal _ConstraintBuilderOptions_default_instance_;
[159] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options
[168] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d
[177] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options
[186] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d
[233] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[238] double sampling_ratio_;
[239] double max_constraint_distance_;
[240] double min_score_;
[241] double global_localization_min_score_;
[242] bool log_matches_;
[243] double loop_closure_translation_weight_;
[244] double loop_closure_rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h  ( 35 )
[40] extern OptimizationProblemOptionsDefaultTypeInternal _OptimizationProblemOptions_default_instance_;
[156] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[227] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[229] double huber_scale_;
[230] double acceleration_weight_;
[231] double rotation_weight_;
[232] double fixed_frame_pose_translation_weight_;
[233] double fixed_frame_pose_rotation_weight_;
[234] bool fix_z_in_3d_;
[235] bool log_solver_summary_;
[236] double local_slam_pose_translation_weight_;
[237] double local_slam_pose_rotation_weight_;
[238] double odometry_translation_weight_;
[239] double odometry_rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/submaps_options_3d.pb.cc  ( 15 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<SubmapsOptions3D> _instance;
[221] ::google::protobuf::uint32 cached_has_bits = 0;
[416] size_t total_size = 0;
[452] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[624] ::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.cc  ( 20 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<LocalTrajectoryBuilderOptions3D> _instance;
[308] ::google::protobuf::uint32 cached_has_bits = 0;
[720] size_t total_size = 0;
[808] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[1012] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options
[1052] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options
[1106] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options
[1146] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options
[1186] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options
[1254] ::cartographer::mapping::proto::SubmapsOptions3D submaps_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.h  ( 17 )
[38] extern RangeDataInserterOptions3DDefaultTypeInternal _RangeDataInserterOptions3D_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double hit_probability_;
[168] double miss_probability_;
[169] ::google::protobuf::int32 num_free_space_voxels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.cc  ( 14 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<RangeDataInserterOptions3D> _instance;
[203] ::google::protobuf::uint32 cached_has_bits = 0;
[345] size_t total_size = 0;
[369] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/submaps_options_3d.pb.h  ( 21 )
[39] extern SubmapsOptions3DDefaultTypeInternal _SubmapsOptions3D_default_instance_;
[153] ::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] double high_resolution_;
[185] double high_resolution_max_range_;
[186] double low_resolution_;
[187] ::google::protobuf::int32 num_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/hybrid_grid.pb.h  ( 18 )
[38] extern HybridGridDefaultTypeInternal _HybridGrid_default_instance_;
[202] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[211] float resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h  ( 37 )
[43] extern LocalTrajectoryBuilderOptions3DDefaultTypeInternal _LocalTrajectoryBuilderOptions3D_default_instance_;
[157] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options
[166] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options
[175] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options
[184] ::cartographer::mapping::proto::SubmapsOptions3D submaps_options
[193] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options
[202] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options
[249] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[256] float min_range_;
[257] float max_range_;
[258] ::google::protobuf::int32 num_accumulated_range_data_;
[259] float voxel_filter_size_;
[260] double imu_gravity_time_constant_;
[261] bool use_online_correlative_scan_matching_;
[262] ::google::protobuf::int32 rotational_histogram_size_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/3d/hybrid_grid.pb.cc  ( 16 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<HybridGrid> _instance;
[206] ::google::protobuf::uint32 cached_has_bits = 0;
[474] size_t total_size = 0;
[484] size_t data_size = ::google::protobuf::internal::WireFormatLite:: SInt32Size(this->x_indices_);
[490] int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/submaps_options_2d.pb.h  ( 17 )
[40] extern SubmapsOptions2DDefaultTypeInternal _SubmapsOptions2D_default_instance_;
[154] ::cartographer::mapping::proto::GridOptions2D grid_options_2d
[163] ::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options
[174] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[177] ::google::protobuf::int32 num_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/grid_2d_options.pb.h  ( 23 )
[39] extern GridOptions2DDefaultTypeInternal _GridOptions2D_default_instance_;
[208] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[209] int grid_type_;
[210] float resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/probability_grid.pb.h  ( 10 )
[38] extern ProbabilityGridDefaultTypeInternal _ProbabilityGrid_default_instance_;
[148] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.cc  ( 20 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<LocalTrajectoryBuilderOptions2D> _instance;
[315] ::google::protobuf::uint32 cached_has_bits = 0;
[799] size_t total_size = 0;
[900] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[1158] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options
[1198] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options
[1252] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options
[1292] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options
[1332] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options
[1386] ::cartographer::mapping::proto::SubmapsOptions2D submaps_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/cell_limits.pb.h  ( 15 )
[38] extern CellLimitsDefaultTypeInternal _CellLimits_default_instance_;
[160] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[161] ::google::protobuf::int32 num_x_cells_;
[162] ::google::protobuf::int32 num_y_cells_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.cc  ( 14 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<ProbabilityGridRangeDataInserterOptions2D> _instance;
[204] ::google::protobuf::uint32 cached_has_bits = 0;
[346] size_t total_size = 0;
[368] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/map_limits.pb.h  ( 17 )
[40] extern MapLimitsDefaultTypeInternal _MapLimits_default_instance_;
[163] ::cartographer::mapping::proto::CellLimits cell_limits
[174] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[177] double resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/grid_2d_options.pb.cc  ( 14 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<GridOptions2D> _instance;
[224] ::google::protobuf::uint32 cached_has_bits = 0;
[345] size_t total_size = 0;
[363] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/grid_2d.pb.cc  ( 19 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<Grid2D_CellBox> _instance;
[246] ::google::protobuf::uint32 cached_has_bits = 0;
[412] size_t total_size = 0;
[447] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[956] size_t data_size = ::google::protobuf::internal::WireFormatLite:: Int32Size(this->cells_);
[1200] ::cartographer::mapping::proto::Grid2D_CellBox known_cells_box
[1250] ::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/cell_limits.pb.cc  ( 14 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<CellLimits> _instance;
[199] ::google::protobuf::uint32 cached_has_bits = 0;
[317] size_t total_size = 0;
[338] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h  ( 43 )
[43] extern LocalTrajectoryBuilderOptions2DDefaultTypeInternal _LocalTrajectoryBuilderOptions2D_default_instance_;
[157] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options
[166] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options
[175] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options
[184] ::cartographer::mapping::proto::SubmapsOptions2D submaps_options
[193] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options
[202] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options
[267] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[274] float min_z_;
[275] float max_z_;
[276] float voxel_filter_size_;
[277] bool use_online_correlative_scan_matching_;
[278] bool use_imu_data_;
[279] float min_range_;
[280] float max_range_;
[281] double imu_gravity_time_constant_;
[282] float missing_data_ray_length_;
[283] ::google::protobuf::int32 num_accumulated_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.h  ( 17 )
[38] extern ProbabilityGridRangeDataInserterOptions2DDefaultTypeInternal _ProbabilityGridRangeDataInserterOptions2D_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double hit_probability_;
[168] double miss_probability_;
[169] bool insert_free_space_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/submaps_options_2d.pb.cc  ( 16 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<SubmapsOptions2D> _instance;
[226] ::google::protobuf::uint32 cached_has_bits = 0;
[376] size_t total_size = 0;
[404] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[526] ::cartographer::mapping::proto::GridOptions2D grid_options_2d
[566] ::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/map_limits.pb.cc  ( 16 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<MapLimits> _instance;
[224] ::google::protobuf::uint32 cached_has_bits = 0;
[374] size_t total_size = 0;
[400] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[562] ::cartographer::mapping::proto::CellLimits cell_limits
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/grid_2d.pb.h  ( 32 )
[40] extern Grid2DDefaultTypeInternal _Grid2D_default_instance_;
[43] extern Grid2D_CellBoxDefaultTypeInternal _Grid2D_CellBox_default_instance_;
[177] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[178] ::google::protobuf::int32 max_x_;
[179] ::google::protobuf::int32 max_y_;
[180] ::google::protobuf::int32 min_x_;
[181] ::google::protobuf::int32 min_y_;
[303] ::cartographer::mapping::proto::Grid2D_CellBox known_cells_box
[324] ::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d
[340] float min_correspondence_cost_;
[341] float max_correspondence_cost_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/2d/probability_grid.pb.cc  ( 13 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<ProbabilityGrid> _instance;
[188] ::google::protobuf::uint32 cached_has_bits = 0;
[250] size_t total_size = 0;
[257] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/internal/legacy_serialized_data.pb.h  ( 24 )
[39] extern LegacySerializedDataDefaultTypeInternal _LegacySerializedData_default_instance_;
[171] ::cartographer::mapping::proto::ImuData imu_data
[180] ::cartographer::mapping::proto::OdometryData odometry_data
[189] ::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data
[198] ::cartographer::mapping::proto::TrajectoryData trajectory_data
[207] ::cartographer::mapping::proto::LandmarkData landmark_data
[212] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/mapping/proto/internal/legacy_serialized_data.pb.cc  ( 20 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<LegacySerializedData> _instance;
[276] ::google::protobuf::uint32 cached_has_bits = 0;
[546] size_t total_size = 0;
[602] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
[806] ::cartographer::mapping::proto::ImuData imu_data
[846] ::cartographer::mapping::proto::OdometryData odometry_data
[886] ::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data
[926] ::cartographer::mapping::proto::TrajectoryData trajectory_data
[966] ::cartographer::mapping::proto::LandmarkData landmark_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/transform/proto/transform.pb.h  ( 36 )
[38] extern QuaterniondDefaultTypeInternal _Quaterniond_default_instance_;
[41] extern QuaternionfDefaultTypeInternal _Quaternionf_default_instance_;
[44] extern Rigid2dDefaultTypeInternal _Rigid2d_default_instance_;
[47] extern Rigid2fDefaultTypeInternal _Rigid2f_default_instance_;
[50] extern Rigid3dDefaultTypeInternal _Rigid3d_default_instance_;
[53] extern Rigid3fDefaultTypeInternal _Rigid3f_default_instance_;
[56] extern Vector2dDefaultTypeInternal _Vector2d_default_instance_;
[59] extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
[62] extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
[65] extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
[68] extern Vector4fDefaultTypeInternal _Vector4f_default_instance_;
[190] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[191] double x_;
[192] double y_;
[407] double z_;
[636] float t_;
[754] double w_;
[979] double rotation_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/transform/proto/transform.pb.cc  ( 16 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<Vector2d> _instance;
[407] ::google::protobuf::uint32 cached_has_bits = 0;
[525] size_t total_size = 0;
[542] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/common/config.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/common/proto/ceres_solver_options.pb.cc  ( 14 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<CeresSolverOptions> _instance;
[202] ::google::protobuf::uint32 cached_has_bits = 0;
[344] size_t total_size = 0;
[370] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/common/proto/ceres_solver_options.pb.h  ( 17 )
[38] extern CeresSolverOptionsDefaultTypeInternal _CeresSolverOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] bool use_nonmonotonic_steps_;
[168] ::google::protobuf::int32 max_num_iterations_;
[169] ::google::protobuf::int32 num_threads_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/ground_truth/proto/relations.pb.cc  ( 17 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<Relation> _instance;
[234] ::google::protobuf::uint32 cached_has_bits = 0;
[405] size_t total_size = 0;
[438] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/ground_truth/proto/relations.pb.h  ( 22 )
[39] extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
[42] extern RelationDefaultTypeInternal _Relation_default_instance_;
[179] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[181] ::google::protobuf::int64 timestamp1_;
[182] ::google::protobuf::int64 timestamp2_;
[183] double covered_distance_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/sensor/proto/sensor.pb.h  ( 44 )
[39] extern CompressedPointCloudDefaultTypeInternal _CompressedPointCloud_default_instance_;
[42] extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
[45] extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
[48] extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
[51] extern LandmarkData_LandmarkObservationDefaultTypeInternal _LandmarkData_LandmarkObservation_default_instance_;
[54] extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
[57] extern RangeDataDefaultTypeInternal _RangeData_default_instance_;
[60] extern TimedPointCloudDataDefaultTypeInternal _TimedPointCloudData_default_instance_;
[188] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[191] ::google::protobuf::int32 num_points_;
[311] ::google::protobuf::int64 timestamp_;
[531] ::cartographer::transform::proto::Vector3d linear_acceleration
[540] ::cartographer::transform::proto::Vector3d angular_velocity
[876] ::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform
[894] ::google::protobuf::internal::ArenaStringPtr id_;
[896] double translation_weight_;
[897] double rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.cc  ( 14 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<AdaptiveVoxelFilterOptions> _instance;
[202] ::google::protobuf::uint32 cached_has_bits = 0;
[344] size_t total_size = 0;
[366] int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h  ( 17 )
[38] extern AdaptiveVoxelFilterOptionsDefaultTypeInternal _AdaptiveVoxelFilterOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] float max_length_;
[168] float min_num_points_;
[169] float max_range_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/cartographer/sensor/proto/sensor.pb.cc  ( 23 )
[26] ::google::protobuf::internal::ExplicitlyConstructed<CompressedPointCloud> _instance;
[362] ::google::protobuf::uint32 cached_has_bits = 0;
[498] size_t total_size = 0;
[508] size_t data_size = ::google::protobuf::internal::WireFormatLite:: Int32Size(this->point_data_);
[514] int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
[1875] ::cartographer::transform::proto::Vector3d linear_acceleration
[1915] ::cartographer::transform::proto::Vector3d angular_velocity
[3064] ::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform
 /root/workspace/workspace/rbn100-slam/rbn100_slam/thirdparty/cartographer_source/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/build/CMakeFiles/FindOpenMP/OpenMPCheckVersion.cpp  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/build/CMakeFiles/FindOpenMP/OpenMPTryFlag.cpp  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/local_slam_result_data.h  ( 3 )
[33] int trajectory_id
[33]  PoseGraph pose_graph
[36] common::Time time_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/probability_values.h  ( 4 )
[116] bool update_carry = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_kalman.h  ( 101 )
[42] Eigen::Vector3d length_odm_imu;
[43] Eigen::Quaterniond qua_odm_imu;
[44] double error_atti =0.001;
[45] double error_vel = 0.02;
[46] double error_pos = 0.01;
[47] double error_bg = 0.0005;
[48] double error_ba = 0.0001;
[49] bool display_fuse;
[66] double dt_imu
[68] double dt_odm
[69] Eigen::Vector3d observation_car_vel
[69] int flag_lost
[70] Eigen::Vector3d observation_pos
[71] Eigen::Quaterniond observation_qua
[74] double dt_slam_odm
[79] int fuse_type
[89] std::ofstream ofs_test_estimate;
[93] KalmanParameter kalman_sensor;
[94] ImuParameter m_imu_parameter;
[96] std::deque<sensor::OdometryData> odometry_data_input;
[97] std::deque<sensor::ImuData> imu_data_use;
[98] std::deque<sensor::OdometryData> odometry_data_use;
[99] std::deque<sensor::ImuData> imu_data_track;
[100] std::deque<sensor::OdometryData> odometry_data_track;
[101] sensor::OdometryData last_odm_data;
[102] sensor::OdometryData last_odm_data_use;
[103] sensor::OdometryData last_odm_track;
[104] sensor::ImuData last_imu_data;
[105] sensor::ImuData last_imu_data_use;
[106] transform::Rigid3d cur_odm_pose;
[107] transform::Rigid3d cur_slam_pose;
[108] transform::Rigid3d last_slam_pose;
[109] transform::Rigid3d track_slam_pose;
[110] transform::Rigid3d Tob;
[111] transform::Rigid3d to1o2_pose;
[112] common::Time last_cov_time;
[113] common::Time cur_slam_time;
[114] common::Time last_slam_time;
[115] common::Time track_slam_time;
[116] common::Time last_track_slam_time;
[117] common::Time last_pre_imu_time;
[118] common::Time out_slam_time;
[126] Eigen::Quaterniond qua_ob;
[127] Eigen::Quaterniond imu_qua_wb;
[128] Eigen::Quaterniond pure_imu_qua;
[129] Eigen::Quaterniond track_imu_qua;
[130] Eigen::Quaterniond out_imu_qua;
[131] Eigen::Vector3d t_ob;
[132] Eigen::Vector3d last_odm_vel;
[133] Eigen::Vector3d old_odm_vel;
[134] Eigen::Vector3d imu_vel_wb;
[135] Eigen::Vector3d imu_pos_wb;
[136] Eigen::Vector3d imu_car_vel;
[137] Eigen::Vector3d fvecdvsfm_n;
[138] Eigen::Vector3d fvecdvsfm_b;
[139] Eigen::Vector3d fvecdvsfm_all;
[140] Eigen::Vector3d gravity_;
[141] Eigen::Vector3d fvec_gyro_bias;
[142] Eigen::Vector3d fvec_acc_bias;
[143] Eigen::Vector3d out_imu_vel;
[158] Eigen::Vector3d first_imu_pos ;
[159] Eigen::Vector3d odm_track_pos;
[160] Eigen::Vector3d car_vel_odm;
[161] Eigen::Vector3d fpos_angle;
[162] Eigen::Vector3d car_vel_b;
[163] Eigen::Vector3d fvec_odmvel_n;
[164] Eigen::Vector3d odm_dposl;
[165] Eigen::Vector3d odm_dposr;
[166] Eigen::Vector3d k_odm;
[167] double last_slam_yaw;
[168] double odm_yaw;
[169] double last_odm_yaw = 0;
[170] double wheel_L;
[171] double error_installz;
[172] double pure_odm_yaw;
[173] int first_slam;
[174] int first_slam_obser;
[175] int first_imu;
[176] int first_imu_use;
[177] int first_odm;
[178] int first_odm_use;
[179] int first_odm_track;
[180] int first_obser;
[181] int state_motion;
[182] int reset_p;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/detect_floors.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_node.h  ( 14 )
[36] transform::Rigid3d local_pose;
[39] transform::Rigid3d global_pose;
[42] common::optional<ConstantPoseData> constant_pose_data;
[44] double node_hight;
[53] Eigen::Quaterniond gravity_alignment;
[57] sensor::PointCloud filtered_gravity_aligned_point_cloud;
[60] sensor::PointCloud high_resolution_point_cloud;
[61] sensor::PointCloud low_resolution_point_cloud;
[63] Eigen::VectorXf rotational_scan_matcher_histogram;
[67] double conf_odm;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/id.h  ( 20 )
[58] int trajectory_id;
[59] int node_index;
[87] int submap_index;
[121] IteratorType begin_;
[122] IteratorType end_;
[138] int opti_count;
[396] bool can_append_ = true;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/submaps.h  ( 12 )
[67]  bool include_probability_grid_data
[92] int num_range_data_ = 0;
[93] bool finished_ = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph.h  ( 20 )
[51] int to_trajectory_id;
[52] transform::Rigid3d relative_pose;
[64] int trajectory_id
[142] int from_trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/grid_interface.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/imu_tracker.h  ( 9 )
[57] common::Time time_;
[58] common::Time last_linear_acceleration_time_;
[59] Eigen::Quaterniond orientation_;
[60] Eigen::Vector3d gravity_vector_;
[61] Eigen::Vector3d imu_angular_velocity_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder_interface.h  ( 13 )
[63]  LocalSlamResultCallback local_slam_result_callback
[63]  LocalMapCallback local_map_callback
[63]  LocalAbnormalStateCallback local_ab_state_callback
[75]  int trajectory_id
[91]  bool load_frozen_state
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_interface.h  ( 24 )
[38] transform::Rigid3d zbar_ij;
[39] double translation_weight;
[40] double rotation_weight;
[43] SubmapId submap_id;
[44] NodeId node_id;
[53] bool is_pushed;
[58] int trajectory_id;
[60] transform::Rigid3d landmark_to_tracking_transform;
[64] std::vector<LandmarkObservation> landmark_observations;
[65] common::optional<transform::Rigid3d> global_landmark_pose;
[92] double gravity_constant = 9.8;
[94] common::optional<transform::Rigid3d> fixed_frame_origin_in_map;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/range_data_inserter_interface.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/trajectory_builder_interface.h  ( 23 )
[52] NodeId node_id;
[67] double origin_x;
[68] double origin_y;
[71] std::vector<grid> grid_data;
[88] RUN_STATE states_;
[89] bool ON;
[153]  std::unique_ptr<mapping::LocalSlamResultData> local_slam_result_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/Ramp.h  ( 8 )
[55] transform::Rigid2d local_pose1_;
[56] transform::Rigid2d local_pose2_;
[57] transform::Rigid2d local_pose3_;
[58] transform::Rigid2d local_pose4_;
[59] int traj_id;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_extrapolator.h  ( 57 )
[75]  common::Duration pose_queue_duration
[75]  double imu_gravity_time_constant
[81] common::Time start_imu_time;
[82] common::Time time_preint;
[83] common::Time cur_imu_time;
[99] Eigen::Quaterniond start_qua;
[100] Eigen::Vector3d start_vel;
[101] Eigen::Vector3d start_velb;
[102] Eigen::Vector3d mean_velb;
[103] Eigen::Vector3d start_pos;
[107] int big_angle=0;
[108] int small_angle=0;
[110] double frame_h = 0.0;
[111] double odm_h =0;
[112] int imu_size;
[113] int first_odm = 1;
[114] bool long_loss_imu_time = false;
[118] Eigen::Vector3d linear_velocity_from_odometry_out = Eigen::Vector3d::Zero();
[119] Eigen::Vector3d linear_velocity_from_poses_out = Eigen::Vector3d::Zero();
[120] Eigen::Vector3d linear_dpos_from_poses_out = Eigen::Vector3d::Zero();
[121] Eigen::Vector3d angular_velocity_from_odometry_out = Eigen::Vector3d::Zero();
[122] Eigen::Vector3d angle_from_imu_out = Eigen::Vector3d::Zero();
[124] std::ofstream ofs_slam_vel;
[125] std::ofstream ofs_odom_vel;
[126] std::ofstream ofs_expolore;
[137]  ImuTracker imu_tracker
[151] transform::Rigid3d imu_vel;
[154] std::deque<TimedPose> timed_pose_queue_;
[155] std::deque<TimedVel> timed_vel_queue_;
[157] Eigen::Vector3d linear_velocity_from_poses_ = Eigen::Vector3d::Zero();
[158] Eigen::Vector3d angular_velocity_from_poses_ = Eigen::Vector3d::Zero();
[161] int imu_loss_flag = 0;
[162] std::deque<sensor::ImuData> imu_data_;
[163] std::deque<sensor::ImuData> pre_imu_data;
[164] std::deque<sensor::ImuData> kalman_imu_data;
[165] std::deque<sensor::ImuData> kalman_imu_use;
[166] std::unique_ptr<ImuTracker> imu_tracker_;
[167] std::unique_ptr<ImuTracker> odometry_imu_tracker_;
[168] std::unique_ptr<ImuTracker> extrapolation_imu_tracker_;
[169] std::unique_ptr<ImuKalman> kalman_imu_tracker;
[171] TimedPose cached_extrapolated_pose_;
[172] TimedPose cached_extrapolated_pose_error;
[174] std::deque<sensor::OdometryData> odometry_data_;
[175] std::deque<sensor::OdometryData> kalman_odometry_data;
[176] sensor::OdometryData last_odm_data;
[177] sensor::OdometryData imu_vel_data;
[178] Eigen::Vector3d linear_velocity_from_odometry_ = Eigen::Vector3d::Zero();
[179] Eigen::Vector3d angular_velocity_from_odometry_ = Eigen::Vector3d::Zero();
[180] Eigen::Quaterniond quab1b2_from_imu_ ;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/map_builder.h  ( 21 )
[71]  LocalSlamResultCallback local_slam_result_callback
[71]  LocalMapCallback local_map_callback_
[71]  LocalAbnormalStateCallback local_ab_states_callback
[77] int trajectory_id
[85]  bool load_frozen_state
[111] std::ofstream ofs_opti_node_loop;
[115] common::ThreadPool thread_pool_;
[118] std::unique_ptr<PoseGraph> pose_graph_;
[120] std::unique_ptr<sensor::CollatorInterface> sensor_collator_;
[122] std::vector<std::unique_ptr<mapping::TrajectoryBuilderInterface>> trajectory_builders_;
[124] std::vector<proto::TrajectoryBuilderOptionsWithSensorIds> all_trajectory_builder_options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/pose_graph_trimmer.h  ( 6 )
[32] int trajectory_id
[57] Trimmable pose_graph
[75] int num_submaps_to_keep_;
[76] bool finished_ = false;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/hybrid_grid.h  ( 23 )
[170] std::unique_ptr<WrappedGrid>& meta_cell = meta_cells_[ToFlatIndex(meta_index, kBits)];
[368] int bits_;
[389] std::vector<std::unique_ptr<WrappedGrid>> new_meta_cells_( 8 * meta_cells_.size());
[406] std::vector<std::unique_ptr<WrappedGrid>> meta_cells_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/submap_3d.h  ( 16 )
[42]  common::LuaParameterDictionary parameter_dictionary
[51]  bool include_probability_grid_data
[72]  int high_resolution_max_range
[76] std::unique_ptr<HybridGrid> high_resolution_hybrid_grid_;
[77] std::unique_ptr<HybridGrid> low_resolution_hybrid_grid_;
[112] int matching_submap_index_ = 0;
[113] std::vector<std::shared_ptr<Submap3D>> submaps_;
[114] RangeDataInserter3D range_data_inserter_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/3d/range_data_inserter_3d.h  ( 6 )
[29]  common::LuaParameterDictionary parameter_dictionary
[41]  HybridGrid hybrid_grid
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/grid_2d.h  ( 9 )
[72] transform::Rigid3d local_pose
[93] MapLimits limits_;
[94] std::vector<uint16> correspondence_cost_cells_;
[95] float min_correspondence_cost_;
[96] float max_correspondence_cost_;
[97] std::vector<int> update_indices_;
[100] Eigen::AlignedBox2i known_cells_box_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid_range_data_inserter_2d.h  ( 6 )
[38]  common::LuaParameterDictionary parameter_dictionary
[70] std::vector<uint16> hit_table_;
[71] std::vector<uint16> miss_table_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/probability_grid.h  ( 4 )
[54] transform::Rigid3d local_pose
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/submap_2d.h  ( 19 )
[42]  common::LuaParameterDictionary parameter_dictionary
[50]  bool include_probability_grid_data
[70] std::unique_ptr<Grid2D> grid_;
[71] bool local_flag = false;
[137] int matching_submap_index_ = 0;
[138] int windows_submap_index_ = 0;
[139] int base_map_size = 0;
[140] std::vector<std::shared_ptr<Submap2D>> submaps_;
[141] std::vector<sensor::RangeData> dealing_submaps_;
[142] std::vector<std::shared_ptr<Submap2D>> matching_windows_submap_;
[143] std::unique_ptr<RangeDataInserterInterface> range_data_inserter_;
[144] std::unique_ptr<RangeDataInserterInterface> windows_range_data_inserter_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/xy_index.h  ( 8 )
[43] int num_x_cells = 0;
[44] int num_y_cells = 0;
[106] Eigen::Array2i min_xy_index_;
[107] Eigen::Array2i max_xy_index_;
[108] Eigen::Array2i xy_index_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/2d/map_limits.h  ( 6 )
[87] double resolution_;
[88] Eigen::Vector2d max_;
[89] CellLimits cell_limits_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/ramp.pb.h  ( 21 )
[39] extern RampDefaultTypeInternal _Ramp_default_instance_;
[191] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[196] ::google::protobuf::int32 trajectory_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph.pb.h  ( 50 )
[41] extern NodeIdDefaultTypeInternal _NodeId_default_instance_;
[44] extern PoseGraphDefaultTypeInternal _PoseGraph_default_instance_;
[47] extern PoseGraph_ConstraintDefaultTypeInternal _PoseGraph_Constraint_default_instance_;
[50] extern PoseGraph_LandmarkPoseDefaultTypeInternal _PoseGraph_LandmarkPose_default_instance_;
[53] extern SubmapIdDefaultTypeInternal _SubmapId_default_instance_;
[196] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[197] ::google::protobuf::int32 trajectory_id_;
[198] ::google::protobuf::int32 submap_index_;
[302] ::google::protobuf::int32 node_index_;
[422] ::cartographer::mapping::proto::SubmapId submap_id
[431] ::cartographer::mapping::proto::NodeId node_id
[440] ::cartographer::transform::proto::Rigid3d relative_pose
[467] double translation_weight_;
[468] double rotation_weight_;
[469] int tag_;
[568] ::std::string landmark_id
[577] ::cartographer::transform::proto::Rigid3d global_pose
[583] ::google::protobuf::internal::ArenaStringPtr landmark_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_node_data.pb.h  ( 27 )
[40] extern TrajectoryNodeDataDefaultTypeInternal _TrajectoryNodeData_default_instance_;
[166] ::cartographer::transform::proto::Quaterniond gravity_alignment
[175] ::cartographer::sensor::proto::CompressedPointCloud filtered_gravity_aligned_point_cloud
[184] ::cartographer::sensor::proto::CompressedPointCloud high_resolution_point_cloud
[193] ::cartographer::sensor::proto::CompressedPointCloud low_resolution_point_cloud
[202] ::cartographer::transform::proto::Rigid3d local_pose
[222] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[231] ::google::protobuf::int64 timestamp_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory_builder_options.pb.h  ( 62 )
[42] extern AllTrajectoryBuilderOptionsDefaultTypeInternal _AllTrajectoryBuilderOptions_default_instance_;
[45] extern InitialTrajectoryPoseDefaultTypeInternal _InitialTrajectoryPose_default_instance_;
[48] extern SensorIdDefaultTypeInternal _SensorId_default_instance_;
[51] extern TrajectoryBuilderOptionsDefaultTypeInternal _TrajectoryBuilderOptions_default_instance_;
[54] extern TrajectoryBuilderOptionsWithSensorIdsDefaultTypeInternal _TrajectoryBuilderOptionsWithSensorIds_default_instance_;
[57] extern TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal _TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
[196] ::cartographer::transform::proto::Rigid3d relative_pose
[213] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[215] ::google::protobuf::int64 timestamp_;
[216] ::google::protobuf::int32 to_trajectory_id_;
[325] double min_covered_area_;
[326] ::google::protobuf::int32 fresh_submaps_count_;
[327] ::google::protobuf::int32 min_added_submaps_count_;
[423] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options
[432] ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options
[441] ::cartographer::mapping::proto::InitialTrajectoryPose initial_trajectory_pose
[450] ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d
[472] bool pure_localization_;
[473] bool border_flag_;
[618] ::google::protobuf::internal::ArenaStringPtr id_;
[619] int type_;
[725] ::cartographer::mapping::proto::TrajectoryBuilderOptions trajectory_builder_options
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap.pb.h  ( 24 )
[41] extern Submap2DDefaultTypeInternal _Submap2D_default_instance_;
[44] extern Submap3DDefaultTypeInternal _Submap3D_default_instance_;
[158] ::cartographer::transform::proto::Rigid3d local_pose
[184] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[187] ::google::protobuf::int32 num_range_data_;
[188] bool finished_;
[291] ::cartographer::mapping::proto::HybridGrid high_resolution_hybrid_grid
[300] ::cartographer::mapping::proto::HybridGrid low_resolution_hybrid_grid
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/serialization.pb.h  ( 64 )
[45] extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
[48] extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
[51] extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
[54] extern LocalSlamResultDataDefaultTypeInternal _LocalSlamResultData_default_instance_;
[57] extern NodeDefaultTypeInternal _Node_default_instance_;
[60] extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
[63] extern SerializationHeaderDefaultTypeInternal _SerializationHeader_default_instance_;
[66] extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
[69] extern SubmapDefaultTypeInternal _Submap_default_instance_;
[72] extern TrajectoryDataDefaultTypeInternal _TrajectoryData_default_instance_;
[186] ::cartographer::mapping::proto::SubmapId submap_id
[195] ::cartographer::mapping::proto::Submap2D submap_2d
[204] ::cartographer::mapping::proto::Submap3D submap_3d
[209] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[306] ::cartographer::mapping::proto::NodeId node_id
[315] ::cartographer::mapping::proto::TrajectoryNodeData node_data
[416] ::cartographer::sensor::proto::ImuData imu_data
[429] ::google::protobuf::int32 trajectory_id_;
[523] ::cartographer::sensor::proto::OdometryData odometry_data
[630] ::cartographer::sensor::proto::FixedFramePoseData fixed_frame_pose_data
[737] ::cartographer::sensor::proto::LandmarkData landmark_data
[844] ::cartographer::transform::proto::Quaterniond imu_calibration
[853] ::cartographer::transform::proto::Rigid3d fixed_frame_origin_in_map
[873] double gravity_constant_;
[994] ::google::protobuf::int64 timestamp_;
[1091] ::google::protobuf::uint32 format_version_;
[1199] ::cartographer::mapping::proto::PoseGraph pose_graph
[1208] ::cartographer::mapping::proto::AllTrajectoryBuilderOptions all_trajectory_builder_options
[1235] ::cartographer::mapping::proto::TrajectoryData trajectory_data
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/map_builder_options.pb.h  ( 21 )
[39] extern MapBuilderOptionsDefaultTypeInternal _MapBuilderOptions_default_instance_;
[153] ::cartographer::mapping::proto::PoseGraphOptions pose_graph_options
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] bool use_trajectory_builder_2d_;
[185] bool use_trajectory_builder_3d_;
[186] bool collate_by_trajectory_;
[187] ::google::protobuf::int32 num_background_threads_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/connected_components.pb.h  ( 15 )
[38] extern ConnectedComponentsDefaultTypeInternal _ConnectedComponents_default_instance_;
[41] extern ConnectedComponents_ConnectedComponentDefaultTypeInternal _ConnectedComponents_ConnectedComponent_default_instance_;
[163] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph_options.pb.h  ( 29 )
[40] extern PoseGraphOptionsDefaultTypeInternal _PoseGraphOptions_default_instance_;
[154] ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions constraint_builder_options
[163] ::cartographer::mapping::optimization::proto::OptimizationProblemOptions optimization_problem_options
[210] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[213] ::google::protobuf::int32 optimize_every_n_nodes_;
[214] ::google::protobuf::int32 max_num_final_iterations_;
[215] double global_sampling_ratio_;
[216] double matcher_translation_weight_;
[217] double matcher_rotation_weight_;
[218] double global_constraint_search_after_n_seconds_;
[219] bool log_residual_histograms_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/motion_filter_options.pb.h  ( 17 )
[38] extern MotionFilterOptionsDefaultTypeInternal _MotionFilterOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double max_time_seconds_;
[168] double max_distance_meters_;
[169] double max_angle_radians_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/submap_visualization.pb.h  ( 47 )
[39] extern SubmapListDefaultTypeInternal _SubmapList_default_instance_;
[42] extern SubmapList_SubmapEntryDefaultTypeInternal _SubmapList_SubmapEntry_default_instance_;
[45] extern SubmapList_TrajectorySubmapListDefaultTypeInternal _SubmapList_TrajectorySubmapList_default_instance_;
[48] extern SubmapQueryDefaultTypeInternal _SubmapQuery_default_instance_;
[51] extern SubmapQuery_RequestDefaultTypeInternal _SubmapQuery_Request_default_instance_;
[54] extern SubmapQuery_ResponseDefaultTypeInternal _SubmapQuery_Response_default_instance_;
[57] extern SubmapQuery_Response_SubmapTextureDefaultTypeInternal _SubmapQuery_Response_SubmapTexture_default_instance_;
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] ::google::protobuf::int32 submap_version_;
[496] ::google::protobuf::int32 submap_index_;
[497] ::google::protobuf::int32 trajectory_id_;
[605] ::cartographer::transform::proto::Rigid3d slice_pose
[629] ::google::protobuf::internal::ArenaStringPtr cells_;
[631] ::google::protobuf::int32 width_;
[632] ::google::protobuf::int32 height_;
[633] double resolution_;
[746] ::std::string error_message
[759] ::google::protobuf::internal::ArenaStringPtr error_message_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/trajectory.pb.h  ( 26 )
[39] extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
[42] extern Trajectory_NodeDefaultTypeInternal _Trajectory_Node_default_instance_;
[45] extern Trajectory_SubmapDefaultTypeInternal _Trajectory_Submap_default_instance_;
[176] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[178] ::google::protobuf::int64 timestamp_;
[179] ::google::protobuf::int32 node_index_;
[286] ::google::protobuf::int32 submap_index_;
[412] ::google::protobuf::int32 trajectory_id_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/range_data_inserter_options.pb.h  ( 23 )
[40] extern RangeDataInserterOptionsDefaultTypeInternal _RangeDataInserterOptions_default_instance_;
[201] ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d
[212] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[214] int range_data_inserter_type_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h  ( 19 )
[39] extern RealTimeCorrelativeScanMatcherOptionsDefaultTypeInternal _RealTimeCorrelativeScanMatcherOptions_default_instance_;
[175] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[176] double linear_search_window_;
[177] double angular_search_window_;
[178] double translation_delta_cost_weight_;
[179] double rotation_delta_cost_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h  ( 17 )
[39] extern FastCorrelativeScanMatcherOptions2DDefaultTypeInternal _FastCorrelativeScanMatcherOptions2D_default_instance_;
[169] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[170] double linear_search_window_;
[171] double angular_search_window_;
[172] ::google::protobuf::int32 branch_and_bound_depth_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h  ( 19 )
[40] extern CeresScanMatcherOptions2DDefaultTypeInternal _CeresScanMatcherOptions2D_default_instance_;
[156] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[179] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[181] double occupied_space_weight_;
[182] double translation_weight_;
[183] double rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h  ( 21 )
[40] extern CeresScanMatcherOptions3DDefaultTypeInternal _CeresScanMatcherOptions3D_default_instance_;
[168] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[191] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[195] double translation_weight_;
[196] double rotation_weight_;
[197] bool only_optimize_yaw_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h  ( 25 )
[39] extern FastCorrelativeScanMatcherOptions3DDefaultTypeInternal _FastCorrelativeScanMatcherOptions3D_default_instance_;
[193] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[194] double min_rotational_score_;
[195] double linear_xy_search_window_;
[196] ::google::protobuf::int32 branch_and_bound_depth_;
[197] ::google::protobuf::int32 full_resolution_depth_;
[198] double linear_z_search_window_;
[199] double angular_search_window_;
[200] double min_low_resolution_score_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h  ( 33 )
[43] extern ConstraintBuilderOptionsDefaultTypeInternal _ConstraintBuilderOptions_default_instance_;
[159] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options
[168] ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d
[177] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options
[186] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options_3d
[233] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[238] double sampling_ratio_;
[239] double max_constraint_distance_;
[240] double min_score_;
[241] double global_localization_min_score_;
[242] bool log_matches_;
[243] double loop_closure_translation_weight_;
[244] double loop_closure_rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h  ( 35 )
[40] extern OptimizationProblemOptionsDefaultTypeInternal _OptimizationProblemOptions_default_instance_;
[156] ::cartographer::common::proto::CeresSolverOptions ceres_solver_options
[227] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[229] double huber_scale_;
[230] double acceleration_weight_;
[231] double rotation_weight_;
[232] double fixed_frame_pose_translation_weight_;
[233] double fixed_frame_pose_rotation_weight_;
[234] bool fix_z_in_3d_;
[235] bool log_solver_summary_;
[236] double local_slam_pose_translation_weight_;
[237] double local_slam_pose_rotation_weight_;
[238] double odometry_translation_weight_;
[239] double odometry_rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/range_data_inserter_options_3d.pb.h  ( 17 )
[38] extern RangeDataInserterOptions3DDefaultTypeInternal _RangeDataInserterOptions3D_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double hit_probability_;
[168] double miss_probability_;
[169] ::google::protobuf::int32 num_free_space_voxels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/submaps_options_3d.pb.h  ( 21 )
[39] extern SubmapsOptions3DDefaultTypeInternal _SubmapsOptions3D_default_instance_;
[153] ::cartographer::mapping::proto::RangeDataInserterOptions3D range_data_inserter_options
[182] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[184] double high_resolution_;
[185] double high_resolution_max_range_;
[186] double low_resolution_;
[187] ::google::protobuf::int32 num_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/hybrid_grid.pb.h  ( 18 )
[38] extern HybridGridDefaultTypeInternal _HybridGrid_default_instance_;
[202] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[211] float resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h  ( 37 )
[43] extern LocalTrajectoryBuilderOptions3DDefaultTypeInternal _LocalTrajectoryBuilderOptions3D_default_instance_;
[157] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options
[166] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D ceres_scan_matcher_options
[175] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options
[184] ::cartographer::mapping::proto::SubmapsOptions3D submaps_options
[193] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options
[202] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options
[249] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[256] float min_range_;
[257] float max_range_;
[258] ::google::protobuf::int32 num_accumulated_range_data_;
[259] float voxel_filter_size_;
[260] double imu_gravity_time_constant_;
[261] bool use_online_correlative_scan_matching_;
[262] ::google::protobuf::int32 rotational_histogram_size_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/submaps_options_2d.pb.h  ( 17 )
[40] extern SubmapsOptions2DDefaultTypeInternal _SubmapsOptions2D_default_instance_;
[154] ::cartographer::mapping::proto::GridOptions2D grid_options_2d
[163] ::cartographer::mapping::proto::RangeDataInserterOptions range_data_inserter_options
[174] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[177] ::google::protobuf::int32 num_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d_options.pb.h  ( 23 )
[39] extern GridOptions2DDefaultTypeInternal _GridOptions2D_default_instance_;
[208] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[209] int grid_type_;
[210] float resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid.pb.h  ( 10 )
[38] extern ProbabilityGridDefaultTypeInternal _ProbabilityGrid_default_instance_;
[148] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/cell_limits.pb.h  ( 15 )
[38] extern CellLimitsDefaultTypeInternal _CellLimits_default_instance_;
[160] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[161] ::google::protobuf::int32 num_x_cells_;
[162] ::google::protobuf::int32 num_y_cells_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/map_limits.pb.h  ( 17 )
[40] extern MapLimitsDefaultTypeInternal _MapLimits_default_instance_;
[163] ::cartographer::mapping::proto::CellLimits cell_limits
[174] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[177] double resolution_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h  ( 43 )
[43] extern LocalTrajectoryBuilderOptions2DDefaultTypeInternal _LocalTrajectoryBuilderOptions2D_default_instance_;
[157] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions adaptive_voxel_filter_options
[166] ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options
[175] ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D ceres_scan_matcher_options
[184] ::cartographer::mapping::proto::SubmapsOptions2D submaps_options
[193] ::cartographer::mapping::proto::MotionFilterOptions motion_filter_options
[202] ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options
[267] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[274] float min_z_;
[275] float max_z_;
[276] float voxel_filter_size_;
[277] bool use_online_correlative_scan_matching_;
[278] bool use_imu_data_;
[279] float min_range_;
[280] float max_range_;
[281] double imu_gravity_time_constant_;
[282] float missing_data_ray_length_;
[283] ::google::protobuf::int32 num_accumulated_range_data_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/probability_grid_range_data_inserter_options_2d.pb.h  ( 17 )
[38] extern ProbabilityGridRangeDataInserterOptions2DDefaultTypeInternal _ProbabilityGridRangeDataInserterOptions2D_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] double hit_probability_;
[168] double miss_probability_;
[169] bool insert_free_space_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/2d/grid_2d.pb.h  ( 32 )
[40] extern Grid2DDefaultTypeInternal _Grid2D_default_instance_;
[43] extern Grid2D_CellBoxDefaultTypeInternal _Grid2D_CellBox_default_instance_;
[177] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[178] ::google::protobuf::int32 max_x_;
[179] ::google::protobuf::int32 max_y_;
[180] ::google::protobuf::int32 min_x_;
[181] ::google::protobuf::int32 min_y_;
[303] ::cartographer::mapping::proto::Grid2D_CellBox known_cells_box
[324] ::cartographer::mapping::proto::ProbabilityGrid probability_grid_2d
[340] float min_correspondence_cost_;
[341] float max_correspondence_cost_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/mapping/proto/internal/legacy_serialized_data.pb.h  ( 24 )
[39] extern LegacySerializedDataDefaultTypeInternal _LegacySerializedData_default_instance_;
[171] ::cartographer::mapping::proto::ImuData imu_data
[180] ::cartographer::mapping::proto::OdometryData odometry_data
[189] ::cartographer::mapping::proto::FixedFramePoseData fixed_frame_pose_data
[198] ::cartographer::mapping::proto::TrajectoryData trajectory_data
[207] ::cartographer::mapping::proto::LandmarkData landmark_data
[212] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/timestamped_transform.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/transform.h  ( 11 )
[63] Eigen::Quaternion<T> normalized_quaternion = quaternion.normalized();
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/transform_interpolation_buffer.h  ( 3 )
[60] std::vector<TimestampedTransform> timestamped_transforms_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform_test_helpers.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/rigid_transform.h  ( 13 )
[92] Vector translation_;
[93] Rotation2D rotation_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/transform/proto/transform.pb.h  ( 36 )
[38] extern QuaterniondDefaultTypeInternal _Quaterniond_default_instance_;
[41] extern QuaternionfDefaultTypeInternal _Quaternionf_default_instance_;
[44] extern Rigid2dDefaultTypeInternal _Rigid2d_default_instance_;
[47] extern Rigid2fDefaultTypeInternal _Rigid2f_default_instance_;
[50] extern Rigid3dDefaultTypeInternal _Rigid3d_default_instance_;
[53] extern Rigid3fDefaultTypeInternal _Rigid3f_default_instance_;
[56] extern Vector2dDefaultTypeInternal _Vector2d_default_instance_;
[59] extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
[62] extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
[65] extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
[68] extern Vector4fDefaultTypeInternal _Vector4f_default_instance_;
[190] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[191] double x_;
[192] double y_;
[407] double z_;
[636] float t_;
[754] double w_;
[979] double rotation_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/task.h  ( 4 )
[52] Task dependent_task
[58] void SetThreadPool(ThreadPoolInterface* thread_pool) EXCLUDES(mutex_);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/histogram.h  ( 3 )
[34] std::vector<float> values_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/rate_timer.h  ( 11 )
[117] double squared_sum = 0.;
[129] std::deque<Event> events_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/ceres_solver_options.h  ( 2 )
[28]  common::LuaParameterDictionary parameter_dictionary
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/port.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/make_unique.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary.h  ( 13 )
[53]  std::unique_ptr<FileResolver> file_resolver
[109]  ReferenceCount reference_count
[123] static int LuaRead(lua_State* L);
[126] static int LuaInclude(lua_State* L);
[129] int index_into_reference_table_;
[143] std::vector<std::string> included_files_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/optional.h  ( 2 )
[63] std::unique_ptr<T> value_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/lua.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/mutex.h  ( 6 )
[75] void Await(Predicate predicate) REQUIRES(this) {
[87] std::unique_lock<std::mutex> lock_;
[91] std::condition_variable condition_;
[92] std::mutex mutex_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/configuration_file_resolver.h  ( 2 )
[43] std::vector<std::string> configuration_files_directories_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/lua_parameter_dictionary_test_helpers.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/time.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/blocking_queue.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/thread_pool.h  ( 2 )
[73] void NotifyDependenciesCompleted(Task* task) EXCLUDES(mutex_) override;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/math.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/DataChecking.h  ( 24 )
[43] uint64_t SYS_time;
[45] mapping::SubmapId s_id;
[48] transform::Rigid3d global_Pose;
[49] transform::Rigid3d local_Pose;
[50] int range_data_size;
[66]  DataType last_data
[68] uint64_t sys_time
[70] uint64_t delt_time
[70] Eigen::Vector3d curr_v
[72] Eigen::Vector3d curr_theta
[92] DataType last_data_m;
[94] bool data_checking_init_m;
[96] bool openLog_m;
[98] int base_time_count_m;
[100] std::mutex update_data_lck;
[102] std::mutex init_data_lck;
[104] std::ofstream ofs_localdata_checking;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/lockless_queue.h  ( 4 )
[97] std::atomic<Node> list_head
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/setting.h  ( 62 )
[19] transform::Rigid3d Unopti_pose;
[20] transform::Rigid3d Opti_pose;
[29] transform::Rigid3d output_pose;
[47] bool relocal_success;
[68] bool closure_success;
[69] bool update_home;
[104] SensorType imu_state;
[105] SensorType odm_state;
[113] extern std::string gridmap_save_path;
[114] extern bool IsSaveGridMap;
[115] extern bool IsReadGridMap;
[119] extern std::string stop_sensor_id;
[120] extern std::string save_path;
[121] extern Eigen::Quaterniond q_init;
[122] extern Eigen::Vector3d t_init;
[123] extern bool run_T_init_pose;
[124] extern Eigen::Quaterniond q_end;
[125] extern Eigen::Vector3d t_end;
[126] extern Eigen::Vector3d t_ob;
[127] extern Eigen::Vector3d k_odom;
[128] extern Eigen::Vector3d init_kk_odm;
[129] extern bool run_T_end_pose;
[130] extern Opti_Unopti_pose pose_control;
[131] extern RelocalState relocal_state;
[132] extern ClosureState closure_state;
[133] extern Eigen::Vector3d odm_slip_vel;
[136] extern std::vector<mapping::NodeId> bad_lidars;
[137] extern std::vector<mapping::NodeId> corridor_lidars;
[138] extern std::vector<Point2f> candia_pos;
[139] extern std::vector<Point2f> candia_pos_check;
[140] extern std::vector<double> candia_angle;
[141] extern std::vector<double> best_csm_pose;
[142] extern bool border_flag;
[143] extern bool is_final_opti;
[144] extern bool is_lidar_bad;
[145] extern bool is_corridor;
[146] extern bool slip_state;
[147] extern bool IsRelocation;
[148] extern bool RelocationOK;
[149] extern bool open_obstacle_map;
[150] extern bool open_print;
[151] extern int imu_type;
[152] extern int Clean_state;
[153] extern int stable_kk;
[154] extern int OldNodeNum;
[155] extern int open_debug_log;
[157] extern int current_submap_id;
[158] extern RunType run_type;
[159] extern bool need_stop;
[160] extern float MIN_MATCH_SCORE;
[161] extern int MIN_CANDI_NUM;
[162] extern double relocal_distance;
[163] extern float map_comp_ration;
[164] extern int last_loop_node;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/fixed_ratio_sampler.h  ( 3 )
[48] int64 num_pulses_ = 0;
[49] int64 num_samples_ = 0;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/common/proto/ceres_solver_options.pb.h  ( 17 )
[38] extern CeresSolverOptionsDefaultTypeInternal _CeresSolverOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] bool use_nonmonotonic_steps_;
[168] ::google::protobuf::int32 max_num_iterations_;
[169] ::google::protobuf::int32 num_threads_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/ground_truth/relations_text_file.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/ground_truth/proto/relations.pb.h  ( 22 )
[39] extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
[42] extern RelationDefaultTypeInternal _Relation_default_instance_;
[179] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[181] ::google::protobuf::int64 timestamp1_;
[182] ::google::protobuf::int64 timestamp2_;
[183] double covered_distance_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/points_processor.h  ( 1 )
[43] std::unique_ptr<PointsBatch> points_batch
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/coloring_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/xray_points_processor.h  ( 19 )
[51]  FileWriterFactory file_writer_factory
[62] float sum_r = 0.;
[63] float sum_g = 0.;
[64] float sum_b = 0.;
[79] FileWriterFactory file_writer_factory_;
[83] std::vector<mapping::Floor> floors_;
[89] std::vector<Aggregation> aggregations_;
[92] Eigen::AlignedBox3i bounding_box_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/outlier_removing_points_processor.h  ( 8 )
[80] State state_;
[81] mapping::HybridGridBase<VoxelData> voxels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/file_writer.h  ( 4 )
[62] std::ofstream out_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/fake_file_writer.h  ( 5 )
[42] bool is_closed_;
[43] std::shared_ptr<std::vector<char>> content_;
[44] std::string filename_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/min_max_range_filtering_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/submap_painter.h  ( 17 )
[51] ::cartographer::transform::Rigid3d slice_pose;
[54] std::vector<uint32_t> cairo_data;
[58] int metadata_version = -1;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/serialization_format_migration.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_deserializer.h  ( 5 )
[64] mapping::proto::SerializationHeader header_;
[65] mapping::proto::SerializedData pose_graph_;
[66] mapping::proto::SerializedData all_trajectory_builder_options_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream_interface.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/ply_writing_points_processor.h  ( 9 )
[29] PlyWritingPointsProcessor(std::unique_ptr<FileWriter> file_writer, PointsProcessor* next);
[47] int64 num_points_;
[48] bool has_colors_;
[49] bool has_intensities_;
[50] std::unique_ptr<FileWriter> file_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/frame_id_filtering_points_processor.h  ( 5 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/counting_points_processor.h  ( 4 )
[45] int64 num_points_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/intensity_to_color_points_processor.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/image.h  ( 9 )
[41] UniqueCairoSurfacePtr MakeUniqueCairoSurfacePtr(cairo_surface_t* surface);
[47] UniqueCairoPtr MakeUniqueCairoPtr(cairo_t* surface);
[56] void WritePng(FileWriter* const file_writer);
[71] int width_;
[72] int height_;
[73] std::vector<uint32> pixels_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/draw_trajectories.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/xyz_writing_points_processor.h  ( 5 )
[52] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/fixed_ratio_sampling_points_processor.h  ( 5 )
[55] std::unique_ptr<common::FixedRatioSampler> sampler_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/pcd_writing_points_processor.h  ( 8 )
[31] PcdWritingPointsProcessor(std::unique_ptr<FileWriter> file_writer, PointsProcessor* next);
[35]  FileWriterFactory file_writer_factory
[49] int64 num_points_;
[50] bool has_colors_;
[51] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/probability_grid_points_processor.h  ( 13 )
[69] std::unique_ptr<FileWriter> file_writer_;
[71] mapping::ProbabilityGridRangeDataInserter2D range_data_inserter_;
[72] mapping::ProbabilityGrid probability_grid_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/points_processor_pipeline_builder.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/points_batch.h  ( 9 )
[41] common::Time start_time;
[49] std::string frame_id;
[52] int trajectory_id;
[69] std::unordered_set<int> to_remove
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/proto_stream.h  ( 5 )
[49] std::ofstream out_;
[65] std::string decompressed_data
[67] std::ifstream in_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/color.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/hybrid_grid_points_processor.h  ( 7 )
[47] mapping::RangeDataInserter3D range_data_inserter_;
[48] mapping::HybridGrid hybrid_grid_;
[49] std::unique_ptr<FileWriter> file_writer_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/io/null_points_processor.h  ( 1 )
[31] std::unique_ptr<PointsBatch> points_batch
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/collator_interface.h  ( 5 )
[46]  int trajectory_id
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/range_data.h  ( 9 )
[53]  float min_z
[53]  float max_z
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/timed_point_cloud_data.h  ( 12 )
[33] bool is_good_to_add_optimization;
[34] common::Setting::CurrLaserState c_states;
[39] Eigen::Vector4f point_time;
[41] size_t origin_index;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/compressed_point_cloud.h  ( 9 )
[56] std::vector<int32> point_data_;
[57] size_t num_points_;
[86] size_t remaining_points_;
[87] int32 remaining_points_in_current_block_;
[88] Eigen::Vector3f current_point_;
[89] Eigen::Vector3i current_block_coordinates_;
[90] std::vector<int32>::const_iterator input_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/map_by_time.h  ( 11 )
[75] auto data_it = trajectory.lower_bound(gap_start);
[76] auto data_end = trajectory.upper_bound(gap_end);
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/odometry_data.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/data.h  ( 2 )
[40]  mapping::TrajectoryBuilderInterface trajectory_builder
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/imu_data.h  ( 5 )
[29] Eigen::Vector3d linear_acceleration;
[30] Eigen::Vector3d angular_velocity;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/fixed_frame_pose_data.h  ( 4 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/point_cloud.h  ( 8 )
[63]  float min_z
[63]  float max_z
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/landmark_data.h  ( 8 )
[34] transform::Rigid3d landmark_to_tracking_transform;
[35] double translation_weight;
[36] double rotation_weight;
[41] std::vector<LandmarkObservation> landmark_observations;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/sensor.pb.h  ( 44 )
[39] extern CompressedPointCloudDefaultTypeInternal _CompressedPointCloud_default_instance_;
[42] extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
[45] extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
[48] extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
[51] extern LandmarkData_LandmarkObservationDefaultTypeInternal _LandmarkData_LandmarkObservation_default_instance_;
[54] extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
[57] extern RangeDataDefaultTypeInternal _RangeData_default_instance_;
[60] extern TimedPointCloudDataDefaultTypeInternal _TimedPointCloudData_default_instance_;
[188] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[191] ::google::protobuf::int32 num_points_;
[311] ::google::protobuf::int64 timestamp_;
[531] ::cartographer::transform::proto::Vector3d linear_acceleration
[540] ::cartographer::transform::proto::Vector3d angular_velocity
[876] ::cartographer::transform::proto::Rigid3d landmark_to_tracking_transform
[894] ::google::protobuf::internal::ArenaStringPtr id_;
[896] double translation_weight_;
[897] double rotation_weight_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h  ( 17 )
[38] extern AdaptiveVoxelFilterOptionsDefaultTypeInternal _AdaptiveVoxelFilterOptions_default_instance_;
[166] ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
[167] float max_length_;
[168] float min_num_points_;
[169] float max_range_;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/register.h  ( 1 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/histogram.h  ( 6 )
[33]  int num_finite_buckets
[35]  double scale_factor
[35]  double max_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/counter.h  ( 1 )
[33] double by_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/family_factory.h  ( 3 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/cartographer/usr/local/include/cartographer/metrics/gauge.h  ( 2 )
[33] double by_value
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FORB.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/TemplatedDatabase.h  ( 35 )
[29] static int MIN_COMMON_WORDS = 5;
[107]  bool use_di
[107]  int di_levels = 0
[175]  int max_results = 1
[175]  int max_id = -1
[258] EntryId entry_id;
[261] WordValue word_weight;
[303] bool m_use_di;
[307] int m_dilevels;
[310] InvertedFile m_ifile;
[313] DirectFile m_dfile;
[316] int m_nentries;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FeatureVector.h  ( 2 )
[42]  unsigned int i_feature
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h  ( 78 )
[109]  int L
[328] WordId word_id;
[390] NodeId parent_id
[390]  int current_level
[425] int m_k;
[428] int m_L;
[431] WeightingType m_weighting;
[434] ScoringType m_scoring;
[440] std::vector<Node> m_nodes;
[627] int expected_nodes = (int)((pow((double)m_k, (double)m_L + 1) - 1)/(m_k - 1));
[736] bool first_time = true;
[740] vector<int> last_association, current_association;
[795] double best_dist = F::distance(*(*fit), clusters[0]);
[921] vector<double> min_dists(pfeatures.size(), std::numeric_limits<double>::max());
[953] double dist_sum = std::accumulate(min_dists.begin(), min_dists.end(), 0.0);
[957] double cut_d;
[963] double d_up_now = 0;
[1217] unsigned int i_feature = 0;
[1299] NodeId final_id = 0;
[1308] double best_d = F::distance(feature, m_nodes[final_id].descriptor);
[1571] unsigned int nb_nodes, size_node;
[1621] float _weight;
[1622] unsigned int size_node = sizeof(m_nodes[0].parent) + F::L*sizeof(char) + sizeof(_weight) + sizeof(bool);
[1634] bool is_leaf = node.isLeaf(); f.write((char*)&is_leaf, sizeof(is_leaf));
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FBrief.h  ( 7 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/DBoW2.h  ( 0 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/BowVector.cpp  ( 13 )
[63] LNorm norm_type
[106]  size_t W
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FClass.h  ( 6 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/ScoringObject.h  ( 2 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/QueryResults.h  ( 9 )
[26] EntryId Id;
[29] double Score;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp  ( 3 )
[32]  unsigned int i_feature
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/FORB.cpp  ( 18 )
[42] FORB::L 8
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp  ( 4 )
[25] BowVector::const_iterator v1_it, v2_it;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DBoW2/BowVector.h  ( 5 )
[90] LNorm norm_type
[104]  size_t W
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/Timestamp.h  ( 8 )
[184] bool machine_friendly = false
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/Random.cpp  ( 8 )
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/Random.h  ( 10 )
[105] static bool m_already_seeded;
[172] int m_min;
[174] int m_max;
[177] std::vector<int> m_values;
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/Timestamp.cpp  ( 12 )
[81] string s_usecs = stime.substr(p+1, 6);
[198] bool machine_friendly
 /root/workspace/workspace/rbn100-slam/rbn100_slam/install/Thirdparty/DBoW2/DUtils/config.h  ( 0 )

Type name:-----------------------------------------------------------------------------------------
 base  ( 29 )
 struct  ( 378 )
Imu_qua_data
Imu_qua
Imu_data
grid
Ab_state
_Unique_if
Opti_Unopti_pose
OutPut_data
__timeb32
timeval
tm
tEvent
tEntry
index_cmp
dirent
label_point
FRequestCreateMap_Tag
FRequestCreateMap_TagBuilder
FRequestCreateMap_Any
FRequestCreateMap_AnyBuilder
FRequestCreateMap_Stop
FRequestCreateMap_StopBuilder
point
orientedpoint:
pointcomparator
pointradialcomparator
Size_obs
Pose_obs
 class  ( 421 )
fusing_sensor
judge_imu_still
PoseGraph_Constraint
PoseGraph_ConstraintDefaultTypeInternal
PoseGraph_LandmarkPose
PoseGraph_LandmarkPoseDefaultTypeInternal
TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D
TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal
ConnectedComponents_ConnectedComponent
ConnectedComponents_ConnectedComponentDefaultTypeInternal
SubmapList_SubmapEntry
SubmapList_SubmapEntryDefaultTypeInternal
SubmapList_TrajectorySubmapList
SubmapList_TrajectorySubmapListDefaultTypeInternal
SubmapQuery_Request
SubmapQuery_RequestDefaultTypeInternal
SubmapQuery_Response
SubmapQuery_ResponseDefaultTypeInternal
SubmapQuery_Response_SubmapTexture
SubmapQuery_Response_SubmapTextureDefaultTypeInternal
Trajectory_Node
Trajectory_NodeDefaultTypeInternal
Trajectory_Submap
Trajectory_SubmapDefaultTypeInternal
Grid2D_CellBox
Grid2D_CellBoxDefaultTypeInternal
optional
SCOPED_CAPABILITY
LandmarkData_LandmarkObservation
LandmarkData_LandmarkObservationDefaultTypeInternal
__SCORING_CLASS(L1Scoring,
__SCORING_CLASS(L2Scoring,
__SCORING_CLASS(ChiSquareScoring,
__SCORING_CLASS(KLScoring,
__SCORING_CLASS(BhattacharyyaScoring,
__SCORING_CLASS(DotProductScoring,
BRIEF_t
iterator
 enum  ( 69 )
 namespace  ( 87 )
Location
Setting
DBoW2
DUtils
DUtilsCV
DVision
PMVS
Bundle
RBN100
Eigen
 using  ( 86 )
 typedef  ( 59 )
 template  ( 35 )

function: 51% (6335 / 12244)
variable: 40% (5107 / 12702)
type: 6% (76 / 1164)
+ mkdir -p /mnt/ftp/release/code_style_report/20220829
+ mv rbn100_slam_aarch64_codesytle_check.log /mnt/ftp/release/code_style_report/20220829/
mv: Êó†Ê≥ïËøõË°åË∑®ËÆæÂ§áÁöÑÁßªÂä®Ôºö'rbn100_slam_aarch64_codesytle_check.log' Ëá≥'/mnt/ftp/release/code_style_report/20220829/rbn100_slam_aarch64_codesytle_check.log'ÔºõÊó†Ê≥ïÂà†Èô§ÁõÆÊ†á: ‰∏çÂÖÅËÆ∏ÁöÑÊìç‰Ωú
+ true
+ echo 'check code style end'
check code style end
+ popd
~/workspace/workspace/rbn100-slam/slam ~/workspace/workspace/rbn100-slam
Notified JIRA that a build has completed.
No emails were triggered.
Finished: SUCCESS
