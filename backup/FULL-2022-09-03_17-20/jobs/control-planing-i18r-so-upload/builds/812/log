Started by GitLab push by wangshuaishuai
Running as SYSTEM
[EnvInject] - Loading node environment variables.
[EnvInject] - Preparing an environment for the build.
[EnvInject] - Keeping Jenkins system variables.
[EnvInject] - Keeping Jenkins build variables.
[EnvInject] - Injecting contributions.
Building remotely on [8mha:////4MPPEh8feJE9uNY0ThUfUuMmeXp+equSlRr0prvRJKt5AAAAoR+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzuEgZR/eT83ILSktQi/eyMxJTEYt3kxCJDAGuOCCPKAAAA[0mkhadas-car1 in workspace /root/workspace/workspace/control-planing-i18r-so-upload
[WS-CLEANUP] Clean-up disabled, skipping workspace deletion.
No emails were triggered.
[EnvInject] - Executing scripts and injecting environment variables after the SCM step.
[control-planing-i18r-so-upload] $ /bin/sh -xe /tmp/jenkins2711979267296706247.sh
+ bash /root/myscript/build/build.sh
++ export MYSQL_PWD=123
++ MYSQL_PWD=123
++ export -f cmdb_mysql
+ set -ex
+ export -f public_project_update
+ export -f project_build
+ init_project_env
++ date +%Y%m%d
+ DT=20220830
+ UserName=jenkins
+ API_TOKEN=11b65309c9835de9579d9c9038853d9eb7
+ GIT_PRIVATE_TOKEN=emEDrsaJVjxKK5gSWrf-
+ GIT_HOST=192.168.50.191
++ awk -F/ '{print $1"%2F"$2}'
++ echo AroundI18RProject/I18RNavigationSubmodule
+ CONVERT_TARGET_PROJECT=AroundI18RProject%2FI18RNavigationSubmodule
++ python -c 'import sys, json; print(json.load(sys.stdin)["id"])'
++ curl -XGET -H 'Content-Type: application/json' --header 'PRIVATE-TOKEN: emEDrsaJVjxKK5gSWrf-' http://192.168.50.191:85/api/v4/projects/AroundI18RProject%2FI18RNavigationSubmodule
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100  3480    0  3480    0     0  36250      0 --:--:-- --:--:-- --:--:-- 36631
+ SUB_PROJECT_ID=291
+ '[' -z ']'
+ SOURCE_DIR=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot
+ TARGET_DIR=/root/workspace/workspace/control-planing-i18r-so-upload/I18RNavigationSubmodule
+ prepare_env
++ uname -m
+ system_platform=aarch64
+ export COMMIT_ID_FILE=/root/workspace/workspace/control-planing-i18r-so-upload/_last_build_id
+ COMMIT_ID_FILE=/root/workspace/workspace/control-planing-i18r-so-upload/_last_build_id
+ export COMMIT_MSG_FILE=/root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg
+ COMMIT_MSG_FILE=/root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg
+ export COMMIT_MSG_FILE_TMP=/root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg.tmp
+ COMMIT_MSG_FILE_TMP=/root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg.tmp
+ rm -f /root/workspace/workspace/control-planing-i18r-so-upload/_last_build_id
+ rm -f /root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg
+ rm -f /root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg.tmp
+ rm -f /root/workspace/workspace/control-planing-i18r-so-upload/result.log
+ CLONE_DEPTH=--depth=1
+ cmdb_mysql 'insert into prebuild(job_name,source_project,source_branch,target_project,target_branch,time,build_url,node_name) values ('\''control-planing-i18r-so-upload'\'','\''wss/i18r_robot'\'','\''compile_arm'\'','\''AroundI18RProject/I18RNavigationSubmodule'\'','\''compile'\'',now(),'\''http://192.168.50.26:8080/job/control-planing-i18r-so-upload/812/'\'','\''khadas-car1'\'')'
+ set +x
+ DOCKER_CONTAINER_I18=build-x64-18.04
+ DOCKER_CONTAINER_RUBBY=c405
+ DOCKER_CONTAINER_RUBBY_INSIDE=c3566
+ '[' false = false ']'
+ source_project_update
+ '[' -d /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot ']'
+ pushd /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot
~/workspace/workspace/control-planing-i18r-so-upload/i18r_robot ~/workspace/workspace/control-planing-i18r-so-upload
+ git pull --rebase
Êù•Ëá™ ssh://192.168.50.191:222/wss/i18r_robot
   d34c4da1..5f7378e2  compile_arm -> origin/compile_arm
Êõ¥Êñ∞ d34c4da1..5f7378e2
Fast-forward
 src/indemind_clean_robot/src/task_based/defedge_state.cpp | 10 +++++-----
 src/indemind_clean_robot/src/task_based/taskbp_state.cpp  |  8 ++++----
 2 files changed, 9 insertions(+), 9 deletions(-)
ÂΩìÂâçÂàÜÊîØ compile_arm ÊòØÊúÄÊñ∞ÁöÑ„ÄÇ
+ popd
~/workspace/workspace/control-planing-i18r-so-upload
+ target_project_update
+ rm -rf /root/workspace/workspace/control-planing-i18r-so-upload/I18RNavigationSubmodule
+ target_project_fetch
+ git clone ssh://git@192.168.50.191:222/AroundI18RProject/I18RNavigationSubmodule -b compile --depth=1
Ê≠£ÂÖãÈöÜÂà∞ 'I18RNavigationSubmodule'...
+ [[ aarch64 =~ x86_64 ]]
+ [[ control-planing-i18r-so-upload =~ rbn ]]
+ public_project_update
+ pushd /root/system/I18RPublicBaseTypes
~/system/I18RPublicBaseTypes ~/workspace/workspace/control-planing-i18r-so-upload
+ git checkout ./
+ git clean -xdf ./
+ git pull origin develop
Êù•Ëá™ ssh://192.168.50.191:222/AroundI18RProject/I18RPublicBaseTypes
 * branch            develop    -> FETCH_HEAD
Â∑≤ÁªèÊòØÊúÄÊñ∞ÁöÑ„ÄÇ
+ ./install.sh
-- The C compiler identification is GNU 7.5.0
-- The CXX compiler identification is GNU 7.5.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- CMAKE_INSTALL_PREFIX: /usr/local.
-- I18R_INCLUDE_INSTALL_DIR: /usr/local/include/I18RPublicBaseTypes.
-- CMAKE_CURRENT_SOURCE_DIR: /root/system/I18RPublicBaseTypes.
-- Configuring done
-- Generating done
-- Build files have been written to: /root/system/I18RPublicBaseTypes/build
Install the project...
-- Install configuration: "Release"
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/calibr_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/cloud_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/depth_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/detector_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/error_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/geometry_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/marker_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/msg_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/old_hmi_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/server_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/slam_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/swr_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/Data.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/ErrorInfo.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/ErrorMessage.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/FormatData.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/InternalErrorCode.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/Module.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/ThreadInfo.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/Time.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/base/WorkStatus.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/calibr/Cameara2Camera.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/calibr/Camera2Lidar.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/calibr/Camera2Odometry.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/calibr/Camera2Tof.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/calibr/Imu2Odometry.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/calibr/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/calibr/Transform.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/cloud/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/autoClean_property.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/clean_path.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/current_type.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/drop_event.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/pose.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/robot_event.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/robot_status.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/work_mode.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/control/work_runs.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/depth/CalibrationImage.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/depth/DepthMatrix.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/depth/DepthPointCloud.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/depth/LightAdjustment.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/depth/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/depth/SourceImage.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/detector/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/detector/class.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/detector/detect_types.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/detector/detector_param.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/detector/error_code.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/detector/instance.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/detector/map.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/geometry/EulerAngle.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/geometry/Point.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/geometry/Quaternion.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/gen.sh
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/public.fbs
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/report.fbs
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/request.fbs
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/response.fbs
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/public_generated.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/report_generated.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/request_generated.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/response_generated.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/public.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/report.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/request.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/hmi/response.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/CImseeImage.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/CImseeImu.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/CImseeMsgHotplug.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/CImseeMsgImage.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/CImseeMsgImu.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/CImseeMsgParam.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/CameraParameter.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/CameraParameterOld.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/IMUParameter.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/ModuleInfo.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/MoudleAllParam.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/Resolution.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/SDebugSet.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/SlamParameter.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/imsee/StreamType.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/marker/MarkerState.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/marker/state.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/msg/AFI.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/msg/Basic.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/msg/Config.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/msg/Log.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/msg/Route.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/msg/Work.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/BumperEvent.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/CleanEvent.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/CliffData.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/CliffEvent.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/CtrlType.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/DropEvent.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/EncoderData.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/LaserScan.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/PointCloud2.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/RobotChassisEvent.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/StartStopSwitchEvent.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/TofDepthData.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/TofDepthImg.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/TofGrayImg.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/TofPointCloud.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/UltraData.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/UsbHotplug.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/VelocityCmd.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/sensor/VelocityData.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/server/DataRateState.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/server/SystemState.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/server/UserOperation.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/slam/Pose.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/slam/README.md
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/slam/SlamResult.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/slam/SlamState.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/error/ErrorCode.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/error/ErrorEvent.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/error/ErrorMessage.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/error/ErrorTable.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/error/IceErrorCode.h
-- Up-to-date: /usr/local/include/I18RPublicBaseTypes/error/error_maps.yaml
+ popd
~/workspace/workspace/control-planing-i18r-so-upload
+ public_i18rutilitysubmodule_update
+ pushd /root/system/i18rutilitysubmodule
~/system/i18rutilitysubmodule ~/workspace/workspace/control-planing-i18r-so-upload
+ git checkout ./
+ git clean -xdf ./
+ git pull origin develop
Êù•Ëá™ ssh://192.168.50.191:222/AroundI18RProject/i18rutilitysubmodule
 * branch            develop    -> FETCH_HEAD
Â∑≤ÁªèÊòØÊúÄÊñ∞ÁöÑ„ÄÇ
+ ./install.sh
+ popd
~/workspace/workspace/control-planing-i18r-so-upload
+ project_build
+ pushd /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot
~/workspace/workspace/control-planing-i18r-so-upload/i18r_robot ~/workspace/workspace/control-planing-i18r-so-upload
+ project_init_remote
+ git submodule update --init --recursive
+ git submodule update --remote
++ cmdb_mysql 'SELECT first_commit_id FROM prebuild where source_project='\''wss/i18r_robot'\'' and source_branch='\''compile_arm'\'' and target_project='\''AroundI18RProject/I18RNavigationSubmodule'\'' and target_branch='\''compile'\'' and status='\''0'\'' order by id desc limit 1;'
++ set +x
+ version='first_commit_id
d34c4da1'
++ awk -F ' ' '{print $2}'
++ echo first_commit_id d34c4da1
+ version=d34c4da1
++ git log -1 --pretty=format:%h
+ first_commit_id_now=5f7378e2
+ cmdb_mysql 'update prebuild set first_commit_id='\''5f7378e2'\'' where build_url='\''http://192.168.50.26:8080/job/control-planing-i18r-so-upload/812/'\'';'
+ set +x
+ '[' 5f7378e2 == d34c4da1 ']'
+ bash -ex compile.sh
+ catkin_make -DCMAKE_BUILD_TYPE=RELEASE install
[  0%] Built target std_msgs_generate_messages_eus
[  0%] Built target actionlib_msgs_generate_messages_eus
[  0%] Built target _i18r_msgs_generate_messages_check_deps_MotorPower
[  0%] Built target _i18r_msgs_generate_messages_check_deps_WheelDropEvent
[  0%] Built target _i18r_msgs_generate_messages_check_deps_BumperEvent
[  0%] Built target std_msgs_generate_messages_py
[  0%] Built target _i18r_msgs_generate_messages_check_deps_KeyboardInput
[  0%] Built target actionlib_msgs_generate_messages_py
[  0%] Built target _i18r_msgs_generate_messages_check_deps_CliffEvent
[  0%] Built target std_msgs_generate_messages_nodejs
[  0%] Built target actionlib_msgs_generate_messages_nodejs
[  0%] Built target std_msgs_generate_messages_lisp
[  0%] Built target actionlib_msgs_generate_messages_lisp
[  0%] Built target actionlib_msgs_generate_messages_cpp
[  0%] Built target std_msgs_generate_messages_cpp
[  0%] Built target geometry_msgs_generate_messages_eus
[  0%] Built target sensor_msgs_generate_messages_py
[  0%] Built target sensor_msgs_generate_messages_nodejs
[  0%] Built target geometry_msgs_generate_messages_cpp
[  0%] Built target sensor_msgs_generate_messages_cpp
[  0%] Built target sensor_msgs_generate_messages_eus
[  0%] Built target sensor_msgs_generate_messages_lisp
[  0%] Built target geometry_msgs_generate_messages_lisp
[  0%] Built target geometry_msgs_generate_messages_py
[  0%] Built target geometry_msgs_generate_messages_nodejs
[  0%] Built target dynamic_reconfigure_generate_messages_nodejs
[  0%] Built target visualization_msgs_generate_messages_py
[  3%] Built target interactive_markers
[  3%] Built target visualization_msgs_generate_messages_cpp
[  3%] Built target visualization_msgs_generate_messages_nodejs
[  3%] Built target visualization_msgs_generate_messages_eus
[  3%] Built target tf2_msgs_generate_messages_py
[  3%] Built target tf2_msgs_generate_messages_nodejs
[  3%] Built target tf2_msgs_generate_messages_lisp
[  3%] Built target roscpp_generate_messages_py
[  3%] Built target actionlib_generate_messages_lisp
[  3%] Built target visualization_msgs_generate_messages_lisp
[  3%] Built target roscpp_generate_messages_nodejs
[  3%] Built target roscpp_generate_messages_eus
[  3%] Built target roscpp_generate_messages_lisp
[  3%] Built target tf2_msgs_generate_messages_eus
[  3%] Built target actionlib_generate_messages_eus
[  3%] Built target roscpp_generate_messages_cpp
[  3%] Built target rosgraph_msgs_generate_messages_cpp
[  3%] Built target rosgraph_msgs_generate_messages_eus
[  3%] Built target actionlib_generate_messages_nodejs
[  3%] Built target rosgraph_msgs_generate_messages_nodejs
[  3%] Built target rosgraph_msgs_generate_messages_py
[  3%] Built target rosgraph_msgs_generate_messages_lisp
[  3%] Built target actionlib_generate_messages_cpp
[  3%] Built target actionlib_generate_messages_py
[  3%] Built target tf_generate_messages_py
[  3%] Built target map_msgs_generate_messages_py
[  3%] Built target tf2_msgs_generate_messages_cpp
[  3%] Built target map_msgs_generate_messages_cpp
[  3%] Built target tf_generate_messages_cpp
[  3%] Built target map_msgs_generate_messages_nodejs
[  3%] Built target tf_generate_messages_eus
[  3%] Built target tf_generate_messages_nodejs
[  3%] Built target nav_msgs_generate_messages_nodejs
[  3%] Built target dynamic_reconfigure_generate_messages_eus
[  3%] Built target nav_msgs_generate_messages_lisp
[  3%] Built target tf_generate_messages_lisp
[  3%] Built target _costmap_2d_generate_messages_check_deps_PubMap
[  3%] Built target map_msgs_generate_messages_eus
[  3%] Built target dynamic_reconfigure_generate_messages_lisp
[  3%] Built target dynamic_reconfigure_generate_messages_py
[  3%] Built target dynamic_reconfigure_generate_messages_cpp
[  3%] Built target nav_msgs_generate_messages_eus
[  3%] Built target dynamic_reconfigure_gencfg
[  3%] Built target nav_msgs_generate_messages_cpp
[  3%] Built target nav_msgs_generate_messages_py
[  3%] Built target costmap_2d_generate_messages_cpp
[  3%] Built target costmap_2d_generate_messages_lisp
[  4%] Built target costmap_2d_generate_messages_eus
[  4%] Built target map_msgs_generate_messages_lisp
[  6%] Built target costmap_2d_gencfg
[  6%] Built target _costmap_converter_generate_messages_check_deps_ObstacleArrayMsg
[  8%] Built target costmap_converter_gencfg
[  8%] Built target _catkin_empty_exported_target
[  8%] Built target _costmap_converter_generate_messages_check_deps_ObstacleMsg
[  8%] Built target _navfn_generate_messages_check_deps_MakeNavPlan
[  8%] Built target _navfn_generate_messages_check_deps_SetCostmap
[  8%] Built target global_planner_gencfg
[  8%] Built target base_local_planner_gencfg
[  8%] Built target std_srvs_generate_messages_eus
[  8%] Built target std_srvs_generate_messages_cpp
[  8%] Built target move_base_msgs_generate_messages_py
[  8%] Built target move_base_msgs_generate_messages_lisp
[  8%] Built target clean_robot_gencfg
[  8%] Built target _base_local_planner_generate_messages_check_deps_Position2DInt
[  8%] Built target move_base_msgs_generate_messages_nodejs
[  8%] Built target std_srvs_generate_messages_lisp
[  8%] Built target move_base_msgs_generate_messages_cpp
[  8%] Built target std_srvs_generate_messages_py
[  8%] Built target move_base_msgs_generate_messages_eus
[  8%] Built target std_srvs_generate_messages_nodejs
[  8%] Built target teb_local_planner_gencfg
[ 11%] Built target i18r_msgs_generate_messages_eus
[ 12%] Built target wsfake_localization
[ 12%] Built target _teb_local_planner_generate_messages_check_deps_TrajectoryMsg
[ 12%] Built target _teb_local_planner_generate_messages_check_deps_TrajectoryPointMsg
[ 12%] Built target _teb_local_planner_generate_messages_check_deps_FeedbackMsg
[ 14%] Built target i18r_msgs_generate_messages_py
[ 16%] Built target i18r_msgs_generate_messages_lisp
[ 17%] Built target i18r_msgs_generate_messages_nodejs
[ 17%] Built target costmap_2d_generate_messages_nodejs
[ 19%] Built target i18r_msgs_generate_messages_cpp
[ 20%] Built target costmap_2d_generate_messages_py
[ 21%] Built target cv_bridge
[ 22%] Built target costmap_converter_generate_messages_py
[ 22%] Built target costmap_converter_generate_messages_eus
[ 23%] Built target costmap_converter_generate_messages_cpp
[ 24%] Built target costmap_converter_generate_messages_lisp
[ 25%] Built target navfn_generate_messages_cpp
[ 26%] Built target costmap_converter_generate_messages_nodejs
[ 28%] Built target navfn_generate_messages_eus
[ 29%] Built target navfn_generate_messages_lisp
[ 30%] Built target navfn_generate_messages_py
[ 30%] Built target navfn_generate_messages_nodejs
[ 30%] Built target base_local_planner_generate_messages_py
[ 31%] Built target base_local_planner_generate_messages_eus
[ 31%] Built target base_local_planner_generate_messages_cpp
[ 32%] Built target base_local_planner_generate_messages_nodejs
[ 32%] Built target base_local_planner_generate_messages_lisp
[ 33%] Built target teb_local_planner_generate_messages_cpp
[ 34%] Built target teb_local_planner_generate_messages_nodejs
[ 35%] Built target teb_local_planner_generate_messages_eus
[ 38%] Built target teb_local_planner_generate_messages_py
[ 38%] Built target i18r_msgs_generate_messages
[ 39%] Built target teb_local_planner_generate_messages_lisp
[ 40%] Built target cv_bridge_boost
[ 40%] Built target costmap_converter_generate_messages
[ 40%] Built target costmap_2d_generate_messages
[ 44%] Built target costmap_2d
[ 44%] Built target base_local_planner_generate_messages
[ 44%] Built target navfn_generate_messages
[ 44%] Built target teb_local_planner_generate_messages
[ 47%] Built target layers
[ 48%] Built target navfn
[ 49%] Built target clear_costmap_recovery
[ 52%] Built target costmap_converter
[ 59%] Built target base_local_planner
[ 60%] Built target navfn_node
[ 64%] Built target global_planner
[ 64%] Built target point_grid
[ 65%] Built target standalone_converter
[ 66%] Built target trajectory_planner_ros
[ 67%] Built target planner
[ 68%] Built target rotate_recovery
[ 71%] Built target teb_local_planner
Scanning dependencies of target path_planning
[ 71%] Building CXX object indemind_clean_robot/CMakeFiles/path_planning.dir/src/task_based/defedge_state.cpp.o
[ 71%] Building CXX object indemind_clean_robot/CMakeFiles/path_planning.dir/src/task_based/taskbp_state.cpp.o
[ 71%] Linking CXX shared library /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/libpath_planning.so
[100%] Built target path_planning
Install the project...
-- Install configuration: "RELEASE"
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/_setup_util.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/env.sh
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/setup.bash
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/local_setup.bash
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/setup.sh
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/local_setup.sh
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/setup.zsh
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/local_setup.zsh
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/.rosinstall
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/msg/BumperEvent.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/msg/CliffEvent.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/msg/MotorPower.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/msg/WheelDropEvent.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/msg/KeyboardInput.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/cmake/i18r_msgs-msg-paths.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/BumperEvent.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/CliffEvent.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/MotorPower.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/WheelDropEvent.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/KeyboardInput.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/i18r_msgs
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/i18r_msgs/manifest.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/i18r_msgs/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/i18r_msgs/msg/CliffEvent.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/i18r_msgs/msg/KeyboardInput.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/i18r_msgs/msg/WheelDropEvent.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/i18r_msgs/msg/BumperEvent.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/i18r_msgs/msg/MotorPower.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/_package_WheelDropEvent.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/CliffEvent.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/WheelDropEvent.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/_package.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/BumperEvent.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/MotorPower.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/_package_CliffEvent.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/_package_BumperEvent.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/KeyboardInput.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/_package_KeyboardInput.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/_package_MotorPower.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/i18r_msgs/msg/i18r_msgs-msg.asd
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs/msg/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs/msg/BumperEvent.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs/msg/MotorPower.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs/msg/KeyboardInput.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs/msg/CliffEvent.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/i18r_msgs/msg/WheelDropEvent.js
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/i18r_msgs ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/i18r_msgs/msg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_BumperEvent.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_WheelDropEvent.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_BumperEvent.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_MotorPower.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_WheelDropEvent.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_CliffEvent.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_KeyboardInput.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_KeyboardInput.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_CliffEvent.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/i18r_msgs/msg/_MotorPower.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/i18r_msgs.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/cmake/i18r_msgs-msg-extras.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/cmake/i18r_msgsConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/cmake/i18r_msgsConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/i18r_msgs/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/wsbot_navigation.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/cmake/wsbot_navigationConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/cmake/wsbot_navigationConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/dwa_local_planner_params_wsbot.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/costmap_common_params_wsbot.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/base_global_planner_params.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/nav_config.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/base_local_planner_params.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/global_costmap_params.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/local_costmap_params.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/move_base_params.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/param/teb_local_planner_params_imbot.yaml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/launch
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/launch/move_base.launch
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/launch/wsbot_navigation.launch
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/launch/wsbot_navigation_server.launch
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/launch/amcl.launch
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/rviz
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsbot_navigation/rviz/wsbot_navigation_server.rviz
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/cv_bridge.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/cv_bridge/cmake/cv_bridge-extras.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/cv_bridge/cmake/cv_bridgeConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/cv_bridge/cmake/cv_bridgeConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/cv_bridge/package.xml
+ cd /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge
+ mkdir -p /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages
+ /usr/bin/env PYTHONPATH=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages:/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/lib/python2.7/dist-packages:/opt/ros/melodic/lib/python2.7/dist-packages CATKIN_BINARY_DIR=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build /usr/bin/python2 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/setup.py build --build-base /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/cv_bridge install --root=/ --install-layout=deb --prefix=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install --install-scripts=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/bin
running build
running build_py
running install
running install_lib
running install_egg_info
Removing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/cv_bridge-1.13.0.egg-info
Writing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/cv_bridge-1.13.0.egg-info
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/cv_bridge
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/cv_bridge/rgb_colors.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/cv_bridge/cv_bridge.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/cv_bridge/boost/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libcv_bridge.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/cv_bridge/boost/cv_bridge_boost.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/interactive_markers.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/interactive_markers/cmake/interactive_markersConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/interactive_markers/cmake/interactive_markersConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/interactive_markers/package.xml
+ cd /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers
+ mkdir -p /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages
+ /usr/bin/env PYTHONPATH=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages:/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/lib/python2.7/dist-packages:/opt/ros/melodic/lib/python2.7/dist-packages CATKIN_BINARY_DIR=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build /usr/bin/python2 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/setup.py egg_info --egg-base /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/interactive_markers build --build-base /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/interactive_markers install --root=/ --install-layout=deb --prefix=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install --install-scripts=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/bin
running egg_info
writing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/interactive_markers/interactive_markers.egg-info/PKG-INFO
writing top-level names to /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/interactive_markers/interactive_markers.egg-info/top_level.txt
writing dependency_links to /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/interactive_markers/interactive_markers.egg-info/dependency_links.txt
reading manifest file '/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/interactive_markers/interactive_markers.egg-info/SOURCES.txt'
writing manifest file '/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/interactive_markers/interactive_markers.egg-info/SOURCES.txt'
running build
running build_py
running install
running install_lib
running install_egg_info
removing '/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/interactive_markers-1.12.0.egg-info' (and everything under it)
Copying /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/interactive_markers/interactive_markers.egg-info to /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/interactive_markers-1.12.0.egg-info
Skipping SOURCES.txt
running install_scripts
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libinteractive_markers.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/single_client.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/message_context.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/state_machine.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/tools.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/menu_handler.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/interactive_marker_server.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/interactive_marker_client.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/visibility_control.hpp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_2d/msg/PubMap.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_2d/cmake/costmap_2d-msg-paths.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/DynamicStaticPluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/GenericPluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/PubMap.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/InflationPluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/Costmap2DConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/ObstaclePluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/CliffPluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_2d
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_2d/manifest.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_2d/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_2d/msg/PubMap.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_2d
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_2d/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_2d/msg/_package.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_2d/msg/PubMap.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_2d/msg/costmap_2d-msg.asd
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_2d/msg/_package_PubMap.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_2d
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_2d/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_2d/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_2d/msg/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_2d/msg/PubMap.js
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/costmap_2d ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/costmap_2d/cfg ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/costmap_2d/msg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/GenericPluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/CliffPluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/DynamicStaticPluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/Costmap2DConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/CliffPluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/GenericPluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/DynamicStaticPluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/ObstaclePluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/ObstaclePluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/Costmap2DConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/InflationPluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/InflationPluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/msg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/msg/_PubMap.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/msg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/msg/_PubMap.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/Costmap2DConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/ObstaclePluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/GenericPluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/InflationPluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/CliffPluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/DynamicStaticPluginConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/__init__.py
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/costmap_2d/cfg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/GenericPluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/CliffPluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/DynamicStaticPluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/Costmap2DConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/CliffPluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/GenericPluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/DynamicStaticPluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/ObstaclePluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/ObstaclePluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/Costmap2DConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/InflationPluginConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_2d/cfg/InflationPluginConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/costmap_2d.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_2d/cmake/costmap_2d-msg-extras.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_2d/cmake/costmap_2dConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_2d/cmake/costmap_2dConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_2d/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libcostmap_2d.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/liblayers.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_2d/costmap_plugins.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/msg/ObstacleMsg.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/msg/ObstacleArrayMsg.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cmake/costmap_converter-msg-paths.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToLinesDBSRANSACConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToDynamicObstaclesConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/ObstacleMsg.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToLinesDBSMCCHConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToPolygonsDBSConcaveHullConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToPolygonsDBSMCCHConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/ObstacleArrayMsg.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_converter
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_converter/manifest.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_converter/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_converter/msg/ObstacleMsg.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/costmap_converter/msg/ObstacleArrayMsg.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_converter
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_converter/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_converter/msg/_package.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_converter/msg/ObstacleMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_converter/msg/costmap_converter-msg.asd
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_converter/msg/ObstacleArrayMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_converter/msg/_package_ObstacleMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/costmap_converter/msg/_package_ObstacleArrayMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_converter
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_converter/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_converter/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_converter/msg/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_converter/msg/ObstacleMsg.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/costmap_converter/msg/ObstacleArrayMsg.js
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/costmap_converter ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/costmap_converter/cfg ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/costmap_converter/msg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSConcaveHullConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSMCCHConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToDynamicObstaclesConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSConcaveHullConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSMCCHConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSMCCHConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSMCCHConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSRANSACConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSRANSACConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToDynamicObstaclesConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/msg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/msg/_ObstacleArrayMsg.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/msg/_ObstacleMsg.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/msg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/msg/_ObstacleArrayMsg.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/msg/_ObstacleMsg.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToPolygonsDBSMCCHConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToPolygonsDBSConcaveHullConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToLinesDBSMCCHConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToLinesDBSRANSACConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToDynamicObstaclesConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/__init__.py
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/costmap_converter/cfg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSConcaveHullConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSMCCHConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToDynamicObstaclesConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSConcaveHullConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSMCCHConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSMCCHConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSMCCHConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSRANSACConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSRANSACConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToDynamicObstaclesConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/costmap_converter.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cmake/costmap_converter-msg-extras.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cmake/costmap_converterConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cmake/costmap_converterConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libcostmap_converter.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/costmap_converter/standalone_converter
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/misc.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_polygons.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_converter_interface.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_polygons_concave.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/blob_detector.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/background_subtractor.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/defines.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/README.md
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_lines_convex_hull.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_lines_ransac.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/plugins.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cfg/dynamic_reconfigure
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToLinesDBSRANSAC.cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToPolygonsDBSConcaveHull.cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToDynamicObstacles.cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToPolygonsDBSMCCH.cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToLinesDBSMCCH.cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/nav_core.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/nav_core/cmake/nav_coreConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/nav_core/cmake/nav_coreConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/nav_core/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/clear_costmap_recovery.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clear_costmap_recovery/cmake/clear_costmap_recoveryConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clear_costmap_recovery/cmake/clear_costmap_recoveryConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clear_costmap_recovery/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libclear_costmap_recovery.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clear_costmap_recovery/ccr_plugin.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clear_costmap_recovery
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clear_costmap_recovery/clear_costmap_recovery.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/navfn/srv/MakeNavPlan.srv
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/navfn/srv/SetCostmap.srv
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/navfn/cmake/navfn-msg-paths.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmap.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmapRequest.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlan.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmapResponse.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlanRequest.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlanResponse.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/navfn
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/navfn/srv
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/navfn/srv/SetCostmap.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/navfn/srv/MakeNavPlan.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/navfn/manifest.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/navfn
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/navfn/srv
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/navfn/srv/_package_MakeNavPlan.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/navfn/srv/_package.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/navfn/srv/_package_SetCostmap.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/navfn/srv/SetCostmap.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/navfn/srv/MakeNavPlan.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/navfn/srv/navfn-srv.asd
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/navfn
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/navfn/srv
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/navfn/srv/MakeNavPlan.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/navfn/srv/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/navfn/srv/SetCostmap.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/navfn/_index.js
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/navfn ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/navfn/srv ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/srv
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/srv/_MakeNavPlan.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/srv/_MakeNavPlan.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/srv/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/srv/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/srv/_SetCostmap.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/srv/_SetCostmap.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/navfn/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/navfn.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/navfn/cmake/navfn-msg-extras.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/navfn/cmake/navfnConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/navfn/cmake/navfnConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/navfn/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libnavfn.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/navfn/bgp_plugin.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/GlobalPlannerConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/global_planner/__init__.py
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/global_planner/cfg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/global_planner/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/global_planner/cfg/GlobalPlannerConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/global_planner/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/global_planner/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/global_planner/cfg/GlobalPlannerConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/global_planner.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/global_planner/cmake/global_plannerConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/global_planner/cmake/global_plannerConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/global_planner/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libglobal_planner.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/global_planner/planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/astar.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/dijkstra.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/count_down_time.hpp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/planner_core.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/expander.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/quadratic_calculator.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/orientation_filter.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/smoother.hpp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/gradient_path.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/traceback.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/grid_path.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/potential_calculator.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/global_planner/bgp_plugin.xml
+ cd /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner
+ mkdir -p /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages
+ /usr/bin/env PYTHONPATH=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages:/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/lib/python2.7/dist-packages:/opt/ros/melodic/lib/python2.7/dist-packages CATKIN_BINARY_DIR=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build /usr/bin/python2 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/setup.py build --build-base /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/navigation/base_local_planner install --root=/ --install-layout=deb --prefix=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install --install-scripts=/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/bin
running build
running build_py
running install
running install_lib
running install_egg_info
Removing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner-1.16.7.egg-info
Writing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner-1.16.7.egg-info
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/base_local_planner/msg/Position2DInt.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/base_local_planner/cmake/base_local_planner-msg-paths.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/base_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/base_local_planner/Position2DInt.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/base_local_planner/BaseLocalPlannerConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/base_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/base_local_planner/manifest.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/base_local_planner/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/base_local_planner/msg/Position2DInt.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/base_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/base_local_planner/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/base_local_planner/msg/_package.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/base_local_planner/msg/base_local_planner-msg.asd
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/base_local_planner/msg/Position2DInt.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/base_local_planner/msg/_package_Position2DInt.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/base_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/base_local_planner/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/base_local_planner/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/base_local_planner/msg/Position2DInt.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/base_local_planner/msg/_index.js
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/base_local_planner ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/base_local_planner/cfg ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/base_local_planner/msg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg/BaseLocalPlannerConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg/BaseLocalPlannerConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/msg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/msg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/msg/_Position2DInt.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/msg/_Position2DInt.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/base_local_planner/BaseLocalPlannerConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/__init__.py
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/base_local_planner/cfg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg/BaseLocalPlannerConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/base_local_planner/cfg/BaseLocalPlannerConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/base_local_planner.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/base_local_planner/cmake/base_local_planner-msg-extras.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/base_local_planner/cmake/base_local_plannerConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/base_local_planner/cmake/base_local_plannerConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/base_local_planner/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libbase_local_planner.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libtrajectory_planner_ros.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/base_local_planner/blp_plugin.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/rotate_recovery.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/rotate_recovery/cmake/rotate_recoveryConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/rotate_recovery/cmake/rotate_recoveryConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/rotate_recovery/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/librotate_recovery.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/rotate_recovery
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/rotate_recovery/rotate_recovery.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/rotate_recovery/rotate_plugin.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/MoveBaseConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/clean_robot/__init__.py
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/clean_robot/cfg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/clean_robot/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/clean_robot/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/clean_robot/cfg/MoveBaseConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/clean_robot/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/clean_robot/cfg/MoveBaseConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/clean_robot.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/cmake/clean_robotConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/cmake/clean_robotConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/loopTrpath.cpp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/main.cpp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/loopAutoc.cpp
-- Installing: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libpath_planning.so.1.10.3_5
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libpath_planning.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/nav.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/nav_basetype.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/msg/TrajectoryPointMsg.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/msg/TrajectoryMsg.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/msg/FeedbackMsg.msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/cmake/teb_local_planner-msg-paths.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TrajectoryPointMsg.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TebLocalPlannerReconfigureConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TrajectoryMsg.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/FeedbackMsg.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/teb_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/teb_local_planner/manifest.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/teb_local_planner/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/teb_local_planner/msg/FeedbackMsg.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/teb_local_planner/msg/TrajectoryMsg.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/roseus/ros/teb_local_planner/msg/TrajectoryPointMsg.l
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg/TrajectoryMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg/_package.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg/_package_FeedbackMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg/_package_TrajectoryMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg/_package_TrajectoryPointMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg/FeedbackMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg/teb_local_planner-msg.asd
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/common-lisp/ros/teb_local_planner/msg/TrajectoryPointMsg.lisp
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/teb_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/teb_local_planner/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/teb_local_planner/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/teb_local_planner/msg/TrajectoryPointMsg.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/teb_local_planner/msg/FeedbackMsg.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/teb_local_planner/msg/_index.js
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/gennodejs/ros/teb_local_planner/msg/TrajectoryMsg.js
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/teb_local_planner ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/teb_local_planner/cfg ...
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/teb_local_planner/msg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg/TebLocalPlannerReconfigureConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg/TebLocalPlannerReconfigureConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg/_TrajectoryPointMsg.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg/_TrajectoryMsg.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg/_FeedbackMsg.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg/_TrajectoryMsg.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg/_TrajectoryPointMsg.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/msg/_FeedbackMsg.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TebLocalPlannerReconfigureConfig.h
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/__init__.py
Listing /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/lib/python2.7/dist-packages/teb_local_planner/cfg ...
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg/__init__.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg/TebLocalPlannerReconfigureConfig.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg/TebLocalPlannerReconfigureConfig.py
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/python2.7/dist-packages/teb_local_planner/cfg/__init__.pyc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/teb_local_planner.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/cmake/teb_local_planner-msg-extras.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/cmake/teb_local_plannerConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/cmake/teb_local_plannerConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/package.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/libteb_local_planner.so
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/teb_local_planner_plugin.xml
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/cfg/rviz_test_optim.rviz
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/teb_local_planner/cfg/TebLocalPlannerReconfigure.cfg
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib/pkgconfig/wsfake_localization.pc
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsfake_localization/cmake/wsfake_localizationConfig.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsfake_localization/cmake/wsfake_localizationConfig-version.cmake
-- Up-to-date: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/wsfake_localization/package.xml
Base path: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot
Source space: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src
Build space: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build
Devel space: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel
Install space: /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install
####
#### Running command: "make cmake_check_build_system" in "/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build"
####
####
#### Running command: "make install -j6 -l6" in "/root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build"
####
+ popd
~/workspace/workspace/control-planing-i18r-so-upload
+ check_status_code
+ test -f /root/workspace/workspace/control-planing-i18r-so-upload/result.log
+ [[ '' = false ]]
+ generate_message
+ cd /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot
+ git log -1 --oneline --decorate=
+ echo ''
+ echo ====================================
+ [[ -f /root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg.tmp ]]
+ cat /root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg.tmp
+ echo ''
+ echo 'build_num:      http://192.168.50.26:8080/job/control-planing-i18r-so-upload/812/'
+ echo 'Push aarch64 platform files'
+ generate_commits
+ pushd /root/workspace/workspace/control-planing-i18r-so-upload/I18RNavigationSubmodule
~/workspace/workspace/control-planing-i18r-so-upload/I18RNavigationSubmodule ~/workspace/workspace/control-planing-i18r-so-upload
++ xargs -l ls
++ find /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot -name install
+ install_dir_list='env.sh
include
lib
local_setup.bash
local_setup.sh
local_setup.zsh
setup.bash
setup.sh
_setup_util.py
setup.zsh
share'
+ [[ true = true ]]
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/env.sh
rm 'arm64/env.sh'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/include
rm 'arm64/include/base_local_planner/BaseLocalPlannerConfig.h'
rm 'arm64/include/base_local_planner/Position2DInt.h'
rm 'arm64/include/clean_robot/MoveBaseConfig.h'
rm 'arm64/include/clean_robot/nav.h'
rm 'arm64/include/clean_robot/nav_basetype.h'
rm 'arm64/include/clear_costmap_recovery/clear_costmap_recovery.h'
rm 'arm64/include/costmap_2d/CliffPluginConfig.h'
rm 'arm64/include/costmap_2d/Costmap2DConfig.h'
rm 'arm64/include/costmap_2d/DynamicStaticPluginConfig.h'
rm 'arm64/include/costmap_2d/GenericPluginConfig.h'
rm 'arm64/include/costmap_2d/InflationPluginConfig.h'
rm 'arm64/include/costmap_2d/ObstaclePluginConfig.h'
rm 'arm64/include/costmap_2d/PubMap.h'
rm 'arm64/include/costmap_converter/CostmapToDynamicObstaclesConfig.h'
rm 'arm64/include/costmap_converter/CostmapToLinesDBSMCCHConfig.h'
rm 'arm64/include/costmap_converter/CostmapToLinesDBSRANSACConfig.h'
rm 'arm64/include/costmap_converter/CostmapToPolygonsDBSConcaveHullConfig.h'
rm 'arm64/include/costmap_converter/CostmapToPolygonsDBSMCCHConfig.h'
rm 'arm64/include/costmap_converter/ObstacleArrayMsg.h'
rm 'arm64/include/costmap_converter/ObstacleMsg.h'
rm 'arm64/include/costmap_converter/costmap_converter_interface.h'
rm 'arm64/include/costmap_converter/costmap_to_dynamic_obstacles/background_subtractor.h'
rm 'arm64/include/costmap_converter/costmap_to_dynamic_obstacles/blob_detector.h'
rm 'arm64/include/costmap_converter/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.h'
rm 'arm64/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.h'
rm 'arm64/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.h'
rm 'arm64/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.h'
rm 'arm64/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/README.md'
rm 'arm64/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/defines.h'
rm 'arm64/include/costmap_converter/costmap_to_lines_convex_hull.h'
rm 'arm64/include/costmap_converter/costmap_to_lines_ransac.h'
rm 'arm64/include/costmap_converter/costmap_to_polygons.h'
rm 'arm64/include/costmap_converter/costmap_to_polygons_concave.h'
rm 'arm64/include/costmap_converter/misc.h'
rm 'arm64/include/cv_bridge/cv_bridge.h'
rm 'arm64/include/cv_bridge/rgb_colors.h'
rm 'arm64/include/global_planner/GlobalPlannerConfig.h'
rm 'arm64/include/global_planner/astar.h'
rm 'arm64/include/global_planner/count_down_time.hpp'
rm 'arm64/include/global_planner/dijkstra.h'
rm 'arm64/include/global_planner/expander.h'
rm 'arm64/include/global_planner/gradient_path.h'
rm 'arm64/include/global_planner/grid_path.h'
rm 'arm64/include/global_planner/orientation_filter.h'
rm 'arm64/include/global_planner/planner_core.h'
rm 'arm64/include/global_planner/potential_calculator.h'
rm 'arm64/include/global_planner/quadratic_calculator.h'
rm 'arm64/include/global_planner/smoother.hpp'
rm 'arm64/include/global_planner/traceback.h'
rm 'arm64/include/i18r_msgs/BumperEvent.h'
rm 'arm64/include/i18r_msgs/CliffEvent.h'
rm 'arm64/include/i18r_msgs/KeyboardInput.h'
rm 'arm64/include/i18r_msgs/MotorPower.h'
rm 'arm64/include/i18r_msgs/WheelDropEvent.h'
rm 'arm64/include/interactive_markers/detail/message_context.h'
rm 'arm64/include/interactive_markers/detail/single_client.h'
rm 'arm64/include/interactive_markers/detail/state_machine.h'
rm 'arm64/include/interactive_markers/interactive_marker_client.h'
rm 'arm64/include/interactive_markers/interactive_marker_server.h'
rm 'arm64/include/interactive_markers/menu_handler.h'
rm 'arm64/include/interactive_markers/tools.h'
rm 'arm64/include/interactive_markers/visibility_control.hpp'
rm 'arm64/include/navfn/MakeNavPlan.h'
rm 'arm64/include/navfn/MakeNavPlanRequest.h'
rm 'arm64/include/navfn/MakeNavPlanResponse.h'
rm 'arm64/include/navfn/SetCostmap.h'
rm 'arm64/include/navfn/SetCostmapRequest.h'
rm 'arm64/include/navfn/SetCostmapResponse.h'
rm 'arm64/include/rotate_recovery/rotate_recovery.h'
rm 'arm64/include/teb_local_planner/FeedbackMsg.h'
rm 'arm64/include/teb_local_planner/TebLocalPlannerReconfigureConfig.h'
rm 'arm64/include/teb_local_planner/TrajectoryMsg.h'
rm 'arm64/include/teb_local_planner/TrajectoryPointMsg.h'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/lib
rm 'arm64/lib/costmap_converter/standalone_converter'
rm 'arm64/lib/global_planner/planner'
rm 'arm64/lib/libbase_local_planner.so'
rm 'arm64/lib/libclear_costmap_recovery.so'
rm 'arm64/lib/libcostmap_2d.so'
rm 'arm64/lib/libcostmap_converter.so'
rm 'arm64/lib/libcv_bridge.so'
rm 'arm64/lib/libglobal_planner.so'
rm 'arm64/lib/libinteractive_markers.so'
rm 'arm64/lib/liblayers.so'
rm 'arm64/lib/libnavfn.so'
rm 'arm64/lib/libpath_planning.so'
rm 'arm64/lib/libpath_planning.so.1.10.3_5'
rm 'arm64/lib/librotate_recovery.so'
rm 'arm64/lib/libteb_local_planner.so'
rm 'arm64/lib/libtrajectory_planner_ros.so'
rm 'arm64/lib/pkgconfig/base_local_planner.pc'
rm 'arm64/lib/pkgconfig/clean_robot.pc'
rm 'arm64/lib/pkgconfig/clear_costmap_recovery.pc'
rm 'arm64/lib/pkgconfig/costmap_2d.pc'
rm 'arm64/lib/pkgconfig/costmap_converter.pc'
rm 'arm64/lib/pkgconfig/cv_bridge.pc'
rm 'arm64/lib/pkgconfig/global_planner.pc'
rm 'arm64/lib/pkgconfig/i18r_msgs.pc'
rm 'arm64/lib/pkgconfig/interactive_markers.pc'
rm 'arm64/lib/pkgconfig/nav_core.pc'
rm 'arm64/lib/pkgconfig/navfn.pc'
rm 'arm64/lib/pkgconfig/rotate_recovery.pc'
rm 'arm64/lib/pkgconfig/teb_local_planner.pc'
rm 'arm64/lib/pkgconfig/wsbot_navigation.pc'
rm 'arm64/lib/pkgconfig/wsfake_localization.pc'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner-1.16.7.egg-info'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/cfg/BaseLocalPlannerConfig.py'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/cfg/BaseLocalPlannerConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/cfg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/cfg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/msg/_Position2DInt.py'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/msg/_Position2DInt.pyc'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/msg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/base_local_planner/msg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/clean_robot/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/clean_robot/cfg/MoveBaseConfig.py'
rm 'arm64/lib/python2.7/dist-packages/clean_robot/cfg/MoveBaseConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/clean_robot/cfg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/clean_robot/cfg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/CliffPluginConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/CliffPluginConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/Costmap2DConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/Costmap2DConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/DynamicStaticPluginConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/DynamicStaticPluginConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/GenericPluginConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/GenericPluginConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/InflationPluginConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/InflationPluginConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/ObstaclePluginConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/ObstaclePluginConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/cfg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/msg/_PubMap.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/msg/_PubMap.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/msg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_2d/msg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToDynamicObstaclesConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToDynamicObstaclesConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSMCCHConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSMCCHConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSRANSACConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToLinesDBSRANSACConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSConcaveHullConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSConcaveHullConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSMCCHConfig.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/CostmapToPolygonsDBSMCCHConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/cfg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/msg/_ObstacleArrayMsg.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/msg/_ObstacleArrayMsg.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/msg/_ObstacleMsg.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/msg/_ObstacleMsg.pyc'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/msg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/costmap_converter/msg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/cv_bridge-1.13.0.egg-info'
rm 'arm64/lib/python2.7/dist-packages/cv_bridge/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/cv_bridge/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/cv_bridge/boost/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/cv_bridge/boost/cv_bridge_boost.so'
rm 'arm64/lib/python2.7/dist-packages/cv_bridge/core.py'
rm 'arm64/lib/python2.7/dist-packages/cv_bridge/core.pyc'
rm 'arm64/lib/python2.7/dist-packages/global_planner/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/global_planner/cfg/GlobalPlannerConfig.py'
rm 'arm64/lib/python2.7/dist-packages/global_planner/cfg/GlobalPlannerConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/global_planner/cfg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/global_planner/cfg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_BumperEvent.py'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_BumperEvent.pyc'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_CliffEvent.py'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_CliffEvent.pyc'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_KeyboardInput.py'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_KeyboardInput.pyc'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_MotorPower.py'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_MotorPower.pyc'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_WheelDropEvent.py'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/_WheelDropEvent.pyc'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/i18r_msgs/msg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers-1.12.0.egg-info/PKG-INFO'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers-1.12.0.egg-info/dependency_links.txt'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers-1.12.0.egg-info/top_level.txt'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers/interactive_marker_server.py'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers/interactive_marker_server.pyc'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers/menu_handler.py'
rm 'arm64/lib/python2.7/dist-packages/interactive_markers/menu_handler.pyc'
rm 'arm64/lib/python2.7/dist-packages/local_planner_limits/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/local_planner_limits/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/navfn/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/navfn/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/navfn/srv/_MakeNavPlan.py'
rm 'arm64/lib/python2.7/dist-packages/navfn/srv/_MakeNavPlan.pyc'
rm 'arm64/lib/python2.7/dist-packages/navfn/srv/_SetCostmap.py'
rm 'arm64/lib/python2.7/dist-packages/navfn/srv/_SetCostmap.pyc'
rm 'arm64/lib/python2.7/dist-packages/navfn/srv/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/navfn/srv/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/cfg/TebLocalPlannerReconfigureConfig.py'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/cfg/TebLocalPlannerReconfigureConfig.pyc'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/cfg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/cfg/__init__.pyc'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/msg/_FeedbackMsg.py'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/msg/_FeedbackMsg.pyc'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/msg/_TrajectoryMsg.py'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/msg/_TrajectoryMsg.pyc'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/msg/_TrajectoryPointMsg.py'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/msg/_TrajectoryPointMsg.pyc'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/msg/__init__.py'
rm 'arm64/lib/python2.7/dist-packages/teb_local_planner/msg/__init__.pyc'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/local_setup.bash
rm 'arm64/local_setup.bash'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/local_setup.sh
rm 'arm64/local_setup.sh'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/local_setup.zsh
rm 'arm64/local_setup.zsh'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/setup.bash
rm 'arm64/setup.bash'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/setup.sh
rm 'arm64/setup.sh'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/_setup_util.py
rm 'arm64/_setup_util.py'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/setup.zsh
rm 'arm64/setup.zsh'
+ for i in $install_dir_list
+ '[' -z arm64 ']'
+ git rm -r arm64/share
rm 'arm64/share/base_local_planner/blp_plugin.xml'
rm 'arm64/share/base_local_planner/cmake/base_local_planner-msg-extras.cmake'
rm 'arm64/share/base_local_planner/cmake/base_local_planner-msg-paths.cmake'
rm 'arm64/share/base_local_planner/cmake/base_local_plannerConfig-version.cmake'
rm 'arm64/share/base_local_planner/cmake/base_local_plannerConfig.cmake'
rm 'arm64/share/base_local_planner/msg/Position2DInt.msg'
rm 'arm64/share/base_local_planner/package.xml'
rm 'arm64/share/clean_robot/cmake/clean_robotConfig-version.cmake'
rm 'arm64/share/clean_robot/cmake/clean_robotConfig.cmake'
rm 'arm64/share/clean_robot/package.xml'
rm 'arm64/share/clean_robot/sample/loopAutoc.cpp'
rm 'arm64/share/clean_robot/sample/loopTrpath.cpp'
rm 'arm64/share/clean_robot/sample/main.cpp'
rm 'arm64/share/clear_costmap_recovery/ccr_plugin.xml'
rm 'arm64/share/clear_costmap_recovery/cmake/clear_costmap_recoveryConfig-version.cmake'
rm 'arm64/share/clear_costmap_recovery/cmake/clear_costmap_recoveryConfig.cmake'
rm 'arm64/share/clear_costmap_recovery/package.xml'
rm 'arm64/share/common-lisp/ros/base_local_planner/msg/Position2DInt.lisp'
rm 'arm64/share/common-lisp/ros/base_local_planner/msg/_package.lisp'
rm 'arm64/share/common-lisp/ros/base_local_planner/msg/_package_Position2DInt.lisp'
rm 'arm64/share/common-lisp/ros/base_local_planner/msg/base_local_planner-msg.asd'
rm 'arm64/share/common-lisp/ros/costmap_2d/msg/PubMap.lisp'
rm 'arm64/share/common-lisp/ros/costmap_2d/msg/_package.lisp'
rm 'arm64/share/common-lisp/ros/costmap_2d/msg/_package_PubMap.lisp'
rm 'arm64/share/common-lisp/ros/costmap_2d/msg/costmap_2d-msg.asd'
rm 'arm64/share/common-lisp/ros/costmap_converter/msg/ObstacleArrayMsg.lisp'
rm 'arm64/share/common-lisp/ros/costmap_converter/msg/ObstacleMsg.lisp'
rm 'arm64/share/common-lisp/ros/costmap_converter/msg/_package.lisp'
rm 'arm64/share/common-lisp/ros/costmap_converter/msg/_package_ObstacleArrayMsg.lisp'
rm 'arm64/share/common-lisp/ros/costmap_converter/msg/_package_ObstacleMsg.lisp'
rm 'arm64/share/common-lisp/ros/costmap_converter/msg/costmap_converter-msg.asd'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/BumperEvent.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/CliffEvent.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/KeyboardInput.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/MotorPower.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/WheelDropEvent.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/_package.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/_package_BumperEvent.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/_package_CliffEvent.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/_package_KeyboardInput.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/_package_MotorPower.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/_package_WheelDropEvent.lisp'
rm 'arm64/share/common-lisp/ros/i18r_msgs/msg/i18r_msgs-msg.asd'
rm 'arm64/share/common-lisp/ros/navfn/srv/MakeNavPlan.lisp'
rm 'arm64/share/common-lisp/ros/navfn/srv/SetCostmap.lisp'
rm 'arm64/share/common-lisp/ros/navfn/srv/_package.lisp'
rm 'arm64/share/common-lisp/ros/navfn/srv/_package_MakeNavPlan.lisp'
rm 'arm64/share/common-lisp/ros/navfn/srv/_package_SetCostmap.lisp'
rm 'arm64/share/common-lisp/ros/navfn/srv/navfn-srv.asd'
rm 'arm64/share/common-lisp/ros/teb_local_planner/msg/FeedbackMsg.lisp'
rm 'arm64/share/common-lisp/ros/teb_local_planner/msg/TrajectoryMsg.lisp'
rm 'arm64/share/common-lisp/ros/teb_local_planner/msg/TrajectoryPointMsg.lisp'
rm 'arm64/share/common-lisp/ros/teb_local_planner/msg/_package.lisp'
rm 'arm64/share/common-lisp/ros/teb_local_planner/msg/_package_FeedbackMsg.lisp'
rm 'arm64/share/common-lisp/ros/teb_local_planner/msg/_package_TrajectoryMsg.lisp'
rm 'arm64/share/common-lisp/ros/teb_local_planner/msg/_package_TrajectoryPointMsg.lisp'
rm 'arm64/share/common-lisp/ros/teb_local_planner/msg/teb_local_planner-msg.asd'
rm 'arm64/share/costmap_2d/cmake/costmap_2d-msg-extras.cmake'
rm 'arm64/share/costmap_2d/cmake/costmap_2d-msg-paths.cmake'
rm 'arm64/share/costmap_2d/cmake/costmap_2dConfig-version.cmake'
rm 'arm64/share/costmap_2d/cmake/costmap_2dConfig.cmake'
rm 'arm64/share/costmap_2d/costmap_plugins.xml'
rm 'arm64/share/costmap_2d/msg/PubMap.msg'
rm 'arm64/share/costmap_2d/package.xml'
rm 'arm64/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToDynamicObstacles.cfg'
rm 'arm64/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToLinesDBSMCCH.cfg'
rm 'arm64/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToLinesDBSRANSAC.cfg'
rm 'arm64/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToPolygonsDBSConcaveHull.cfg'
rm 'arm64/share/costmap_converter/cfg/dynamic_reconfigure/CostmapToPolygonsDBSMCCH.cfg'
rm 'arm64/share/costmap_converter/cmake/costmap_converter-msg-extras.cmake'
rm 'arm64/share/costmap_converter/cmake/costmap_converter-msg-paths.cmake'
rm 'arm64/share/costmap_converter/cmake/costmap_converterConfig-version.cmake'
rm 'arm64/share/costmap_converter/cmake/costmap_converterConfig.cmake'
rm 'arm64/share/costmap_converter/msg/ObstacleArrayMsg.msg'
rm 'arm64/share/costmap_converter/msg/ObstacleMsg.msg'
rm 'arm64/share/costmap_converter/package.xml'
rm 'arm64/share/costmap_converter/plugins.xml'
rm 'arm64/share/cv_bridge/cmake/cv_bridge-extras.cmake'
rm 'arm64/share/cv_bridge/cmake/cv_bridgeConfig-version.cmake'
rm 'arm64/share/cv_bridge/cmake/cv_bridgeConfig.cmake'
rm 'arm64/share/cv_bridge/package.xml'
rm 'arm64/share/gennodejs/ros/base_local_planner/_index.js'
rm 'arm64/share/gennodejs/ros/base_local_planner/msg/Position2DInt.js'
rm 'arm64/share/gennodejs/ros/base_local_planner/msg/_index.js'
rm 'arm64/share/gennodejs/ros/costmap_2d/_index.js'
rm 'arm64/share/gennodejs/ros/costmap_2d/msg/PubMap.js'
rm 'arm64/share/gennodejs/ros/costmap_2d/msg/_index.js'
rm 'arm64/share/gennodejs/ros/costmap_converter/_index.js'
rm 'arm64/share/gennodejs/ros/costmap_converter/msg/ObstacleArrayMsg.js'
rm 'arm64/share/gennodejs/ros/costmap_converter/msg/ObstacleMsg.js'
rm 'arm64/share/gennodejs/ros/costmap_converter/msg/_index.js'
rm 'arm64/share/gennodejs/ros/i18r_msgs/_index.js'
rm 'arm64/share/gennodejs/ros/i18r_msgs/msg/BumperEvent.js'
rm 'arm64/share/gennodejs/ros/i18r_msgs/msg/CliffEvent.js'
rm 'arm64/share/gennodejs/ros/i18r_msgs/msg/KeyboardInput.js'
rm 'arm64/share/gennodejs/ros/i18r_msgs/msg/MotorPower.js'
rm 'arm64/share/gennodejs/ros/i18r_msgs/msg/WheelDropEvent.js'
rm 'arm64/share/gennodejs/ros/i18r_msgs/msg/_index.js'
rm 'arm64/share/gennodejs/ros/navfn/_index.js'
rm 'arm64/share/gennodejs/ros/navfn/srv/MakeNavPlan.js'
rm 'arm64/share/gennodejs/ros/navfn/srv/SetCostmap.js'
rm 'arm64/share/gennodejs/ros/navfn/srv/_index.js'
rm 'arm64/share/gennodejs/ros/teb_local_planner/_index.js'
rm 'arm64/share/gennodejs/ros/teb_local_planner/msg/FeedbackMsg.js'
rm 'arm64/share/gennodejs/ros/teb_local_planner/msg/TrajectoryMsg.js'
rm 'arm64/share/gennodejs/ros/teb_local_planner/msg/TrajectoryPointMsg.js'
rm 'arm64/share/gennodejs/ros/teb_local_planner/msg/_index.js'
rm 'arm64/share/global_planner/bgp_plugin.xml'
rm 'arm64/share/global_planner/cmake/global_plannerConfig-version.cmake'
rm 'arm64/share/global_planner/cmake/global_plannerConfig.cmake'
rm 'arm64/share/global_planner/package.xml'
rm 'arm64/share/i18r_msgs/cmake/i18r_msgs-msg-extras.cmake'
rm 'arm64/share/i18r_msgs/cmake/i18r_msgs-msg-paths.cmake'
rm 'arm64/share/i18r_msgs/cmake/i18r_msgsConfig-version.cmake'
rm 'arm64/share/i18r_msgs/cmake/i18r_msgsConfig.cmake'
rm 'arm64/share/i18r_msgs/msg/BumperEvent.msg'
rm 'arm64/share/i18r_msgs/msg/CliffEvent.msg'
rm 'arm64/share/i18r_msgs/msg/KeyboardInput.msg'
rm 'arm64/share/i18r_msgs/msg/MotorPower.msg'
rm 'arm64/share/i18r_msgs/msg/WheelDropEvent.msg'
rm 'arm64/share/i18r_msgs/package.xml'
rm 'arm64/share/interactive_markers/cmake/interactive_markersConfig-version.cmake'
rm 'arm64/share/interactive_markers/cmake/interactive_markersConfig.cmake'
rm 'arm64/share/interactive_markers/package.xml'
rm 'arm64/share/nav_core/cmake/nav_coreConfig-version.cmake'
rm 'arm64/share/nav_core/cmake/nav_coreConfig.cmake'
rm 'arm64/share/nav_core/package.xml'
rm 'arm64/share/navfn/bgp_plugin.xml'
rm 'arm64/share/navfn/cmake/navfn-msg-extras.cmake'
rm 'arm64/share/navfn/cmake/navfn-msg-paths.cmake'
rm 'arm64/share/navfn/cmake/navfnConfig-version.cmake'
rm 'arm64/share/navfn/cmake/navfnConfig.cmake'
rm 'arm64/share/navfn/package.xml'
rm 'arm64/share/navfn/srv/MakeNavPlan.srv'
rm 'arm64/share/navfn/srv/SetCostmap.srv'
rm 'arm64/share/roseus/ros/base_local_planner/manifest.l'
rm 'arm64/share/roseus/ros/base_local_planner/msg/Position2DInt.l'
rm 'arm64/share/roseus/ros/costmap_2d/manifest.l'
rm 'arm64/share/roseus/ros/costmap_2d/msg/PubMap.l'
rm 'arm64/share/roseus/ros/costmap_converter/manifest.l'
rm 'arm64/share/roseus/ros/costmap_converter/msg/ObstacleArrayMsg.l'
rm 'arm64/share/roseus/ros/costmap_converter/msg/ObstacleMsg.l'
rm 'arm64/share/roseus/ros/i18r_msgs/manifest.l'
rm 'arm64/share/roseus/ros/i18r_msgs/msg/BumperEvent.l'
rm 'arm64/share/roseus/ros/i18r_msgs/msg/CliffEvent.l'
rm 'arm64/share/roseus/ros/i18r_msgs/msg/KeyboardInput.l'
rm 'arm64/share/roseus/ros/i18r_msgs/msg/MotorPower.l'
rm 'arm64/share/roseus/ros/i18r_msgs/msg/WheelDropEvent.l'
rm 'arm64/share/roseus/ros/navfn/manifest.l'
rm 'arm64/share/roseus/ros/navfn/srv/MakeNavPlan.l'
rm 'arm64/share/roseus/ros/navfn/srv/SetCostmap.l'
rm 'arm64/share/roseus/ros/teb_local_planner/manifest.l'
rm 'arm64/share/roseus/ros/teb_local_planner/msg/FeedbackMsg.l'
rm 'arm64/share/roseus/ros/teb_local_planner/msg/TrajectoryMsg.l'
rm 'arm64/share/roseus/ros/teb_local_planner/msg/TrajectoryPointMsg.l'
rm 'arm64/share/rotate_recovery/cmake/rotate_recoveryConfig-version.cmake'
rm 'arm64/share/rotate_recovery/cmake/rotate_recoveryConfig.cmake'
rm 'arm64/share/rotate_recovery/package.xml'
rm 'arm64/share/rotate_recovery/rotate_plugin.xml'
rm 'arm64/share/teb_local_planner/cfg/TebLocalPlannerReconfigure.cfg'
rm 'arm64/share/teb_local_planner/cfg/rviz_test_optim.rviz'
rm 'arm64/share/teb_local_planner/cmake/teb_local_planner-msg-extras.cmake'
rm 'arm64/share/teb_local_planner/cmake/teb_local_planner-msg-paths.cmake'
rm 'arm64/share/teb_local_planner/cmake/teb_local_plannerConfig-version.cmake'
rm 'arm64/share/teb_local_planner/cmake/teb_local_plannerConfig.cmake'
rm 'arm64/share/teb_local_planner/msg/FeedbackMsg.msg'
rm 'arm64/share/teb_local_planner/msg/TrajectoryMsg.msg'
rm 'arm64/share/teb_local_planner/msg/TrajectoryPointMsg.msg'
rm 'arm64/share/teb_local_planner/package.xml'
rm 'arm64/share/teb_local_planner/teb_local_planner_plugin.xml'
rm 'arm64/share/wsbot_navigation/cmake/wsbot_navigationConfig-version.cmake'
rm 'arm64/share/wsbot_navigation/cmake/wsbot_navigationConfig.cmake'
rm 'arm64/share/wsbot_navigation/launch/amcl.launch'
rm 'arm64/share/wsbot_navigation/launch/move_base.launch'
rm 'arm64/share/wsbot_navigation/launch/wsbot_navigation.launch'
rm 'arm64/share/wsbot_navigation/launch/wsbot_navigation_server.launch'
rm 'arm64/share/wsbot_navigation/package.xml'
rm 'arm64/share/wsbot_navigation/param/base_global_planner_params.yaml'
rm 'arm64/share/wsbot_navigation/param/base_local_planner_params.yaml'
rm 'arm64/share/wsbot_navigation/param/costmap_common_params_wsbot.yaml'
rm 'arm64/share/wsbot_navigation/param/dwa_local_planner_params_wsbot.yaml'
rm 'arm64/share/wsbot_navigation/param/global_costmap_params.yaml'
rm 'arm64/share/wsbot_navigation/param/local_costmap_params.yaml'
rm 'arm64/share/wsbot_navigation/param/move_base_params.yaml'
rm 'arm64/share/wsbot_navigation/param/nav_config.yaml'
rm 'arm64/share/wsbot_navigation/param/teb_local_planner_params_imbot.yaml'
rm 'arm64/share/wsbot_navigation/rviz/wsbot_navigation_server.rviz'
rm 'arm64/share/wsfake_localization/cmake/wsfake_localizationConfig-version.cmake'
rm 'arm64/share/wsfake_localization/cmake/wsfake_localizationConfig.cmake'
rm 'arm64/share/wsfake_localization/package.xml'
+ [[ true = \m\a\r\k\-\c\h\e\c\k\-\t\o\o\l\s ]]
+ '[' -z arm64 ']'
+ mkdir -p arm64
+ cp -ar /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/env.sh /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/lib /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/local_setup.bash /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/local_setup.sh /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/local_setup.zsh /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/setup.bash /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/setup.sh /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/_setup_util.py /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/setup.zsh /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share arm64/
+ git add --all .
++ git status -s
+ add_file_list='M  arm64/lib/libpath_planning.so.1.10.3_5'
+ '[' -z 'M  arm64/lib/libpath_planning.so.1.10.3_5' ']'
+ git commit -s -F /root/workspace/workspace/control-planing-i18r-so-upload/_commit-msg
[compile 61a6d57] 5f7378e2 Merge branch 'cdiff' into 'compile_arm'
 1 file changed, 0 insertions(+), 0 deletions(-)
++ git config --local --get branch.compile.remote
+ local remote=origin
++ git config --local --get branch.compile.merge
+ local branch=refs/heads/compile
+ git push --no-verify origin HEAD:refs/heads/compile
remote: 
remote: To create a merge request for compile, visit:        
remote:   http://192.168.50.191:85/AroundI18RProject/I18RNavigationSubmodule/-/merge_requests/new?merge_request%5Bsource_branch%5D=compile        
remote: 
To ssh://192.168.50.191:222/AroundI18RProject/I18RNavigationSubmodule
   43bd5f9..61a6d57  HEAD -> compile
+ [[ -z 5f7378e2 ]]
+ cmdb_mysql 'update prebuild set status='\''0'\'' where build_url='\''http://192.168.50.26:8080/job/control-planing-i18r-so-upload/812/'\'';'
+ set +x
+ [[ '' = true ]]
+ [[ '' = c405 ]]
+ [[ '' = c3566 ]]
+ check_code_style
+ pushd /root/system/cppreview
~/system/cppreview ~/workspace/workspace/control-planing-i18r-so-upload/I18RNavigationSubmodule ~/workspace/workspace/control-planing-i18r-so-upload
+ git checkout ./
+ git clean -xdf ./
Ê≠£Âà†Èô§ __pycache__/
Ê≠£Âà†Èô§ utils/__pycache__/
+ git pull
Â∑≤ÁªèÊòØÊúÄÊñ∞ÁöÑ„ÄÇ
+ echo 'check code style start'
check code style start
+ echo

+ test -f get_variable.py
+ sed -r 's/\\033\[[0-9]+m//g' -i get_variable.py
+ tee i18r_robot_aarch64_codesytle_check.log
+ timeout 5m python3 review.py --input /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot

Function name:-------------------------------------------------------------------------------------
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/test/costmap_polygons.cpp  ( 6 )
[9] geometry_msgs::Point32 create_point (double x, double y);
[22] std::vector<costmap_converter::CostmapToPolygonsDBSMCCH::KeyPoint> points () const return occupied_cells_};
[23] costmap_converter::CostmapToPolygonsDBSMCCH::Parameters parameters () return parameter_};
[82] void regionQueryTrivial (int curr_index, std::vector<int> neighbor_indices);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/misc.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_polygons.h  ( 17 )
[97] void toPointMsg (geometry_msgs::Point point) const point.x=x point.y=y point.z=0};
[132] void initialize (ros::NodeHandle nh);
[137] void compute ();
[144] void setCostmap2D (costmap_2d::Costmap2D costmap);
[150] void updateCostmap2D ();
[161] void convertPointToPolygon (const Point point, geometry_msgs::Polygon polygon);
[173] PolygonContainerConstPtr getPolygons ();
[190] void dbScan (std::vector< std::vector<KeyPoint> > clusters);
[198] void regionQuery (int curr_index, std::vector<int> neighbor_indices);
[204] void addPoint (double x, double y);
[226] void convexHull (std::vector<KeyPoint> cluster, geometry_msgs::Polygon polygon);
[241] void convexHull2 (std::vector<KeyPoint> cluster, geometry_msgs::Polygon polygon);
[250] void simplifyPolygon (geometry_msgs::Polygon polygon);
[272] void updatePolygonContainer (PolygonContainerPtr polygons);
[289] int neighborCellsToIndex (int cx, int cy);
[302] void pointToNeighborCells (const KeyPoint kp, int cx, int cy);
[321] void reconfigureCB (CostmapToPolygonsDBSMCCHConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_converter_interface.h  ( 17 )
[85] void initialize (ros::NodeHandle nh) = 0;
[102] void setCostmap2D (costmap_2d::Costmap2D costmap) = 0;
[109] void updateCostmap2D () = 0;
[114] void compute () = 0;
[125] PolygonContainerConstPtr getPolygons ()return PolygonContainerConstPtr()};
[136] ObstacleArrayConstPtr getObstacles ();
[157] void setOdomTopic (const std::string odom_topic) };
[164] bool stackedCostmapConversion () return false};
[178] void startWorker (ros::Rate rate, costmap_2d::Costmap2D costmap, bool spin_thread = false);
[211] void stopWorker ();
[235] void spinThread ();
[251] void workerCallback (const ros::TimerEvent);
[283] void loadStaticCostmapConverterPlugin (const std::string plugin_name, ros::NodeHandle nh_parent);
[309] void setStaticCostmapConverterPlugin (boost::shared_ptr<BaseCostmapToPolygons> static_costmap_converter);
[318] void setStaticCostmap (boost::shared_ptr<costmap_2d::Costmap2D> static_costmap);
[326] void convertStaticObstacles ();
[335] PolygonContainerConstPtr getStaticPolygons ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_polygons_concave.h  ( 6 )
[80] void initialize (ros::NodeHandle nh);
[86] void compute ();
[99] void concaveHull (std::vector<KeyPoint> cluster, double depth, geometry_msgs::Polygon polygon);
[101] void concaveHullClusterCut (std::vector<KeyPoint> cluster, double depth, geometry_msgs::Polygon polygon);
[108] bool checkLineIntersection (const Point1 line1_start, const Point2 line1_end, const Point3 line2_start, const Point4 line2_end);
[125] void reconfigureCB (CostmapToPolygonsDBSConcaveHullConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_lines_convex_hull.h  ( 4 )
[87] void initialize (ros::NodeHandle nh);
[92] void compute ();
[103] void extractPointsAndLines (std::vector<KeyPoint> cluster, const geometry_msgs::Polygon polygon, std::back_insert_iterator< std::vector<geometry_msgs::Polygon> > lines);
[122] void reconfigureCB (CostmapToLinesDBSMCCHConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_lines_ransac.h  ( 6 )
[89] void initialize (ros::NodeHandle nh);
[94] void compute ();
[108] bool isInlier (const Point point, const LinePoint line_start, const LinePoint line_end, double min_distance);
[136] bool lineRansac (const std::vector<KeyPoint> data, double inlier_distance, int no_iterations, int min_inliers, std::pair<KeyPoint, KeyPoint> best_model, std::vector<KeyPoint> inliers = NULL, std::vector<KeyPoint> outliers = NULL);
[148] bool linearRegression (const std::vector<KeyPoint> data, double slope, double intercept, double mean_x_out = NULL, double mean_y_out = NULL);
[164] void reconfigureCB (CostmapToLinesDBSRANSACConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/blob_detector.h  ( 5 )
[67] cv::Ptr<BlobDetector> create (const BlobDetector::Params params);
[84] void detect (const cv::Mat image, std::vector<cv::KeyPoint> keypoints, const cv::Mat mask = cv::Mat());
[90] std::vector<std::vector<cv::Point>> getContours () return contours_ };
[93] void updateParameters (const cv::SimpleBlobDetector::Params parameters);
[104] void findBlobs (const cv::Mat image, const cv::Mat binary_image, std::vector<Center> centers, std::vector<std::vector<cv::Point>> cur_contours) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.h  ( 12 )
[94] void initialize (ros::NodeHandle nh);
[100] void compute ();
[107] void setCostmap2D (costmap_2d::Costmap2D costmap);
[113] void updateCostmap2D ();
[121] ObstacleArrayConstPtr getObstacles ();
[133] void setOdomTopic (const std::string odom_topic);
[142] void visualize (const std::string name, const cv::Mat image);
[152] Point_t getEstimatedVelocityOfObject (unsigned int idx);
[161] void getContour (unsigned int idx, std::vector<Point_t> contour);
[169] void updateObstacleContainer (ObstacleArrayPtr obstacles);
[197] void odomCallback (const nav_msgs::Odometry::ConstPtr msg);
[207] void reconfigureCB (CostmapToDynamicObstaclesConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/background_subtractor.h  ( 5 )
[81] void apply (const cv::Mat image, cv::Mat fg_mask, int shift_x = 0, int shift_y = 0);
[88] void visualize (const std::string name, const cv::Mat image);
[96] void writeMatToYAML (const std::string filename, const std::vector<cv::Mat> mat_vec);
[99] void updateParameters (const Params parameters);
[103] void transformToCurrentFrame (int shift_x, int shift_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.h  ( 5 )
[52] std::vector<cv::Point> getLastContour () const;
[58] Point_t getEstimatedVelocity () const;
[89] void updateParameters (const Params parameters);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.h  ( 11 )
[22] void assignmentoptimal (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
[23] void buildassignmentvector (assignments_t assignment, bool starMatrix, size_t nOfRows, size_t nOfColumns);
[25] void computeassignmentcost (const assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows);
[27] void step2a (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[29] void step2b (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[31] void step3 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[34] void step4 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim, size_t row, size_t col);
[36] void step5 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[41] void assignmentsuboptimal1 (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
[46] void assignmentsuboptimal2 (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/defines.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_polygons_concave.cpp  ( 6 )
[60] void CostmapToPolygonsDBSConcaveHull::initialize (ros::NodeHandle nh);
[77] void CostmapToPolygonsDBSConcaveHull::compute ();
[82] PolygonContainerPtr polygons (new std::vector<geometry_msgs::Polygon>());
[108] void CostmapToPolygonsDBSConcaveHull::concaveHull (std::vector<KeyPoint> cluster, double depth, geometry_msgs::Polygon polygon);
[152] void CostmapToPolygonsDBSConcaveHull::concaveHullClusterCut (std::vector<KeyPoint> cluster, double depth, geometry_msgs::Polygon polygon);
[209] void CostmapToPolygonsDBSConcaveHull::reconfigureCB (CostmapToPolygonsDBSConcaveHullConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_lines_ransac.cpp  ( 6 )
[61] void CostmapToLinesDBSRANSAC::initialize (ros::NodeHandle nh);
[85] void CostmapToLinesDBSRANSAC::compute ();
[90] PolygonContainerPtr polygons (new std::vector<geometry_msgs::Polygon>());
[162] bool CostmapToLinesDBSRANSAC::lineRansac (const std::vector<KeyPoint> data, double inlier_distance, int no_iterations, int min_inliers, std::pair<KeyPoint, KeyPoint> best_model, std::vector<KeyPoint> inliers, std::vector<KeyPoint> outliers);
[235] bool CostmapToLinesDBSRANSAC::linearRegression (const std::vector<KeyPoint> data, double slope, double intercept, double mean_x_out, double mean_y_out);
[282] void CostmapToLinesDBSRANSAC::reconfigureCB (CostmapToLinesDBSRANSACConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_polygons.cpp  ( 15 )
[62] std::vector<geometry_msgs::Point32> douglasPeucker (std::vector<geometry_msgs::Point32>::iterator begin, std::vector<geometry_msgs::Point32>::iterator end, double epsilon);
[122] void CostmapToPolygonsDBSMCCH::initialize (ros::NodeHandle nh);
[140] void CostmapToPolygonsDBSMCCH::compute ();
[145] PolygonContainerPtr polygons (new std::vector<geometry_msgs::Polygon>());
[170] void CostmapToPolygonsDBSMCCH::setCostmap2D (costmap_2d::Costmap2D costmap);
[180] void CostmapToPolygonsDBSMCCH::updateCostmap2D ();
[228] void CostmapToPolygonsDBSMCCH::dbScan (std::vector< std::vector<KeyPoint> > clusters);
[283] void CostmapToPolygonsDBSMCCH::regionQuery (int curr_index, std::vector<int> neighbors);
[315] bool isXCoordinateSmaller (const CostmapToPolygonsDBSMCCH::KeyPoint p1, const CostmapToPolygonsDBSMCCH::KeyPoint p2);
[320] void CostmapToPolygonsDBSMCCH::convexHull (std::vector<KeyPoint> cluster, geometry_msgs::Polygon polygon);
[364] void CostmapToPolygonsDBSMCCH::convexHull2 (std::vector<KeyPoint> cluster, geometry_msgs::Polygon polygon);
[462] void CostmapToPolygonsDBSMCCH::simplifyPolygon (geometry_msgs::Polygon polygon);
[479] void CostmapToPolygonsDBSMCCH::updatePolygonContainer (PolygonContainerPtr polygons);
[486] PolygonContainerConstPtr CostmapToPolygonsDBSMCCH::getPolygons ();
[493] void CostmapToPolygonsDBSMCCH::reconfigureCB (CostmapToPolygonsDBSMCCHConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_converter_node.cpp  ( 4 )
[106] void costmapCallback (const nav_msgs::OccupancyGridConstPtr msg);
[143] void costmapUpdateCallback (const map_msgs::OccupancyGridUpdateConstPtr update);
[168] void publishAsMarker (const std::string frame_id, const std::vector<geometry_msgs::PolygonStamped> polygonStamped, ros::Publisher marker_pub);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_lines_convex_hull.cpp  ( 7 )
[62] void CostmapToLinesDBSMCCH::initialize (ros::NodeHandle nh);
[89] void CostmapToLinesDBSMCCH::compute ();
[94] PolygonContainerPtr polygons (new std::vector<geometry_msgs::Polygon>());
[124] bool sort_keypoint_x (const std::size_t i, const std::size_t j, const std::vector<CL::KeyPoint> cluster) return (cluster[i].x<cluster[j].x) || (cluster[i].x == cluster[j].x cluster[i].y < cluster[j].y) };
[126] bool sort_keypoint_y (const std::size_t i, const std::size_t j, const std::vector<CL::KeyPoint> cluster) return (cluster[i].y<cluster[j].y) || (cluster[i].y == cluster[j].y cluster[i].x < cluster[j].x) };
[130] void CostmapToLinesDBSMCCH::extractPointsAndLines (std::vector<KeyPoint> cluster, const geometry_msgs::Polygon polygon, std::back_insert_iterator< std::vector<geometry_msgs::Polygon> > lines);
[274] void CostmapToLinesDBSMCCH::reconfigureCB (CostmapToLinesDBSMCCHConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.cpp  ( 13 )
[25] void CostmapToDynamicObstacles::initialize (ros::NodeHandle nh);
[145] void CostmapToDynamicObstacles::compute ();
[206] ObstacleArrayPtr obstacles (new ObstacleArrayMsg);
[280] boost::shared_ptr<costmap_2d::Costmap2D> static_costmap (new costmap_2d::Costmap2D(costmap_->getSizeInCellsX(), costmap_->getSizeInCellsY(), costmap_->getResolution(), costmap_->getOriginX(), costmap_->getOriginY()));
[333] void CostmapToDynamicObstacles::setCostmap2D (costmap_2d::Costmap2D costmap);
[343] void CostmapToDynamicObstacles::updateCostmap2D ();
[359] ObstacleArrayConstPtr CostmapToDynamicObstacles::getObstacles ();
[365] void CostmapToDynamicObstacles::updateObstacleContainer (ObstacleArrayPtr obstacles);
[371] Point_t CostmapToDynamicObstacles::getEstimatedVelocityOfObject (unsigned int idx);
[381] void CostmapToDynamicObstacles::odomCallback (const nav_msgs::Odometry::ConstPtr msg);
[398] void CostmapToDynamicObstacles::reconfigureCB (CostmapToDynamicObstaclesConfig config, uint32_t level);
[446] void CostmapToDynamicObstacles::getContour (unsigned int idx, std::vector<Point_t> contour);
[467] void CostmapToDynamicObstacles::visualize (const std::string name, const cv::Mat image);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/background_subtractor.cpp  ( 4 )
[10] void BackgroundSubtractor::apply (const cv::Mat image, cv::Mat fg_mask, int shift_x, int shift_y);
[85] void BackgroundSubtractor::transformToCurrentFrame (int shift_x, int shift_y);
[102] void BackgroundSubtractor::visualize (const std::string name, const cv::Mat image);
[113] void BackgroundSubtractor::updateParameters (const Params parameters);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/blob_detector.cpp  ( 4 )
[8] cv::Ptr<BlobDetector> BlobDetector::create (const cv::SimpleBlobDetector::Params params);
[14] void BlobDetector::detect (const cv::Mat image, std::vector<cv::KeyPoint> keypoints, const cv::Mat);
[95] void BlobDetector::findBlobs (const cv::Mat image, const cv::Mat binary_image, std::vector<Center> centers, std::vector<std::vector<cv::Point>> cur_contours) const;
[191] void BlobDetector::updateParameters (const Params parameters);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.cpp  ( 11 )
[40] void AssignmentProblemSolver::assignmentoptimal (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
[173] void AssignmentProblemSolver::buildassignmentvector (assignments_t assignment, bool starMatrix, size_t nOfRows, size_t nOfColumns);
[191] void AssignmentProblemSolver::computeassignmentcost (const assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows);
[208] void AssignmentProblemSolver::step2a (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[235] void AssignmentProblemSolver::step2b (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[264] void AssignmentProblemSolver::step3 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[318] void AssignmentProblemSolver::step4 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim, size_t row, size_t col);
[385] void AssignmentProblemSolver::step5 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[437] void AssignmentProblemSolver::assignmentsuboptimal2 (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
[493] void AssignmentProblemSolver::assignmentsuboptimal1 (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.cpp  ( 2 )
[124] void CTracker::updateParameters (const Params parameters);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/static_tests.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/coordinates_test.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/array_parser_test.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/costmap_tester.cpp  ( 6 )
[48] void checkConsistentCosts ();
[49] void compareCellToNeighbors (costmap_2d::Costmap2D costmap, unsigned int x, unsigned int y);
[51] void compareCells (costmap_2d::Costmap2D costmap, unsigned int x, unsigned int y, unsigned int nx, unsigned int ny);
[122] void testCallback (const ros::TimerEvent e);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/footprint_tests.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/inflation_tests.cpp  ( 3 )
[49] std::vector<Point> setRadii (LayeredCostmap layers, double length, double width, double inflation_radius);
[74] void validatePointInflation (unsigned int mx, unsigned int my, Costmap2D costmap, InflationLayer ilayer, double inflation_radius);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/module_tests.cpp  ( 5 )
[78] bool find (const std::vector<unsigned int> l, unsigned int n);
[253] char printableCost ( unsigned char cost );
[525] int worldToIndex (Costmap2D map, double wx, double wy);
[531] void indexToWorld (Costmap2D map, unsigned int index, double wx, double wy);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/obstacle_tests.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/testing_helper.h  ( 8 )
[15] void setValues (costmap_2d::Costmap2D costmap, const unsigned char map);
[25] std::int8_t printableCost (unsigned char cost);
[37] void printMap (costmap_2d::Costmap2D costmap);
[48] int countValues (costmap_2d::Costmap2D costmap, unsigned char value, bool equal = true);
[63] void addStaticLayer (costmap_2d::LayeredCostmap layers, tf2_ros::Buffer tf);
[70] costmap_2d::ObstacleLayer addObstacleLayer (costmap_2d::LayeredCostmap layers, tf2_ros::Buffer tf);
[78] void addObservation (costmap_2d::ObstacleLayer olayer, double x, double y, double z = 0.0, double ox = 0.0, double oy = 0.0, double oz = MAX_Z);
[100] costmap_2d::InflationLayer addInflationLayer (costmap_2d::LayeredCostmap layers, tf2_ros::Buffer tf);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_2d_publisher.h  ( 5 )
[67] void updateBounds (unsigned int x0, unsigned int xn, unsigned int y0, unsigned int yn);
[77] void publishCostmap ();
[91] bool active ();
[97] void prepareGrid ();
[100] void onNewSubscription (const ros::SingleSubscriberPublisher pub);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_math.h  ( 2 )
[63] double distanceToLine (double pX, double pY, double x0, double y0, double x1, double y1);
[65] bool intersects (std::vector<geometry_msgs::Point> polygon, float testx, float testy);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/LoopThread.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/Rate.h  ( 2 )
[33] void interrupt ();
[40] int sleep ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/observation_buffer.h  ( 6 )
[92] bool setGlobalFrame (const std::string new_global_frame);
[99] void bufferCloud (const sensor_msgs::PointCloud2 cloud);
[105] void getObservations (std::vector<Observation> observations);
[111] bool isCurrent () const;
[132] void resetLastUpdated ();
[138] void purgeStaleObservations ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/layered_costmap.h  ( 16 )
[72] void updateMap (double robot_x, double robot_y, double robot_yaw, bool updateWholeMapFlag);
[74] std::string getGlobalFrameID () const return global_frame_ };
[77] void resizeMap (unsigned int size_x, unsigned int size_y, double resolution, double origin_x, double origin_y, bool size_locked = false);
[80] void getUpdatedBounds (double minx, double miny, double maxx, double maxy);
[87] bool isCurrent ();
[89] Costmap2D getCostmap () return costmap_ };
[91] bool isRolling () return rolling_window_ };
[93] bool isTrackingUnknown () return costmap_.getDefaultValue() == costmap_2d::NO_INFORMATION };
[97] void addPlugin (boost::shared_ptr<Layer> plugin) plugins_.push_back(plugin) };
[99] bool isSizeLocked () return size_locked_ };
[102] void getBounds (unsigned int x0, unsigned int xn, unsigned int y0, unsigned int yn);
[109] bool isInitialized () return initialized_ };
[114] void setFootprint (const std::vector<geometry_msgs::Point> footprint_spec);
[117] std::vector<geometry_msgs::Point> getFootprint () return footprint_ };
[124] double getCircumscribedRadius () return circumscribed_radius_ };
[131] double getInscribedRadius () return inscribed_radius_ };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/footprint.h  ( 12 )
[58] void calculateMinAndMaxDistances (const std::vector<geometry_msgs::Point> footprint, double min_dist, double max_dist);
[63] geometry_msgs::Point toPoint (geometry_msgs::Point32 pt);
[68] geometry_msgs::Point32 toPoint32 (geometry_msgs::Point pt);
[73] geometry_msgs::Polygon toPolygon (std::vector<geometry_msgs::Point> pts);
[78] std::vector<geometry_msgs::Point> toPointVector (geometry_msgs::Polygon polygon);
[89] void transformFootprint (double x, double y, double theta, const std::vector<geometry_msgs::Point> footprint_spec, std::vector<geometry_msgs::Point> oriented_footprint);
[105] void padFootprint (std::vector<geometry_msgs::Point> footprint, double padding);
[110] std::vector<geometry_msgs::Point> makeFootprintFromRadius (double radius);
[118] bool makeFootprintFromString (const std::string footprint_string, std::vector<geometry_msgs::Point> footprint);
[124] std::vector<geometry_msgs::Point> makeFootprintFromParams (ros::NodeHandle nh);
[138] std::vector<geometry_msgs::Point> makeFootprintFromXMLRPC (XmlRpc::XmlRpcValue footprint_xmlrpc, const std::string full_param_name);
[143] void writeFootprintToParam (ros::NodeHandle nh, const std::vector<geometry_msgs::Point> footprint);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/static_layer.h  ( 19 )
[71] void onInitialize ();
[72] void activate ();
[73] void deactivate ();
[74] void reset ();
[77] void updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[78] void updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[80] void matchSize ();
[82] void clearWithPath (const std::list<geometry_msgs::Pose> clearPath, const geometry_msgs::PoseStamped robotPose, double forbiddenLength = 1.0);
[83] void drawVirtualWall (const std::vector<geometry_msgs::Pose> virtualWall);
[91] void incomingMap (const nav_msgs::OccupancyGridConstPtr new_map);
[94] void _initialize_map (const nav_msgs::OccupancyGridConstPtr new_map);
[96] void incomingUpdate (const map_msgs::OccupancyGridUpdateConstPtr update);
[97] void reconfigureCB (costmap_2d::GenericPluginConfig config, uint32_t level);
[99] char interpretValue (unsigned char value);
[119] void push_item_update (const ITEM_UPDATE data);
[125] void updateFootprint (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[127] bool clearFootprint (costmap_2d::Costmap2D master_grid, const std::vector<geometry_msgs::Point> polygon, unsigned char cost_value);
[134] bool setConvexPolygonCost (const std::vector<geometry_msgs::Point> polygon, unsigned char cost_value);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/layer.h  ( 19 )
[58] void initialize (LayeredCostmap parent, std::string name, tf2_ros::Buffer tf);
[70] void updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[77] void updateCosts (Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j) };
[80] void deactivate () };
[83] void activate () };
[85] void reset () };
[86] void clearLocalArea (const geometry_msgs::PoseStamped curPose, double forbiddenLength = 0.0) };
[89] void clearWithPath (const std::list<geometry_msgs::Pose> clearPath, const geometry_msgs::PoseStamped robotPose, double forbiddenLength = 1.0);
[91] void drawVirtualWall (const std::vector<geometry_msgs::Pose> virtualWall) };
[92] void incomingMap (const nav_msgs::OccupancyGridConstPtr) };
[93] void incomingUpdate (const map_msgs::OccupancyGridUpdateConstPtr update) };
[94] void incomingLocalUpdate (const costmap_2d::PubMapPtr localStaticMap) };
[95] void setInscribedRadius (double inscribeRadius) };
[109] bool isCurrent () const return current_ };
[112] void matchSize () };
[114] std::string getName () const return name_ };
[117] std::vector<geometry_msgs::Point> getFootprint () const;
[122] void onFootprintChanged () };
[129] void onInitialize () };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/cliff_layer.h  ( 23 )
[67] void onInitialize ();
[69] void updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[70] void updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[72] void activate ();
[73] void deactivate ();
[74] void reset ();
[75] void clearLocalArea (const geometry_msgs::PoseStamped curPose, double forbiddenLength = 0.0);
[77] void clearWithPath (const std::list<geometry_msgs::Pose> clearPath, const geometry_msgs::PoseStamped robotPose, double forbiddenLength = 1.0);
[84] void laserScanCallback (const sensor_msgs::LaserScanConstPtr message, const boost::shared_ptr<costmap_2d::ObservationBuffer> buffer);
[92] void laserScanValidInfCallback (const sensor_msgs::LaserScanConstPtr message, const boost::shared_ptr<ObservationBuffer> buffer);
[100] void pointCloudCallback (const sensor_msgs::PointCloudConstPtr message, const boost::shared_ptr<costmap_2d::ObservationBuffer> buffer);
[108] void pointCloud2Callback (const sensor_msgs::PointCloud2ConstPtr message, const boost::shared_ptr<costmap_2d::ObservationBuffer> buffer);
[111] void addStaticObservation (costmap_2d::Observation obs, bool marking, bool clearing);
[112] void clearStaticObservations (bool marking, bool clearing);
[115] bool check_pointcloud2 (const sensor_msgs::PointCloud2 cloud);
[116] float euler_distance (float x1, float y1, float x2, float y2);
[118] void setupDynamicReconfigure (ros::NodeHandle nh);
[125] bool getMarkingObservations (std::vector<costmap_2d::Observation> marking_observations) const;
[132] bool getClearingObservations (std::vector<costmap_2d::Observation> clearing_observations) const;
[143] void raytraceFreespace (const costmap_2d::Observation clearing_observation, double min_x, double min_y, double max_x, double max_y, float raytrace_min = 0.0);
[146] void updateRaytraceBounds (double ox, double oy, double wx, double wy, double range, double min_x, double min_y, double max_x, double max_y);
[151] void updateFootprint (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[180] void reconfigureCB (costmap_2d::ObstaclePluginConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/array_parser.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/voxel_layer.h  ( 11 )
[72] void onInitialize ();
[74] void updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[76] void updateOrigin (double new_origin_x, double new_origin_y);
[78] bool isDiscretized ();
[81] void matchSize ();
[82] void reset ();
[86] void setupDynamicReconfigure (ros::NodeHandle nh);
[88] void resetMaps ();
[91] void reconfigureCB (costmap_2d::VoxelPluginConfig config, uint32_t level);
[92] void clearNonLethal (double wx, double wy, double w_size_x, double w_size_y, bool clear_no_info);
[94] void raytraceFreespace (const costmap_2d::Observation clearing_observation, double min_x, double min_y, double max_x, double max_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/time.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/cost_values.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/obstacle_layer.h  ( 23 )
[67] void onInitialize ();
[69] void updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[70] void updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[72] void activate ();
[73] void deactivate ();
[74] void reset ();
[75] void clearLocalArea (const geometry_msgs::PoseStamped curPose, double forbiddenLength = 0.0);
[77] void clearWithPath (const std::list<geometry_msgs::Pose> clearPath, const geometry_msgs::PoseStamped robotPose, double forbiddenLength = 1.0);
[84] void laserScanCallback (const sensor_msgs::LaserScanConstPtr message, const boost::shared_ptr<costmap_2d::ObservationBuffer> buffer);
[92] void laserScanValidInfCallback (const sensor_msgs::LaserScanConstPtr message, const boost::shared_ptr<ObservationBuffer> buffer);
[100] void pointCloudCallback (const sensor_msgs::PointCloudConstPtr message, const boost::shared_ptr<costmap_2d::ObservationBuffer> buffer);
[108] void pointCloud2Callback (const sensor_msgs::PointCloud2ConstPtr message, const boost::shared_ptr<costmap_2d::ObservationBuffer> buffer);
[111] void addStaticObservation (costmap_2d::Observation obs, bool marking, bool clearing);
[112] void clearStaticObservations (bool marking, bool clearing);
[115] float euler_distance (float x1, float y1, float x2, float y2);
[117] void setupDynamicReconfigure (ros::NodeHandle nh);
[124] bool getMarkingObservations (std::vector<costmap_2d::Observation> marking_observations) const;
[131] bool getClearingObservations (std::vector<costmap_2d::Observation> clearing_observations) const;
[142] void raytraceFreespace (const costmap_2d::Observation clearing_observation, double min_x, double min_y, double max_x, double max_y, float raytrace_min = 0.0);
[145] void updateRaytraceBounds (double ox, double oy, double wx, double wy, double range, double min_x, double min_y, double max_x, double max_y);
[150] void updateFootprint (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[179] void reconfigureCB (costmap_2d::ObstaclePluginConfig config, uint32_t level);
[180] bool check_pointcloud2 (const sensor_msgs::PointCloud2 cloud);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/observation.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/nav_log.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/dynamic_static_layer.h  ( 10 )
[68] void onInitialize ();
[70] void updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[71] void updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[73] void activate ();
[74] void deactivate ();
[75] void reset ();
[76] void incomingLocalUpdate (const costmap_2d::PubMapPtr localStaticMap);
[79] void setupDynamicReconfigure (ros::NodeHandle nh);
[84] void updateFootprint (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[95] void reconfigureCB (costmap_2d::ObstaclePluginConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_2d.h  ( 30 )
[98] bool copyCostmapWindow (const Costmap2D map, double win_origin_x, double win_origin_y, double win_size_x, double win_size_y);
[116] char getCost (unsigned int mx, unsigned int my) const;
[124] void setCost (unsigned int mx, unsigned int my, unsigned char cost);
[133] void mapToWorld (unsigned int mx, unsigned int my, double wx, double wy) const;
[143] bool worldToMap (double wx, double wy, unsigned int mx, unsigned int my) const;
[153] void worldToMapNoBounds (double wx, double wy, int mx, int my) const;
[163] void worldToMapEnforceBounds (double wx, double wy, int mx, int my) const;
[189] char getCharMap () const;
[195] int getSizeInCellsX () const;
[201] int getSizeInCellsY () const;
[207] double getSizeInMetersX () const;
[213] double getSizeInMetersY () const;
[219] double getOriginX () const;
[225] double getOriginY () const;
[231] double getResolution () const;
[233] void setDefaultValue (unsigned char c) default_value_ = c };
[235] char getDefaultValue () return default_value_ };
[243] bool setConvexPolygonCost (const std::vector<geometry_msgs::Point> polygon, unsigned char cost_value);
[250] void polygonOutlineCells (const std::vector<MapLocation> polygon, std::vector<MapLocation> polygon_cells);
[257] void convexFillCells (const std::vector<MapLocation> polygon, std::vector<MapLocation> polygon_cells);
[264] void updateOrigin (double new_origin_x, double new_origin_y);
[270] bool saveMap (std::string file_name);
[272] void resizeMap (unsigned int size_x, unsigned int size_y, double resolution, double origin_x, double origin_y);
[274] void resetMap (unsigned int x0, unsigned int y0, unsigned int xn, unsigned int yn);
[281] int cellDistance (double world_dist);
[285] mutex_t getMutex () return access_ };
[306] void copyMapRegion (data_type source_map, unsigned int sm_lower_left_x, unsigned int sm_lower_left_y, unsigned int sm_size_x, data_type dest_map, unsigned int dm_lower_left_x, unsigned int dm_lower_left_y, unsigned int dm_size_x, unsigned int region_size_x, unsigned int region_size_y);
[323] void deleteMaps ();
[328] void resetMaps ();
[335] void initMaps (unsigned int size_x, unsigned int size_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/inflation_layer.h  ( 13 )
[88] void onInitialize ();
[90] void updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[91] void updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[92] bool isDiscretized () return true };
[93] void matchSize ();
[95] void reset () onInitialize() };
[122] void setInflationParameters (double inflation_radius, double cost_scaling_factor);
[124] void setInscribedRadius (double inscribeRadius);
[133] void onFootprintChanged ();
[173] void computeCaches ();
[174] void deleteKernels ();
[175] void inflate_area (int min_i, int min_j, int max_i, int max_j, unsigned char master_grid);
[193] void reconfigureCB (costmap_2d::InflationPluginConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_2d_ros.h  ( 47 )
[60] void setStruct (XmlRpc::XmlRpcValue::ValueStruct a);
[65] void setArray (XmlRpc::XmlRpcValue::ValueArray a);
[92] void start ();
[97] void stop ();
[102] bool ifStop ();
[107] void pause ();
[112] void resume ();
[114] void updateMap ();
[119] void resetLayers ();
[122] bool isCurrent () return layered_costmap_->isCurrent() };
[129] bool getRobotPose (geometry_msgs::PoseStamped global_pose) const;
[132] std::string getName () const return name_ };
[135] double getTransformTolerance () const return transform_tolerance_ };
[140] Costmap2D getCostmap () return layered_costmap_->getCostmap() };
[146] std::string getGlobalFrameID () return global_frame_ };
[152] std::string getBaseFrameID () return robot_base_frame_ };
[153] LayeredCostmap getLayeredCostmap () return layered_costmap_ };
[156] geometry_msgs::Polygon getRobotFootprintPolygon () return costmap_2d::toPolygon(padded_footprint_) };
[166] std::vector<geometry_msgs::Point> getRobotFootprint () return padded_footprint_ };
[175] std::vector<geometry_msgs::Point> getUnpaddedRobotFootprint () return unpadded_footprint_ };
[181] void getOrientedFootprint (std::vector<geometry_msgs::Point> oriented_footprint) const;
[193] void setUnpaddedRobotFootprint (const std::vector<geometry_msgs::Point> points);
[205] void setUnpaddedRobotFootprintPolygon (const geometry_msgs::Polygon footprint);
[207] void recvStaticMap (const nav_msgs::OccupancyGridConstPtr new_map);
[208] void recvUpdateMap (const map_msgs::OccupancyGridUpdateConstPtr update);
[209] void recvlocalStaticMap (const costmap_2d::PubMapPtr localStaticMap);
[211] void clearLocalArea ();
[212] void clearSomeArea (const geometry_msgs::PoseStamped curPose, double forbiddenLength = 0.0);
[213] void clearWithPath (const std::list<geometry_msgs::Pose> clearPath, double forbiddenLength = 1.0);
[214] void drawVirtualWall (const std::vector<geometry_msgs::Pose> virtualWall);
[215] void setInscribedRadius (double inscribeRadius);
[217] void rotate (double theta, std::uint16_t mx = 0, std::uint16_t my = 0);
[218] void rotate_layer (boost::shared_ptr<Layer> layer, float angle);
[219] void rotate_arbitrarily_angle (cv::Mat img, float angle);
[222] bool checkHighestLayer (const std::vector<geometry_msgs::Pose> points);
[224] bool checkEveryLay (const std::vector<costmap_2d::CostmapLayer> pCostmap2dmap, unsigned int indexX, unsigned int indexY, unsigned int sizeInx, unsigned int sizeIny, std::uint8_t searchLenght = 5);
[225] void initCheckHighestLayer ();
[240] void set_schedparam (boost::thread daThread, std::uint8_t _priority, unsigned char _pri_mode);
[246] void readFootprintFromConfig (const costmap_2d::Costmap2DConfig new_config, const costmap_2d::Costmap2DConfig old_config);
[248] void loadOldParameters (ros::NodeHandle nh);
[249] void warnForOldParameters (ros::NodeHandle nh);
[250] void checkOldParam (ros::NodeHandle nh, const std::string param_name);
[251] void copyParentParameters (const std::string plugin_name, const std::string plugin_type, ros::NodeHandle nh);
[252] void reconfigureCB (costmap_2d::Costmap2DConfig config, uint32_t level);
[253] void movementCB (const ros::TimerEvent event);
[254] void mapUpdateLoop (double frequency);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_layer.h  ( 11 )
[63] bool isDiscretized () return true };
[65] void matchSize ();
[67] void clearArea (int start_x, int start_y, int end_x, int end_y);
[78] void addExtraBounds (double mx0, double my0, double mx1, double my1);
[88] void updateWithTrueOverwrite (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[97] void updateWithOverwrite (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[108] void updateWithMax (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[122] void updateWithAddition (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[135] void touch (double x, double y, double min_x, double min_y, double max_x, double max_y);
[149] void useExtraBounds (double min_x, double min_y, double max_x, double max_y);
[150] void useClearBounds (double min_x, double min_y, double max_x, double max_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_layer.cpp  ( 10 )
[6] void CostmapLayer::touch (double x, double y, double min_x, double min_y, double max_x, double max_y);
[14] void CostmapLayer::matchSize ();
[21] void CostmapLayer::clearArea (int start_x, int start_y, int end_x, int end_y);
[40] void CostmapLayer::addExtraBounds (double mx0, double my0, double mx1, double my1);
[49] void CostmapLayer::useExtraBounds (double min_x, double min_y, double max_x, double max_y);
[64] void CostmapLayer::useClearBounds (double min_x, double min_y, double max_x, double max_y);
[77] void CostmapLayer::updateWithMax (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[106] void CostmapLayer::updateWithTrueOverwrite (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[123] void CostmapLayer::updateWithOverwrite (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[143] void CostmapLayer::updateWithAddition (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_node.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d.cpp  ( 26 )
[66] void Costmap2D::deleteMaps ();
[74] void Costmap2D::initMaps (unsigned int size_x, unsigned int size_y);
[81] void Costmap2D::resizeMap (unsigned int size_x, unsigned int size_y, double resolution, double origin_x, double origin_y);
[95] void Costmap2D::resetMaps ();
[101] void Costmap2D::resetMap (unsigned int x0, unsigned int y0, unsigned int xn, unsigned int yn);
[110] bool Costmap2D::copyCostmapWindow (const Costmap2D map, double win_origin_x, double win_origin_y, double win_size_x, double win_size_y);
[186] int Costmap2D::cellDistance (double world_dist);
[191] char Costmap2D::getCharMap () const return costmap_ };
[193] char Costmap2D::getCost (unsigned int mx, unsigned int my) const return costmap_[getIndex(mx, my)] };
[196] void Costmap2D::setCost (unsigned int mx, unsigned int my, unsigned char cost) costmap_[getIndex(mx, my)] = cost };
[199] void Costmap2D::mapToWorld (unsigned int mx, unsigned int my, double wx, double wy) const;
[206] bool Costmap2D::worldToMap (double wx, double wy, unsigned int mx, unsigned int my) const;
[218] void Costmap2D::worldToMapNoBounds (double wx, double wy, int mx, int my) const;
[224] void Costmap2D::worldToMapEnforceBounds (double wx, double wy, int mx, int my) const;
[256] void Costmap2D::updateOrigin (double new_origin_x, double new_origin_y);
[315] bool Costmap2D::setConvexPolygonCost (const std::vector<geometry_msgs::Point> polygon, unsigned char cost_value);
[344] void Costmap2D::polygonOutlineCells (const std::vector<MapLocation> polygon, std::vector<MapLocation> polygon_cells);
[359] void Costmap2D::convexFillCells (const std::vector<MapLocation> polygon, std::vector<MapLocation> polygon_cells);
[426] int Costmap2D::getSizeInCellsX () const return size_x_ };
[428] int Costmap2D::getSizeInCellsY () const return size_y_ };
[430] double Costmap2D::getSizeInMetersX () const return (size_x_ - 1 + 0.5) resolution_ };
[432] double Costmap2D::getSizeInMetersY () const return (size_y_ - 1 + 0.5) resolution_ };
[434] double Costmap2D::getOriginX () const return origin_x_ };
[436] double Costmap2D::getOriginY () const return origin_y_ };
[438] double Costmap2D::getResolution () const return resolution_ };
[441] bool Costmap2D::saveMap (std::string file_name);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/observation_buffer.cpp  ( 6 )
[64] bool ObservationBuffer::setGlobalFrame (const std::string new_global_frame);
[109] void ObservationBuffer::bufferCloud (const sensor_msgs::PointCloud2 cloud);
[193] void ObservationBuffer::getObservations (vector<Observation> observations);
[206] void ObservationBuffer::purgeStaleObservations ();
[232] bool ObservationBuffer::isCurrent () const;
[247] void ObservationBuffer::resetLastUpdated ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_markers.cpp  ( 2 )
[61] void voxelCallback (const ros::Publisher pub, const costmap_2d::VoxelGridConstPtr grid);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/layer.cpp  ( 2 )
[44] void Layer::initialize (LayeredCostmap parent, std::string name, tf2_ros::Buffer tf);
[52] std::vector<geometry_msgs::Point> Layer::getFootprint () const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/layered_costmap.cpp  ( 4 )
[85] void LayeredCostmap::resizeMap (unsigned int size_x, unsigned int size_y, double resolution, double origin_x, double origin_y, bool size_locked);
[96] void LayeredCostmap::updateMap (double robot_x, double robot_y, double robot_yaw, bool updateWholeMapFlag);
[169] bool LayeredCostmap::isCurrent ();
[179] void LayeredCostmap::setFootprint (const std::vector<geometry_msgs::Point> footprint_spec);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_math.cpp  ( 3 )
[33] double distanceToLine (double pX, double pY, double x0, double y0, double x1, double y1);
[65] bool intersects (std::vector<geometry_msgs::Point> polygon, float testx, float testy);
[79] bool intersects_helper (std::vector<geometry_msgs::Point> polygon1, std::vector<geometry_msgs::Point> polygon2);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/array_parser.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/footprint.cpp  ( 13 )
[42] void calculateMinAndMaxDistances (const std::vector<geometry_msgs::Point> footprint, double min_dist, double max_dist);
[70] geometry_msgs::Point32 toPoint32 (geometry_msgs::Point pt);
[79] geometry_msgs::Point toPoint (geometry_msgs::Point32 pt);
[88] geometry_msgs::Polygon toPolygon (std::vector<geometry_msgs::Point> pts);
[97] std::vector<geometry_msgs::Point> toPointVector (geometry_msgs::Polygon polygon);
[108] void transformFootprint (double x, double y, double theta, const std::vector<geometry_msgs::Point> footprint_spec, std::vector<geometry_msgs::Point> oriented_footprint);
[139] void padFootprint (std::vector<geometry_msgs::Point> footprint, double padding);
[151] std::vector<geometry_msgs::Point> makeFootprintFromRadius (double radius);
[171] bool makeFootprintFromString (const std::string footprint_string, std::vector<geometry_msgs::Point> footprint);
[211] std::vector<geometry_msgs::Point> makeFootprintFromParams (ros::NodeHandle nh);
[251] void writeFootprintToParam (ros::NodeHandle nh, const std::vector<geometry_msgs::Point> footprint);
[272] double getNumberFromXMLRPC (XmlRpc::XmlRpcValue value, const std::string full_param_name);
[287] std::vector<geometry_msgs::Point> makeFootprintFromXMLRPC (XmlRpc::XmlRpcValue footprint_xmlrpc, const std::string full_param_name);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_ros.cpp  ( 35 )
[57] void move_parameter (ros::NodeHandle old_h, ros::NodeHandle new_h, std::string name, bool should_delete = true);
[186] void Costmap2DROS::setUnpaddedRobotFootprintPolygon (const geometry_msgs::Polygon footprint);
[191] void Costmap2DROS::recvStaticMap (const nav_msgs::OccupancyGridConstPtr new_map);
[209] void Costmap2DROS::recvUpdateMap (const map_msgs::OccupancyGridUpdateConstPtr update);
[227] void Costmap2DROS::recvlocalStaticMap (const PubMapPtr localStaticMap);
[240] void Costmap2DROS::clearLocalArea ();
[304] void Costmap2DROS::clearSomeArea (const geometry_msgs::PoseStamped curPose, double forbiddenLength);
[361] void Costmap2DROS::clearWithPath (const std::list<geometry_msgs::Pose> clearPath, double forbiddenLength);
[478] void Costmap2DROS::drawVirtualWall (const std::vector<geometry_msgs::Pose> virtualWall);
[510] void Costmap2DROS::setInscribedRadius (double inscribeRadius);
[530] void Costmap2DROS::rotate (double theta, uint16_t mx, uint16_t my);
[563] void Costmap2DROS::rotate_layer (boost::shared_ptr<Layer> layer, float angle);
[592] void Costmap2DROS::rotate_arbitrarily_angle (cv::Mat img, float angle);
[599] bool Costmap2DROS::checkHighestLayer (const std::vector<geometry_msgs::Pose> points);
[650] bool Costmap2DROS::checkEveryLay (const std::vector<costmap_2d::CostmapLayer> pCostmap2dmap, unsigned int indexX, unsigned int indexY, unsigned int sizeInx, unsigned int sizeIny, std::uint8_t searchLenght);
[675] void Costmap2DROS::initCheckHighestLayer ();
[703] void Costmap2DROS::set_schedparam (boost::thread daThread, uint8_t _priority, unsigned char _pri_mode);
[730] void Costmap2DROS::loadOldParameters (ros::NodeHandle nh);
[804] void Costmap2DROS::copyParentParameters (const std::string plugin_name, const std::string plugin_type, ros::NodeHandle nh);
[838] void Costmap2DROS::warnForOldParameters (ros::NodeHandle nh);
[844] void Costmap2DROS::checkOldParam (ros::NodeHandle nh, const std::string param_name);
[853] void Costmap2DROS::reconfigureCB (costmap_2d::Costmap2DConfig config, uint32_t level);
[898] void Costmap2DROS::readFootprintFromConfig (const costmap_2d::Costmap2DConfig new_config, const costmap_2d::Costmap2DConfig old_config);
[928] void Costmap2DROS::setUnpaddedRobotFootprint (const std::vector<geometry_msgs::Point> points);
[936] void Costmap2DROS::movementCB (const ros::TimerEvent event);
[967] void Costmap2DROS::mapUpdateLoop (double frequency);
[1021] void Costmap2DROS::updateMap ();
[1043] void Costmap2DROS::start ();
[1069] void Costmap2DROS::stop ();
[1082] bool Costmap2DROS::ifStop () return stopped_ };
[1085] void Costmap2DROS::pause ();
[1091] void Costmap2DROS::resume ();
[1100] void Costmap2DROS::resetLayers ();
[1114] bool Costmap2DROS::getRobotPose (geometry_msgs::PoseStamped global_pose) const;
[1165] void Costmap2DROS::getOrientedFootprint (std::vector<geometry_msgs::Point> oriented_footprint) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_cloud.cpp  ( 2 )
[62] void voxelCallback (const ros::Publisher pub_marked, const ros::Publisher pub_unknown, const costmap_2d::VoxelGridConstPtr grid);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_publisher.cpp  ( 4 )
[84] void Costmap2DPublisher::onNewSubscription (const ros::SingleSubscriberPublisher pub);
[91] void Costmap2DPublisher::prepareGrid ();
[121] void Costmap2DPublisher::publishCostmap ();
[168] bool Costmap2DPublisher::equal (double x, double y, double eps);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/cliff_layer.cpp  ( 23 )
[58] void CliffLayer::onInitialize ();
[227] void CliffLayer::setupDynamicReconfigure (ros::NodeHandle nh);
[244] void CliffLayer::reconfigureCB (costmap_2d::ObstaclePluginConfig config, uint32_t level);
[253] void CliffLayer::laserScanCallback (const sensor_msgs::LaserScanConstPtr message, const boost::shared_ptr<ObservationBuffer> buffer);
[278] void CliffLayer::laserScanValidInfCallback (const sensor_msgs::LaserScanConstPtr raw_message, const boost::shared_ptr<ObservationBuffer> buffer);
[315] void CliffLayer::pointCloudCallback (const sensor_msgs::PointCloudConstPtr message, const boost::shared_ptr<ObservationBuffer> buffer);
[332] void CliffLayer::pointCloud2Callback (const sensor_msgs::PointCloud2ConstPtr message, const boost::shared_ptr<ObservationBuffer> buffer);
[341] void CliffLayer::updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[428] void CliffLayer::updateFootprint (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[439] void CliffLayer::updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[461] void CliffLayer::addStaticObservation (costmap_2d::Observation obs, bool marking, bool clearing);
[467] void CliffLayer::clearStaticObservations (bool marking, bool clearing);
[473] bool CliffLayer::check_pointcloud2 (const sensor_msgs::PointCloud2 cloud);
[490] float CliffLayer::euler_distance (float x1, float y1, float x2, float y2);
[495] bool CliffLayer::getMarkingObservations (std::vector<Observation> marking_observations) const;
[511] bool CliffLayer::getClearingObservations (std::vector<Observation> clearing_observations) const;
[528] void CliffLayer::raytraceFreespace (const Observation clearing_observation, double min_x, double min_y, double max_x, double max_y, float raytrace_min);
[637] void CliffLayer::activate ();
[657] void CliffLayer::deactivate ();
[670] void CliffLayer::updateRaytraceBounds (double ox, double oy, double wx, double wy, double range, double min_x, double min_y, double max_x, double max_y);
[679] void CliffLayer::reset ();
[687] void CliffLayer::clearLocalArea (const geometry_msgs::PoseStamped curPose, double forbiddenLength);
[723] void CliffLayer::clearWithPath (const std::list<geometry_msgs::Pose> clearPath, const geometry_msgs::PoseStamped robotPose, double forbiddenLength);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/inflation_layer.cpp  ( 9 )
[74] void InflationLayer::onInitialize ();
[103] void InflationLayer::reconfigureCB (costmap_2d::InflationPluginConfig config, uint32_t level);
[116] void InflationLayer::matchSize ();
[131] void InflationLayer::updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[165] void InflationLayer::onFootprintChanged ();
[179] void InflationLayer::updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[308] void InflationLayer::computeCaches ();
[342] void InflationLayer::deleteKernels ();
[365] void InflationLayer::setInflationParameters (double inflation_radius, double cost_scaling_factor);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/dynamic_static_layer.cpp  ( 11 )
[21] void DynamicStaticLayer::onInitialize ();
[40] void DynamicStaticLayer::setupDynamicReconfigure (ros::NodeHandle nh);
[57] void DynamicStaticLayer::reconfigureCB (costmap_2d::ObstaclePluginConfig config, uint32_t level);
[65] void DynamicStaticLayer::updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[80] void DynamicStaticLayer::updateFootprint (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[91] char DynamicStaticLayer::interpretValue (unsigned char value);
[107] void DynamicStaticLayer::updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[128] void DynamicStaticLayer::activate () LOG(INFO) << "[NAV]- DynamicStaticLayer activate" };
[129] void DynamicStaticLayer::deactivate () LOG(INFO) << "[NAV]- DynamicStaticLayer deactivate" };
[132] void DynamicStaticLayer::reset ();
[139] void DynamicStaticLayer::incomingLocalUpdate (const PubMapPtr localStaticMap);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/obstacle_layer.cpp  ( 23 )
[58] void ObstacleLayer::onInitialize ();
[226] void ObstacleLayer::setupDynamicReconfigure (ros::NodeHandle nh);
[243] void ObstacleLayer::reconfigureCB (costmap_2d::ObstaclePluginConfig config, uint32_t level);
[251] bool ObstacleLayer::check_pointcloud2 (const sensor_msgs::PointCloud2 cloud);
[269] void ObstacleLayer::laserScanCallback (const sensor_msgs::LaserScanConstPtr message, const boost::shared_ptr<ObservationBuffer> buffer);
[294] void ObstacleLayer::laserScanValidInfCallback (const sensor_msgs::LaserScanConstPtr raw_message, const boost::shared_ptr<ObservationBuffer> buffer);
[331] void ObstacleLayer::pointCloudCallback (const sensor_msgs::PointCloudConstPtr message, const boost::shared_ptr<ObservationBuffer> buffer);
[348] void ObstacleLayer::pointCloud2Callback (const sensor_msgs::PointCloud2ConstPtr message, const boost::shared_ptr<ObservationBuffer> buffer);
[357] void ObstacleLayer::updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[437] void ObstacleLayer::updateFootprint (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[448] void ObstacleLayer::updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
[470] void ObstacleLayer::addStaticObservation (costmap_2d::Observation obs, bool marking, bool clearing);
[476] void ObstacleLayer::clearStaticObservations (bool marking, bool clearing);
[482] float ObstacleLayer::euler_distance (float x1, float y1, float x2, float y2);
[487] bool ObstacleLayer::getMarkingObservations (std::vector<Observation> marking_observations) const;
[503] bool ObstacleLayer::getClearingObservations (std::vector<Observation> clearing_observations) const;
[520] void ObstacleLayer::raytraceFreespace (const Observation clearing_observation, double min_x, double min_y, double max_x, double max_y, float raytrace_min);
[622] void ObstacleLayer::activate ();
[642] void ObstacleLayer::deactivate ();
[656] void ObstacleLayer::updateRaytraceBounds (double ox, double oy, double wx, double wy, double range, double min_x, double min_y, double max_x, double max_y);
[665] void ObstacleLayer::reset ();
[674] void ObstacleLayer::clearLocalArea (const geometry_msgs::PoseStamped curPose, double forbiddenLength);
[710] void ObstacleLayer::clearWithPath (const std::list<geometry_msgs::Pose> clearPath, const geometry_msgs::PoseStamped robotPose, double forbiddenLength);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/static_layer.cpp  ( 19 )
[61] void StaticLayer::onInitialize () };
[64] void StaticLayer::reconfigureCB (costmap_2d::GenericPluginConfig config, uint32_t level);
[76] void StaticLayer::matchSize ();
[89] void StaticLayer::clearWithPath (const std::list<geometry_msgs::Pose> clearPath, const geometry_msgs::PoseStamped robotPose, double forbiddenLength);
[138] void StaticLayer::drawVirtualWall (const std::vector<geometry_msgs::Pose> virtualWall);
[219] void StaticLayer::_initialize_map (const nav_msgs::OccupancyGridConstPtr new_map);
[265] char StaticLayer::interpretValue (unsigned char value);
[281] void StaticLayer::push_item_update (const ITEM_UPDATE data);
[314] void StaticLayer::updateFootprint (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[326] bool StaticLayer::clearFootprint (costmap_2d::Costmap2D master_grid, const std::vector<geometry_msgs::Point> polygon, unsigned char cost_value);
[358] bool StaticLayer::setConvexPolygonCost (const std::vector<geometry_msgs::Point> polygon, unsigned char cost_value);
[387] void StaticLayer::incomingMap (const nav_msgs::OccupancyGridConstPtr new_map);
[443] void StaticLayer::incomingUpdate (const map_msgs::OccupancyGridUpdateConstPtr update);
[469] void StaticLayer::activate () onInitialize() };
[472] void StaticLayer::deactivate ();
[477] void StaticLayer::reset () ResetOnInitialize() };
[481] void StaticLayer::updateBounds (double robot_x, double robot_y, double robot_yaw, double min_x, double min_y, double max_x, double max_y);
[514] void StaticLayer::updateCosts (costmap_2d::Costmap2D master_grid, int min_i, int min_j, int max_i, int max_j);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/test/teb_basics.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/homotopy_class_planner.h  ( 38 )
[144] void initialize (const TebConfig cfg, ObstContainer obstacles = NULL, RobotFootprintModelPtr robot_model = boost::make_shared<PointRobotFootprint>(), TebVisualizationPtr visualization = TebVisualizationPtr(), const ViaPointContainer via_points = NULL);
[147] void updateRobotModel (RobotFootprintModelPtr robot_model );
[164] bool plan (const std::vector<geometry_msgs::PoseStamped> initial_plan, const geometry_msgs::Twist start_vel = NULL, bool free_goal_vel=false);
[201] bool getVelocityCommand (double vx, double vy, double omega, int look_ahead_poses) const;
[211] TebOptimalPlannerPtr bestTeb () const return tebs_.empty() ? TebOptimalPlannerPtr() : tebs_.size()==1 ? tebs_.front() : best_teb_};
[227] bool isTrajectoryFeasible (base_local_planner::CostmapModel costmap_model, const std::vector<geometry_msgs::Point> footprint_spec, double inscribed_radius = 0.0, double circumscribed_radius=0.0, int look_ahead_idx=-1);
[235] TebOptimalPlannerPtr findBestTeb ();
[242] TebOptPlannerContainer::iterator removeTeb (TebOptimalPlannerPtr teb);
[254] void setVisualization (TebVisualizationPtr visualization);
[262] void visualize ();
[285] void exploreEquivalenceClassesAndInitTebs (const PoseSE2 start, const PoseSE2 goal, double dist_to_obst, const geometry_msgs::Twist start_vel);
[302] TebOptimalPlannerPtr addAndInitNewTeb (BidirIter path_start, BidirIter path_end, Fun fun_position, double start_orientation, double goal_orientation, const geometry_msgs::Twist start_velocity);
[327] void updateAllTEBs (const PoseSE2 start, const PoseSE2 goal, const geometry_msgs::Twist start_velocity);
[337] void optimizeAllTEBs (int iter_innerloop, int iter_outerloop);
[343] TebOptimalPlannerPtr getInitialPlanTEB ();
[352] TebOptimalPlannerPtr selectBestTeb ();
[361] void clearPlanner () clearGraph() equivalence_classes_.clear() tebs_.clear() initial_plan_ = NULL};
[372] void setPreferredTurningDir (RotType dir);
[389] EquivalenceClassPtr calculateEquivalenceClass (BidirIter path_start, BidirIter path_end, Fun fun_cplx_point, const ObstContainer obstacles = NULL, boost::optional<TimeDiffSequence::iterator> timediff_start = boost::none, boost::optional<TimeDiffSequence::iterator> timediff_end = boost::none);
[395] TebOptPlannerContainer getTrajectoryContainer () const return tebs_};
[397] bool hasDiverged () const override;
[407] void computeCurrentCost (std::vector<double> cost, double obst_cost_scale=1.0, double viapoint_cost_scale=1.0, bool alternative_time_cost=false);
[430] void deletePlansDetouringBackwards (const double orient_threshold, const double len_orientation_vector);
[440] bool computeStartOrientation (const TebOptimalPlannerPtr plan, const double len_orientation_vector, double orientation);
[447] TebConfig config () const return cfg_};
[453] ObstContainer obstacles () const return obstacles_};
[458] bool isInitialized () const return initialized_};
[463] void clearGraph () if(graph_search_) graph_search_->clearGraph()};
[470] int bestTebIdx () const;
[479] bool addEquivalenceClassIfNew (const EquivalenceClassPtr eq_class, bool lock=false);
[485] EquivalenceClassContainer getEquivalenceClassRef () const return equivalence_classes_};
[487] bool isInBestTebClass (const EquivalenceClassPtr eq_class) const;
[489] int numTebsInClass (const EquivalenceClassPtr eq_class) const;
[491] int numTebsInBestTebClass () const;
[504] void randomlyDropTebs ();
[516] bool hasEquivalenceClass (const EquivalenceClassPtr eq_class) const;
[528] void renewAndAnalyzeOldTebs (bool delete_detours);
[538] void updateReferenceTrajectoryViaPoints (bool all_trajectories);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/visualization.h  ( 14 )
[104] void initialize (ros::NodeHandle nh, const TebConfig cfg);
[114] void publishGlobalPlan (const std::vector<geometry_msgs::PoseStamped> global_plan) const;
[120] void publishLocalPlan (const std::vector<geometry_msgs::PoseStamped> local_plan) const;
[129] void publishLocalPlanAndPoses (const TimedElasticBand teb) const;
[140] void publishRobotFootprintModel (const PoseSE2 current_pose, const BaseRobotFootprintModel robot_model, const std::string ns = "RobotFootprintModel", const std_msgs::ColorRGBA color = toColorMsg(0.5, 0.0, 0.8, 0.0));
[148] void publishInfeasibleRobotPose (const PoseSE2 current_pose, const BaseRobotFootprintModel robot_model);
[155] void publishObstacles (const ObstContainer obstacles) const;
[161] void publishViaPoints (const std::vector< Eigen::Vector2d, Eigen::aligned_allocator<Eigen::Vector2d> > via_points, const std::string ns = "ViaPoints") const;
[172] void publishGraph (const GraphType graph, const std::string ns_prefix = "Graph");
[200] void publishPathContainer (BidirIter first, BidirIter last, const std::string ns = "PathContainer");
[208] void publishTebContainer (const std::vector< boost::shared_ptr<TebOptimalPlanner> > teb_planner, const std::string ns = "TebContainer");
[220] void publishFeedbackMessage (const std::vector< boost::shared_ptr<TebOptimalPlanner> > teb_planners, unsigned int selected_trajectory_idx, const ObstContainer obstacles);
[243] std_msgs::ColorRGBA toColorMsg (double a, double r, double g, double b);
[251] bool printErrorWhenNotInitialized () const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/visualization.hpp  ( 2 )
[49] void TebVisualization::publishGraph (const GraphType graph, const std::string ns_prefix);
[180] void TebVisualization::publishPathContainer (BidirIter first, BidirIter last, const std::string ns);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/misc.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/teb_local_planner_ros.h  ( 26 )
[110] void initialize (std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS costmap_ros);
[117] bool setPlan (const std::vector<geometry_msgs::PoseStamped> orig_global_plan);
[125] bool computeVelocityCommands (geometry_msgs::Twist cmd_vel);
[166] bool isGoalReached ();
[178] bool cancel () return false };
[192] Eigen::Vector2d tfPoseToEigenVector2dTransRot (const tf::Pose tf_vel);
[199] RobotFootprintModelPtr getRobotFootprintFromParamServer (const ros::NodeHandle nh);
[212] Point2dContainer makeFootprintFromXMLRPC (XmlRpc::XmlRpcValue footprint_xmlrpc, const std::string full_param_name);
[223] double getNumberFromXMLRPC (XmlRpc::XmlRpcValue value, const std::string full_param_name);
[227] void setConfig (double maxVelocity);
[233] void setForwardWeight (double forwardWeight) cfg_.optim.weight_kinematics_forward_drive = forwardWeight };
[244] void updateObstacleContainerWithCostmap ();
[252] void updateObstacleContainerWithCostmapConverter ();
[259] void updateObstacleContainerWithCustomObstacles ();
[268] void updateViaPointsContainer (const std::vector<geometry_msgs::PoseStamped> transformed_plan, double min_separation);
[277] void reconfigureCB (TebLocalPlannerReconfigureConfig config, uint32_t level);
[283] void customObstacleCB (const costmap_converter::ObstacleArrayMsg::ConstPtr obst_msg);
[289] void customViaPointsCB (const nav_msgs::Path::ConstPtr via_points_msg);
[309] bool pruneGlobalPlan (const tf2_ros::Buffer tf, const geometry_msgs::PoseStamped global_pose, std::vector<geometry_msgs::PoseStamped> global_plan, double dist_behind_robot = 1);
[311] bool wsPruneGlobalPlan (const tf2_ros::Buffer tf, const geometry_msgs::PoseStamped global_pose, std::vector<geometry_msgs::PoseStamped> global_plan, double dist_behind_robot = 1);
[335] bool transformGlobalPlan (const tf2_ros::Buffer tf, const std::vector<geometry_msgs::PoseStamped> global_plan, const geometry_msgs::PoseStamped global_pose, const costmap_2d::Costmap2D costmap, const std::string global_frame, double max_plan_length, std::vector<geometry_msgs::PoseStamped> transformed_plan, int current_goal_idx = NULL, geometry_msgs::TransformStamped tf_plan_to_global = NULL) const;
[356] double estimateLocalGoalOrientation (const std::vector<geometry_msgs::PoseStamped> global_plan, const geometry_msgs::PoseStamped local_goal, int current_goal_idx, const geometry_msgs::TransformStamped tf_plan_to_global, int moving_average_length = 3) const;
[373] void saturateVelocity (double vx, double vy, double omega, double max_vel_x, double max_vel_y, double max_vel_theta, double max_vel_x_backwards) const;
[391] double convertTransRotVelToSteeringAngle (double v, double omega, double wheelbase, double min_turning_radius = 0) const;
[403] void validateFootprints (double opt_inscribed_radius, double costmap_inscribed_radius, double min_obst_dist);
[405] void configureBackupModes (std::vector<geometry_msgs::PoseStamped> transformed_plan, int goal_idx);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/timed_elastic_band.hpp  ( 1 )
[50] bool TimedElasticBand::initTrajectoryToGoal (BidirIter path_start, BidirIter path_end, Fun fun_position, double max_vel_x, double max_vel_theta, boost::optional<double> max_acc_x, boost::optional<double> max_acc_theta, boost::optional<double> start_orientation, boost::optional<double> goal_orientation, int min_samples, bool guess_backwards_motion);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/obstacles.h  ( 29 )
[93] Eigen::Vector2d getCentroid () const = 0;
[99] std::complex<double> getCentroidCplx () const = 0;
[113] bool checkCollision (const Eigen::Vector2d position, double min_dist) const = 0;
[122] bool checkLineIntersection (const Eigen::Vector2d line_start, const Eigen::Vector2d line_end, double min_dist=0) const = 0;
[129] double getMinimumDistance (const Eigen::Vector2d position) const = 0;
[151] Eigen::Vector2d getClosestPoint (const Eigen::Vector2d position) const = 0;
[166] double getMinimumSpatioTemporalDistance (const Eigen::Vector2d position, double t) const = 0;
[191] void predictCentroidConstantVelocity (double t, Eigen::Ref<Eigen::Vector2d> position) const;
[199] bool isDynamic () const return dynamic_};
[206] void setCentroidVelocity (const Eigen::Ref<const Eigen::Vector2d> vel) centroid_velocity_ = vel dynamic_=true};
[245] Eigen::Vector2d getCentroidVelocity () const return centroid_velocity_};
[262] void toPolygonMsg (geometry_msgs::Polygon polygon) = 0;
[265] void toTwistWithCovarianceMsg (geometry_msgs::TwistWithCovariance twistWithCovariance);
[418] Eigen::Vector2d position () const return pos_};
[420] double x () return pos_.coeffRef(0)};
[422] double y () return pos_.coeffRef(1)};
[568] double radius () return radius_};
[710] Eigen::Vector2d start () const return start_};
[711] void setStart (const Eigen::Ref<const Eigen::Vector2d> start) start_ = start calcCentroid()};
[712] Eigen::Vector2d end () const return end_};
[713] void setEnd (const Eigen::Ref<const Eigen::Vector2d> end) end_ = end calcCentroid()};
[728] void calcCentroid () centroid_ = 0.5(start_ + end_) };
[1013] void predictVertices (double t, Point2dContainer pred_vertices) const;
[1045] Point2dContainer vertices () const return vertices_};
[1055] void pushBackVertex (const Eigen::Ref<const Eigen::Vector2d> vertex);
[1077] void finalizePolygon ();
[1086] void clearVertices () vertices_.clear() finalized_ = false};
[1091] int noVertices () const return (int)vertices_.size()};
[1098] void fixPolygonClosure ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/equivalence_relations.h  ( 3 )
[81] bool isEqual (const EquivalenceClass other) const = 0;
[87] bool isValid () const = 0;
[93] bool isReasonable () const = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/pose_se2.h  ( 12 )
[145] Eigen::Vector2d position () return _position};
[158] double x () return _position.coeffRef(0)};
[170] double y () return _position.coeffRef(1)};
[182] double theta () return _theta};
[194] void setZero ();
[204] void toPoseMsg (geometry_msgs::Pose pose) const;
[215] Eigen::Vector2d orientationUnitVec () const return Eigen::Vector2d(std::cos(_theta), std::sin(_theta))};
[228] void scale (double factor);
[239] void plus (const double pose_as_array);
[253] void averageInPlace (const PoseSE2 pose1, const PoseSE2 pose2);
[267] PoseSE2 average (const PoseSE2 pose1, const PoseSE2 pose2);
[280] void rotateGlobal (double angle, bool adjust_theta=true);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/homotopy_class_planner.hpp  ( 2 )
[49] EquivalenceClassPtr HomotopyClassPlanner::calculateEquivalenceClass (BidirIter path_start, BidirIter path_end, Fun fun_cplx_point, const ObstContainer obstacles, boost::optional<TimeDiffSequence::iterator> timediff_start, boost::optional<TimeDiffSequence::iterator> timediff_end);
[67] TebOptimalPlannerPtr HomotopyClassPlanner::addAndInitNewTeb (BidirIter path_start, BidirIter path_end, Fun fun_position, double start_orientation, double goal_orientation, const geometry_msgs::Twist start_velocity);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/robot_footprint_model.h  ( 9 )
[83] double calculateDistance (const PoseSE2 current_pose, const Obstacle obstacle) const = 0;
[92] double estimateSpatioTemporalDistance (const PoseSE2 current_pose, const Obstacle obstacle, double t) const = 0;
[103] void visualizeRobot (const PoseSE2 current_pose, std::vector<visualization_msgs::Marker> markers, const std_msgs::ColorRGBA color) const };
[110] double getInscribedRadius () = 0;
[203] void setRadius (double radius) radius_ = radius};
[291] void setParameters (double front_offset, double front_radius, double rear_offset, double rear_radius) front_offset_=front_offset front_radius_=front_radius rear_offset_=rear_offset rear_radius_=rear_radius};
[421] void setLine (const geometry_msgs::Point line_start, const geometry_msgs::Point line_end);
[518] void transformToWorld (const PoseSE2 current_pose, Eigen::Vector2d line_start_world, Eigen::Vector2d line_end_world) const;
[562] void setVertices (const Point2dContainer vertices) vertices_ = vertices};
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/timed_elastic_band.h  ( 31 )
[109] PoseSequence poses () return pose_vec_};
[121] TimeDiffSequence timediffs () return timediff_vec_};
[227] void addPose (const PoseSE2 pose, bool fixed=false);
[251] void addTimeDiff (double dt, bool fixed=false);
[261] void addPoseAndTimeDiff (const PoseSE2 pose, double dt);
[293] void insertPose (int index, const PoseSE2 pose);
[317] void insertTimeDiff (int index, double dt);
[323] void deletePose (int index);
[330] void deletePoses (int index, int number);
[336] void deleteTimeDiff (int index);
[343] void deleteTimeDiffs (int index, int number);
[369] bool initTrajectoryToGoal (const PoseSE2 start, const PoseSE2 goal, double diststep=0, double max_vel_x=0.5, int min_samples = 3, bool guess_backwards_motion = false);
[475] void updateAndPruneTEB (boost::optional<const PoseSE2> new_start, boost::optional<const PoseSE2> new_goal, int min_samples = 3);
[507] void autoResize (double dt_ref, double dt_hysteresis, int min_samples = 3, int max_samples=1000, bool fast_mode=false);
[514] void setPoseVertexFixed (int index, bool status);
[521] void setTimeDiffVertexFixed (int index, bool status);
[527] void clearTimedElasticBand ();
[549] int findClosestTrajectoryPose (const Eigen::Ref<const Eigen::Vector2d> ref_point, double distance = NULL, int begin_idx=0) const;
[599] int sizePoses () const return (int)pose_vec_.size()};
[604] int sizeTimeDiffs () const return (int)timediff_vec_.size()};
[609] bool isInit () const return !timediff_vec_.empty() !pose_vec_.empty()};
[614] double getSumOfAllTimeDiffs () const;
[621] double getSumOfTimeDiffsUpToIdx (int index) const;
[626] double getAccumulatedDistance () const;
[638] bool isTrajectoryInsideRegion (double radius, double max_dist_behind_robot=-1, int skip_poses=0);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/teb_config.h  ( 5 )
[382] void loadRosParamFromNodeHandle (const ros::NodeHandle nh);
[392] void reconfigure (TebLocalPlannerReconfigureConfig cfg);
[400] void checkParameters () const;
[406] void checkDeprecated (const ros::NodeHandle nh) const;
[411] boost::mutex configMutex () return config_mutex_};
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/recovery_behaviors.h  ( 4 )
[87] void update (const geometry_msgs::Twist twist, double v_max, double v_backwards_max, double omega_max, double v_eps, double omega_eps);
[96] bool isOscillating () const;
[103] void clear ();
[122] bool detect (double v_eps, double omega_eps);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/optimal_planner.h  ( 43 )
[134] void initialize (const TebConfig cfg, ObstContainer obstacles = NULL, RobotFootprintModelPtr robot_model = boost::make_shared<PointRobotFootprint>(), TebVisualizationPtr visual = TebVisualizationPtr(), const ViaPointContainer via_points = NULL);
[139] void updateRobotModel (RobotFootprintModelPtr robot_model );
[161] bool plan (const std::vector<geometry_msgs::PoseStamped> initial_plan, const geometry_msgs::Twist start_vel = NULL, bool free_goal_vel=false);
[209] bool getVelocityCommand (double vx, double vy, double omega, int look_ahead_poses) const;
[239] bool optimizeTEB (int iterations_innerloop, int iterations_outerloop, bool compute_cost_afterwards = false, double obst_cost_scale=1.0, double viapoint_cost_scale=1.0, bool alternative_time_cost=false);
[254] void setVelocityStart (const geometry_msgs::Twist vel_start);
[261] void setVelocityGoal (const geometry_msgs::Twist vel_goal);
[267] void setVelocityGoalFree () vel_goal_.first = false};
[281] void setObstVector (ObstContainer obst_vector) obstacles_ = obst_vector};
[287] ObstContainer getObstVector () const return obstacles_};
[300] void setViaPoints (const ViaPointContainer via_points) via_points_ = via_points};
[306] ViaPointContainer getViaPoints () const return via_points_};
[319] void setVisualization (TebVisualizationPtr visualization);
[327] void visualize ();
[339] void clearPlanner ();
[352] void setPreferredTurningDir (RotType dir) prefer_rotdir_=dir};
[360] void registerG2OTypes ();
[367] TimedElasticBand teb () return teb_};
[380] boost::shared_ptr<g2o::SparseOptimizer> optimizer () return optimizer_};
[393] bool isOptimized () const return optimized_};
[398] bool hasDiverged () const override;
[421] void computeCurrentCost (double obst_cost_scale=1.0, double viapoint_cost_scale=1.0, bool alternative_time_cost=false);
[444] double getCurrentCost () const return cost_};
[479] void getVelocityProfile (std::vector<geometry_msgs::Twist> velocity_profile) const;
[492] void getFullTrajectory (std::vector<TrajectoryPointMsg> trajectory) const;
[508] bool isTrajectoryFeasible (base_local_planner::CostmapModel costmap_model, const std::vector<geometry_msgs::Point> footprint_spec, double inscribed_radius = 0.0, double circumscribed_radius=0.0, int look_ahead_idx=-1);
[529] bool buildGraph (double weight_multiplier=1.0);
[543] bool optimizeGraph (int no_iterations, bool clear_after=true);
[550] void clearGraph ();
[678] boost::shared_ptr<g2o::SparseOptimizer> initOptimizer ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/distance_calculations.h  ( 4 )
[394] double calc_closest_point_to_approach_time (const VectorType x1, const VectorType vel1, const VectorType x2, const VectorType vel2);
[409] double calc_closest_point_to_approach_distance (const VectorType x1, const VectorType vel1, const VectorType x2, const VectorType vel2, double bound_cpa_time = 0);
[425] double calc_distance_point_to_line ( const VectorType point, const VectorType line_base, const VectorType line_dir);
[443] double calc_distance_point_to_segment ( const VectorType point, const VectorType line_start, const VectorType line_end);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/h_signature.h  ( 5 )
[98] void calculateHSignature (BidirIter path_start, BidirIter path_end, Fun fun_cplx_point, const ObstContainer obstacles);
[196] bool isEqual (const EquivalenceClass other) const;
[216] bool isValid () const;
[225] bool isReasonable () const;
[417] std::vector<double> values () const return hsignature3d_};
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/graph_search.h  ( 3 )
[111] void createGraph (const PoseSE2 start, const PoseSE2 goal, double dist_to_obst, double obstacle_heading_threshold, const geometry_msgs::Twist start_velocity) = 0;
[116] void clearGraph () graph_.clear()};
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/planner_interface.h  ( 8 )
[99] bool plan (const std::vector<geometry_msgs::PoseStamped> initial_plan, const geometry_msgs::Twist start_vel = NULL, bool free_goal_vel=false) = 0;
[136] bool getVelocityCommand (double vx, double vy, double omega, int look_ahead_poses) const = 0;
[144] void clearPlanner () = 0;
[161] void visualize ();
[165] void updateRobotModel (RobotFootprintModelPtr robot_model);
[182] bool isTrajectoryFeasible (base_local_planner::CostmapModel costmap_model, const std::vector<geometry_msgs::Point> footprint_spec, double inscribed_radius = 0.0, double circumscribed_radius=0.0, int look_ahead_idx=-1) = 0;
[192] void computeCurrentCost (std::vector<double> cost, double obst_cost_scale=1.0, bool alternative_time_cost=false);
[198] bool hasDiverged () const = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_dynamic_obstacle.h  ( 4 )
[94] void computeError ();
[112] void setObstacle (const Obstacle obstacle);
[121] void setRobotModel (const BaseRobotFootprintModel robot_model);
[132] void setParameters (const TebConfig cfg, const BaseRobotFootprintModel robot_model, const Obstacle obstacle);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_velocity_obstacle_ratio.h  ( 4 )
[84] void computeError ();
[130] void setObstacle (const Obstacle obstacle);
[139] void setRobotModel (const BaseRobotFootprintModel robot_model);
[150] void setParameters (const TebConfig cfg, const BaseRobotFootprintModel robot_model, const Obstacle obstacle);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_acceleration.h  ( 4 )
[94] void computeError ();
[160] void linearizeOplus ();
[352] void setInitialVelocity (const geometry_msgs::Twist vel_start);
[444] void setGoalVelocity (const geometry_msgs::Twist vel_goal);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_velocity.h  ( 2 )
[91] void computeError ();
[127] void linearizeOplus ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/base_teb_edges.h  ( 4 )
[91] bool read (std::istream is);
[100] bool write (std::ostream os) const;
[110] void setTebConfig (const TebConfig cfg);
[214] void resize (size_t size);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/vertex_pose.h  ( 4 )
[185] void setToOriginImpl () override;
[196] void oplusImpl (const double update) override;
[207] bool read (std::istream is) override;
[219] bool write (std::ostream os) const override;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/penalties.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/vertex_timediff.h  ( 4 )
[104] void setToOriginImpl () override;
[114] void oplusImpl (const double update) override;
[124] bool read (std::istream is) override;
[135] bool write (std::ostream os) const override;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_shortest_path.h  ( 1 )
[74] void computeError ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_time_optimal.h  ( 2 )
[89] void computeError ();
[103] void linearizeOplus ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_prefer_rotdir.h  ( 4 )
[81] void computeError ();
[95] void setRotDir (double dir);
[100] void preferRight () _measurement = -1};
[103] void preferLeft () _measurement = 1};
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_kinematics.h  ( 2 )
[89] void computeError ();
[113] void linearizeOplus ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_obstacle.h  ( 5 )
[86] void computeError ();
[115] void linearizeOplus ();
[158] void setObstacle (const Obstacle obstacle);
[167] void setRobotModel (const BaseRobotFootprintModel robot_model);
[178] void setParameters (const TebConfig cfg, const BaseRobotFootprintModel robot_model, const Obstacle obstacle);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_via_point.h  ( 3 )
[82] void computeError ();
[96] void setViaPoint (const Eigen::Vector2d via_point);
[106] void setParameters (const TebConfig cfg, const Eigen::Vector2d via_point);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/homotopy_class_planner.cpp  ( 29 )
[62] void HomotopyClassPlanner::initialize (const TebConfig cfg, ObstContainer obstacles, RobotFootprintModelPtr robot_model, TebVisualizationPtr visual, const ViaPointContainer via_points);
[82] void HomotopyClassPlanner::updateRobotModel (RobotFootprintModelPtr robot_model );
[87] void HomotopyClassPlanner::setVisualization (TebVisualizationPtr visualization);
[94] bool HomotopyClassPlanner::plan (const std::vector<geometry_msgs::PoseStamped> initial_plan, const geometry_msgs::Twist start_vel, bool free_goal_vel);
[147] bool HomotopyClassPlanner::getVelocityCommand (double vx, double vy, double omega, int look_ahead_poses) const;
[164] void HomotopyClassPlanner::visualize ();
[198] bool HomotopyClassPlanner::hasEquivalenceClass (const EquivalenceClassPtr eq_class) const;
[209] bool HomotopyClassPlanner::addEquivalenceClassIfNew (const EquivalenceClassPtr eq_class, bool lock);
[234] void HomotopyClassPlanner::renewAndAnalyzeOldTebs (bool delete_detours);
[324] void HomotopyClassPlanner::updateReferenceTrajectoryViaPoints (bool all_trajectories);
[357] void HomotopyClassPlanner::exploreEquivalenceClassesAndInitTebs (const PoseSE2 start, const PoseSE2 goal, double dist_to_obst, const geometry_msgs::Twist start_vel);
[379] TebOptimalPlannerPtr HomotopyClassPlanner::addAndInitNewTeb (const PoseSE2 start, const PoseSE2 goal, const geometry_msgs::Twist start_velocity);
[404] bool HomotopyClassPlanner::isInBestTebClass (const EquivalenceClassPtr eq_class) const;
[412] int HomotopyClassPlanner::numTebsInClass (const EquivalenceClassPtr eq_class) const;
[423] int HomotopyClassPlanner::numTebsInBestTebClass () const;
[457] void HomotopyClassPlanner::updateAllTEBs (const PoseSE2 start, const PoseSE2 goal, const geometry_msgs::Twist start_velocity);
[481] void HomotopyClassPlanner::optimizeAllTEBs (int iter_innerloop, int iter_outerloop);
[510] TebOptimalPlannerPtr HomotopyClassPlanner::getInitialPlanTEB ();
[554] void HomotopyClassPlanner::randomlyDropTebs ();
[579] TebOptimalPlannerPtr HomotopyClassPlanner::selectBestTeb ();
[684] int HomotopyClassPlanner::bestTebIdx () const;
[702] bool HomotopyClassPlanner::isTrajectoryFeasible (base_local_planner::CostmapModel costmap_model, const std::vector<geometry_msgs::Point> footprint_spec, double inscribed_radius, double circumscribed_radius, int look_ahead_idx);
[724] TebOptimalPlannerPtr HomotopyClassPlanner::findBestTeb ();
[733] TebOptPlannerContainer::iterator HomotopyClassPlanner::removeTeb (TebOptimalPlannerPtr teb);
[755] void HomotopyClassPlanner::setPreferredTurningDir (RotType dir);
[764] bool HomotopyClassPlanner::hasDiverged () const;
[773] void HomotopyClassPlanner::computeCurrentCost (std::vector<double> cost, double obst_cost_scale, double viapoint_cost_scale, bool alternative_time_cost);
[782] void HomotopyClassPlanner::deletePlansDetouringBackwards (const double orient_threshold, const double len_orientation_vector);
[835] bool HomotopyClassPlanner::computeStartOrientation (const TebOptimalPlannerPtr plan, const double len_orientation_vector, double orientation);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/test_optim_node.cpp  ( 10 )
[65] void CB_mainCycle (const ros::TimerEvent e);
[66] void CB_publishCycle (const ros::TimerEvent e);
[67] void CB_reconfigure (TebLocalPlannerReconfigureConfig reconfig, uint32_t level);
[68] void CB_customObstacle (const costmap_converter::ObstacleArrayMsg::ConstPtr obst_msg);
[70] void CB_obstacle_marker (const visualization_msgs::InteractiveMarkerFeedbackConstPtr feedback);
[71] void CB_clicked_points (const geometry_msgs::PointStampedConstPtr point_msg);
[72] void CB_via_points (const nav_msgs::Path::ConstPtr via_points_msg);
[73] void CB_setObstacleVelocity (const geometry_msgs::TwistConstPtr twist_msg, const unsigned int id);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/teb_local_planner_ros.cpp  ( 23 )
[84] void TebLocalPlannerROS::reconfigureCB (TebLocalPlannerReconfigureConfig config, uint32_t level);
[93] void TebLocalPlannerROS::initialize (std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS costmap_ros);
[224] bool TebLocalPlannerROS::setPlan (const std::vector<geometry_msgs::PoseStamped> orig_global_plan);
[249] bool TebLocalPlannerROS::computeVelocityCommands (geometry_msgs::Twist cmd_vel);
[506] bool TebLocalPlannerROS::isGoalReached ();
[518] void TebLocalPlannerROS::updateObstacleContainerWithCostmap ();
[547] void TebLocalPlannerROS::updateObstacleContainerWithCostmapConverter ();
[592] void TebLocalPlannerROS::updateObstacleContainerWithCustomObstacles ();
[673] void TebLocalPlannerROS::updateViaPointsContainer (const std::vector<geometry_msgs::PoseStamped> transformed_plan, double min_separation);
[694] Eigen::Vector2d TebLocalPlannerROS::tfPoseToEigenVector2dTransRot (const tf::Pose tf_vel);
[704] bool TebLocalPlannerROS::pruneGlobalPlan (const tf2_ros::Buffer tf, const geometry_msgs::PoseStamped global_pose, std::vector<geometry_msgs::PoseStamped> global_plan, double dist_behind_robot);
[747] bool TebLocalPlannerROS::wsPruneGlobalPlan (const tf2_ros::Buffer tf, const geometry_msgs::PoseStamped global_pose, std::vector<geometry_msgs::PoseStamped> global_plan, double dist_behind_robot);
[807] bool TebLocalPlannerROS::transformGlobalPlan ( const tf2_ros::Buffer tf, const std::vector<geometry_msgs::PoseStamped> global_plan, const geometry_msgs::PoseStamped global_pose, const costmap_2d::Costmap2D costmap, const std::string global_frame, double max_plan_length, std::vector<geometry_msgs::PoseStamped> transformed_plan, int current_goal_idx, geometry_msgs::TransformStamped tf_plan_to_global) const;
[955] double TebLocalPlannerROS::estimateLocalGoalOrientation (const std::vector<geometry_msgs::PoseStamped> global_plan, const geometry_msgs::PoseStamped local_goal, int current_goal_idx, const geometry_msgs::TransformStamped tf_plan_to_global, int moving_average_length) const;
[1002] void TebLocalPlannerROS::saturateVelocity (double vx, double vy, double omega, double max_vel_x, double max_vel_y, double max_vel_theta, double max_vel_x_backwards) const;
[1040] double TebLocalPlannerROS::convertTransRotVelToSteeringAngle (double v, double omega, double wheelbase, double min_turning_radius) const;
[1052] void TebLocalPlannerROS::validateFootprints (double opt_inscribed_radius, double costmap_inscribed_radius, double min_obst_dist);
[1063] void TebLocalPlannerROS::configureBackupModes (std::vector<geometry_msgs::PoseStamped> transformed_plan, int goal_idx);
[1152] void TebLocalPlannerROS::customObstacleCB (const costmap_converter::ObstacleArrayMsg::ConstPtr obst_msg);
[1158] void TebLocalPlannerROS::customViaPointsCB (const nav_msgs::Path::ConstPtr via_points_msg);
[1179] RobotFootprintModelPtr TebLocalPlannerROS::getRobotFootprintFromParamServer (const ros::NodeHandle nh);
[1313] Point2dContainer TebLocalPlannerROS::makeFootprintFromXMLRPC (XmlRpc::XmlRpcValue footprint_xmlrpc, const std::string full_param_name);
[1351] double TebLocalPlannerROS::getNumberFromXMLRPC (XmlRpc::XmlRpcValue value, const std::string full_param_name);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/teb_config.cpp  ( 4 )
[45] void TebConfig::loadRosParamFromNodeHandle (const ros::NodeHandle nh);
[181] void TebConfig::reconfigure (TebLocalPlannerReconfigureConfig cfg);
[292] void TebConfig::checkParameters () const;
[350] void TebConfig::checkDeprecated (const ros::NodeHandle nh) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/optimal_planner.cpp  ( 33 )
[90] void TebOptimalPlanner::updateRobotModel (RobotFootprintModelPtr robot_model) robot_model_ = robot_model };
[94] void TebOptimalPlanner::initialize (const TebConfig cfg, ObstContainer obstacles, RobotFootprintModelPtr robot_model, TebVisualizationPtr visual, const ViaPointContainer via_points);
[118] void TebOptimalPlanner::setVisualization (TebVisualizationPtr visualization) visualization_ = visualization };
[121] void TebOptimalPlanner::visualize ();
[135] void TebOptimalPlanner::registerG2OTypes ();
[167] boost::shared_ptr<g2o::SparseOptimizer> TebOptimalPlanner::initOptimizer ();
[188] bool TebOptimalPlanner::optimizeTEB (int iterations_innerloop, int iterations_outerloop, bool compute_cost_afterwards, double obst_cost_scale, double viapoint_cost_scale, bool alternative_time_cost);
[240] void TebOptimalPlanner::setVelocityStart (const geometry_msgs::Twist vel_start);
[248] void TebOptimalPlanner::setVelocityGoal (const geometry_msgs::Twist vel_goal);
[255] bool TebOptimalPlanner::plan (const std::vector<geometry_msgs::PoseStamped> initial_plan, const geometry_msgs::Twist start_vel, bool free_goal_vel);
[349] bool TebOptimalPlanner::buildGraph (double weight_multiplier);
[393] bool TebOptimalPlanner::optimizeGraph (int no_iterations, bool clear_after);
[430] void TebOptimalPlanner::clearGraph ();
[1035] bool TebOptimalPlanner::hasDiverged () const;
[1055] void TebOptimalPlanner::computeCurrentCost (double obst_cost_scale, double viapoint_cost_scale, bool alternative_time_cost);
[1110] void TebOptimalPlanner::extractVelocity (const PoseSE2 pose1, const PoseSE2 pose2, double dt, double vx, double vy, double omega) const;
[1148] bool TebOptimalPlanner::getVelocityCommand (double vx, double vy, double omega, int look_ahead_poses) const;
[1188] void TebOptimalPlanner::getVelocityProfile (std::vector<geometry_msgs::Twist> velocity_profile) const;
[1216] void TebOptimalPlanner::getFullTrajectory (std::vector<TrajectoryPointMsg> trajectory) const;
[1269] bool TebOptimalPlanner::isTrajectoryFeasible (base_local_planner::CostmapModel costmap_model, const std::vector<geometry_msgs::Point> footprint_spec, double inscribed_radius, double circumscribed_radius, int look_ahead_idx);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/timed_elastic_band.cpp  ( 21 )
[54] double estimateDeltaT (const PoseSE2 start, const PoseSE2 end, double max_vel_x, double max_vel_theta);
[81] void TimedElasticBand::addPose (const PoseSE2 pose, bool fixed);
[102] void TimedElasticBand::addTimeDiff (double dt, bool fixed);
[111] void TimedElasticBand::addPoseAndTimeDiff (double x, double y, double angle, double dt);
[148] void TimedElasticBand::deletePose (int index);
[155] void TimedElasticBand::deletePoses (int index, int number);
[163] void TimedElasticBand::deleteTimeDiff (int index);
[170] void TimedElasticBand::deleteTimeDiffs (int index, int number);
[178] void TimedElasticBand::insertPose (int index, const PoseSE2 pose);
[196] void TimedElasticBand::insertTimeDiff (int index, double dt);
[203] void TimedElasticBand::clearTimedElasticBand ();
[215] void TimedElasticBand::setPoseVertexFixed (int index, bool status);
[221] void TimedElasticBand::setTimeDiffVertexFixed (int index, bool status);
[228] void TimedElasticBand::autoResize (double dt_ref, double dt_hysteresis, int min_samples, int max_samples, bool fast_mode);
[277] double TimedElasticBand::getSumOfAllTimeDiffs () const;
[288] double TimedElasticBand::getSumOfTimeDiffsUpToIdx (int index) const;
[302] double TimedElasticBand::getAccumulatedDistance () const;
[313] bool TimedElasticBand::initTrajectoryToGoal (const PoseSE2 start, const PoseSE2 goal, double diststep, double max_vel_x, int min_samples, bool guess_backwards_motion);
[445] int TimedElasticBand::findClosestTrajectoryPose (const Eigen::Ref<const Eigen::Vector2d> ref_point, double distance, int begin_idx) const;
[545] void TimedElasticBand::updateAndPruneTEB (boost::optional<const PoseSE2> new_start, boost::optional<const PoseSE2> new_goal, int min_samples);
[590] bool TimedElasticBand::isTrajectoryInsideRegion (double radius, double max_dist_behind_robot, int skip_poses);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/recovery_behaviors.cpp  ( 4 )
[53] void FailureDetector::update (const geometry_msgs::Twist twist, double v_max, double v_backwards_max, double omega_max, double v_eps, double omega_eps);
[74] void FailureDetector::clear ();
[79] bool FailureDetector::isOscillating () const return oscillating_ };
[82] bool FailureDetector::detect (double v_eps, double omega_eps);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/graph_search.cpp  ( 2 )
[94] void lrKeyPointGraph::createGraph (const PoseSE2 start, const PoseSE2 goal, double dist_to_obst, double obstacle_heading_threshold, const geometry_msgs::Twist start_velocity);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/obstacles.cpp  ( 5 )
[49] void PolygonObstacle::fixPolygonClosure ();
[58] void PolygonObstacle::calcCentroid ();
[131] Eigen::Vector2d PolygonObstacle::getClosestPoint (const Eigen::Vector2d position) const;
[179] bool PolygonObstacle::checkLineIntersection (const Eigen::Vector2d line_start, const Eigen::Vector2d line_end, double min_dist) const;
[197] void PolygonObstacle::toPolygonMsg (geometry_msgs::Polygon polygon);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/visualization.cpp  ( 12 )
[56] void TebVisualization::initialize (ros::NodeHandle nh, const TebConfig cfg);
[76] void TebVisualization::publishGlobalPlan (const std::vector<geometry_msgs::PoseStamped> global_plan) const;
[82] void TebVisualization::publishLocalPlan (const std::vector<geometry_msgs::PoseStamped> local_plan) const;
[89] void TebVisualization::publishLocalPlanAndPoses (const TimedElasticBand teb) const;
[124] void TebVisualization::publishRobotFootprintModel (const PoseSE2 current_pose, const BaseRobotFootprintModel robot_model, const std::string ns, const std_msgs::ColorRGBA color);
[148] void TebVisualization::publishInfeasibleRobotPose (const PoseSE2 current_pose, const BaseRobotFootprintModel robot_model);
[154] void TebVisualization::publishObstacles (const ObstContainer obstacles) const;
[338] void TebVisualization::publishViaPoints (const std::vector< Eigen::Vector2d, Eigen::aligned_allocator<Eigen::Vector2d> > via_points, const std::string ns) const;
[371] void TebVisualization::publishTebContainer (const TebOptPlannerContainer teb_planner, const std::string ns);
[423] void TebVisualization::publishFeedbackMessage (const std::vector< boost::shared_ptr<TebOptimalPlanner> > teb_planners, unsigned int selected_trajectory_idx, const ObstContainer obstacles);
[498] std_msgs::ColorRGBA TebVisualization::toColorMsg (double a, double r, double g, double b);
[508] bool TebVisualization::printErrorWhenNotInitialized () const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/astar.h  ( 4 )
[63] bool operator ()(const Index a, const Index b) const return a.cost > b.cost };
[72] bool calculatePotentials (unsigned char costs, double start_x, double start_y, double end_x, double end_y, int cycles, float potential);
[73] void setSafeControl (bool param) this->use_safe_control_ = param };
[76] void add (unsigned char costs, float potential, float prev_potential, int next_i, int end_x, int end_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/dijkstra.h  ( 7 )
[83] bool calculatePotentials (unsigned char costs, double start_x, double start_y, double end_x, double end_y, int cycles, float potential);
[90] void setSize (int nx, int ny);
[93] void setNeutralCost (unsigned char neutral_cost);
[99] void setPreciseStart (bool precise);
[103] void setSafeControl (bool param);
[115] void updateCell (unsigned char costs, float potential, int n);
[118] float getCost (unsigned char costs, int n);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/count_down_time.hpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/planner_core.h  ( 25 )
[109] void initialize (std::string name, costmap_2d::Costmap2DROS costmap_ros);
[121] bool makePlan (const geometry_msgs::PoseStamped start, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[146] bool findFreePoint (geometry_msgs::PoseStamped point, geometry_msgs::PoseStamped free_point);
[148] int optimizationPath (std::vector<geometry_msgs::PoseStamped> plan, double movement_angle_range = M_PI_4);
[151] void optimizationOrientation (std::vector<geometry_msgs::PoseStamped> plan, const geometry_msgs::PoseStamped goal_pose);
[152] std::uint64_t voxelFilter (std::vector<geometry_msgs::PoseStamped> plan, double threshold = 0.08);
[172] bool computePotential (const geometry_msgs::Point world_point);
[186] bool getPlanFromPotential (double start_x, double start_y, double end_x, double end_y, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[198] void getNearFreePoint (const geometry_msgs::PoseStamped in, geometry_msgs::PoseStamped out, double tolerance);
[206] double getPointPotential (const geometry_msgs::Point world_point);
[215] bool validPointPotential (const geometry_msgs::Point world_point);
[231] void publishPlan (const std::vector<geometry_msgs::PoseStamped> path);
[232] void publishUnsmoothedPlan (const std::vector<geometry_msgs::PoseStamped> path);
[233] void publishRawPlan (const std::vector<geometry_msgs::PoseStamped> path);
[235] void publishGlobalPlanAndPoses (const std::vector<geometry_msgs::PoseStamped> path);
[237] bool makePlanService (nav_msgs::GetPlan::Request req, nav_msgs::GetPlan::Response resp);
[239] void fixBug (std::vector<geometry_msgs::PoseStamped> path);
[241] double getTimeOut () return time_out_ };
[259] void mapToWorld (double mx, double my, double wx, double wy);
[260] bool worldToMap (double wx, double wy, double mx, double my);
[261] void clearRobotCell (const geometry_msgs::PoseStamped global_pose, unsigned int mx, unsigned int my);
[262] void publishPotential ();
[278] void outlineMap (unsigned char costarr, int nx, int ny, unsigned char value);
[285] void reconfigureCB (global_planner::GlobalPlannerConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/expander.h  ( 8 )
[55] bool calculatePotentials (unsigned char costs, double start_x, double start_y, double end_x, double end_y, int cycles, float potential) = 0;
[57] void setSafeControl (bool param) = 0;
[65] void setSize (int nx, int ny);
[68] void setLethalCost (unsigned char lethal_cost);
[73] void setNeutralCost (unsigned char neutral_cost);
[78] void setFactor (float factor);
[83] void setHasUnknown (bool unknown);
[87] void clearEndpoint (unsigned char costs, float potential, int gx, int gy, int s);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/quadratic_calculator.h  ( 1 )
[49] float calculatePotential (float potential, unsigned char cost, int n, float prev_potential);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/orientation_filter.h  ( 5 )
[52] void processPath (const geometry_msgs::PoseStamped start, std::vector<geometry_msgs::PoseStamped> path);
[54] void setAngleBasedOnPositionDerivative (std::vector<geometry_msgs::PoseStamped> path, int index);
[56] void interpolate (std::vector<geometry_msgs::PoseStamped> path, int start_index, int end_index);
[58] void setMode (OrientationMode new_mode) omode_ = new_mode };
[61] void setWindowSize (size_t window_size) window_size_ = window_size };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/smoother.hpp  ( 2 )
[40] void initialize (double min_turning_radius);
[46] bool smooth (std::vector<geometry_msgs::PoseStamped> plan, const costmap_2d::Costmap2D costmap, const double max_time, const bool do_refinement = true);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/gradient_path.h  ( 3 )
[53] void setSize (int xs, int ys);
[65] bool getPath (float potential, double start_x, double start_y, double end_x, double end_y, std::vector<std::pair<float, float> > path);
[74] float gradCell (float potential, int n);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/traceback.h  ( 3 )
[57] bool getPath (float potential, double start_x, double start_y, double end_x, double end_y, std::vector<std::pair<float, float> > path) = 0;
[60] void setSize (int xs, int ys);
[71] void setLethalCost (unsigned char lethal_cost);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/grid_path.h  ( 1 )
[52] bool getPath (float potential, double start_x, double start_y, double end_x, double end_y, std::vector<std::pair<float, float> > path);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/potential_calculator.h  ( 2 )
[55] float calculatePotential (float potential, unsigned char cost, int n, float prev_potential=-1);
[62] void setSize (int nx, int ny);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/astar.cpp  ( 2 )
[49] bool AStarExpansion::calculatePotentials (unsigned char costs, double start_x, double start_y, double end_x, double end_y, int cycles, float potential);
[99] void AStarExpansion::add (unsigned char costs, float potential, float prev_potential, int next_i, int end_x, int end_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/traceback.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/potential_calculator.cpp  ( 2 )
[8] float PotentialCalculator::calculatePotential (float potential, unsigned char cost, int n, float prev_potential);
[21] void PotentialCalculator::setSize (int nx, int ny);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/orientation_filter.cpp  ( 4 )
[46] void set_angle (geometry_msgs::PoseStamped pose, double angle);
[56] void OrientationFilter::processPath (const geometry_msgs::PoseStamped start, std::vector<geometry_msgs::PoseStamped> path);
[118] void OrientationFilter::setAngleBasedOnPositionDerivative (std::vector<geometry_msgs::PoseStamped> path, int index);
[133] void OrientationFilter::interpolate (std::vector<geometry_msgs::PoseStamped> path, int start_index, int end_index);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/grid_path.cpp  ( 1 )
[47] bool GridPath::getPath (float potential, double start_x, double start_y, double end_x, double end_y, std::vector<std::pair<float, float> > path);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/plan_node.cpp  ( 3 )
[60] bool makePlanService (navfn::MakeNavPlan::Request req, navfn::MakeNavPlan::Response resp);
[64] void poseCallback (const rm::PoseStamped::ConstPtr goal);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/quadratic_calculator.cpp  ( 1 )
[33] float QuadraticCalculator::calculatePotential (float potential, unsigned char cost, int n, float prev_potential);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/dijkstra.cpp  ( 2 )
[65] void DijkstraExpansion::setSize (int xs, int ys);
[83] bool DijkstraExpansion::calculatePotentials (unsigned char costs, double start_x, double start_y, double end_x, double end_y, int cycles, float potential);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/expander.cpp  ( 2 )
[15] void Expander::setSize (int nx, int ny);
[23] void Expander::clearEndpoint (unsigned char costs, float potential, int gx, int gy, int s);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/planner_core.cpp  ( 21 )
[25] void GlobalPlanner::outlineMap (unsigned char costarr, int nx, int ny, unsigned char value);
[61] void GlobalPlanner::initialize (std::string name, costmap_2d::Costmap2DROS costmap_ros);
[179] void GlobalPlanner::reconfigureCB (global_planner::GlobalPlannerConfig config, uint32_t level);
[191] void GlobalPlanner::clearRobotCell (const geometry_msgs::PoseStamped global_pose, unsigned int mx, unsigned int my);
[206] bool GlobalPlanner::makePlanService (nav_msgs::GetPlan::Request req, nav_msgs::GetPlan::Response resp);
[216] void GlobalPlanner::mapToWorld (double mx, double my, double wx, double wy);
[222] bool GlobalPlanner::worldToMap (double wx, double wy, double mx, double my);
[238] bool GlobalPlanner::makePlan (const geometry_msgs::PoseStamped start, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[600] void GlobalPlanner::publishPlan (const std::vector<geometry_msgs::PoseStamped> path);
[627] void GlobalPlanner::publishGlobalPlanAndPoses (const std::vector<geometry_msgs::PoseStamped> path);
[659] void GlobalPlanner::publishUnsmoothedPlan (const std::vector<geometry_msgs::PoseStamped> path);
[686] void GlobalPlanner::publishRawPlan (const std::vector<geometry_msgs::PoseStamped> path);
[717] bool GlobalPlanner::getPlanFromPotential (double start_x, double start_y, double goal_x, double goal_y, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[784] void GlobalPlanner::optimizationOrientation (std::vector<geometry_msgs::PoseStamped> plan, const geometry_msgs::PoseStamped goal_pose);
[799] std::uint64_t GlobalPlanner::voxelFilter (std::vector<geometry_msgs::PoseStamped> plan, double threshold);
[830] double GlobalPlanner::distance (double x1, double y1, double x2, double y2);
[835] bool GlobalPlanner::isAroundFree (unsigned int mx, unsigned int my);
[855] void GlobalPlanner::getNearFreePoint (const geometry_msgs::PoseStamped in, geometry_msgs::PoseStamped out, double tolerance);
[907] void GlobalPlanner::publishPotential ();
[956] void GlobalPlanner::fixBug (std::vector<geometry_msgs::PoseStamped> path);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/gradient_path.cpp  ( 3 )
[60] void GradientPath::setSize (int xs, int ys);
[73] bool GradientPath::getPath (float potential, double start_x, double start_y, double goal_x, double goal_y, std::vector<std::pair<float, float> > path);
[251] float GradientPath::gradCell (float potential, int n);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/wsfake_localization/fake_localization.cpp  ( 2 )
[29] void get_robot_pose (const gazebo_msgs::LinkStatesPtr msg);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/rotate_recovery/include/rotate_recovery/rotate_recovery.h  ( 2 )
[67] void initialize (std::string name, tf2_ros::Buffer, costmap_2d::Costmap2DROS, costmap_2d::Costmap2DROS local_costmap);
[72] void runBehavior ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/rotate_recovery/src/rotate_recovery.cpp  ( 2 )
[60] void RotateRecovery::initialize (std::string name, tf2_ros::Buffer, costmap_2d::Costmap2DROS, costmap_2d::Costmap2DROS local_costmap);
[94] void RotateRecovery::runBehavior ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/test/path_calc_test.cpp  ( 3 )
[39] navfn::NavFn make_willow_nav ();
[58] void print_neighborhood_of_last_path_entry ( navfn::NavFn nav );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/navfn.h  ( 20 )
[123] void setNavArr (int nx, int ny);
[132] void setCostmap (const COSTTYPE cmap, bool isROS=true, bool allow_unknown = true);
[138] bool calcNavFnAstar ();
[143] bool calcNavFnDijkstra (bool atStart = false);
[149] float getPathX ();
[155] float getPathY ();
[161] int getPathLen ();
[167] float getLastPathCost ();
[189] void setGoal (int goal);
[195] void setStart (int start);
[204] void initCost (int k, float v);
[212] void updateCell (int n);
[218] void updateCellAstar (int n);
[220] void setupNavFn (bool keepit = false);
[228] bool propNavFnDijkstra (int cycles, bool atStart = false);
[234] bool propNavFnAstar (int cycles);
[250] int calcPath (int n, int st = NULL);
[252] float gradCell (int n);
[256] void display (void fn(NavFn nav), int n = 100);
[261] void savemap (const char fname);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/navfn_ros.h  ( 11 )
[85] void initialize (std::string name, costmap_2d::Costmap2DROS costmap_ros);
[103] bool makePlan (const geometry_msgs::PoseStamped start, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[121] bool computePotential (const geometry_msgs::Point world_point);
[130] bool getPlanFromPotential (const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[138] double getPointPotential (const geometry_msgs::Point world_point);
[146] bool validPointPotential (const geometry_msgs::Point world_point);
[160] void publishPlan (const std::vector<geometry_msgs::PoseStamped> path, double r, double g, double b, double a);
[164] bool makePlanService (nav_msgs::GetPlan::Request req, nav_msgs::GetPlan::Response resp);
[185] void mapToWorld (double mx, double my, double wx, double wy);
[186] void clearRobotCell (const geometry_msgs::PoseStamped global_pose, unsigned int mx, unsigned int my);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/navwin.h  ( 3 )
[30] void drawPot (NavFn nav);
[32] void drawOverlay ();
[43] void draw ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/read_pgm_costmap.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/potarr_point.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navfn.cpp  ( 18 )
[174] void NavFn::setGoal (int g);
[182] void NavFn::setStart (int g);
[194] void NavFn::setNavArr (int xs, int ys);
[229] void NavFn::setCostmap (const COSTTYPE cmap, bool isROS, bool allow_unknown);
[291] bool NavFn::calcNavFnDijkstra (bool atStart);
[320] bool NavFn::calcNavFnAstar ();
[346] float NavFn::getPathX () return pathx };
[347] float NavFn::getPathY () return pathy };
[348] int NavFn::getPathLen () return npath };
[366] void NavFn::setupNavFn (bool keepit);
[420] void NavFn::initCost (int k, float v);
[616] bool NavFn::propNavFnDijkstra (int cycles, bool atStart);
[693] bool NavFn::propNavFnAstar (int cycles);
[768] float NavFn::getLastPathCost ();
[786] int NavFn::calcPath (int n, int st);
[956] float NavFn::gradCell (int n);
[1015] void NavFn::display (void fn(NavFn nav), int n);
[1028] void NavFn::savemap (const char fname);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/read_pgm_costmap.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navfn_ros.cpp  ( 11 )
[66] void NavfnROS::initialize (std::string name, costmap_2d::Costmap2D costmap, std::string global_frame);
[101] bool NavfnROS::validPointPotential (const geometry_msgs::Point world_point);
[139] double NavfnROS::getPointPotential (const geometry_msgs::Point world_point);
[155] bool NavfnROS::computePotential (const geometry_msgs::Point world_point);
[185] void NavfnROS::clearRobotCell (const geometry_msgs::PoseStamped global_pose, unsigned int mx, unsigned int my);
[198] bool NavfnROS::makePlanService (nav_msgs::GetPlan::Request req, nav_msgs::GetPlan::Response resp);
[224] void NavfnROS::mapToWorld (double mx, double my, double wx, double wy);
[231] bool NavfnROS::makePlan (const geometry_msgs::PoseStamped start, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[401] void NavfnROS::publishPlan (const std::vector<geometry_msgs::PoseStamped> path, double r, double g, double b, double a);
[436] bool NavfnROS::getPlanFromPotential (const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navwin.cpp  ( 3 )
[31] void NavWin::drawPot (NavFn nav);
[193] void NavWin::drawOverlay ();
[286] void NavWin::draw ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navfn_node.cpp  ( 3 )
[58] bool makePlanService (MakeNavPlan::Request req, MakeNavPlan::Response resp);
[61] void poseCallback (const rm::PoseStamped::ConstPtr goal);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navtest.cpp  ( 3 )
[36] double get_ms ();
[48] void dispPot (NavFn nav);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/clear_costmap_recovery/test/clear_tester.cpp  ( 3 )
[18] void testClearBehavior (std::string name, double distance, bool obstacles, bool static_map, costmap_2d::Costmap2DROS global_costmap, costmap_2d::Costmap2DROS local_costmap);
[38] void testCountLethal (std::string name, double distance, bool obstacles, bool static_map, int global_lethal, int local_lethal=0);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/clear_costmap_recovery/include/clear_costmap_recovery/clear_costmap_recovery.h  ( 4 )
[65] void initialize (std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS global_costmap, costmap_2d::Costmap2DROS local_costmap);
[72] void runBehavior ();
[75] void clear (costmap_2d::Costmap2DROS costmap);
[76] void clearMap (boost::shared_ptr<costmap_2d::CostmapLayer> costmap, double pose_x, double pose_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/clear_costmap_recovery/src/clear_costmap_recovery.cpp  ( 4 )
[51] void ClearCostmapRecovery::initialize (std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS global_costmap, costmap_2d::Costmap2DROS local_costmap);
[87] void ClearCostmapRecovery::runBehavior ();
[124] void ClearCostmapRecovery::clear (costmap_2d::Costmap2DROS costmap);
[155] void ClearCostmapRecovery::clearMap (boost::shared_ptr<costmap_2d::CostmapLayer> costmap, double pose_x, double pose_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/velocity_iterator_test.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/wavefront_map_accessor.h  ( 1 )
[27] void synchronize ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/utest.cpp  ( 6 )
[59] void correctFootprint ();
[60] void footprintObstacles ();
[61] void checkGoalDistance ();
[62] void checkPathDistance ();
[171] TrajectoryPlannerTest setup_testclass_singleton ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/footprint_helper_test.cpp  ( 3 )
[32] void correctLineCells ();
[44] void correctFootprint ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/trajectory_generator_test.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/gtest_main.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/map_grid_test.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/line_iterator_test.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/simple_trajectory_generator.h  ( 7 )
[86] void initialise ( const Eigen::Vector3f pos, const Eigen::Vector3f vel, const Eigen::Vector3f goal, base_local_planner::LocalPlannerLimits limits, const Eigen::Vector3f vsamples, std::vector<Eigen::Vector3f> additional_samples, bool discretize_by_time = false);
[116] void setParameters (double sim_time, double sim_granularity, double angular_sim_granularity, bool use_dwa = false, double sim_period = 0.0);
[121] bool hasMoreTrajectories ();
[126] bool nextTrajectory (Trajectory traj);
[130] Eigen::Vector3f computeNewPositions (const Eigen::Vector3f pos, const Eigen::Vector3f vel, double dt);
[133] Eigen::Vector3f computeNewVelocities (const Eigen::Vector3f sample_target_vel, const Eigen::Vector3f vel, Eigen::Vector3f acclimits, double dt);
[139] bool generateTrajectory ( Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f sample_target_vel, base_local_planner::Trajectory traj);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/costmap_model.h  ( 3 )
[77] double footprintCost (const geometry_msgs::Point position, const std::vector<geometry_msgs::Point> footprint, double inscribed_radius, double circumscribed_radius);
[87] double lineCost (int x0, int x1, int y0, int y1) const;
[95] double pointCost (int x, int y) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/map_cell.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_planner_ros.h  ( 13 )
[102] void initialize (std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS costmap_ros);
[115] bool computeVelocityCommands (geometry_msgs::Twist cmd_vel);
[122] bool setPlan (const std::vector<geometry_msgs::PoseStamped> orig_global_plan);
[128] bool isGoalReached ();
[141] bool checkTrajectory (double vx_samp, double vy_samp, double vtheta_samp, bool update_map = true);
[154] double scoreTrajectory (double vx_samp, double vy_samp, double vtheta_samp, bool update_map = true);
[156] bool isInitialized ();
[161] TrajectoryPlanner getPlanner () const return tc_ };
[167] void reconfigureCB (BaseLocalPlannerConfig config, uint32_t level);
[177] bool rotateToGoal (const geometry_msgs::PoseStamped global_pose, const geometry_msgs::PoseStamped robot_vel, double goal_th, geometry_msgs::Twist cmd_vel);
[186] bool stopWithAccLimits (const geometry_msgs::PoseStamped global_pose, const geometry_msgs::PoseStamped robot_vel, geometry_msgs::Twist cmd_vel);
[188] std::vector<double> loadYVels (ros::NodeHandle node);
[190] double sign (double x);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/twirling_cost_function.h  ( 2 )
[58] double scoreTrajectory (Trajectory traj);
[60] bool prepare () return true};
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_search.h  ( 1 )
[59] bool findBestTrajectory (Trajectory traj, std::vector<Trajectory> all_explored) = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/velocity_iterator.h  ( 3 )
[77] double getVelocity ();
[86] void reset ();
[90] bool isFinished ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_planner.h  ( 17 )
[133] void reconfigure (BaseLocalPlannerConfig cfg);
[143] Trajectory findBestPath (const geometry_msgs::PoseStamped global_pose, geometry_msgs::PoseStamped global_vel, geometry_msgs::PoseStamped drive_velocities);
[150] void updatePlan (const std::vector<geometry_msgs::PoseStamped> new_plan, bool compute_dists = false);
[157] void getLocalGoal (double x, double y);
[173] bool checkTrajectory (double x, double y, double theta, double vx, double vy, double vtheta, double vx_samp, double vy_samp, double vtheta_samp);
[189] double scoreTrajectory (double x, double y, double theta, double vx, double vy, double vtheta, double vx_samp, double vy_samp, double vtheta_samp);
[201] bool getCellCosts (int cx, int cy, float path_cost, float goal_cost, float occ_cost, float total_cost);
[204] void setFootprint ( std::vector<geometry_msgs::Point> footprint ) footprint_spec_ = footprint };
[207] geometry_msgs::Polygon getFootprintPolygon () const return costmap_2d::toPolygon(footprint_spec_) };
[208] std::vector<geometry_msgs::Point> getFootprint () const return footprint_spec_ };
[225] Trajectory createTrajectories (double x, double y, double theta, double vx, double vy, double vtheta, double acc_x, double acc_y, double acc_theta);
[246] void generateTrajectory (double x, double y, double theta, double vx, double vy, double vtheta, double vx_samp, double vy_samp, double vtheta_samp, double acc_x, double acc_y, double acc_theta, double impossible_cost, Trajectory traj);
[255] double footprintCost (double x_i, double y_i, double theta_i);
[373] void getMaxSpeedToStopInTime (double time, double vx, double vy, double vth);
[379] double lineCost (int x0, int x1, int y0, int y1);
[380] double pointCost (int x, int y);
[381] double headingDiff (int cell_x, int cell_y, double x, double y, double heading);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_cost_function.h  ( 4 )
[60] bool prepare () = 0;
[65] double scoreTrajectory (Trajectory traj) = 0;
[67] double getScale ();
[71] void setScale (double scale);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/planar_laser_scan.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/oscillation_cost_function.h  ( 7 )
[51] double scoreTrajectory (Trajectory traj);
[53] bool prepare () return true};
[58] void resetOscillationFlags ();
[61] void updateOscillationFlags (Eigen::Vector3f pos, base_local_planner::Trajectory traj, double min_vel_trans);
[63] void setOscillationResetDist (double dist, double angle);
[67] void resetOscillationFlagsIfPossible (const Eigen::Vector3f pos, const Eigen::Vector3f prev);
[75] bool setOscillationFlags (base_local_planner::Trajectory t, double min_vel_trans);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/map_grid.h  ( 9 )
[111] void resetPathDist ();
[118] void sizeCheck (unsigned int size_x, unsigned int size_y);
[123] void commonInit ();
[131] size_t getIndex (int x, int y);
[164] void adjustPlanResolution (const std::vector<geometry_msgs::PoseStamped> global_plan_in, std::vector<geometry_msgs::PoseStamped> global_plan_out, double resolution);
[170] void computeTargetDistance (std::queue<MapCell> dist_queue, const costmap_2d::Costmap2D costmap);
[176] void computeGoalDistance (std::queue<MapCell> dist_queue, const costmap_2d::Costmap2D costmap);
[181] void setTargetCells (const costmap_2d::Costmap2D costmap, const std::vector<geometry_msgs::PoseStamped> global_plan);
[187] void setLocalGoal (const costmap_2d::Costmap2D costmap, const std::vector<geometry_msgs::PoseStamped> global_plan);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/map_grid_visualizer.h  ( 2 )
[55] void initialize (const std::string name, std::string frame, boost::function<bool (int cx, int cy, float path_cost, float goal_cost, float occ_cost, float total_cost)> cost_function);
[60] void publishCostCloud (const costmap_2d::Costmap2D costmap_p_);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_sample_generator.h  ( 2 )
[55] bool hasMoreTrajectories () = 0;
[60] bool nextTrajectory (Trajectory traj) = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/odometry_helper_ros.h  ( 5 )
[62] void odomCallback (const nav_msgs::Odometry::ConstPtr msg);
[64] void getOdom (nav_msgs::Odometry base_odom);
[66] void getRobotVel (geometry_msgs::PoseStamped robot_vel);
[73] void setOdomTopic (std::string odom_topic);
[76] std::string getOdomTopic () const return odom_topic_ };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/world_model.h  ( 1 )
[66] double footprintCost (const geometry_msgs::Point position, const std::vector<geometry_msgs::Point> footprint, double inscribed_radius, double circumscribed_radius) = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/obstacle_cost_function.h  ( 7 )
[59] bool prepare ();
[60] double scoreTrajectory (Trajectory traj);
[62] void setSumScores (bool score_sums) sum_scores_=score_sums };
[64] void setParams (double max_trans_vel, double max_scaling_factor, double scaling_speed);
[65] void setFootprint (std::vector<geometry_msgs::Point> footprint_spec);
[68] double getScalingFactor (Trajectory traj, double scaling_speed, double max_trans_vel, double max_scaling_factor);
[76] double footprintCost ( const double x, const double y, const double th, double scale, std::vector<geometry_msgs::Point> footprint_spec, costmap_2d::Costmap2D costmap, base_local_planner::WorldModel world_model);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/line_iterator.h  ( 8 )
[95] bool isValid () const;
[100] void advance ();
[114] int getX () const return x_ };
[115] int getY () const return y_ };
[117] int getX0 () const return x0_ };
[118] int getY0 () const return y0_ };
[120] int getX1 () const return x1_ };
[121] int getY1 () const return y1_ };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/prefer_forward_cost_function.h  ( 3 )
[51] double scoreTrajectory (Trajectory traj);
[53] bool prepare () return true};
[55] void setPenalty (double penalty);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/local_planner_limits.h  ( 1 )
[110] Eigen::Vector3f getAccLimits ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/local_planner_util.h  ( 8 )
[82] void reconfigureCB (LocalPlannerLimits config, bool restore_defaults);
[91] void initialize (tf2_ros::Buffer tf, costmap_2d::Costmap2D costmap, std::string global_frame);
[93] bool getGoal (geometry_msgs::PoseStamped goal_pose);
[95] bool setPlan (const std::vector<geometry_msgs::PoseStamped> orig_global_plan);
[97] bool getLocalPlan (const geometry_msgs::PoseStamped global_pose, std::vector<geometry_msgs::PoseStamped> transformed_plan);
[99] costmap_2d::Costmap2D getCostmap ();
[101] LocalPlannerLimits getCurrentLimits ();
[103] std::string getGlobalFrame () return global_frame_ };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory.h  ( 6 )
[73] void getPoint (unsigned int index, double x, double y, double th) const;
[82] void setPoint (unsigned int index, double x, double y, double th);
[90] void addPoint (double x, double y, double th);
[98] void getEndpoint (double x, double y, double th) const;
[103] void resetPoints ();
[109] int getPointsSize () const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/latched_stop_rotate_controller.h  ( 6 )
[26] bool isPositionReached (LocalPlannerUtil planner_util, const geometry_msgs::PoseStamped global_pose);
[30] bool isGoalReached (LocalPlannerUtil planner_util, OdometryHelperRos odom_helper, const geometry_msgs::PoseStamped global_pose);
[32] void resetLatching ();
[50] bool stopWithAccLimits (const geometry_msgs::PoseStamped global_pose, const geometry_msgs::PoseStamped robot_vel, geometry_msgs::Twist cmd_vel, Eigen::Vector3f acc_lim, double sim_period, boost::function<bool (Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)> obstacle_check);
[69] bool rotateToGoal (const geometry_msgs::PoseStamped global_pose, const geometry_msgs::PoseStamped robot_vel, double goal_th, geometry_msgs::Twist cmd_vel, Eigen::Vector3f acc_lim, double sim_period, base_local_planner::LocalPlannerLimits limits, boost::function<bool (Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)> obstacle_check);
[79] bool computeVelocityCommandsStopRotate (geometry_msgs::Twist cmd_vel, Eigen::Vector3f acc_lim, double sim_period, LocalPlannerUtil planner_util, OdometryHelperRos odom_helper, const geometry_msgs::PoseStamped global_pose, boost::function<bool (Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)> obstacle_check);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/map_grid_cost_function.h  ( 9 )
[86] void setTargetPoses (std::vector<geometry_msgs::PoseStamped> target_poses);
[88] void setXShift (double xshift) xshift_ = xshift};
[89] void setYShift (double yshift) yshift_ = yshift};
[94] void setStopOnFailure (bool stop_on_failure) stop_on_failure_ = stop_on_failure};
[99] bool prepare ();
[101] double scoreTrajectory (Trajectory traj);
[106] double obstacleCosts ();
[114] double unreachableCellCosts ();
[119] double getCellCosts (unsigned int cx, unsigned int cy);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/footprint_helper.h  ( 3 )
[67] std::vector<base_local_planner::Position2DInt> getFootprintCells ( Eigen::Vector3f pos, std::vector<geometry_msgs::Point> footprint_spec, const costmap_2d::Costmap2D, bool fill);
[77] void getLineCells (int x0, int x1, int y0, int y1, std::vector<base_local_planner::Position2DInt> pts);
[83] void getFillCells (std::vector<base_local_planner::Position2DInt> footprint);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_inc.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/voxel_grid_model.h  ( 6 )
[87] double footprintCost (const geometry_msgs::Point position, const std::vector<geometry_msgs::Point> footprint, double inscribed_radius, double circumscribed_radius);
[98] void updateWorld (const std::vector<geometry_msgs::Point> footprint, const std::vector<costmap_2d::Observation> observations, const std::vector<PlanarLaserScan> laser_scans);
[104] void getPoints (sensor_msgs::PointCloud2 cloud);
[115] double lineCost (int x0, int x1, int y0, int y1);
[123] double pointCost (int x, int y);
[125] void removePointsInScanBoundry (const PlanarLaserScan laser_scan, double raytrace_range);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/simple_scored_sampling_planner.h  ( 2 )
[81] double scoreTrajectory (Trajectory traj, double best_traj_cost);
[94] bool findBestTrajectory (Trajectory traj, std::vector<Trajectory> all_explored = 0);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/point_grid.h  ( 12 )
[83] void getPointsInRange (const geometry_msgs::Point lower_left, const geometry_msgs::Point upper_right, std::vector< std::list<geometry_msgs::Point32> > points);
[94] double footprintCost (const geometry_msgs::Point position, const std::vector<geometry_msgs::Point> footprint, double inscribed_radius, double circumscribed_radius);
[105] void updateWorld (const std::vector<geometry_msgs::Point> footprint, const std::vector<costmap_2d::Observation> observations, const std::vector<PlanarLaserScan> laser_scans);
[256] void intersectionPoint (const geometry_msgs::Point v1, const geometry_msgs::Point v2, const geometry_msgs::Point u1, const geometry_msgs::Point u2, geometry_msgs::Point result);
[264] bool ptInPolygon (const geometry_msgs::Point32 pt, const std::vector<geometry_msgs::Point> poly);
[270] void insert (const geometry_msgs::Point32 pt);
[277] double nearestNeighborDistance (const geometry_msgs::Point32 pt);
[286] double getNearestInCell (const geometry_msgs::Point32 pt, unsigned int gx, unsigned int gy);
[292] void removePointsInPolygon (const std::vector<geometry_msgs::Point> poly);
[298] void removePointsInScanBoundry (const PlanarLaserScan laser_scan);
[306] bool ptInScan (const geometry_msgs::Point32 pt, const PlanarLaserScan laser_scan);
[312] void getPoints (sensor_msgs::PointCloud2 cloud);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/goal_functions.h  ( 8 )
[63] double getGoalPositionDistance (const geometry_msgs::PoseStamped global_pose, double goal_x, double goal_y);
[72] double getGoalOrientationAngleDifference (const geometry_msgs::PoseStamped global_pose, double goal_th);
[80] void publishPlan (const std::vector<geometry_msgs::PoseStamped> path, const ros::Publisher pub);
[88] void prunePlan (const geometry_msgs::PoseStamped global_pose, std::vector<geometry_msgs::PoseStamped> plan, std::vector<geometry_msgs::PoseStamped> global_plan);
[105] bool transformGlobalPlan (const tf2_ros::Buffer tf, const std::vector<geometry_msgs::PoseStamped> global_plan, const geometry_msgs::PoseStamped global_robot_pose, const costmap_2d::Costmap2D costmap, const std::string global_frame, std::vector<geometry_msgs::PoseStamped> transformed_plan);
[118] bool getGoalPose (const tf2_ros::Buffer tf, const std::vector<geometry_msgs::PoseStamped> global_plan, const std::string global_frame, geometry_msgs::PoseStamped goal_pose);
[140] bool isGoalReached (const tf2_ros::Buffer tf, const std::vector<geometry_msgs::PoseStamped> global_plan, const costmap_2d::Costmap2D costmap, const std::string global_frame, geometry_msgs::PoseStamped global_pose, const nav_msgs::Odometry base_odom, double rot_stopped_vel, double trans_stopped_vel, double xy_goal_tolerance, double yaw_goal_tolerance);
[151] bool stopped (const nav_msgs::Odometry base_odom, const double rot_stopped_velocity, const double trans_stopped_velocity);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/local_planner_util.cpp  ( 7 )
[47] void LocalPlannerUtil::initialize ( tf2_ros::Buffer tf, costmap_2d::Costmap2D costmap, std::string global_frame);
[60] void LocalPlannerUtil::reconfigureCB (LocalPlannerLimits config, bool restore_defaults);
[73] costmap_2d::Costmap2D LocalPlannerUtil::getCostmap ();
[77] LocalPlannerLimits LocalPlannerUtil::getCurrentLimits ();
[83] bool LocalPlannerUtil::getGoal (geometry_msgs::PoseStamped goal_pose);
[91] bool LocalPlannerUtil::setPlan (const std::vector<geometry_msgs::PoseStamped> orig_global_plan);
[105] bool LocalPlannerUtil::getLocalPlan (const geometry_msgs::PoseStamped global_pose, std::vector<geometry_msgs::PoseStamped> transformed_plan);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/trajectory.cpp  ( 6 )
[47] void Trajectory::getPoint (unsigned int index, double x, double y, double th) const;
[53] void Trajectory::setPoint (unsigned int index, double x, double y, double th);
[59] void Trajectory::addPoint (double x, double y, double th);
[65] void Trajectory::resetPoints ();
[71] void Trajectory::getEndpoint (double x, double y, double th) const;
[77] int Trajectory::getPointsSize () const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/trajectory_planner_ros.cpp  ( 10 )
[64] void TrajectoryPlannerROS::reconfigureCB (BaseLocalPlannerConfig config, uint32_t level);
[91] void TrajectoryPlannerROS::initialize ( std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS costmap_ros);
[271] std::vector<double> TrajectoryPlannerROS::loadYVels (ros::NodeHandle node);
[306] bool TrajectoryPlannerROS::stopWithAccLimits (const geometry_msgs::PoseStamped global_pose, const geometry_msgs::PoseStamped robot_vel, geometry_msgs::Twist cmd_vel);
[335] bool TrajectoryPlannerROS::rotateToGoal (const geometry_msgs::PoseStamped global_pose, const geometry_msgs::PoseStamped robot_vel, double goal_th, geometry_msgs::Twist cmd_vel);
[378] bool TrajectoryPlannerROS::setPlan (const std::vector<geometry_msgs::PoseStamped> orig_global_plan);
[395] bool TrajectoryPlannerROS::computeVelocityCommands (geometry_msgs::Twist cmd_vel);
[551] bool TrajectoryPlannerROS::checkTrajectory (double vx_samp, double vy_samp, double vtheta_samp, bool update_map);
[580] double TrajectoryPlannerROS::scoreTrajectory (double vx_samp, double vy_samp, double vtheta_samp, bool update_map);
[609] bool TrajectoryPlannerROS::isGoalReached ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/point_grid_node.cpp  ( 5 )
[51] void printPoint (const geometry_msgs::Point pt);
[55] void printPSHeader ();
[61] void printPSFooter ();
[65] void printPolygonPS (const std::vector<geometry_msgs::Point32> poly, double line_width);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/odometry_helper_ros.cpp  ( 4 )
[48] void OdometryHelperRos::odomCallback (const nav_msgs::Odometry::ConstPtr msg);
[62] void OdometryHelperRos::getOdom (nav_msgs::Odometry base_odom);
[68] void OdometryHelperRos::getRobotVel (geometry_msgs::PoseStamped robot_vel);
[89] void OdometryHelperRos::setOdomTopic (std::string odom_topic);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/map_grid_cost_function.cpp  ( 4 )
[55] void MapGridCostFunction::setTargetPoses (std::vector<geometry_msgs::PoseStamped> target_poses);
[59] bool MapGridCostFunction::prepare ();
[70] double MapGridCostFunction::getCellCosts (unsigned int px, unsigned int py);
[75] double MapGridCostFunction::scoreTrajectory (Trajectory traj);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/map_grid_visualizer.cpp  ( 2 )
[45] void MapGridVisualizer::initialize (const std::string name, std::string frame_id, boost::function<bool (int cx, int cy, float path_cost, float goal_cost, float occ_cost, float total_cost)> cost_function);
[54] void MapGridVisualizer::publishCostCloud (const costmap_2d::Costmap2D costmap_p_);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/obstacle_cost_function.cpp  ( 6 )
[59] void ObstacleCostFunction::setParams (double max_trans_vel, double max_scaling_factor, double scaling_speed);
[66] void ObstacleCostFunction::setFootprint (std::vector<geometry_msgs::Point> footprint_spec);
[70] bool ObstacleCostFunction::prepare ();
[74] double ObstacleCostFunction::scoreTrajectory (Trajectory traj);
[102] double ObstacleCostFunction::getScalingFactor (Trajectory traj, double scaling_speed, double max_trans_vel, double max_scaling_factor);
[123] double ObstacleCostFunction::footprintCost  ( const double x, const double y, const double th, double scale, std::vector<geometry_msgs::Point> footprint_spec, costmap_2d::Costmap2D costmap, base_local_planner::WorldModel world_model);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/twirling_cost_function.cpp  ( 1 )
[14] double TwirlingCostFunction::scoreTrajectory (Trajectory traj);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/latched_stop_rotate_controller.cpp  ( 5 )
[40] bool LatchedStopRotateController::isPositionReached (LocalPlannerUtil planner_util, const geometry_msgs::PoseStamped global_pose);
[69] bool LatchedStopRotateController::isGoalReached (LocalPlannerUtil planner_util, OdometryHelperRos odom_helper, const geometry_msgs::PoseStamped global_pose);
[117] bool LatchedStopRotateController::stopWithAccLimits (const geometry_msgs::PoseStamped global_pose, const geometry_msgs::PoseStamped robot_vel, geometry_msgs::Twist cmd_vel, Eigen::Vector3f acc_lim, double sim_period, boost::function<bool (Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)> obstacle_check);
[158] bool LatchedStopRotateController::rotateToGoal ( const geometry_msgs::PoseStamped global_pose, const geometry_msgs::PoseStamped robot_vel, double goal_th, geometry_msgs::Twist cmd_vel, Eigen::Vector3f acc_lim, double sim_period, base_local_planner::LocalPlannerLimits limits, boost::function<bool (Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)> obstacle_check);
[208] bool LatchedStopRotateController::computeVelocityCommandsStopRotate (geometry_msgs::Twist cmd_vel, Eigen::Vector3f acc_lim, double sim_period, LocalPlannerUtil planner_util, OdometryHelperRos odom_helper_, const geometry_msgs::PoseStamped global_pose, boost::function<bool (Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)> obstacle_check);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/point_grid.cpp  ( 12 )
[62] double PointGrid::footprintCost (const geometry_msgs::Point position, const std::vector<geometry_msgs::Point> footprint, double inscribed_radius, double circumscribed_radius);
[118] bool PointGrid::ptInPolygon (const geometry_msgs::Point32 pt, const std::vector<geometry_msgs::Point> poly);
[155] void PointGrid::getPointsInRange (const geometry_msgs::Point lower_left, const geometry_msgs::Point upper_right, vector< list<geometry_msgs::Point32> > points);
[211] void PointGrid::insert (const geometry_msgs::Point32 pt);
[231] double PointGrid::getNearestInCell (const geometry_msgs::Point32 pt, unsigned int gx, unsigned int gy);
[242] double PointGrid::nearestNeighborDistance (const geometry_msgs::Point32 pt);
[336] void PointGrid::updateWorld (const std::vector<geometry_msgs::Point> footprint, const vector<Observation> observations, const vector<PlanarLaserScan> laser_scans);
[378] void PointGrid::removePointsInScanBoundry (const PlanarLaserScan laser_scan);
[421] bool PointGrid::ptInScan (const geometry_msgs::Point32 pt, const PlanarLaserScan laser_scan);
[465] void PointGrid::getPoints (sensor_msgs::PointCloud2 cloud);
[490] void PointGrid::removePointsInPolygon (const std::vector<geometry_msgs::Point> poly);
[535] void PointGrid::intersectionPoint (const geometry_msgs::Point v1, const geometry_msgs::Point v2, const geometry_msgs::Point u1, const geometry_msgs::Point u2, geometry_msgs::Point result);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/goal_functions.cpp  ( 8 )
[49] double getGoalPositionDistance (const geometry_msgs::PoseStamped global_pose, double goal_x, double goal_y);
[53] double getGoalOrientationAngleDifference (const geometry_msgs::PoseStamped global_pose, double goal_th);
[58] void publishPlan (const std::vector<geometry_msgs::PoseStamped> path, const ros::Publisher pub);
[77] void prunePlan (const geometry_msgs::PoseStamped global_pose, std::vector<geometry_msgs::PoseStamped> plan, std::vector<geometry_msgs::PoseStamped> global_plan);
[102] bool transformGlobalPlan ( const tf2_ros::Buffer tf, const std::vector<geometry_msgs::PoseStamped> global_plan, const geometry_msgs::PoseStamped global_pose, const costmap_2d::Costmap2D costmap, const std::string global_frame, std::vector<geometry_msgs::PoseStamped> transformed_plan);
[176] bool getGoalPose (const tf2_ros::Buffer tf, const std::vector<geometry_msgs::PoseStamped> global_plan, const std::string global_frame, geometry_msgs::PoseStamped goal_pose);
[216] bool isGoalReached (const tf2_ros::Buffer tf, const std::vector<geometry_msgs::PoseStamped> global_plan, const costmap_2d::Costmap2D costmap GOAL_ATTRIBUTE_UNUSED, const std::string global_frame, geometry_msgs::PoseStamped global_pose, const nav_msgs::Odometry base_odom, double rot_stopped_vel, double trans_stopped_vel, double xy_goal_tolerance, double yaw_goal_tolerance);
[240] bool stopped (const nav_msgs::Odometry base_odom, const double rot_stopped_velocity, const double trans_stopped_velocity);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/costmap_model.cpp  ( 3 )
[48] double CostmapModel::footprintCost (const geometry_msgs::Point position, const std::vector<geometry_msgs::Point> footprint, double inscribed_radius, double circumscribed_radius);
[116] double CostmapModel::lineCost (int x0, int x1, int y0, int y1) const;
[134] double CostmapModel::pointCost (int x, int y) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/oscillation_cost_function.cpp  ( 6 )
[51] void OscillationCostFunction::setOscillationResetDist (double dist, double angle);
[56] void OscillationCostFunction::updateOscillationFlags (Eigen::Vector3f pos, base_local_planner::Trajectory traj, double min_vel_trans);
[70] void OscillationCostFunction::resetOscillationFlagsIfPossible (const Eigen::Vector3f pos, const Eigen::Vector3f prev);
[84] void OscillationCostFunction::resetOscillationFlags ();
[101] bool OscillationCostFunction::setOscillationFlags (base_local_planner::Trajectory t, double min_vel_trans);
[166] double OscillationCostFunction::scoreTrajectory (Trajectory traj);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/prefer_forward_cost_function.cpp  ( 1 )
[15] double PreferForwardCostFunction::scoreTrajectory (Trajectory traj);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/map_cell.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/footprint_helper.cpp  ( 3 )
[51] void FootprintHelper::getLineCells (int x0, int x1, int y0, int y1, std::vector<base_local_planner::Position2DInt> pts);
[123] void FootprintHelper::getFillCells (std::vector<base_local_planner::Position2DInt> footprint);
[184] std::vector<base_local_planner::Position2DInt> FootprintHelper::getFootprintCells ( Eigen::Vector3f pos, std::vector<geometry_msgs::Point> footprint_spec, const costmap_2d::Costmap2D costmap, bool fill);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/simple_scored_sampling_planner.cpp  ( 2 )
[50] double SimpleScoredSamplingPlanner::scoreTrajectory (Trajectory traj, double best_traj_cost);
[81] bool SimpleScoredSamplingPlanner::findBestTrajectory (Trajectory traj, std::vector<Trajectory> all_explored);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/trajectory_planner.cpp  ( 13 )
[62] void TrajectoryPlanner::reconfigure (BaseLocalPlannerConfig cfg);
[193] bool TrajectoryPlanner::getCellCosts (int cx, int cy, float path_cost, float goal_cost, float occ_cost, float total_cost);
[220] void TrajectoryPlanner::generateTrajectory ( double x, double y, double theta, double vx, double vy, double vtheta, double vx_samp, double vy_samp, double vtheta_samp, double acc_x, double acc_y, double acc_theta, double impossible_cost, Trajectory traj);
[372] double TrajectoryPlanner::headingDiff (int cell_x, int cell_y, double x, double y, double heading);
[390] double TrajectoryPlanner::lineCost (int x0, int x1, int y0, int y1);
[466] double TrajectoryPlanner::pointCost (int x, int y);
[476] void TrajectoryPlanner::updatePlan (const vector<geometry_msgs::PoseStamped> new_plan, bool compute_dists);
[504] bool TrajectoryPlanner::checkTrajectory (double x, double y, double theta, double vx, double vy, double vtheta, double vx_samp, double vy_samp, double vtheta_samp);
[520] double TrajectoryPlanner::scoreTrajectory (double x, double y, double theta, double vx, double vy, double vtheta, double vx_samp, double vy_samp, double vtheta_samp);
[538] Trajectory TrajectoryPlanner::createTrajectories (double x, double y, double theta, double vx, double vy, double vtheta, double acc_x, double acc_y, double acc_theta);
[908] Trajectory TrajectoryPlanner::findBestPath (const geometry_msgs::PoseStamped global_pose, geometry_msgs::PoseStamped global_vel, geometry_msgs::PoseStamped drive_velocities);
[988] double TrajectoryPlanner::footprintCost (double x_i, double y_i, double theta_i);
[994] void TrajectoryPlanner::getLocalGoal (double x, double y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/voxel_grid_model.cpp  ( 6 )
[51] double VoxelGridModel::footprintCost (const geometry_msgs::Point position, const std::vector<geometry_msgs::Point> footprint, double inscribed_radius, double circumscribed_radius);
[96] double VoxelGridModel::lineCost (int x0, int x1, int y0, int y1);
[174] double VoxelGridModel::pointCost (int x, int y);
[184] void VoxelGridModel::updateWorld (const std::vector<geometry_msgs::Point> footprint, const vector<Observation> observations, const vector<PlanarLaserScan> laser_scans);
[226] void VoxelGridModel::removePointsInScanBoundry (const PlanarLaserScan laser_scan, double raytrace_range);
[280] void VoxelGridModel::getPoints (sensor_msgs::PointCloud2 cloud);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/simple_trajectory_generator.cpp  ( 7 )
[53] void SimpleTrajectoryGenerator::initialise ( const Eigen::Vector3f pos, const Eigen::Vector3f vel, const Eigen::Vector3f goal, base_local_planner::LocalPlannerLimits limits, const Eigen::Vector3f vsamples, std::vector<Eigen::Vector3f> additional_samples, bool discretize_by_time);
[142] void SimpleTrajectoryGenerator::setParameters ( double sim_time, double sim_granularity, double angular_sim_granularity, bool use_dwa, double sim_period);
[154] bool SimpleTrajectoryGenerator::hasMoreTrajectories ();
[161] bool SimpleTrajectoryGenerator::nextTrajectory (Trajectory comp_traj);
[184] bool SimpleTrajectoryGenerator::generateTrajectory ( Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f sample_target_vel, base_local_planner::Trajectory traj);
[258] Eigen::Vector3f SimpleTrajectoryGenerator::computeNewPositions (const Eigen::Vector3f pos, const Eigen::Vector3f vel, double dt);
[270] Eigen::Vector3f SimpleTrajectoryGenerator::computeNewVelocities (const Eigen::Vector3f sample_target_vel, const Eigen::Vector3f vel, Eigen::Vector3f acclimits, double dt);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/map_grid.cpp  ( 8 )
[57] void MapGrid::commonInit ();
[73] size_t MapGrid::getIndex (int x, int y);
[84] void MapGrid::sizeCheck (unsigned int size_x, unsigned int size_y);
[125] void MapGrid::resetPathDist ();
[134] void MapGrid::adjustPlanResolution (const std::vector<geometry_msgs::PoseStamped> global_plan_in, std::vector<geometry_msgs::PoseStamped> global_plan_out, double resolution);
[172] void MapGrid::setTargetCells (const costmap_2d::Costmap2D costmap, const std::vector<geometry_msgs::PoseStamped> global_plan);
[211] void MapGrid::setLocalGoal (const costmap_2d::Costmap2D costmap, const std::vector<geometry_msgs::PoseStamped> global_plan);
[255] void MapGrid::computeTargetDistance (queue<MapCell> dist_queue, const costmap_2d::Costmap2D costmap);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/nav_core/include/nav_core/base_local_planner.h  ( 6 )
[61] bool computeVelocityCommands (geometry_msgs::Twist cmd_vel) = 0;
[67] bool isGoalReached () = 0;
[74] bool setPlan (const std::vector<geometry_msgs::PoseStamped> plan) = 0;
[82] void initialize (std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS costmap_ros) = 0;
[88] void setConfig (double maxVelocity) };
[89] void setForwardWeight (double forwardWeight) };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/nav_core/include/nav_core/base_global_planner.h  ( 2 )
[58] bool makePlan (const geometry_msgs::PoseStamped start, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan) = 0;
[81] void initialize (std::string name, costmap_2d::Costmap2DROS costmap_ros) = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/nav_core/include/nav_core/recovery_behavior.h  ( 2 )
[56] void initialize (std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS global_costmap, costmap_2d::Costmap2DROS local_costmap) = 0;
[61] void runBehavior () = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/nav_core/include/nav_core/parameter_magic.h  ( 2 )
[56] param_t loadParameterWithDeprecation (const ros::NodeHandle nh, const std::string current_name, const std::string old_name, const param_t default_value);
[78] void warnRenamedParameter (const ros::NodeHandle nh, const std::string current_name, const std::string old_name);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/tools.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/menu_handler.h  ( 11 )
[65] EntryHandle insert ( const std::string title, const FeedbackCallback feedback_cb );
[82] bool setVisible ( EntryHandle handle, bool visible );
[85] bool setCheckState ( EntryHandle handle, CheckState check_state );
[89] bool getCheckState ( EntryHandle handle, CheckState check_state ) const;
[93] bool apply ( InteractiveMarkerServer server, const std::string marker_name );
[96] bool reApply ( InteractiveMarkerServer server );
[100] bool getTitle ( EntryHandle handle, std::string title ) const;
[116] void processFeedback ( const visualization_msgs::InteractiveMarkerFeedbackConstPtr feedback );
[123] bool pushMenuEntries ( std::vector<EntryHandle> handles_in, std::vector<visualization_msgs::MenuEntry> entries_out, EntryHandle parent_handle );
[125] visualization_msgs::MenuEntry makeEntry ( EntryContext context, EntryHandle handle, EntryHandle parent_handle );
[131] EntryHandle doInsert ( const std::string title, const uint8_t command_type, const std::string command, const FeedbackCallback feedback_cb );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/interactive_marker_server.h  ( 6 )
[190] void spinThread ();
[193] void processFeedback ( const FeedbackConstPtr feedback );
[196] void keepAlive ();
[199] void publish ( visualization_msgs::InteractiveMarkerUpdate update );
[202] void publishInit ();
[208] void doSetPose ( M_UpdateContext::iterator update_it, const std::string name, const geometry_msgs::Pose pose, const std_msgs::Header header );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/interactive_marker_client.h  ( 13 )
[137] void process ( const MsgConstPtrT msg );
[156] void subscribeInit ();
[159] void subscribeUpdate ();
[161] void statusCb ( StatusT status, const std::string server_id, const std::string msg );
[175] void initCb ( const InitConstPtr i ) const;
[177] void updateCb ( const UpdateConstPtr u ) const;
[179] void resetCb ( const std::string s ) const;
[184] void setInitCb ( InitCallback init_cb );
[187] void setUpdateCb ( UpdateCallback update_cb );
[190] void setResetCb ( ResetCallback reset_cb );
[193] void setStatusCb ( StatusCallback status_cb );
[205] void processInit ( const InitConstPtr msg );
[208] void processUpdate ( const UpdateConstPtr msg );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/visibility_control.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/detail/single_client.h  ( 9 )
[75] void process (const visualization_msgs::InteractiveMarkerUpdate::ConstPtr msg, bool enable_autocomplete_transparency = true);
[81] bool isInitialized ();
[84] void update ();
[89] void checkInitFinished ();
[91] void checkKeepAlive ();
[103] void transformInitMsgs ( );
[104] void transformUpdateMsgs ( );
[106] void pushUpdates ();
[108] void errorReset ( std::string error_msg );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/detail/message_context.h  ( 4 )
[60] void getTfTransforms ();
[65] bool isReady ();
[69] void init ();
[71] bool getTransform ( std_msgs::Header header, geometry_msgs::Pose pose_msg );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/detail/state_machine.h  ( 2 )
[54] ros::Duration getDuration ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/tools.cpp  ( 7 )
[45] void autoComplete ( visualization_msgs::InteractiveMarker msg, bool enable_autocomplete_transparency );
[84] void uniqueifyControlNames ( visualization_msgs::InteractiveMarker msg );
[200] void makeArrow ( const visualization_msgs::InteractiveMarker msg, visualization_msgs::InteractiveMarkerControl control, float pos );
[228] void makeDisc ( const visualization_msgs::InteractiveMarker msg, visualization_msgs::InteractiveMarkerControl control, float width );
[371] void makeViewFacingButton ( const visualization_msgs::InteractiveMarker msg, visualization_msgs::InteractiveMarkerControl control, std::string text );
[397] void assignDefaultColor (visualization_msgs::Marker marker, const geometry_msgs::Quaternion quat );
[420] visualization_msgs::InteractiveMarkerControl makeTitle ( const visualization_msgs::InteractiveMarker msg );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/message_context.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/interactive_marker_client.cpp  ( 14 )
[69] void InteractiveMarkerClient::subscribe ( std::string topic_ns );
[76] void InteractiveMarkerClient::setInitCb ( const InitCallback cb );
[81] void InteractiveMarkerClient::setUpdateCb ( const UpdateCallback cb );
[86] void InteractiveMarkerClient::setResetCb ( const ResetCallback cb );
[91] void InteractiveMarkerClient::setStatusCb ( const StatusCallback cb );
[96] void InteractiveMarkerClient::setTargetFrame ( std::string target_frame );
[115] void InteractiveMarkerClient::shutdown ();
[134] void InteractiveMarkerClient::subscribeUpdate ();
[152] void InteractiveMarkerClient::subscribeInit ();
[170] void InteractiveMarkerClient::process ( const MsgConstPtrT msg );
[209] void InteractiveMarkerClient::processInit ( const InitConstPtr msg );
[214] void InteractiveMarkerClient::processUpdate ( const UpdateConstPtr msg );
[219] void InteractiveMarkerClient::update ();
[274] void InteractiveMarkerClient::statusCb ( StatusT status, const std::string server_id, const std::string msg );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/single_client.cpp  ( 9 )
[67] void SingleClient::process (const visualization_msgs::InteractiveMarkerInit::ConstPtr msg, bool enable_autocomplete_transparency);
[144] void SingleClient::update ();
[174] void SingleClient::checkKeepAlive ();
[191] void SingleClient::checkInitFinished ();
[236] void SingleClient::transformInitMsgs ();
[257] void SingleClient::transformUpdateMsgs ( );
[282] void SingleClient::errorReset ( std::string error_msg );
[296] void SingleClient::pushUpdates ();
[310] bool SingleClient::isInitialized ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/menu_handler.cpp  ( 11 )
[48] MenuHandler::EntryHandle MenuHandler::insert ( const std::string title, const FeedbackCallback feedback_cb );
[94] bool MenuHandler::setVisible ( EntryHandle handle, bool visible );
[109] bool MenuHandler::setCheckState ( EntryHandle handle, CheckState check_state );
[124] bool MenuHandler::getCheckState ( EntryHandle handle, CheckState check_state ) const;
[140] bool MenuHandler::apply ( InteractiveMarkerServer server, const std::string marker_name );
[163] bool MenuHandler::pushMenuEntries ( std::vector<EntryHandle> handles_in, std::vector<visualization_msgs::MenuEntry> entries_out, EntryHandle parent_handle );
[193] bool MenuHandler::reApply ( InteractiveMarkerServer server );
[212] MenuHandler::EntryHandle MenuHandler::doInsert ( const std::string title, const uint8_t command_type, const std::string command, const FeedbackCallback feedback_cb );
[229] visualization_msgs::MenuEntry MenuHandler::makeEntry ( EntryContext context, EntryHandle handle, EntryHandle parent_handle );
[255] void MenuHandler::processFeedback ( const visualization_msgs::InteractiveMarkerFeedbackConstPtr feedback );
[266] bool MenuHandler::getTitle ( EntryHandle handle, std::string title ) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/interactive_marker_server.cpp  ( 15 )
[98] void InteractiveMarkerServer::spinThread ();
[111] void InteractiveMarkerServer::applyChanges ();
[193] bool InteractiveMarkerServer::erase ( const std::string name );
[206] void InteractiveMarkerServer::clear ();
[220] bool InteractiveMarkerServer::empty () const;
[226] std::size _t InteractiveMarkerServer::size() const;
[232] bool InteractiveMarkerServer::setPose ( const std::string name, const geometry_msgs::Pose pose, const std_msgs::Header header );
[270] bool InteractiveMarkerServer::setCallback ( const std::string name, FeedbackCallback feedback_cb, uint8_t feedback_type );
[326] void InteractiveMarkerServer::insert ( const visualization_msgs::InteractiveMarker int_marker );
[348] bool InteractiveMarkerServer::get ( std::string name, visualization_msgs::InteractiveMarker int_marker ) const;
[392] void InteractiveMarkerServer::publishInit ();
[411] void InteractiveMarkerServer::processFeedback ( const FeedbackConstPtr feedback );
[464] void InteractiveMarkerServer::keepAlive ();
[472] void InteractiveMarkerServer::publish ( visualization_msgs::InteractiveMarkerUpdate update );
[480] void InteractiveMarkerServer::doSetPose ( M_UpdateContext::iterator update_it, const std::string name, const geometry_msgs::Pose pose, const std_msgs::Header header );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/bursty_tf.cpp  ( 3 )
[75] void make6DofMarker ( bool fixed );
[133] void frameCallback (const ros::TimerEvent);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/client_test.cpp  ( 7 )
[85] void resetReceivedMsgs ();
[92] void updateCb ( const UpdateConstPtr msg );
[98] void initCb ( const InitConstPtr msg );
[106] void statusCb ( InteractiveMarkerClient::StatusT status, const std::string server_id, const std::string msg );
[113] void resetCb ( const std::string server_id );
[120] void test ( std::vector<Msg> messages );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/server_test.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/missing_tf.cpp  ( 3 )
[72] void make6DofMarker ( bool fixed );
[130] void frameCallback (const ros::TimerEvent);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/server_client_test.cpp  ( 7 )
[64] void resetReceivedMsgs ();
[75] void updateCb ( const UpdateConstPtr msg );
[82] void initCb ( const InitConstPtr msg );
[91] void statusCb ( InteractiveMarkerClient::StatusT status, const std::string server_id, const std::string msg );
[98] void resetCb ( const std::string server_id );
[105] void waitMsg ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/test_rgb_colors.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/utest.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/test_endian.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/utest2.cpp  ( 2 )
[47] bool isUnsigned (const std::string encoding);
[55] std::vector<std::string> getEncodings ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/test_compression.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/include/cv_bridge/rgb_colors.h  ( 1 )
[205] cv::Vec3d getRGBColor (const int color);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/include/cv_bridge/cv_bridge.h  ( 9 )
[102] sensor_msgs::ImagePtr toImageMsg () const;
[111] sensor_msgs::CompressedImagePtr toCompressedImageMsg (const Format dst_format = JPG) const;
[163] CvImagePtr toCvCopy (const sensor_msgs::ImageConstPtr source, const std::string encoding = std::string());
[214] CvImageConstPtr toCvShare (const sensor_msgs::ImageConstPtr source, const std::string encoding = std::string());
[248] CvImagePtr cvtColor (const CvImageConstPtr source, const std::string encoding);
[298] CvImageConstPtr cvtColorForDisplay (const CvImageConstPtr source, const std::string encoding = std::string(), const CvtColorForDisplayOptions options = CvtColorForDisplayOptions());
[305] int getCvType (const std::string encoding);
[325] char value () return MD5Sum<sensor_msgs::Image>::value() };
[408] void stream (Stream, const std::string, const cv_bridge::CvImage);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/cv_bridge.cpp  ( 12 )
[55] int depthStrToInt (const std::string depth);
[73] int getCvType (const std::string encoding);
[120] Encoding getEncoding (const std::string encoding);
[200] std::vector<int> getConversionCode (std::string src_encoding, std::string dst_encoding);
[250] cv::Mat matFromImage (const sensor_msgs::Image source);
[304] CvImagePtr toCvCopyImpl (const cv::Mat source, const std_msgs::Header src_header, const std::string src_encoding, const std::string dst_encoding);
[356] sensor_msgs::ImagePtr CvImage::toImageMsg () const;
[394] CvImagePtr toCvCopy (const sensor_msgs::ImageConstPtr source, const std::string encoding);
[408] CvImageConstPtr toCvShare (const sensor_msgs::ImageConstPtr source, const std::string encoding);
[431] CvImagePtr cvtColor (const CvImageConstPtr source, const std::string encoding);
[438] sensor_msgs::CompressedImagePtr CvImage::toCompressedImageMsg (const Format dst_format) const;
[541] CvImageConstPtr cvtColorForDisplay (const CvImageConstPtr source, const std::string encoding_out, const CvtColorForDisplayOptions options);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/module_opencv3.cpp  ( 2 )
[14] int failmsg (const char fmt, ...);
[364] int convert_to_CvMat2 (const PyObject o, cv::Mat m);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/rgb_colors.cpp  ( 1 )
[47] cv::Vec3d getRGBColor (const int color);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/module.hpp  ( 2 )
[32] int convert_to_CvMat2 (const PyObject o, cv::Mat m);
[38] int do_numpy_import ( );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/module_opencv2.cpp  ( 4 )
[43] int failmsg (const char fmt, ...);
[105] void allocate ( int dims, const int sizes, int type, int refcount, uchar datastart, uchar data, size_t step );
[107] void deallocate ( int refcount, uchar datastart, uchar data );
[154] int convert_to_CvMat2 (const PyObject o, cv::Mat m);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/pycompat.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/module.cpp  ( 3 )
[40] bp::object cvtColor2Wrap (bp::object obj_in, const std::string encoding_in, const std::string encoding_out);
[59] bp::object cvtColorForDisplayWrap (bp::object obj_in, const std::string encoding_in, const std::string encoding_out, bool do_dynamic_scaling = false, double min_image_value = 0.0, double max_image_value = 0.0);
[83] int CV_MAT_DEPTHWrap (int i);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/make.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/version_number.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/detail/test.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/detail/endian_compat.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/detail/_cassert.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/library/c/gnu.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/library/c/_prefix.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/ios.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/macos.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/android.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/dragonfly.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/bsdi.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/net.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/free.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/open.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/other/endian.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/core/scoped_enum.hpp  ( 1 )
[128] enum_type get_native_value_ () const BOOST_NOEXCEPT return enum_type(v_) } \;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/endian/conversion.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/endian/detail/intrinsic.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/auto_clean/arrow_clean.h  ( 13 )
[20] std::int8_t set_edge (const std::list<swr::control_types::PATH_ITEM> _edge);
[21] std::int8_t notify_plan (std::uint32_t _plan_length);
[26] std::int8_t start ();
[31] std::int8_t stop ();
[32] std::int8_t pause () return true };
[33] std::int8_t init ();
[46] bool search_near_point (OrientedPoint _point);
[53] std::int8_t isValid (const OrientedPoint _point);
[81] void _cal ();
[84] bool is_legal (const IntPoint _pt);
[86] std::uint32_t search (float theta, Point _cur_point, std::uint32_t _steps = 10);
[97] void goalCB (const geometry_msgs::PoseWithCovarianceStampedConstPtr msg);
[101] void publish_edge ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/auto_clean/autoc_state.h  ( 21 )
[118] void start ();
[120] void stop ();
[122] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/move_base/move_base.h  ( 36 )
[155] boost::shared_ptr<nav_core::BaseLocalPlanner> getLocalPlanner () return tc_ };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/state/event.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/state/eventtype.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/state/state.h  ( 9 )
[16] void start ()=0;
[19] void update ()=0;
[22] void stop ()=0;
[26] void set_event_func (std::function<EventDeal(const boost::shared_ptr<EventData>)> func);
[37] void set_state_id (const std::uint32_t _id);
[41] std::uint32_t get_state_id ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/state/context.h  ( 9 )
[40] bool set_father_id (std::uint32_t _child_id, std::uint32_t _father_id);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/error/error_handle_autoslow.h  ( 2 )
[12] bool pushErrorMessage (const ErrorMessage errorMessage);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/error/error_message_filter.h  ( 2 )
[16] bool pushErrorMessage (const ErrorMessage errorMessage);
[18] bool start ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/task_based/optimize_path.h  ( 8 )
[37] void deleteKernels ();
[38] void computeCaches ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/task_based/taskbp_state.h  ( 5 )
[39] void start ();
[41] void stop ();
[43] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/task_based/task_based_path.h  ( 16 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/task_based/defedge_state.h  ( 5 )
[37] void start ();
[39] void stop ();
[41] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/semantic/lift_map.h  ( 12 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/semantic/semantic_map.h  ( 9 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/semantic/pedestrian_map.h  ( 20 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/robot_status.h  ( 2 )
[10] void set_robot_status (swr::control_types::__ROBOT_STATUS _robot_status);
[11] std::uint8_t get_robot_status ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/error_state.h  ( 4 )
[25] void start ();
[27] void stop ();
[29] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/working_mode.h  ( 2 )
[10] void set_working_mode (swr::control_types::__WORK_MODE _working_mode);
[11] std::uint8_t get_working_mode ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/idle_state.h  ( 4 )
[27] void start ();
[29] void stop ();
[31] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/manual_state.h  ( 4 )
[25] void start ();
[27] void stop ();
[29] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/system_para.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/global_reaction.h  ( 4 )
[31] void start ();
[33] void stop ();
[35] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/gridlinetraversal.h  ( 2 )
[21] void GridLineTraversal::gridLineCore (IntPoint start, IntPoint end, GridLineTraversalLine line);
[105] void GridLineTraversal::gridLine (IntPoint start, IntPoint end, GridLineTraversalLine line);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/manual_ros.h  ( 43 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/nav_basetype.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/clstate.h  ( 7 )
[43] void start ();
[48] void stop () LOG(INFO) << "[NAV]-Start State stop" };
[50] void update ();
[72] void push (const boost::shared_ptr<EventData> data);
[73] void clear ();
[82] void pop_sendEvent ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/indemind_map.h  ( 20 )
[109] void startPubLocalCostmap2G ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/sensors.h  ( 51 )
[57] i18r_basetype::OrientedPoseStamp get_OrientedPoseStamp ();
[58] OrientedPoint get_OrientedPose ();
[60] Point get_velocity ();
[124] void reset_slam_res_counter ();
[125] void reset_static_map_counter ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/path_planning.h  ( 78 )
[29] void keeploop ();
[30] void system_run (const Control t);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/ultra_mapping.h  ( 13 )
[77] bool clear ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/nav.h  ( 77 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/advsensor.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/clean_robot.h  ( 73 )
[143] std::uint8_t emptySetRobotCliffStateCallback (const std::uint8_t cliffState) return true };
[173] void run ();
[410] void setText (const std::string textContent);
[504] void saveData ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/load_para.h  ( 3 )
[20] bool load_ros_para (std::string _config_path);
[23] bool get_para (const std::string father_name, const std::string child_name, T value, const T default_);
[47] std::uint8_t load_local_para (const std::string _config_path);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/bumper_state.h  ( 5 )
[45] void start ();
[47] void stop ();
[49] void update ();
[54] std::vector<geometry_msgs::Point> make_footprint (float _back_distance);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/basetype.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/check_footprint.h  ( 7 )
[13] void convexFillCells (const std::vector<IntPoint> polygon, std::vector<IntPoint> polygon_cells);
[18] std::int8_t footprintCost (double x, double y, double theta, const std::vector<geometry_msgs::Point> footprint_spec, costmap_2d::Costmap2DROS __costmap, double inscribed_radius = 0, double circumscribed_radius = 0);
[28] std::int8_t footprintCostBoost (double x, double y, double theta, costmap_2d::Costmap2DROS __costmap);
[30] bool get_rotation_footprint_cells (double x, double y, double theta, std::vector<IntPoint> _cells, costmap_2d::Costmap2DROS __costmap);
[31] void polygonOutlineCells (const std::vector<IntPoint> polygon, std::vector<IntPoint> polygon_cells);
[41] bool getCellsPoints (costmap_2d::Costmap2DROS __costmap);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/back_normal_state.h  ( 5 )
[37] void start ();
[39] void stop ();
[41] void update ();
[46] std::vector<geometry_msgs::Point> make_footprint (float _back_distance);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/cpu_check.h  ( 2 )
[20] void run ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/fun_id.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/nav_log.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/cliff_state.h  ( 5 )
[45] void start ();
[47] void stop ();
[49] void update ();
[54] std::vector<geometry_msgs::Point> make_footprint (float _back_distance);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/path_save.h  ( 3 )
[16] std::uint32_t save_path (const std::string _path, const std::list<swr::control_types::PATH_ITEM> _task_path);
[18] std::uint32_t load_path (const std::string _path, std::list<swr::control_types::PATH_ITEM> _task_path);
[19] std::int8_t is_legally (const std::list<swr::control_types::PATH_ITEM> _task_path);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/trap/surround_detect.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/back_charging/back_charging.h  ( 5 )
[74] void start ();
[76] void stop ();
[78] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/trpath_state.h  ( 7 )
[118] void start ();
[119] void stop ();
[120] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/execute.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/track_plan.h  ( 43 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/check_pedestrian.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/base_track_planner.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/get_path_virtual_wall.h  ( 10 )
[73] void deleteKernels ();
[74] void computeCaches ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/normal_tool.h  ( 25 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/to_scan_marker.h  ( 12 )
[82] void start ();
[84] void stop ();
[86] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/check_obstacle.h  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/map/point.h  ( 2 )
[122] point<T> absoluteSum (const orientedpoint<T,A> p1,const point<T> p2);
[129] bool operator  ()(const point<T> a, const point<T> b) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/map/map.h  ( 2 )
[69] void clear (std::int8_t item);
[75] Cell getMap () return buffer };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/map/gvalues.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/auto_track/auto_track.h  ( 32 )
[148] void tempTest (bool test);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/bumper_abnormal.h  ( 10 )
[48] void clearBuffer ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/curent_abnormal.h  ( 8 )
[31] void clearBuffer ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/abnormal.h  ( 7 )
[12] void setName (const std::string name) nameSensor = name };
[13] std::string getName () return nameSensor };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/abnormal_center.h  ( 10 )
[41] bool triggerFilter (const bool res, bool flag);
[42] void pubEventPause ();
[43] void pubBumperEvent ();
[44] bool getFlagRobotPoseFreqAbnormal ();
[45] bool getFlagVelocityFreqAbnormal ();
[46] bool getFlagLaserFreqAbnormal ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/overcurent_abnormal.h  ( 6 )
[21] bool pushErrorMessage (const ErrorMessage errorMessage);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/speeding_taskbp.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/tilt_observation.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/still.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/drop_observation.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/cliff_abnormal.h  ( 10 )
[46] void clearBuffer ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/narrow_abnormal.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/obs_intrusion_abnormal.h  ( 8 )
[35] void clearBuffer ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/ccpp_planner.h  ( 9 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/gyriform/PathSmoothing.h  ( 1 )
[43] int path_smooth (list<Point> path , int np_skip , float r_smooth_f, list<double> ldir);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/gyriform/AnnularCleaningPath.h  ( 15 )
[129] void resetFlag ();
[133] void deal_path (list<Point> p_path, list<Point> p_path_new);
[173] int count_set_type_8 (const Mat src , Point target_point , Point p_min , Point p_max , int num ,list<Point> list_out);
[174] int count_path_free_8 (const Mat src , Point target_point , Point p_min , Point p_max , int num ,list<Point> list_out);
[175] int count_type_8 (const Mat src , uint8_t type , Point p_min , Point p_max , int num ,list<Point> list_out);
[176] int Search_unclean (const Mat maze , Point startPoint , Point target_point);
[177] int Search_unclean_1 (const Mat maze , Point startPoint , Point target_point);
[178] int Search_type_8 (const Mat src , Point start_point , Point target_point , Point p_min , Point p_max , list<Point> list_out);
[182] void narrowpath (cv::Mat src, cv::Mat dst , list<Point> p_list);
[184] int addendpoint2path (list<Point> p_list);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/gyriform/gyriform_planner.h  ( 28 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/bow/bow.h  ( 11 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/bow/bow_planner.h  ( 62 )
[135] void AddDirectPath_ (geometry_msgs::PoseStamped start, geometry_msgs::PoseStamped end, std::vector<geometry_msgs::PoseStamped> connPoses);
[142] void RemoveGyriposeInObstacle_ (std::vector<GyriformPose> vGyriPoses, std::vector<GyriformPose> freeGyriposes);
[154] void sendAutoPath ( std::list<swr::control_types::PATH_ITEM> path_items);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/bow/edge_def.h  ( 15 )
[43] bool IsLegial_Old (double mx, double my);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/freq_check.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/cal_grids.h  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/cal_enclose_area.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/butterworth_filter.h  ( 8 )
[30] void int_diff_filter (double X);
[36] void least_squares_filter (double T, int N);
[37] void moving_average_filter (int N);
[38] void butterworth (double T, double cutoff, int N);
[39] void butterDifferentiator (double T, double cutoff, int N);
[42] std::vector<double> applyFilter (const std::vector<double> X);
[47] double differentiator (double input);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/LoopThread.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/narrow_check.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/Rate.h  ( 2 )
[33] void interrupt ();
[40] int sleep ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/clean_area.h  ( 11 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/time.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/cal_time.h  ( 6 )
[31] float getWorkTime ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/rem_rtpath.h  ( 8 )
[28] void run ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/operate_water_pump.h  ( 7 )
[32] void run ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/SysOper.h  ( 1 )
[192] char getNItems (const char buffer, unsigned int N);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_equipment/clean_eqpt.h  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_equipment/finish_operate.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_equipment/brush_operate.h  ( 5 )
[38] void start ();
[39] void stop ();
[40] void update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/controller/auto_slow.h  ( 20 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/controller/vel_control.h  ( 21 )
[38] void setConfigVelocity (double normalMaxVel, double sportMaxVel);
[39] void enableSportSpeed ();
[40] void enableNormalSpeed ();
[41] double getSportSpeed ();
[42] double getNormalSpeed ();
[103] void velCallback (geometry_msgs::TwistConstPtr vel);
[105] Point velFilter (const Point vel);
[107] void velRun ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/controller/emergency_slow.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/global_plan/goal_points.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/global_plan/global_plan.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/sensors.cpp  ( 43 )
[91] i18r_basetype::OrientedPoseStamp sensors::get_OrientedPoseStamp ();
[110] OrientedPoint sensors::get_OrientedPose ();
[134] Point sensors::get_velocity ();
[501] void sensors::reset_slam_res_counter ();
[508] void sensors::reset_static_map_counter ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/advsensor.cpp  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/indemind_map.cpp  ( 21 )
[208] nav_msgs::OccupancyGrid::Ptr occMap (new nav_msgs::OccupancyGrid);
[282] map_msgs::OccupancyGridUpdatePtr mapUpdate (new map_msgs::OccupancyGridUpdate);
[283] costmap_2d::PubMapPtr mapStatic (new costmap_2d::PubMap);
[571] void IndemindMap::startPubLocalCostmap2G ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clean_robot.cpp  ( 32 )
[324] void clean_robot::run ();
[753] void clean_robot::setText (const string textContent);
[759] void clean_robot::saveData ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/nav.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/global_reaction.cpp  ( 4 )
[19] void GlobalReactionState::start () NAVLOG(INFO) << "GlobalReactionState start" << std::endl };
[21] void GlobalReactionState::stop () NAVLOG(INFO) << "GlobalReactionState end" << std::endl };
[23] void GlobalReactionState::update () };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ultra_mapping.cpp  ( 14 )
[178] bool UltraMapping::clear ();
[211] OrientedPoint ultraPose ( robotPose.x + sensorPose.x std::cos(robotPose.theta) - sensorPose.y std::sin(robotPose.theta), robotPose.y + sensorPose.x std::sin(robotPose.theta) + sensorPose.y std::cos(robotPose.theta), theta);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/path_planning.cpp  ( 41 )
[38] void Control::keeploop ();
[460] void Control::system_run (const Control t);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/manual_ros.cpp  ( 42 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clstate.cpp  ( 5 )
[56] void clState::update ();
[62] void clState::push (const boost::shared_ptr<EventData> data);
[68] void clState::clear ();
[77] void clState::pop_sendEvent ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/auto_clean/autoc_state.cpp  ( 20 )
[29] void AutoCState::start () NAVLOG(INFO) << "AutoCState start" };
[31] void AutoCState::stop () NAVLOG(INFO) << "AutoCState end" };
[421] void AutoCState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/auto_clean/arrow_clean.cpp  ( 7 )
[174] void arrow_clean::goalCB (const geometry_msgs::PoseWithCovarianceStampedConstPtr msg);
[207] void arrow_clean::_cal ();
[223] bool arrow_clean::is_legal (const IntPoint _pt);
[262] uint32_t arrow_clean::search (float theta, Point _cur_point, uint32_t _steps) };
[264] bool arrow_clean::search_near_point (OrientedPoint _point);
[380] std::int8_t arrow_clean::isValid (const OrientedPoint _point);
[409] void arrow_clean::publish_edge ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/move_base/move_base.cpp  ( 34 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/state/state.cpp  ( 4 )
[7] void State::set_event_func (std::function<EventDeal(const boost::shared_ptr<EventData>)> func);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/state/context.cpp  ( 9 )
[34] bool Context::set_father_id (uint32_t _child_id, uint32_t _father_id);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/error/error_message_filter.cpp  ( 1 )
[8] bool ErrorMessageFilter::pushErrorMessage (const nav_error::ErrorMessage errorMessage);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/error/error_handle_autoslow.cpp  ( 2 )
[11] bool ErrorHandleAutoSlow::pushErrorMessage (const ErrorMessage errorMessage);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/task_based/taskbp_state.cpp  ( 5 )
[16] void TaskbpState::start () NAVLOG(INFO) << "TaskbpState start" };
[18] void TaskbpState::stop () NAVLOG(INFO) << "TaskbpState end" };
[21] void TaskbpState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/task_based/task_based_path.cpp  ( 13 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/task_based/optimize_path.cpp  ( 10 )
[229] void OptimizePath::deleteKernels ();
[252] void OptimizePath::computeCaches ();
[286] void OptimizePath::enqueue (unsigned int index, unsigned int mx, unsigned int my, unsigned int src_x, unsigned int src_y);
[302] double OptimizePath::distanceLookup (int mx, int my, int src_x, int src_y);
[309] char OptimizePath::computeCost (double distance) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/task_based/defedge_state.cpp  ( 5 )
[16] void DefEdgeState::start () NAVLOG(INFO) << "DefEdgeState start" };
[18] void DefEdgeState::stop () NAVLOG(INFO) << "DefEdgeState end" };
[21] void DefEdgeState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/semantic/semantic_map.cpp  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/semantic/pedestrian_map.cpp  ( 20 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/semantic/lift_map.cpp  ( 9 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/sample/loopTrpath.cpp  ( 4 )
[18] void keeploop (std::shared_ptr<PathPlanning::Nav> cr);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/sample/main.cpp  ( 2 )
[11] void keeploop (std::shared_ptr<PathPlanning::Nav> cr) };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/sample/loopAutoc.cpp  ( 4 )
[18] void keeploop (std::shared_ptr<PathPlanning::Nav> cr);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/error_state.cpp  ( 4 )
[14] void ErrorState::start () NAVLOG(INFO) << "ErrorState start" };
[16] void ErrorState::stop () NAVLOG(INFO) << "ErrorState end" };
[19] void ErrorState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/idle_state.cpp  ( 4 )
[15] void IdleState::start ();
[25] void IdleState::stop ();
[33] void IdleState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/working_mode.cpp  ( 2 )
[6] void working_mode::set_working_mode (swr::control_types::__WORK_MODE _working_mode);
[41] uint8_t working_mode::get_working_mode () return m_working_mode };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/robot_status.cpp  ( 2 )
[6] void robot_status::set_robot_status (swr::control_types::__ROBOT_STATUS _robot_status);
[13] uint8_t robot_status::get_robot_status () return m_robot_status };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/manual_state.cpp  ( 4 )
[13] void ManualState::start () NAVLOG(INFO) << "ManualState start" };
[15] void ManualState::stop () NAVLOG(INFO) << "ManualState end" };
[18] void ManualState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/cliff_state.cpp  ( 5 )
[17] void CliffState::start ();
[23] void CliffState::stop ();
[29] void CliffState::update ();
[197] std::vector<geometry_msgs::Point> CliffState::make_footprint (float _back_distance);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/path_save.cpp  ( 2 )
[7] std::uint32_t Path_Saver::save_path (const std::string _path, const std::list<swr::control_types::PATH_ITEM> _task_path);
[46] std::uint32_t Path_Saver::load_path (const std::string _path, std::list<swr::control_types::PATH_ITEM> _task_path);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/check_footprint.cpp  ( 5 )
[16] std::int8_t CheckFootprint::footprintCost (double x, double y, double theta, const std::vector<geometry_msgs::Point> footprint_spec, costmap_2d::Costmap2DROS __costmap, double inscribed_radius, double circumscribed_radius);
[294] bool CheckFootprint::get_rotation_footprint_cells (double x, double y, double theta, std::vector<IntPoint> _cells, costmap_2d::Costmap2DROS __costmap);
[332] void CheckFootprint::convexFillCells (const std::vector<IntPoint> polygon, std::vector<IntPoint> polygon_cells);
[400] void CheckFootprint::polygonOutlineCells (const std::vector<IntPoint> polygon, std::vector<IntPoint> polygon_cells);
[426] bool CheckFootprint::getCellsPoints (costmap_2d::Costmap2DROS __costmap);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/cpu_check.cpp  ( 2 )
[34] void CPUCheck::run ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/bumper_state.cpp  ( 5 )
[17] void BumperState::start ();
[24] void BumperState::stop ();
[30] void BumperState::update ();
[186] std::vector<geometry_msgs::Point> BumperState::make_footprint (float _back_distance);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/back_normal_state.cpp  ( 5 )
[17] void BackNormalState::start ();
[23] void BackNormalState::stop ();
[29] void BackNormalState::update ();
[202] std::vector<geometry_msgs::Point> BackNormalState::make_footprint (float _back_distance);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/load_para.cpp  ( 3 )
[7] bool navi_para::LoadPara::load_ros_para (std::string _config_path);
[81] bool navi_para::LoadPara::if_load_sucess () return m_if_init };
[84] uint8_t navi_para::LoadPara::load_local_para (const std::string _config_path);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/trap/surround_detect.cpp  ( 9 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/back_charging/back_charging.cpp  ( 5 )
[30] void BackChargingState::start ();
[35] void BackChargingState::stop () NAVLOG(INFO) << "BackChargingState stop" };
[38] void BackChargingState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/normal_tool.cpp  ( 24 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/base_track_planner.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/trpath_state.cpp  ( 7 )
[22] void TrPathState::start () NAVLOG(INFO) << "TrPath State Start" };
[24] void TrPathState::stop () NAVLOG(INFO) << "TrPath State Stop" };
[29] void TrPathState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/get_path_virtual_wall.cpp  ( 15 )
[260] void GetPathVirtualWall::deleteKernels ();
[283] void GetPathVirtualWall::computeCaches ();
[318] void GetPathVirtualWall::enqueue (unsigned int index, unsigned int mx, unsigned int my, unsigned int src_x, unsigned int src_y);
[334] double GetPathVirtualWall::distanceLookup (int mx, int my, int src_x, int src_y);
[341] char GetPathVirtualWall::computeCost (double distance) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/execute.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/check_obstacle.cpp  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/to_scan_marker.cpp  ( 12 )
[23] void ToScanMarkerState::start ();
[28] void ToScanMarkerState::stop () NAVLOG(INFO) << "To scan marker state stop" };
[66] void ToScanMarkerState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/track_plan.cpp  ( 41 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/check_pedestrian.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/auto_track/auto_track.cpp  ( 31 )
[478] void auto_track::tempTest (bool test);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/abnormal_center.cpp  ( 10 )
[142] bool AbnormalCenter::triggerFilter (const bool res, bool flag);
[167] void AbnormalCenter::pubEventPause ();
[177] void AbnormalCenter::pubBumperEvent ();
[186] bool AbnormalCenter::getFlagRobotPoseFreqAbnormal () return abnormalFlagRobotPose };
[188] bool AbnormalCenter::getFlagVelocityFreqAbnormal () return abnormalFlagVelocity };
[190] bool AbnormalCenter::getFlagLaserFreqAbnormal () return abnormalFlagLaser };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/bumper_abnormal.cpp  ( 10 )
[178] void BumperAbnormal::clearBuffer ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/narrow_abnromal.cpp  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/still.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/speeding_taskbp.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/obs_intrusion_abnormal.cpp  ( 8 )
[118] void ObsIntrusionAbnormal::clearBuffer ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/cliff_abnormal.cpp  ( 10 )
[178] void CliffAbnormal::clearBuffer ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/drop_observation.cpp  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/overcurent_abnormal.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/curent_abnormal.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/tilt_observation.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/ccpp_planner.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/gyriform/PathSmoothing.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/gyriform/AnnularCleaningPath.cpp  ( 14 )
[1692] void AnnularCleaningPath::deal_path (list<Point> p_path, list<Point> p_path_new);
[2266] int AnnularCleaningPath::count_set_type_8 (const Mat src, Point target_point, Point p_min, Point p_max, int num, list<Point> list_out);
[2410] int AnnularCleaningPath::count_path_free_8 (const Mat src, Point target_point, Point p_min, Point p_max, int num, list<Point> list_out);
[2562] int AnnularCleaningPath::count_type_8 (const Mat src, uint8_t type, Point p_min, Point p_max, int num, list<Point> list_out);
[2722] int AnnularCleaningPath::Search_unclean (const Mat maze, Point startPoint, Point target_point);
[2969] int AnnularCleaningPath::Search_unclean_1 (const Mat maze, Point startPoint, Point target_point);
[3387] int AnnularCleaningPath::Search_type_8 (const Mat src, Point start_point, Point target_point, Point p_min, Point p_max, list<Point> list_out);
[3953] void AnnularCleaningPath::narrowpath (cv::Mat src, cv::Mat dst, list<Point> p_list);
[4188] int AnnularCleaningPath::addendpoint2path (list<Point> p_list);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/gyriform/gyriform_planner.cpp  ( 24 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/bow/bow_planner.cpp  ( 59 )
[1428] void BowPlanner::sendAutoPath ( std::list<swr::control_types::PATH_ITEM> path_items_);
[3761] void BowPlanner::AddDirectPath_ (geometry_msgs::PoseStamped start, geometry_msgs::PoseStamped end, std::vector<geometry_msgs::PoseStamped> connPoses);
[4108] void BowPlanner::RemoveGyriposeInObstacle_ (std::vector<GyriformPose> vGyriPoses, std::vector<GyriformPose> freeGyriposes);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/bow/bow.cpp  ( 11 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/bow/edge_def.cpp  ( 15 )
[722] bool EdgeDef::IsLegial_Old (double mx, double my);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/narrow_check.cpp  ( 7 )
[134] double NarrowCheck::normalizeTheta (double theta);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/clean_area.cpp  ( 11 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/cal_grids.cpp  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/operate_water_pump.cpp  ( 5 )
[38] void OperateWaterPump::run ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/cal_time.cpp  ( 6 )
[59] float CalTime::getWorkTime ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/butterworth_filter.cpp  ( 9 )
[21] void ButterworthFilter::int_diff_filter (double X);
[30] void ButterworthFilter::clear_filter ();
[43] void ButterworthFilter::least_squares_filter (double T, int N);
[80] void ButterworthFilter::moving_average_filter (int N);
[100] void ButterworthFilter::butterworth (double T, double cutoff, int N);
[158] double ButterworthFilter::applyFilter (double X);
[179] void ButterworthFilter::butterDifferentiator (double T, double cutoff, int N);
[236] double ButterworthFilter::differentiator (double X);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/freq_check.cpp  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/rem_rtpath.cpp  ( 8 )
[101] void RemRtPath::run ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clean_equipment/brush_operate.cpp  ( 5 )
[12] void BrushOperateState::start () NAVLOG(INFO) << "Brush Operate State Start" };
[14] void BrushOperateState::stop () NAVLOG(INFO) << "Brush Operate State Stop" };
[17] void BrushOperateState::update ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clean_equipment/finish_operate.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clean_equipment/clean_eqpt.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/controller/auto_slow.cpp  ( 21 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/controller/vel_control.cpp  ( 18 )
[238] void vel_control::setConfigVelocity (double normalMaxVel, double sportMaxVel);
[245] void vel_control::enableSportSpeed ();
[252] void vel_control::enableNormalSpeed ();
[259] double vel_control::getSportSpeed ();
[265] double vel_control::getNormalSpeed ();
[271] void vel_control::velCallback (geometry_msgs::TwistConstPtr vel);
[512] Point vel_control::velFilter (const Point vel);
[566] void vel_control::velRun ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/controller/emergency_slow.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/global_plan/global_plan.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/clean_robot/MoveBaseConfig.h  ( 26 )
[48] void clamp (MoveBaseConfig config, const MoveBaseConfig max, const MoveBaseConfig min) const = 0;
[49] void calcLevel (uint32_t level, const MoveBaseConfig config1, const MoveBaseConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, MoveBaseConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const MoveBaseConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, MoveBaseConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const MoveBaseConfig config) const = 0;
[54] void getValue (const MoveBaseConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, MoveBaseConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (MoveBaseConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[318] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[362] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[384] void __toServer__ (const ros::NodeHandle nh) const;
[391] void __fromServer__ (const ros::NodeHandle nh);
[409] void __clamp__ ();
[418] uint32_t __level__ (const MoveBaseConfig config) const;
[426] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[427] MoveBaseConfig __getDefault__ ();
[428] MoveBaseConfig __getMax__ ();
[429] MoveBaseConfig __getMin__ ();
[430] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[431] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[434] MoveBaseConfigStatics __get_statics__ ();
[635] MoveBaseConfigStatics get_instance ();
[682] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToLinesDBSRANSACConfig.h  ( 26 )
[48] void clamp (CostmapToLinesDBSRANSACConfig config, const CostmapToLinesDBSRANSACConfig max, const CostmapToLinesDBSRANSACConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToLinesDBSRANSACConfig config1, const CostmapToLinesDBSRANSACConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToLinesDBSRANSACConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToLinesDBSRANSACConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToLinesDBSRANSACConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToLinesDBSRANSACConfig config) const = 0;
[54] void getValue (const CostmapToLinesDBSRANSACConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToLinesDBSRANSACConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToLinesDBSRANSACConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[294] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[338] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[360] void __toServer__ (const ros::NodeHandle nh) const;
[367] void __fromServer__ (const ros::NodeHandle nh);
[385] void __clamp__ ();
[394] uint32_t __level__ (const CostmapToLinesDBSRANSACConfig config) const;
[402] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[403] CostmapToLinesDBSRANSACConfig __getDefault__ ();
[404] CostmapToLinesDBSRANSACConfig __getMax__ ();
[405] CostmapToLinesDBSRANSACConfig __getMin__ ();
[406] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[407] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[410] CostmapToLinesDBSRANSACConfigStatics __get_statics__ ();
[551] CostmapToLinesDBSRANSACConfigStatics get_instance ();
[598] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToDynamicObstaclesConfig.h  ( 26 )
[48] void clamp (CostmapToDynamicObstaclesConfig config, const CostmapToDynamicObstaclesConfig max, const CostmapToDynamicObstaclesConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToDynamicObstaclesConfig config1, const CostmapToDynamicObstaclesConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToDynamicObstaclesConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToDynamicObstaclesConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToDynamicObstaclesConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToDynamicObstaclesConfig config) const = 0;
[54] void getValue (const CostmapToDynamicObstaclesConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToDynamicObstaclesConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToDynamicObstaclesConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[354] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[398] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[420] void __toServer__ (const ros::NodeHandle nh) const;
[427] void __fromServer__ (const ros::NodeHandle nh);
[445] void __clamp__ ();
[454] uint32_t __level__ (const CostmapToDynamicObstaclesConfig config) const;
[462] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[463] CostmapToDynamicObstaclesConfig __getDefault__ ();
[464] CostmapToDynamicObstaclesConfig __getMax__ ();
[465] CostmapToDynamicObstaclesConfig __getMin__ ();
[466] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[467] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[470] CostmapToDynamicObstaclesConfigStatics __get_statics__ ();
[761] CostmapToDynamicObstaclesConfigStatics get_instance ();
[808] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/ObstacleMsg.h  ( 1 )
[158] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToLinesDBSMCCHConfig.h  ( 26 )
[48] void clamp (CostmapToLinesDBSMCCHConfig config, const CostmapToLinesDBSMCCHConfig max, const CostmapToLinesDBSMCCHConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToLinesDBSMCCHConfig config1, const CostmapToLinesDBSMCCHConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToLinesDBSMCCHConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToLinesDBSMCCHConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToLinesDBSMCCHConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToLinesDBSMCCHConfig config) const = 0;
[54] void getValue (const CostmapToLinesDBSMCCHConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToLinesDBSMCCHConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToLinesDBSMCCHConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[282] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[326] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[348] void __toServer__ (const ros::NodeHandle nh) const;
[355] void __fromServer__ (const ros::NodeHandle nh);
[373] void __clamp__ ();
[382] uint32_t __level__ (const CostmapToLinesDBSMCCHConfig config) const;
[390] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[391] CostmapToLinesDBSMCCHConfig __getDefault__ ();
[392] CostmapToLinesDBSMCCHConfig __getMax__ ();
[393] CostmapToLinesDBSMCCHConfig __getMin__ ();
[394] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[395] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[398] CostmapToLinesDBSMCCHConfigStatics __get_statics__ ();
[509] CostmapToLinesDBSMCCHConfigStatics get_instance ();
[556] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToPolygonsDBSConcaveHullConfig.h  ( 26 )
[48] void clamp (CostmapToPolygonsDBSConcaveHullConfig config, const CostmapToPolygonsDBSConcaveHullConfig max, const CostmapToPolygonsDBSConcaveHullConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToPolygonsDBSConcaveHullConfig config1, const CostmapToPolygonsDBSConcaveHullConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToPolygonsDBSConcaveHullConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToPolygonsDBSConcaveHullConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToPolygonsDBSConcaveHullConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToPolygonsDBSConcaveHullConfig config) const = 0;
[54] void getValue (const CostmapToPolygonsDBSConcaveHullConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToPolygonsDBSConcaveHullConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToPolygonsDBSConcaveHullConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[274] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[318] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[340] void __toServer__ (const ros::NodeHandle nh) const;
[347] void __fromServer__ (const ros::NodeHandle nh);
[365] void __clamp__ ();
[374] uint32_t __level__ (const CostmapToPolygonsDBSConcaveHullConfig config) const;
[382] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[383] CostmapToPolygonsDBSConcaveHullConfig __getDefault__ ();
[384] CostmapToPolygonsDBSConcaveHullConfig __getMax__ ();
[385] CostmapToPolygonsDBSConcaveHullConfig __getMin__ ();
[386] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[387] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[390] CostmapToPolygonsDBSConcaveHullConfigStatics __get_statics__ ();
[481] CostmapToPolygonsDBSConcaveHullConfigStatics get_instance ();
[528] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToPolygonsDBSMCCHConfig.h  ( 26 )
[48] void clamp (CostmapToPolygonsDBSMCCHConfig config, const CostmapToPolygonsDBSMCCHConfig max, const CostmapToPolygonsDBSMCCHConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToPolygonsDBSMCCHConfig config1, const CostmapToPolygonsDBSMCCHConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToPolygonsDBSMCCHConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToPolygonsDBSMCCHConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToPolygonsDBSMCCHConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToPolygonsDBSMCCHConfig config) const = 0;
[54] void getValue (const CostmapToPolygonsDBSMCCHConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToPolygonsDBSMCCHConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToPolygonsDBSMCCHConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[270] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[314] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[336] void __toServer__ (const ros::NodeHandle nh) const;
[343] void __fromServer__ (const ros::NodeHandle nh);
[361] void __clamp__ ();
[370] uint32_t __level__ (const CostmapToPolygonsDBSMCCHConfig config) const;
[378] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[379] CostmapToPolygonsDBSMCCHConfig __getDefault__ ();
[380] CostmapToPolygonsDBSMCCHConfig __getMax__ ();
[381] CostmapToPolygonsDBSMCCHConfig __getMin__ ();
[382] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[383] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[386] CostmapToPolygonsDBSMCCHConfigStatics __get_statics__ ();
[467] CostmapToPolygonsDBSMCCHConfigStatics get_instance ();
[514] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/ObstacleArrayMsg.h  ( 1 )
[132] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/DynamicStaticPluginConfig.h  ( 26 )
[48] void clamp (DynamicStaticPluginConfig config, const DynamicStaticPluginConfig max, const DynamicStaticPluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const DynamicStaticPluginConfig config1, const DynamicStaticPluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, DynamicStaticPluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const DynamicStaticPluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, DynamicStaticPluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const DynamicStaticPluginConfig config) const = 0;
[54] void getValue (const DynamicStaticPluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, DynamicStaticPluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (DynamicStaticPluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[266] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[310] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[332] void __toServer__ (const ros::NodeHandle nh) const;
[339] void __fromServer__ (const ros::NodeHandle nh);
[357] void __clamp__ ();
[366] uint32_t __level__ (const DynamicStaticPluginConfig config) const;
[374] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[375] DynamicStaticPluginConfig __getDefault__ ();
[376] DynamicStaticPluginConfig __getMax__ ();
[377] DynamicStaticPluginConfig __getMin__ ();
[378] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[379] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[382] DynamicStaticPluginConfigStatics __get_statics__ ();
[453] DynamicStaticPluginConfigStatics get_instance ();
[500] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/GenericPluginConfig.h  ( 26 )
[48] void clamp (GenericPluginConfig config, const GenericPluginConfig max, const GenericPluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const GenericPluginConfig config1, const GenericPluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, GenericPluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const GenericPluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, GenericPluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const GenericPluginConfig config) const = 0;
[54] void getValue (const GenericPluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, GenericPluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (GenericPluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[258] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[302] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[324] void __toServer__ (const ros::NodeHandle nh) const;
[331] void __fromServer__ (const ros::NodeHandle nh);
[349] void __clamp__ ();
[358] uint32_t __level__ (const GenericPluginConfig config) const;
[366] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[367] GenericPluginConfig __getDefault__ ();
[368] GenericPluginConfig __getMax__ ();
[369] GenericPluginConfig __getMin__ ();
[370] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[371] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[374] GenericPluginConfigStatics __get_statics__ ();
[425] GenericPluginConfigStatics get_instance ();
[472] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/PubMap.h  ( 1 )
[161] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/InflationPluginConfig.h  ( 26 )
[48] void clamp (InflationPluginConfig config, const InflationPluginConfig max, const InflationPluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const InflationPluginConfig config1, const InflationPluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, InflationPluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const InflationPluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, InflationPluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const InflationPluginConfig config) const = 0;
[54] void getValue (const InflationPluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, InflationPluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (InflationPluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[274] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[318] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[340] void __toServer__ (const ros::NodeHandle nh) const;
[347] void __fromServer__ (const ros::NodeHandle nh);
[365] void __clamp__ ();
[374] uint32_t __level__ (const InflationPluginConfig config) const;
[382] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[383] InflationPluginConfig __getDefault__ ();
[384] InflationPluginConfig __getMax__ ();
[385] InflationPluginConfig __getMin__ ();
[386] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[387] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[390] InflationPluginConfigStatics __get_statics__ ();
[481] InflationPluginConfigStatics get_instance ();
[528] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/Costmap2DConfig.h  ( 26 )
[48] void clamp (Costmap2DConfig config, const Costmap2DConfig max, const Costmap2DConfig min) const = 0;
[49] void calcLevel (uint32_t level, const Costmap2DConfig config1, const Costmap2DConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, Costmap2DConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const Costmap2DConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, Costmap2DConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const Costmap2DConfig config) const = 0;
[54] void getValue (const Costmap2DConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, Costmap2DConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (Costmap2DConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[298] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[342] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[364] void __toServer__ (const ros::NodeHandle nh) const;
[371] void __fromServer__ (const ros::NodeHandle nh);
[389] void __clamp__ ();
[398] uint32_t __level__ (const Costmap2DConfig config) const;
[406] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[407] Costmap2DConfig __getDefault__ ();
[408] Costmap2DConfig __getMax__ ();
[409] Costmap2DConfig __getMin__ ();
[410] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[411] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[414] Costmap2DConfigStatics __get_statics__ ();
[565] Costmap2DConfigStatics get_instance ();
[612] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/ObstaclePluginConfig.h  ( 26 )
[48] void clamp (ObstaclePluginConfig config, const ObstaclePluginConfig max, const ObstaclePluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const ObstaclePluginConfig config1, const ObstaclePluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, ObstaclePluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const ObstaclePluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, ObstaclePluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const ObstaclePluginConfig config) const = 0;
[54] void getValue (const ObstaclePluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, ObstaclePluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (ObstaclePluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[270] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[314] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[336] void __toServer__ (const ros::NodeHandle nh) const;
[343] void __fromServer__ (const ros::NodeHandle nh);
[361] void __clamp__ ();
[370] uint32_t __level__ (const ObstaclePluginConfig config) const;
[378] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[379] ObstaclePluginConfig __getDefault__ ();
[380] ObstaclePluginConfig __getMax__ ();
[381] ObstaclePluginConfig __getMin__ ();
[382] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[383] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[386] ObstaclePluginConfigStatics __get_statics__ ();
[467] ObstaclePluginConfigStatics get_instance ();
[514] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/CliffPluginConfig.h  ( 26 )
[48] void clamp (CliffPluginConfig config, const CliffPluginConfig max, const CliffPluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CliffPluginConfig config1, const CliffPluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CliffPluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CliffPluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CliffPluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CliffPluginConfig config) const = 0;
[54] void getValue (const CliffPluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CliffPluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CliffPluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[270] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[314] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[336] void __toServer__ (const ros::NodeHandle nh) const;
[343] void __fromServer__ (const ros::NodeHandle nh);
[361] void __clamp__ ();
[370] uint32_t __level__ (const CliffPluginConfig config) const;
[378] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[379] CliffPluginConfig __getDefault__ ();
[380] CliffPluginConfig __getMax__ ();
[381] CliffPluginConfig __getMin__ ();
[382] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[383] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[386] CliffPluginConfigStatics __get_statics__ ();
[467] CliffPluginConfigStatics get_instance ();
[514] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/teb_local_planner/TrajectoryPointMsg.h  ( 1 )
[145] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/teb_local_planner/TebLocalPlannerReconfigureConfig.h  ( 26 )
[48] void clamp (TebLocalPlannerReconfigureConfig config, const TebLocalPlannerReconfigureConfig max, const TebLocalPlannerReconfigureConfig min) const = 0;
[49] void calcLevel (uint32_t level, const TebLocalPlannerReconfigureConfig config1, const TebLocalPlannerReconfigureConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, TebLocalPlannerReconfigureConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const TebLocalPlannerReconfigureConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, TebLocalPlannerReconfigureConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const TebLocalPlannerReconfigureConfig config) const = 0;
[54] void getValue (const TebLocalPlannerReconfigureConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, TebLocalPlannerReconfigureConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (TebLocalPlannerReconfigureConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[920] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[964] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[986] void __toServer__ (const ros::NodeHandle nh) const;
[993] void __fromServer__ (const ros::NodeHandle nh);
[1011] void __clamp__ ();
[1020] uint32_t __level__ (const TebLocalPlannerReconfigureConfig config) const;
[1028] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[1029] TebLocalPlannerReconfigureConfig __getDefault__ ();
[1030] TebLocalPlannerReconfigureConfig __getMax__ ();
[1031] TebLocalPlannerReconfigureConfig __getMin__ ();
[1032] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[1033] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[1036] TebLocalPlannerReconfigureConfigStatics __get_statics__ ();
[2051] TebLocalPlannerReconfigureConfigStatics get_instance ();
[2098] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/teb_local_planner/TrajectoryMsg.h  ( 1 )
[132] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/teb_local_planner/FeedbackMsg.h  ( 1 )
[145] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/global_planner/GlobalPlannerConfig.h  ( 26 )
[48] void clamp (GlobalPlannerConfig config, const GlobalPlannerConfig max, const GlobalPlannerConfig min) const = 0;
[49] void calcLevel (uint32_t level, const GlobalPlannerConfig config1, const GlobalPlannerConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, GlobalPlannerConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const GlobalPlannerConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, GlobalPlannerConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const GlobalPlannerConfig config) const = 0;
[54] void getValue (const GlobalPlannerConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, GlobalPlannerConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (GlobalPlannerConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[278] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[322] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[344] void __toServer__ (const ros::NodeHandle nh) const;
[351] void __fromServer__ (const ros::NodeHandle nh);
[369] void __clamp__ ();
[378] uint32_t __level__ (const GlobalPlannerConfig config) const;
[386] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[387] GlobalPlannerConfig __getDefault__ ();
[388] GlobalPlannerConfig __getMax__ ();
[389] GlobalPlannerConfig __getMin__ ();
[390] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[391] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[394] GlobalPlannerConfigStatics __get_statics__ ();
[495] GlobalPlannerConfigStatics get_instance ();
[542] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/BumperEvent.h  ( 1 )
[164] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/CliffEvent.h  ( 1 )
[176] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/MotorPower.h  ( 1 )
[140] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/WheelDropEvent.h  ( 1 )
[158] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/KeyboardInput.h  ( 1 )
[170] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/SetCostmap.h  ( 1 )
[42] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/SetCostmapRequest.h  ( 1 )
[136] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/MakeNavPlan.h  ( 1 )
[42] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/SetCostmapResponse.h  ( 1 )
[108] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/MakeNavPlanRequest.h  ( 1 )
[132] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/MakeNavPlanResponse.h  ( 1 )
[137] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/base_local_planner/Position2DInt.h  ( 1 )
[130] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/base_local_planner/BaseLocalPlannerConfig.h  ( 26 )
[48] void clamp (BaseLocalPlannerConfig config, const BaseLocalPlannerConfig max, const BaseLocalPlannerConfig min) const = 0;
[49] void calcLevel (uint32_t level, const BaseLocalPlannerConfig config1, const BaseLocalPlannerConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, BaseLocalPlannerConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const BaseLocalPlannerConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, BaseLocalPlannerConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const BaseLocalPlannerConfig config) const = 0;
[54] void getValue (const BaseLocalPlannerConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, BaseLocalPlannerConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (BaseLocalPlannerConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[366] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[410] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[432] void __toServer__ (const ros::NodeHandle nh) const;
[439] void __fromServer__ (const ros::NodeHandle nh);
[457] void __clamp__ ();
[466] uint32_t __level__ (const BaseLocalPlannerConfig config) const;
[474] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[475] BaseLocalPlannerConfig __getDefault__ ();
[476] BaseLocalPlannerConfig __getMax__ ();
[477] BaseLocalPlannerConfig __getMin__ ();
[478] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[479] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[482] BaseLocalPlannerConfigStatics __get_statics__ ();
[803] BaseLocalPlannerConfigStatics get_instance ();
[850] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/nav_basetype.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/MoveBaseConfig.h  ( 26 )
[48] void clamp (MoveBaseConfig config, const MoveBaseConfig max, const MoveBaseConfig min) const = 0;
[49] void calcLevel (uint32_t level, const MoveBaseConfig config1, const MoveBaseConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, MoveBaseConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const MoveBaseConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, MoveBaseConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const MoveBaseConfig config) const = 0;
[54] void getValue (const MoveBaseConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, MoveBaseConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (MoveBaseConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[318] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[362] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[384] void __toServer__ (const ros::NodeHandle nh) const;
[391] void __fromServer__ (const ros::NodeHandle nh);
[409] void __clamp__ ();
[418] uint32_t __level__ (const MoveBaseConfig config) const;
[426] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[427] MoveBaseConfig __getDefault__ ();
[428] MoveBaseConfig __getMax__ ();
[429] MoveBaseConfig __getMin__ ();
[430] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[431] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[434] MoveBaseConfigStatics __get_statics__ ();
[635] MoveBaseConfigStatics get_instance ();
[682] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/nav.h  ( 77 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToLinesDBSRANSACConfig.h  ( 26 )
[48] void clamp (CostmapToLinesDBSRANSACConfig config, const CostmapToLinesDBSRANSACConfig max, const CostmapToLinesDBSRANSACConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToLinesDBSRANSACConfig config1, const CostmapToLinesDBSRANSACConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToLinesDBSRANSACConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToLinesDBSRANSACConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToLinesDBSRANSACConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToLinesDBSRANSACConfig config) const = 0;
[54] void getValue (const CostmapToLinesDBSRANSACConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToLinesDBSRANSACConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToLinesDBSRANSACConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[294] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[338] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[360] void __toServer__ (const ros::NodeHandle nh) const;
[367] void __fromServer__ (const ros::NodeHandle nh);
[385] void __clamp__ ();
[394] uint32_t __level__ (const CostmapToLinesDBSRANSACConfig config) const;
[402] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[403] CostmapToLinesDBSRANSACConfig __getDefault__ ();
[404] CostmapToLinesDBSRANSACConfig __getMax__ ();
[405] CostmapToLinesDBSRANSACConfig __getMin__ ();
[406] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[407] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[410] CostmapToLinesDBSRANSACConfigStatics __get_statics__ ();
[551] CostmapToLinesDBSRANSACConfigStatics get_instance ();
[598] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToDynamicObstaclesConfig.h  ( 26 )
[48] void clamp (CostmapToDynamicObstaclesConfig config, const CostmapToDynamicObstaclesConfig max, const CostmapToDynamicObstaclesConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToDynamicObstaclesConfig config1, const CostmapToDynamicObstaclesConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToDynamicObstaclesConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToDynamicObstaclesConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToDynamicObstaclesConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToDynamicObstaclesConfig config) const = 0;
[54] void getValue (const CostmapToDynamicObstaclesConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToDynamicObstaclesConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToDynamicObstaclesConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[354] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[398] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[420] void __toServer__ (const ros::NodeHandle nh) const;
[427] void __fromServer__ (const ros::NodeHandle nh);
[445] void __clamp__ ();
[454] uint32_t __level__ (const CostmapToDynamicObstaclesConfig config) const;
[462] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[463] CostmapToDynamicObstaclesConfig __getDefault__ ();
[464] CostmapToDynamicObstaclesConfig __getMax__ ();
[465] CostmapToDynamicObstaclesConfig __getMin__ ();
[466] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[467] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[470] CostmapToDynamicObstaclesConfigStatics __get_statics__ ();
[761] CostmapToDynamicObstaclesConfigStatics get_instance ();
[808] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/ObstacleMsg.h  ( 1 )
[158] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/misc.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_polygons.h  ( 17 )
[97] void toPointMsg (geometry_msgs::Point point) const point.x=x point.y=y point.z=0};
[132] void initialize (ros::NodeHandle nh);
[137] void compute ();
[144] void setCostmap2D (costmap_2d::Costmap2D costmap);
[150] void updateCostmap2D ();
[161] void convertPointToPolygon (const Point point, geometry_msgs::Polygon polygon);
[173] PolygonContainerConstPtr getPolygons ();
[190] void dbScan (std::vector< std::vector<KeyPoint> > clusters);
[198] void regionQuery (int curr_index, std::vector<int> neighbor_indices);
[204] void addPoint (double x, double y);
[226] void convexHull (std::vector<KeyPoint> cluster, geometry_msgs::Polygon polygon);
[241] void convexHull2 (std::vector<KeyPoint> cluster, geometry_msgs::Polygon polygon);
[250] void simplifyPolygon (geometry_msgs::Polygon polygon);
[272] void updatePolygonContainer (PolygonContainerPtr polygons);
[289] int neighborCellsToIndex (int cx, int cy);
[302] void pointToNeighborCells (const KeyPoint kp, int cx, int cy);
[321] void reconfigureCB (CostmapToPolygonsDBSMCCHConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_converter_interface.h  ( 17 )
[85] void initialize (ros::NodeHandle nh) = 0;
[102] void setCostmap2D (costmap_2d::Costmap2D costmap) = 0;
[109] void updateCostmap2D () = 0;
[114] void compute () = 0;
[125] PolygonContainerConstPtr getPolygons ()return PolygonContainerConstPtr()};
[136] ObstacleArrayConstPtr getObstacles ();
[157] void setOdomTopic (const std::string odom_topic) };
[164] bool stackedCostmapConversion () return false};
[178] void startWorker (ros::Rate rate, costmap_2d::Costmap2D costmap, bool spin_thread = false);
[211] void stopWorker ();
[235] void spinThread ();
[251] void workerCallback (const ros::TimerEvent);
[283] void loadStaticCostmapConverterPlugin (const std::string plugin_name, ros::NodeHandle nh_parent);
[309] void setStaticCostmapConverterPlugin (boost::shared_ptr<BaseCostmapToPolygons> static_costmap_converter);
[318] void setStaticCostmap (boost::shared_ptr<costmap_2d::Costmap2D> static_costmap);
[326] void convertStaticObstacles ();
[335] PolygonContainerConstPtr getStaticPolygons ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_polygons_concave.h  ( 6 )
[80] void initialize (ros::NodeHandle nh);
[86] void compute ();
[99] void concaveHull (std::vector<KeyPoint> cluster, double depth, geometry_msgs::Polygon polygon);
[101] void concaveHullClusterCut (std::vector<KeyPoint> cluster, double depth, geometry_msgs::Polygon polygon);
[108] bool checkLineIntersection (const Point1 line1_start, const Point2 line1_end, const Point3 line2_start, const Point4 line2_end);
[125] void reconfigureCB (CostmapToPolygonsDBSConcaveHullConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToLinesDBSMCCHConfig.h  ( 26 )
[48] void clamp (CostmapToLinesDBSMCCHConfig config, const CostmapToLinesDBSMCCHConfig max, const CostmapToLinesDBSMCCHConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToLinesDBSMCCHConfig config1, const CostmapToLinesDBSMCCHConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToLinesDBSMCCHConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToLinesDBSMCCHConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToLinesDBSMCCHConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToLinesDBSMCCHConfig config) const = 0;
[54] void getValue (const CostmapToLinesDBSMCCHConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToLinesDBSMCCHConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToLinesDBSMCCHConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[282] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[326] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[348] void __toServer__ (const ros::NodeHandle nh) const;
[355] void __fromServer__ (const ros::NodeHandle nh);
[373] void __clamp__ ();
[382] uint32_t __level__ (const CostmapToLinesDBSMCCHConfig config) const;
[390] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[391] CostmapToLinesDBSMCCHConfig __getDefault__ ();
[392] CostmapToLinesDBSMCCHConfig __getMax__ ();
[393] CostmapToLinesDBSMCCHConfig __getMin__ ();
[394] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[395] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[398] CostmapToLinesDBSMCCHConfigStatics __get_statics__ ();
[509] CostmapToLinesDBSMCCHConfigStatics get_instance ();
[556] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToPolygonsDBSConcaveHullConfig.h  ( 26 )
[48] void clamp (CostmapToPolygonsDBSConcaveHullConfig config, const CostmapToPolygonsDBSConcaveHullConfig max, const CostmapToPolygonsDBSConcaveHullConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToPolygonsDBSConcaveHullConfig config1, const CostmapToPolygonsDBSConcaveHullConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToPolygonsDBSConcaveHullConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToPolygonsDBSConcaveHullConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToPolygonsDBSConcaveHullConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToPolygonsDBSConcaveHullConfig config) const = 0;
[54] void getValue (const CostmapToPolygonsDBSConcaveHullConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToPolygonsDBSConcaveHullConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToPolygonsDBSConcaveHullConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[274] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[318] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[340] void __toServer__ (const ros::NodeHandle nh) const;
[347] void __fromServer__ (const ros::NodeHandle nh);
[365] void __clamp__ ();
[374] uint32_t __level__ (const CostmapToPolygonsDBSConcaveHullConfig config) const;
[382] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[383] CostmapToPolygonsDBSConcaveHullConfig __getDefault__ ();
[384] CostmapToPolygonsDBSConcaveHullConfig __getMax__ ();
[385] CostmapToPolygonsDBSConcaveHullConfig __getMin__ ();
[386] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[387] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[390] CostmapToPolygonsDBSConcaveHullConfigStatics __get_statics__ ();
[481] CostmapToPolygonsDBSConcaveHullConfigStatics get_instance ();
[528] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_lines_convex_hull.h  ( 4 )
[87] void initialize (ros::NodeHandle nh);
[92] void compute ();
[103] void extractPointsAndLines (std::vector<KeyPoint> cluster, const geometry_msgs::Polygon polygon, std::back_insert_iterator< std::vector<geometry_msgs::Polygon> > lines);
[122] void reconfigureCB (CostmapToLinesDBSMCCHConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_lines_ransac.h  ( 6 )
[89] void initialize (ros::NodeHandle nh);
[94] void compute ();
[108] bool isInlier (const Point point, const LinePoint line_start, const LinePoint line_end, double min_distance);
[136] bool lineRansac (const std::vector<KeyPoint> data, double inlier_distance, int no_iterations, int min_inliers, std::pair<KeyPoint, KeyPoint> best_model, std::vector<KeyPoint> inliers = NULL, std::vector<KeyPoint> outliers = NULL);
[148] bool linearRegression (const std::vector<KeyPoint> data, double slope, double intercept, double mean_x_out = NULL, double mean_y_out = NULL);
[164] void reconfigureCB (CostmapToLinesDBSRANSACConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToPolygonsDBSMCCHConfig.h  ( 26 )
[48] void clamp (CostmapToPolygonsDBSMCCHConfig config, const CostmapToPolygonsDBSMCCHConfig max, const CostmapToPolygonsDBSMCCHConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CostmapToPolygonsDBSMCCHConfig config1, const CostmapToPolygonsDBSMCCHConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CostmapToPolygonsDBSMCCHConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CostmapToPolygonsDBSMCCHConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CostmapToPolygonsDBSMCCHConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CostmapToPolygonsDBSMCCHConfig config) const = 0;
[54] void getValue (const CostmapToPolygonsDBSMCCHConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CostmapToPolygonsDBSMCCHConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CostmapToPolygonsDBSMCCHConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[270] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[314] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[336] void __toServer__ (const ros::NodeHandle nh) const;
[343] void __fromServer__ (const ros::NodeHandle nh);
[361] void __clamp__ ();
[370] uint32_t __level__ (const CostmapToPolygonsDBSMCCHConfig config) const;
[378] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[379] CostmapToPolygonsDBSMCCHConfig __getDefault__ ();
[380] CostmapToPolygonsDBSMCCHConfig __getMax__ ();
[381] CostmapToPolygonsDBSMCCHConfig __getMin__ ();
[382] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[383] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[386] CostmapToPolygonsDBSMCCHConfigStatics __get_statics__ ();
[467] CostmapToPolygonsDBSMCCHConfigStatics get_instance ();
[514] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/ObstacleArrayMsg.h  ( 1 )
[132] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/blob_detector.h  ( 5 )
[67] cv::Ptr<BlobDetector> create (const BlobDetector::Params params);
[84] void detect (const cv::Mat image, std::vector<cv::KeyPoint> keypoints, const cv::Mat mask = cv::Mat());
[90] std::vector<std::vector<cv::Point>> getContours () return contours_ };
[93] void updateParameters (const cv::SimpleBlobDetector::Params parameters);
[104] void findBlobs (const cv::Mat image, const cv::Mat binary_image, std::vector<Center> centers, std::vector<std::vector<cv::Point>> cur_contours) const;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.h  ( 12 )
[94] void initialize (ros::NodeHandle nh);
[100] void compute ();
[107] void setCostmap2D (costmap_2d::Costmap2D costmap);
[113] void updateCostmap2D ();
[121] ObstacleArrayConstPtr getObstacles ();
[133] void setOdomTopic (const std::string odom_topic);
[142] void visualize (const std::string name, const cv::Mat image);
[152] Point_t getEstimatedVelocityOfObject (unsigned int idx);
[161] void getContour (unsigned int idx, std::vector<Point_t> contour);
[169] void updateObstacleContainer (ObstacleArrayPtr obstacles);
[197] void odomCallback (const nav_msgs::Odometry::ConstPtr msg);
[207] void reconfigureCB (CostmapToDynamicObstaclesConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/background_subtractor.h  ( 5 )
[81] void apply (const cv::Mat image, cv::Mat fg_mask, int shift_x = 0, int shift_y = 0);
[88] void visualize (const std::string name, const cv::Mat image);
[96] void writeMatToYAML (const std::string filename, const std::vector<cv::Mat> mat_vec);
[99] void updateParameters (const Params parameters);
[103] void transformToCurrentFrame (int shift_x, int shift_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.h  ( 5 )
[52] std::vector<cv::Point> getLastContour () const;
[58] Point_t getEstimatedVelocity () const;
[89] void updateParameters (const Params parameters);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.h  ( 11 )
[22] void assignmentoptimal (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
[23] void buildassignmentvector (assignments_t assignment, bool starMatrix, size_t nOfRows, size_t nOfColumns);
[25] void computeassignmentcost (const assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows);
[27] void step2a (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[29] void step2b (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[31] void step3 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[34] void step4 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim, size_t row, size_t col);
[36] void step5 (assignments_t assignment, track_t distMatrix, bool starMatrix, bool newStarMatrix, bool primeMatrix, bool coveredColumns, bool coveredRows, size_t nOfRows, size_t nOfColumns, size_t minDim);
[41] void assignmentsuboptimal1 (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
[46] void assignmentsuboptimal2 (assignments_t assignment, track_t cost, const distMatrix_t distMatrixIn, size_t nOfRows, size_t nOfColumns);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/defines.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/DynamicStaticPluginConfig.h  ( 26 )
[48] void clamp (DynamicStaticPluginConfig config, const DynamicStaticPluginConfig max, const DynamicStaticPluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const DynamicStaticPluginConfig config1, const DynamicStaticPluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, DynamicStaticPluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const DynamicStaticPluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, DynamicStaticPluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const DynamicStaticPluginConfig config) const = 0;
[54] void getValue (const DynamicStaticPluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, DynamicStaticPluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (DynamicStaticPluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[266] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[310] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[332] void __toServer__ (const ros::NodeHandle nh) const;
[339] void __fromServer__ (const ros::NodeHandle nh);
[357] void __clamp__ ();
[366] uint32_t __level__ (const DynamicStaticPluginConfig config) const;
[374] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[375] DynamicStaticPluginConfig __getDefault__ ();
[376] DynamicStaticPluginConfig __getMax__ ();
[377] DynamicStaticPluginConfig __getMin__ ();
[378] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[379] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[382] DynamicStaticPluginConfigStatics __get_statics__ ();
[453] DynamicStaticPluginConfigStatics get_instance ();
[500] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/GenericPluginConfig.h  ( 26 )
[48] void clamp (GenericPluginConfig config, const GenericPluginConfig max, const GenericPluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const GenericPluginConfig config1, const GenericPluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, GenericPluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const GenericPluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, GenericPluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const GenericPluginConfig config) const = 0;
[54] void getValue (const GenericPluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, GenericPluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (GenericPluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[258] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[302] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[324] void __toServer__ (const ros::NodeHandle nh) const;
[331] void __fromServer__ (const ros::NodeHandle nh);
[349] void __clamp__ ();
[358] uint32_t __level__ (const GenericPluginConfig config) const;
[366] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[367] GenericPluginConfig __getDefault__ ();
[368] GenericPluginConfig __getMax__ ();
[369] GenericPluginConfig __getMin__ ();
[370] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[371] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[374] GenericPluginConfigStatics __get_statics__ ();
[425] GenericPluginConfigStatics get_instance ();
[472] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/PubMap.h  ( 1 )
[161] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/InflationPluginConfig.h  ( 26 )
[48] void clamp (InflationPluginConfig config, const InflationPluginConfig max, const InflationPluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const InflationPluginConfig config1, const InflationPluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, InflationPluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const InflationPluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, InflationPluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const InflationPluginConfig config) const = 0;
[54] void getValue (const InflationPluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, InflationPluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (InflationPluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[274] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[318] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[340] void __toServer__ (const ros::NodeHandle nh) const;
[347] void __fromServer__ (const ros::NodeHandle nh);
[365] void __clamp__ ();
[374] uint32_t __level__ (const InflationPluginConfig config) const;
[382] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[383] InflationPluginConfig __getDefault__ ();
[384] InflationPluginConfig __getMax__ ();
[385] InflationPluginConfig __getMin__ ();
[386] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[387] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[390] InflationPluginConfigStatics __get_statics__ ();
[481] InflationPluginConfigStatics get_instance ();
[528] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/Costmap2DConfig.h  ( 26 )
[48] void clamp (Costmap2DConfig config, const Costmap2DConfig max, const Costmap2DConfig min) const = 0;
[49] void calcLevel (uint32_t level, const Costmap2DConfig config1, const Costmap2DConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, Costmap2DConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const Costmap2DConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, Costmap2DConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const Costmap2DConfig config) const = 0;
[54] void getValue (const Costmap2DConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, Costmap2DConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (Costmap2DConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[298] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[342] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[364] void __toServer__ (const ros::NodeHandle nh) const;
[371] void __fromServer__ (const ros::NodeHandle nh);
[389] void __clamp__ ();
[398] uint32_t __level__ (const Costmap2DConfig config) const;
[406] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[407] Costmap2DConfig __getDefault__ ();
[408] Costmap2DConfig __getMax__ ();
[409] Costmap2DConfig __getMin__ ();
[410] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[411] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[414] Costmap2DConfigStatics __get_statics__ ();
[565] Costmap2DConfigStatics get_instance ();
[612] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/ObstaclePluginConfig.h  ( 26 )
[48] void clamp (ObstaclePluginConfig config, const ObstaclePluginConfig max, const ObstaclePluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const ObstaclePluginConfig config1, const ObstaclePluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, ObstaclePluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const ObstaclePluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, ObstaclePluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const ObstaclePluginConfig config) const = 0;
[54] void getValue (const ObstaclePluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, ObstaclePluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (ObstaclePluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[270] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[314] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[336] void __toServer__ (const ros::NodeHandle nh) const;
[343] void __fromServer__ (const ros::NodeHandle nh);
[361] void __clamp__ ();
[370] uint32_t __level__ (const ObstaclePluginConfig config) const;
[378] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[379] ObstaclePluginConfig __getDefault__ ();
[380] ObstaclePluginConfig __getMax__ ();
[381] ObstaclePluginConfig __getMin__ ();
[382] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[383] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[386] ObstaclePluginConfigStatics __get_statics__ ();
[467] ObstaclePluginConfigStatics get_instance ();
[514] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/CliffPluginConfig.h  ( 26 )
[48] void clamp (CliffPluginConfig config, const CliffPluginConfig max, const CliffPluginConfig min) const = 0;
[49] void calcLevel (uint32_t level, const CliffPluginConfig config1, const CliffPluginConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, CliffPluginConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const CliffPluginConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, CliffPluginConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const CliffPluginConfig config) const = 0;
[54] void getValue (const CliffPluginConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, CliffPluginConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (CliffPluginConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[270] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[314] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[336] void __toServer__ (const ros::NodeHandle nh) const;
[343] void __fromServer__ (const ros::NodeHandle nh);
[361] void __clamp__ ();
[370] uint32_t __level__ (const CliffPluginConfig config) const;
[378] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[379] CliffPluginConfig __getDefault__ ();
[380] CliffPluginConfig __getMax__ ();
[381] CliffPluginConfig __getMin__ ();
[382] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[383] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[386] CliffPluginConfigStatics __get_statics__ ();
[467] CliffPluginConfigStatics get_instance ();
[514] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TrajectoryPointMsg.h  ( 1 )
[145] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TebLocalPlannerReconfigureConfig.h  ( 26 )
[48] void clamp (TebLocalPlannerReconfigureConfig config, const TebLocalPlannerReconfigureConfig max, const TebLocalPlannerReconfigureConfig min) const = 0;
[49] void calcLevel (uint32_t level, const TebLocalPlannerReconfigureConfig config1, const TebLocalPlannerReconfigureConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, TebLocalPlannerReconfigureConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const TebLocalPlannerReconfigureConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, TebLocalPlannerReconfigureConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const TebLocalPlannerReconfigureConfig config) const = 0;
[54] void getValue (const TebLocalPlannerReconfigureConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, TebLocalPlannerReconfigureConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (TebLocalPlannerReconfigureConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[920] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[964] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[986] void __toServer__ (const ros::NodeHandle nh) const;
[993] void __fromServer__ (const ros::NodeHandle nh);
[1011] void __clamp__ ();
[1020] uint32_t __level__ (const TebLocalPlannerReconfigureConfig config) const;
[1028] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[1029] TebLocalPlannerReconfigureConfig __getDefault__ ();
[1030] TebLocalPlannerReconfigureConfig __getMax__ ();
[1031] TebLocalPlannerReconfigureConfig __getMin__ ();
[1032] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[1033] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[1036] TebLocalPlannerReconfigureConfigStatics __get_statics__ ();
[2051] TebLocalPlannerReconfigureConfigStatics get_instance ();
[2098] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TrajectoryMsg.h  ( 1 )
[132] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/FeedbackMsg.h  ( 1 )
[145] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/astar.h  ( 4 )
[63] bool operator ()(const Index a, const Index b) const return a.cost > b.cost };
[72] bool calculatePotentials (unsigned char costs, double start_x, double start_y, double end_x, double end_y, int cycles, float potential);
[73] void setSafeControl (bool param) this->use_safe_control_ = param };
[76] void add (unsigned char costs, float potential, float prev_potential, int next_i, int end_x, int end_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/dijkstra.h  ( 7 )
[83] bool calculatePotentials (unsigned char costs, double start_x, double start_y, double end_x, double end_y, int cycles, float potential);
[90] void setSize (int nx, int ny);
[93] void setNeutralCost (unsigned char neutral_cost);
[99] void setPreciseStart (bool precise);
[103] void setSafeControl (bool param);
[115] void updateCell (unsigned char costs, float potential, int n);
[118] float getCost (unsigned char costs, int n);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/count_down_time.hpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/planner_core.h  ( 25 )
[109] void initialize (std::string name, costmap_2d::Costmap2DROS costmap_ros);
[121] bool makePlan (const geometry_msgs::PoseStamped start, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[146] bool findFreePoint (geometry_msgs::PoseStamped point, geometry_msgs::PoseStamped free_point);
[148] int optimizationPath (std::vector<geometry_msgs::PoseStamped> plan, double movement_angle_range = M_PI_4);
[151] void optimizationOrientation (std::vector<geometry_msgs::PoseStamped> plan, const geometry_msgs::PoseStamped goal_pose);
[152] std::uint64_t voxelFilter (std::vector<geometry_msgs::PoseStamped> plan, double threshold = 0.08);
[172] bool computePotential (const geometry_msgs::Point world_point);
[186] bool getPlanFromPotential (double start_x, double start_y, double end_x, double end_y, const geometry_msgs::PoseStamped goal, std::vector<geometry_msgs::PoseStamped> plan);
[198] void getNearFreePoint (const geometry_msgs::PoseStamped in, geometry_msgs::PoseStamped out, double tolerance);
[206] double getPointPotential (const geometry_msgs::Point world_point);
[215] bool validPointPotential (const geometry_msgs::Point world_point);
[231] void publishPlan (const std::vector<geometry_msgs::PoseStamped> path);
[232] void publishUnsmoothedPlan (const std::vector<geometry_msgs::PoseStamped> path);
[233] void publishRawPlan (const std::vector<geometry_msgs::PoseStamped> path);
[235] void publishGlobalPlanAndPoses (const std::vector<geometry_msgs::PoseStamped> path);
[237] bool makePlanService (nav_msgs::GetPlan::Request req, nav_msgs::GetPlan::Response resp);
[239] void fixBug (std::vector<geometry_msgs::PoseStamped> path);
[241] double getTimeOut () return time_out_ };
[259] void mapToWorld (double mx, double my, double wx, double wy);
[260] bool worldToMap (double wx, double wy, double mx, double my);
[261] void clearRobotCell (const geometry_msgs::PoseStamped global_pose, unsigned int mx, unsigned int my);
[262] void publishPotential ();
[278] void outlineMap (unsigned char costarr, int nx, int ny, unsigned char value);
[285] void reconfigureCB (global_planner::GlobalPlannerConfig config, uint32_t level);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/GlobalPlannerConfig.h  ( 26 )
[48] void clamp (GlobalPlannerConfig config, const GlobalPlannerConfig max, const GlobalPlannerConfig min) const = 0;
[49] void calcLevel (uint32_t level, const GlobalPlannerConfig config1, const GlobalPlannerConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, GlobalPlannerConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const GlobalPlannerConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, GlobalPlannerConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const GlobalPlannerConfig config) const = 0;
[54] void getValue (const GlobalPlannerConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, GlobalPlannerConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (GlobalPlannerConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[278] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[322] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[344] void __toServer__ (const ros::NodeHandle nh) const;
[351] void __fromServer__ (const ros::NodeHandle nh);
[369] void __clamp__ ();
[378] uint32_t __level__ (const GlobalPlannerConfig config) const;
[386] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[387] GlobalPlannerConfig __getDefault__ ();
[388] GlobalPlannerConfig __getMax__ ();
[389] GlobalPlannerConfig __getMin__ ();
[390] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[391] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[394] GlobalPlannerConfigStatics __get_statics__ ();
[495] GlobalPlannerConfigStatics get_instance ();
[542] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/expander.h  ( 8 )
[55] bool calculatePotentials (unsigned char costs, double start_x, double start_y, double end_x, double end_y, int cycles, float potential) = 0;
[57] void setSafeControl (bool param) = 0;
[65] void setSize (int nx, int ny);
[68] void setLethalCost (unsigned char lethal_cost);
[73] void setNeutralCost (unsigned char neutral_cost);
[78] void setFactor (float factor);
[83] void setHasUnknown (bool unknown);
[87] void clearEndpoint (unsigned char costs, float potential, int gx, int gy, int s);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/quadratic_calculator.h  ( 1 )
[49] float calculatePotential (float potential, unsigned char cost, int n, float prev_potential);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/orientation_filter.h  ( 5 )
[52] void processPath (const geometry_msgs::PoseStamped start, std::vector<geometry_msgs::PoseStamped> path);
[54] void setAngleBasedOnPositionDerivative (std::vector<geometry_msgs::PoseStamped> path, int index);
[56] void interpolate (std::vector<geometry_msgs::PoseStamped> path, int start_index, int end_index);
[58] void setMode (OrientationMode new_mode) omode_ = new_mode };
[61] void setWindowSize (size_t window_size) window_size_ = window_size };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/smoother.hpp  ( 2 )
[40] void initialize (double min_turning_radius);
[46] bool smooth (std::vector<geometry_msgs::PoseStamped> plan, const costmap_2d::Costmap2D costmap, const double max_time, const bool do_refinement = true);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/gradient_path.h  ( 3 )
[53] void setSize (int xs, int ys);
[65] bool getPath (float potential, double start_x, double start_y, double end_x, double end_y, std::vector<std::pair<float, float> > path);
[74] float gradCell (float potential, int n);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/traceback.h  ( 3 )
[57] bool getPath (float potential, double start_x, double start_y, double end_x, double end_y, std::vector<std::pair<float, float> > path) = 0;
[60] void setSize (int xs, int ys);
[71] void setLethalCost (unsigned char lethal_cost);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/grid_path.h  ( 1 )
[52] bool getPath (float potential, double start_x, double start_y, double end_x, double end_y, std::vector<std::pair<float, float> > path);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/potential_calculator.h  ( 2 )
[55] float calculatePotential (float potential, unsigned char cost, int n, float prev_potential=-1);
[62] void setSize (int nx, int ny);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/BumperEvent.h  ( 1 )
[164] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/CliffEvent.h  ( 1 )
[176] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/MotorPower.h  ( 1 )
[140] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/WheelDropEvent.h  ( 1 )
[158] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/KeyboardInput.h  ( 1 )
[170] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/rotate_recovery/rotate_recovery.h  ( 2 )
[67] void initialize (std::string name, tf2_ros::Buffer, costmap_2d::Costmap2DROS, costmap_2d::Costmap2DROS local_costmap);
[72] void runBehavior ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmap.h  ( 1 )
[42] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmapRequest.h  ( 1 )
[136] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlan.h  ( 1 )
[42] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmapResponse.h  ( 1 )
[108] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlanRequest.h  ( 1 )
[132] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlanResponse.h  ( 1 )
[137] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clear_costmap_recovery/clear_costmap_recovery.h  ( 4 )
[65] void initialize (std::string name, tf2_ros::Buffer tf, costmap_2d::Costmap2DROS global_costmap, costmap_2d::Costmap2DROS local_costmap);
[72] void runBehavior ();
[75] void clear (costmap_2d::Costmap2DROS costmap);
[76] void clearMap (boost::shared_ptr<costmap_2d::CostmapLayer> costmap, double pose_x, double pose_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/base_local_planner/Position2DInt.h  ( 1 )
[130] char value ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/base_local_planner/BaseLocalPlannerConfig.h  ( 26 )
[48] void clamp (BaseLocalPlannerConfig config, const BaseLocalPlannerConfig max, const BaseLocalPlannerConfig min) const = 0;
[49] void calcLevel (uint32_t level, const BaseLocalPlannerConfig config1, const BaseLocalPlannerConfig config2) const = 0;
[50] void fromServer (const ros::NodeHandle nh, BaseLocalPlannerConfig config) const = 0;
[51] void toServer (const ros::NodeHandle nh, const BaseLocalPlannerConfig config) const = 0;
[52] bool fromMessage (const dynamic_reconfigure::Config msg, BaseLocalPlannerConfig config) const = 0;
[53] void toMessage (dynamic_reconfigure::Config msg, const BaseLocalPlannerConfig config) const = 0;
[54] void getValue (const BaseLocalPlannerConfig config, boost::any val) const = 0;
[132] void updateParams (boost::any cfg, BaseLocalPlannerConfig top) const= 0;
[133] void setInitialState (boost::any cfg) const = 0;
[137] void convertParams ();
[233] void setParams (BaseLocalPlannerConfig config, const std::vector<AbstractParamDescriptionConstPtr> params);
[366] bool __fromMessage__ (dynamic_reconfigure::Config msg);
[410] void __toMessage__ (dynamic_reconfigure::Config msg, const std::vector<AbstractParamDescriptionConstPtr> __param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> __group_descriptions__) const;
[432] void __toServer__ (const ros::NodeHandle nh) const;
[439] void __fromServer__ (const ros::NodeHandle nh);
[457] void __clamp__ ();
[466] uint32_t __level__ (const BaseLocalPlannerConfig config) const;
[474] dynamic_reconfigure::ConfigDescription __getDescriptionMessage__ ();
[475] BaseLocalPlannerConfig __getDefault__ ();
[476] BaseLocalPlannerConfig __getMax__ ();
[477] BaseLocalPlannerConfig __getMin__ ();
[478] std::vector<AbstractParamDescriptionConstPtr> __getParamDescriptions__ ();
[479] std::vector<AbstractGroupDescriptionConstPtr> __getGroupDescriptions__ ();
[482] BaseLocalPlannerConfigStatics __get_statics__ ();
[803] BaseLocalPlannerConfigStatics get_instance ();
[850] boost::mutex::scoped_lock  lock(dynamic_reconfigure::__init_mutex__);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/tools.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/menu_handler.h  ( 11 )
[65] EntryHandle insert ( const std::string title, const FeedbackCallback feedback_cb );
[82] bool setVisible ( EntryHandle handle, bool visible );
[85] bool setCheckState ( EntryHandle handle, CheckState check_state );
[89] bool getCheckState ( EntryHandle handle, CheckState check_state ) const;
[93] bool apply ( InteractiveMarkerServer server, const std::string marker_name );
[96] bool reApply ( InteractiveMarkerServer server );
[100] bool getTitle ( EntryHandle handle, std::string title ) const;
[116] void processFeedback ( const visualization_msgs::InteractiveMarkerFeedbackConstPtr feedback );
[123] bool pushMenuEntries ( std::vector<EntryHandle> handles_in, std::vector<visualization_msgs::MenuEntry> entries_out, EntryHandle parent_handle );
[125] visualization_msgs::MenuEntry makeEntry ( EntryContext context, EntryHandle handle, EntryHandle parent_handle );
[131] EntryHandle doInsert ( const std::string title, const uint8_t command_type, const std::string command, const FeedbackCallback feedback_cb );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/interactive_marker_server.h  ( 6 )
[190] void spinThread ();
[193] void processFeedback ( const FeedbackConstPtr feedback );
[196] void keepAlive ();
[199] void publish ( visualization_msgs::InteractiveMarkerUpdate update );
[202] void publishInit ();
[208] void doSetPose ( M_UpdateContext::iterator update_it, const std::string name, const geometry_msgs::Pose pose, const std_msgs::Header header );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/interactive_marker_client.h  ( 13 )
[137] void process ( const MsgConstPtrT msg );
[156] void subscribeInit ();
[159] void subscribeUpdate ();
[161] void statusCb ( StatusT status, const std::string server_id, const std::string msg );
[175] void initCb ( const InitConstPtr i ) const;
[177] void updateCb ( const UpdateConstPtr u ) const;
[179] void resetCb ( const std::string s ) const;
[184] void setInitCb ( InitCallback init_cb );
[187] void setUpdateCb ( UpdateCallback update_cb );
[190] void setResetCb ( ResetCallback reset_cb );
[193] void setStatusCb ( StatusCallback status_cb );
[205] void processInit ( const InitConstPtr msg );
[208] void processUpdate ( const UpdateConstPtr msg );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/visibility_control.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/single_client.h  ( 9 )
[75] void process (const visualization_msgs::InteractiveMarkerUpdate::ConstPtr msg, bool enable_autocomplete_transparency = true);
[81] bool isInitialized ();
[84] void update ();
[89] void checkInitFinished ();
[91] void checkKeepAlive ();
[103] void transformInitMsgs ( );
[104] void transformUpdateMsgs ( );
[106] void pushUpdates ();
[108] void errorReset ( std::string error_msg );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/message_context.h  ( 4 )
[60] void getTfTransforms ();
[65] bool isReady ();
[69] void init ();
[71] bool getTransform ( std_msgs::Header header, geometry_msgs::Pose pose_msg );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/state_machine.h  ( 2 )
[54] ros::Duration getDuration ();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/cv_bridge/rgb_colors.h  ( 1 )
[205] cv::Vec3d getRGBColor (const int color);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/cv_bridge/cv_bridge.h  ( 9 )
[102] sensor_msgs::ImagePtr toImageMsg () const;
[111] sensor_msgs::CompressedImagePtr toCompressedImageMsg (const Format dst_format = JPG) const;
[163] CvImagePtr toCvCopy (const sensor_msgs::ImageConstPtr source, const std::string encoding = std::string());
[214] CvImageConstPtr toCvShare (const sensor_msgs::ImageConstPtr source, const std::string encoding = std::string());
[248] CvImagePtr cvtColor (const CvImageConstPtr source, const std::string encoding);
[298] CvImageConstPtr cvtColorForDisplay (const CvImageConstPtr source, const std::string encoding = std::string(), const CvtColorForDisplayOptions options = CvtColorForDisplayOptions());
[305] int getCvType (const std::string encoding);
[325] char value () return MD5Sum<sensor_msgs::Image>::value() };
[408] void stream (Stream, const std::string, const cv_bridge::CvImage);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/loopTrpath.cpp  ( 4 )
[18] void keeploop (std::shared_ptr<PathPlanning::Nav> cr);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/main.cpp  ( 2 )
[11] void keeploop (std::shared_ptr<PathPlanning::Nav> cr) };
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/loopAutoc.cpp  ( 4 )
[18] void keeploop (std::shared_ptr<PathPlanning::Nav> cr);

Variable name:-------------------------------------------------------------------------------------
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/test/costmap_polygons.cpp  ( 25 )
[44] std::random_device rand_dev;
[53] double center_x = costmap_to_polygons.points()[0].x;
[54] double center_y = costmap_to_polygons.points()[0].y;
[82] int curr_index
[82]  std::vector<int> neighbor_indices
[98] CostmapToPolygons costmap_to_polygons;
[155] geometry_msgs::Polygon original_polygon = polygon;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/misc.h  ( 5 )
[88] double length_sqr = dx*dx + dy*dy;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_polygons.h  ( 33 )
[110] double max_distance_;
[111] int min_pts_;
[112] int max_pts_;
[115] double min_keypoint_separation_;
[198] int curr_index
[198]  std::vector<int> neighbor_indices
[275] std::vector<KeyPoint> occupied_cells_;
[278] int neighbor_size_x_;
[279] int neighbor_size_y_;
[280] double offset_x_;
[281] double offset_y_;
[308] Parameters parameter_;
[309] Parameters parameter_buffered_;
[310] boost::mutex parameter_mutex_;
[324] PolygonContainerPtr polygons_;
[325] boost::mutex mutex_;
[327] dynamic_reconfigure::Server<CostmapToPolygonsDBSMCCHConfig>* dynamic_recfg_;
[329] costmap_2d::Costmap2D *costmap_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_converter_interface.h  ( 20 )
[178]  bool spin_thread = false
[184] boost::mutex::scoped_lock terminate_lock(terminate_mutex_);
[257] ros::Timer worker_timer_;
[258] ros::NodeHandle nh_;
[260] ros::CallbackQueue callback_queue_;
[261] boost::mutex terminate_mutex_;
[262] bool need_to_terminate_;
[283]  ros::NodeHandle nh_parent
[292] std::string raw_plugin_name = static_converter_loader_.getName(plugin_name);
[309] boost::shared_ptr<BaseCostmapToPolygons> static_costmap_converter
[318] boost::shared_ptr<costmap_2d::Costmap2D> static_costmap
[359] pluginlib::ClassLoader<BaseCostmapToPolygons> static_converter_loader_;
[360] boost::shared_ptr<BaseCostmapToPolygons> static_costmap_converter_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_polygons_concave.h  ( 20 )
[114] double concave_hull_depth_;
[127] dynamic_reconfigure::Server<CostmapToPolygonsDBSConcaveHullConfig>* dynamic_recfg_;
[136] std::size_t nearsest_idx = 0;
[150] double dist_temp = computeDistanceToLineSegment(cluster[i], hull[j], hull[j + 1]);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_lines_convex_hull.h  ( 9 )
[109] double support_pts_max_dist_inbetween_;
[110] double support_pts_max_dist_;
[111] int min_support_pts_;
[124] dynamic_reconfigure::Server<CostmapToLinesDBSMCCHConfig>* dynamic_recfg_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_lines_ransac.h  ( 25 )
[108]  double min_distance
[112] double ransac_inlier_distance_;
[113] int ransac_min_inliers_;
[114] int ransac_no_iterations_;
[115] int ransac_remainig_outliers_;
[116] bool ransac_convert_outlier_pts_;
[117] bool ransac_filter_remaining_outlier_pts_;
[120] boost::random::mt19937 rnd_generator_;
[136]  double inlier_distance
[136]  int no_iterations
[136]  int min_inliers
[148]  double mean_x_out = NULL
[148]  double mean_y_out = NULL
[166] dynamic_reconfigure::Server<CostmapToLinesDBSRANSACConfig>* dynamic_recfg_;
[175] bool is_inbetween = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/blob_detector.h  ( 13 )
[104]  std::vector<std::vector<cv::Point>> cur_contours
[106] std::vector<std::vector<cv::Point>> contours_;
[108] Params params_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.h  ( 24 )
[172] boost::mutex mutex_;
[174] cv::Mat costmap_mat_;
[175] ObstacleArrayPtr obstacles_;
[176] cv::Mat fg_mask_;
[177] std::unique_ptr<BackgroundSubtractor> bg_sub_;
[178] cv::Ptr<BlobDetector> blob_det_;
[179] std::vector<cv::KeyPoint> keypoints_;
[180] std::unique_ptr<CTracker> tracker_;
[181] ros::Subscriber odom_sub_;
[182] Point_t ego_vel_;
[184] std::string odom_topic_ = "/odom";
[185] bool publish_static_obstacles_ = true;
[188] dynamic_reconfigure::Server<CostmapToDynamicObstaclesConfig>* dynamic_recfg_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/background_subtractor.h  ( 21 )
[62] double alpha_slow;
[63] double alpha_fast;
[65] double min_sep_between_fast_and_slow_filter;
[66] double min_occupancy_probability;
[67] double max_occupancy_neighbors;
[68] int morph_size;
[81]  cv::Mat fg_mask
[81]  int shift_x = 0
[81]  int shift_y = 0
[105] cv::Mat occupancy_grid_fast_;
[106] cv::Mat occupancy_grid_slow_;
[107] cv::Mat current_frame_;
[109] int previous_shift_x_;
[110] int previous_shift_y_;
[112] Params params_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.h  ( 5 )
[15]  bool DataCorrect
[18] Point_t LastPosition;
[19] Point_t LastVelocity;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.h  ( 19 )
[33]  size_t max_trace_length
[63] size_t track_id;
[64] size_t skipped_frames;
[69] TKalmanFilter KF;
[78] track_t dist_thresh;
[79] int max_allowed_skipped_frames;
[95] size_t NextTrackID;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.h  ( 15 )
[59]  TMethod Method = optimal
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/defines.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_polygons_concave.cpp  ( 18 )
[112] std::vector<geometry_msgs::Point32>& concave_list = polygon.points;
[122] size_t nearest_idx = findNearestInnerPoint(vertex1, vertex2, cluster, concave_list, &found);
[126] double line_length = norm2d(vertex1, vertex2);
[141] geometry_msgs::Point32 new_point;
[159] double mean_length = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_lines_ransac.cpp  ( 26 )
[162]  double inlier_distance
[162]  int no_iterations
[162]  int min_inliers
[171] int best_no_inliers = -1;
[177] int start_idx = distribution(rnd_generator_);
[178] int end_idx = start_idx;
[184] int no_inliers = 0;
[235]  double mean_x_out
[235]  double mean_y_out
[242] double mean_x = 0;
[243] double mean_y = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_polygons.cpp  ( 49 )
[70] std::vector<geometry_msgs::Point32>::iterator max_dist_it;
[197] int cells_x = int(costmap_->getSizeInMetersX() / parameter_.max_distance_) + 1;
[198] int cells_y = int(costmap_->getSizeInMetersY() / parameter_.max_distance_) + 1;
[234] int cluster_id = 0;
[262] std::vector<int> further_neighbors;
[283] int curr_index
[286] double dist_sqr_threshold = parameter_.max_distance_ * parameter_.max_distance_;
[307] double dist_sqr = dx*dx + dy*dy;
[365] std::vector<KeyPoint>& P = cluster;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_converter_node.cpp  ( 30 )
[57] std::string converter_plugin = "costmap_converter::CostmapToPolygonsDBSMCCH";
[72] std::string costmap_topic = "/move_base/local_costmap/costmap";
[75] std::string costmap_update_topic = "/move_base/local_costmap/costmap_updates";
[78] std::string obstacles_topic = "costmap_obstacles";
[81] std::string polygon_marker_topic = "costmap_polygon_markers";
[92] std::string odom_topic = "/odom";
[168]  ros::Publisher marker_pub
[169] visualization_msgs::Marker line_list;
[187] geometry_msgs::Point line_start;
[191] geometry_msgs::Point line_end;
[268] pluginlib::ClassLoader<costmap_converter::BaseCostmapToPolygons> converter_loader_;
[269] boost::shared_ptr<costmap_converter::BaseCostmapToPolygons> converter_;
[271] ros::NodeHandle n_;
[272] ros::Subscriber costmap_sub_;
[273] ros::Subscriber costmap_update_sub_;
[274] ros::Publisher obstacle_pub_;
[275] ros::Publisher marker_pub_;
[277] std::string frame_id_;
[278] int occupied_min_value_;
[280] costmap_2d::Costmap2D map_;
[289] CostmapStandaloneConversion convert_process;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_lines_convex_hull.cpp  ( 21 )
[170] std::vector<std::size_t> support_points;
[174] bool is_inbetween = false;
[175] double dist_line_to_point = computeDistanceToLineSegment( cluster[k], *vertex1, *vertex2, &is_inbetween );
[186] bool is_line=true;
[200] double dist_x = cluster[support_points[k]].x - cluster[support_points[k-1]].x;
[201] double dist_y = cluster[support_points[k]].y - cluster[support_points[k-1]].y;
[225] std::vector<std::size_t>::reverse_iterator support_it = support_points.rbegin();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.cpp  ( 38 )
[36] BackgroundSubtractor::Params bg_sub_params;
[63] BlobDetector::Params blob_det_params;
[115] CTracker::Params tracker_params;
[133] std::string static_converter_plugin = "costmap_converter::CostmapToPolygonsDBSMCCH";
[151] int origin_x = round(costmap_->getOriginX() / costmap_->getResolution());
[152] int origin_y = round(costmap_->getOriginY() / costmap_->getResolution());
[162] cv::Mat bg_mat;
[180] std::vector<Point_t> detected_centers(keypoints_.size());
[294] auto static_polygons = getStaticPolygons();
[437] CTracker::Params tracking_params;
[456] Point_t costmap_origin(costmap_->getOriginX(), costmap_->getOriginY(), 0);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/background_subtractor.cpp  ( 17 )
[10]  cv::Mat fg_mask
[10]  int shift_x
[10]  int shift_y
[24] int shift_relative_to_previous_pos_x_ = shift_x - previous_shift_x_;
[25] int shift_relative_to_previous_pos_y_ = shift_y - previous_shift_y_;
[36] cv::Mat nearest_neighbor_mean_fast(occupancy_grid_fast_.size(), CV_8UC1);
[37] cv::Mat nearest_neighbor_mean_slow(occupancy_grid_slow_.size(), CV_8UC1);
[90] cv::Mat temp_fast, temp_slow;
[91] cv::Mat translation_mat = (cv::Mat_<double>(2, 3, CV_64F) << 1, 0, -shift_x, 0, 1, -shift_y);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/blob_detector.cpp  ( 36 )
[19] cv::Mat grayscale_image;
[35] cv::Mat binarized_image;
[38] std::vector<Center> cur_centers;
[39] std::vector<std::vector<cv::Point>> cur_contours, new_contours;
[41] std::vector<std::vector<Center>> new_centers;
[79] cv::Point2d sum_point(0, 0);
[101] cv::Mat tmp_binary_image = binary_image.clone();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.cpp  ( 9 )
[75]  bool DataCorrect
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.cpp  ( 32 )
[13]  TMethod Method
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_converter/src/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.cpp  ( 8 )
[35] size_t N = tracks.size();
[36] size_t M = detectedCentroid.size();
[43] distMatrix_t Cost(N * M);
[57] AssignmentProblemSolver APS;
[101] tracks.push_back(std::unique_ptr<CTrack>(new CTrack(detectedCentroid[i], contours[i], params.dt, NextTrackID++)));
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/static_tests.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/coordinates_test.cpp  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/array_parser_test.cpp  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/costmap_tester.cpp  ( 21 )
[55] costmap_2d::Costmap2DROS costmap_ros_;
[91] double cell_distance = hypot(static_cast<int>(x-nx), static_cast<int>(y-ny));
[93] unsigned char cell_cost = costmap.getCost(x, y);
[94] unsigned char neighbor_cost = costmap.getCost(nx, ny);
[98] unsigned char expected_lowest_cost = 0;
[103] double furthest_valid_distance = 0;
[123] int test_result = RUN_ALL_TESTS();
[133] ros::NodeHandle private_nh("~");
[139] double wait_time;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/footprint_tests.cpp  ( 5 )
[173] geometry_msgs::TransformStamped base_rel_map;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/inflation_tests.cpp  ( 23 )
[49]  double inflation_radius
[92] unsigned char expected_cost = ilayer->computeCost(dist);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/module_tests.cpp  ( 47 )
[296] int update_count = 0;
[362] Costmap2D static_map(GRID_WIDTH, GRID_HEIGHT, RESOLUTION, 0.0, 0.0, ROBOT_RADIUS, ROBOT_RADIUS, ROBOT_RADIUS, 10.0, MAX_Z, 10.0, 25, MAP_10_BY_10, THRESHOLD);
[410] Costmap2D small_static_map(5, 5, RESOLUTION, 0.0, 0.0, ROBOT_RADIUS, ROBOT_RADIUS, ROBOT_RADIUS, 10.0, MAX_Z, 10.0, 25, fully_contained, THRESHOLD);
[451] int lethal_count = 0;
[513] int unknown_count = 0;
[1023] unsigned int obs_before = obstacles.size();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/test/obstacle_tests.cpp  ( 8 )
[87] int lethal_count = countValues(*(layers.getCostmap()), LETHAL_OBSTACLE);
[112] int obs_before = countValues(*(layers.getCostmap()), LETHAL_OBSTACLE);
[123] int obs_after = countValues(*(layers.getCostmap()), LETHAL_OBSTACLE);
[141] int with_static = countValues(*(layers.getCostmap()), LETHAL_OBSTACLE);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/testing_helper.h  ( 26 )
[83] sensor_msgs::PointCloud2Iterator<float> iter_x(cloud, "x");
[84] sensor_msgs::PointCloud2Iterator<float> iter_y(cloud, "y");
[85] sensor_msgs::PointCloud2Iterator<float> iter_z(cloud, "z");
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_2d_publisher.h  ( 14 )
[58] Costmap2DPublisher(ros::NodeHandle * ros_node, Costmap2D* costmap, std::string global_frame, std::string topic_name, bool always_send_full_costmap = false);
[104] std::string global_frame_;
[105] unsigned int x0_, xn_, y0_, yn_;
[106] double saved_origin_x_, saved_origin_y_;
[107] bool active_;
[108] bool always_send_full_costmap_;
[109] ros::Publisher costmap_pub_;
[110] ros::Publisher costmap_update_pub_;
[111] nav_msgs::OccupancyGrid grid_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_math.h  ( 11 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/LoopThread.h  ( 9 )
[83] auto packed_f = [this]() {
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/Rate.h  ( 10 )
[15] std::uint64_t base_time;
[19] std::mutex mtx_cv;
[46] std::uint64_t time_left = base_time * (counter + 1) - ((tv_end.tv_sec - tv_start.tv_sec) * 1000000 + (tv_end.tv_usec - tv_start.tv_usec)) * 1000;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/observation_buffer.h  ( 15 )
[78] ObservationBuffer(std::string topic_name, double observation_keep_time, double expected_update_rate, double min_obstacle_height, double max_obstacle_height, double obstacle_range, double raytrace_range, tf2_ros::Buffer& tf2_buffer, std::string global_frame, std::string sensor_frame, double tf_tolerance);
[143] ros::Time last_updated_;
[144] std::string global_frame_;
[145] std::string sensor_frame_;
[146] std::list<Observation> observation_list_;
[147] std::string topic_name_;
[148] double min_obstacle_height_, max_obstacle_height_;
[149] boost::recursive_mutex lock_;
[150] double obstacle_range_, raytrace_range_;
[151] double tf_tolerance_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/layered_costmap.h  ( 31 )
[61] LayeredCostmap(std::string global_frame, bool rolling_window, bool track_unknown);
[72] double robot_x
[72]  double robot_y
[72]  double robot_yaw
[77] unsigned int size_x
[77]  unsigned int size_y
[77]  double origin_x
[77]  double origin_y
[77]  bool size_locked = false
[134] Costmap2D costmap_;
[135] std::string global_frame_;
[137] bool rolling_window_;
[139] bool current_;
[140] double minx_, miny_, maxx_, maxy_;
[141] unsigned int bx0_, bxn_, by0_, byn_;
[145] bool initialized_;
[146] bool size_locked_;
[147] double circumscribed_radius_, inscribed_radius_;
[148] std::vector<geometry_msgs::Point> footprint_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/footprint.h  ( 17 )
[58]  double min_dist
[58]  double max_dist
[89]  std::vector<geometry_msgs::Point> oriented_footprint
[138] XmlRpc::XmlRpcValue footprint_xmlrpc
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/static_layer.h  ( 39 )
[63] unsigned int x_, y_, width_, height_;
[77] double robot_x
[77]  double robot_y
[77]  double robot_yaw
[77]  double min_x
[77]  double min_y
[77]  double max_x
[77]  double max_y
[78] costmap_2d::Costmap2D master_grid
[78]  int min_i
[78]  int min_j
[78]  int max_i
[78]  int max_j
[101] std::string global_frame_;
[102] std::string map_frame_;
[103] bool subscribe_to_updates_;
[104] bool map_received_;
[105] bool has_updated_data_;
[107] bool track_unknown_space_;
[108] bool use_maximum_;
[109] bool trinary_costmap_;
[111] ros::Subscriber map_sub_, map_update_sub_;
[113] unsigned char lethal_threshold_, unknown_cost_value_;
[115] dynamic_reconfigure::Server<costmap_2d::GenericPluginConfig>* dsrv_;
[118] boost::mutex mutex_item_update;
[120] bool pop_item_update(ITEM_UPDATE& _data);
[122] std::vector<geometry_msgs::Point> transformed_footprint_;
[123] bool footprint_clearing_enabled_;
[127]  unsigned char cost_value
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/layer.h  ( 27 )
[70] double robot_x
[70]  double robot_y
[70]  double robot_yaw
[70]  double min_x
[70]  double min_y
[70]  double max_x
[70]  double max_y
[77] Costmap2D master_grid
[77]  int min_i
[77]  int min_j
[77]  int max_i
[77]  int max_j
[132] bool current_;
[133] bool enabled_;
[135] std::string name_;
[139] std::vector<geometry_msgs::Point> footprint_spec_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/cliff_layer.h  ( 47 )
[69] double robot_x
[69]  double robot_y
[69]  double robot_yaw
[69]  double min_x
[69]  double min_y
[69]  double max_x
[69]  double max_y
[70] costmap_2d::Costmap2D master_grid
[70]  int min_i
[70]  int min_j
[70]  int max_i
[70]  int max_j
[125] std::vector<costmap_2d::Observation> marking_observations
[132] std::vector<costmap_2d::Observation> clearing_observations
[143]  float raytrace_min = 0.0
[148] std::vector<geometry_msgs::Point> transformed_footprint_;
[149] bool footprint_clearing_enabled_;
[153] std::string global_frame_;
[154] double max_obstacle_height_;
[156] laser_geometry::LaserProjection projector_;
[170] std::vector<costmap_2d::Observation> static_clearing_observations_, static_marking_observations_;
[172] bool rolling_window_;
[173] dynamic_reconfigure::Server<costmap_2d::ObstaclePluginConfig> *dsrv_;
[175] int combination_method_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/array_parser.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/voxel_layer.h  ( 26 )
[74] double robot_x
[74]  double robot_y
[74]  double robot_yaw
[74]  double min_x
[74]  double min_y
[74]  double max_x
[74]  double max_y
[76] double new_origin_x
[76]  double new_origin_y
[92]  double w_size_x
[92]  double w_size_y
[92]  bool clear_no_info
[96] dynamic_reconfigure::Server<costmap_2d::VoxelPluginConfig> *voxel_dsrv_;
[98] bool publish_voxel_;
[99] ros::Publisher voxel_pub_;
[100] voxel_grid::VoxelGrid voxel_grid_;
[101] double z_resolution_, origin_z_;
[102] unsigned int unknown_threshold_, mark_threshold_, size_z_;
[103] ros::Publisher clearing_endpoints_pub_;
[104] sensor_msgs::PointCloud clearing_endpoints_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/time.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/cost_values.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/obstacle_layer.h  ( 47 )
[69] double robot_x
[69]  double robot_y
[69]  double robot_yaw
[69]  double min_x
[69]  double min_y
[69]  double max_x
[69]  double max_y
[70] costmap_2d::Costmap2D master_grid
[70]  int min_i
[70]  int min_j
[70]  int max_i
[70]  int max_j
[124] std::vector<costmap_2d::Observation> marking_observations
[131] std::vector<costmap_2d::Observation> clearing_observations
[142]  float raytrace_min = 0.0
[147] std::vector<geometry_msgs::Point> transformed_footprint_;
[148] bool footprint_clearing_enabled_;
[152] std::string global_frame_;
[153] double max_obstacle_height_;
[155] laser_geometry::LaserProjection projector_;
[169] std::vector<costmap_2d::Observation> static_clearing_observations_, static_marking_observations_;
[171] bool rolling_window_;
[172] dynamic_reconfigure::Server<costmap_2d::ObstaclePluginConfig>* dsrv_;
[174] int combination_method_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/observation.h  ( 2 )
[96] geometry_msgs::Point origin_;
[98] double obstacle_range_, raytrace_range_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/nav_log.h  ( 1 )
[11] static std::uint64_t history_time = nav::Now() / 1.0e6; \
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/dynamic_static_layer.h  ( 22 )
[70] double robot_x
[70]  double robot_y
[70]  double robot_yaw
[70]  double min_x
[70]  double min_y
[70]  double max_x
[70]  double max_y
[71] costmap_2d::Costmap2D master_grid
[71]  int min_i
[71]  int min_j
[71]  int max_i
[71]  int max_j
[81] std::vector<geometry_msgs::Point> transformed_footprint_;
[82] bool footprint_clearing_enabled_;
[85] std::string global_frame_;
[87] bool rolling_window_;
[88] dynamic_reconfigure::Server<costmap_2d::ObstaclePluginConfig>* dsrv_;
[90] int combination_method_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_2d.h  ( 60 )
[98]  double win_origin_x
[98]  double win_origin_y
[98]  double win_size_x
[98]  double win_size_y
[243]  unsigned char cost_value
[250]  std::vector<MapLocation> polygon_cells
[264] double new_origin_x
[264]  double new_origin_y
[270] std::string file_name
[272] unsigned int size_x
[272]  unsigned int size_y
[272]  double origin_x
[272]  double origin_y
[281] double world_dist
[306] data_type source_map
[306]  unsigned int sm_lower_left_x
[306]  unsigned int sm_lower_left_y
[306]  unsigned int sm_size_x
[306]  data_type dest_map
[306]  unsigned int dm_lower_left_x
[306]  unsigned int dm_lower_left_y
[306]  unsigned int dm_size_x
[306]  unsigned int region_size_x
[306]  unsigned int region_size_y
[353] unsigned int abs_dx = abs(dx);
[354] unsigned int abs_dy = abs(dy);
[356] int offset_dx = sign(dx);
[357] int offset_dy = sign(dy) * size_x_;
[368] int error_y = abs_dx / 2;
[374] int error_x = abs_dy / 2;
[406] unsigned int size_x_;
[407] unsigned int size_y_;
[408] double resolution_;
[409] double origin_x_;
[410] double origin_y_;
[412] unsigned char default_value_;
[428] unsigned char value_;
[450] std::vector<MapLocation>& cells_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/inflation_layer.h  ( 38 )
[71] unsigned int index_;
[72] unsigned int x_, y_;
[73] unsigned int src_x_, src_y_;
[90] double robot_x
[90]  double robot_y
[90]  double robot_yaw
[90]  double min_x
[90]  double min_y
[90]  double max_x
[90]  double max_y
[91] costmap_2d::Costmap2D master_grid
[91]  int min_i
[91]  int min_j
[91]  int max_i
[91]  int max_j
[110] double euclidean_distance = distance * resolution_;
[122] double inflation_radius
[122]  double cost_scaling_factor
[136] double resolution_;
[137] double inflation_radius_;
[138] double inscribed_radius_;
[139] double weight_;
[140] bool inflate_unknown_;
[181] unsigned int cell_inflation_radius_;
[182] unsigned int cached_cell_inflation_radius_;
[186] int seen_size_;
[190] double last_min_x_, last_min_y_, last_max_x_, last_max_y_;
[192] dynamic_reconfigure::Server<costmap_2d::InflationPluginConfig>* dsrv_;
[195] bool need_reinflation_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_2d_ros.h  ( 58 )
[129] geometry_msgs::PoseStamped global_pose
[181] std::vector<geometry_msgs::Point> oriented_footprint
[229] std::string name_;
[231] std::string global_frame_;
[232] std::string robot_base_frame_;
[233] double transform_tolerance_;
[240]  std::uint8_t _priority
[240]  unsigned char _pri_mode
[255] bool map_update_thread_shutdown_;
[256] bool stop_updates_, initialized_, stopped_, robot_stopped_;
[258] ros::Timer timer_;
[259] ros::Time last_publish_;
[260] ros::Duration publish_cycle;
[261] pluginlib::ClassLoader<Layer> plugin_loader_;
[262] geometry_msgs::PoseStamped old_pose_;
[264] dynamic_reconfigure::Server<costmap_2d::Costmap2DConfig>* dsrv_;
[266] boost::recursive_mutex configuration_mutex_;
[268] ros::Subscriber footprint_sub_;
[269] ros::Publisher footprint_pub_;
[270] std::vector<geometry_msgs::Point> unpadded_footprint_;
[271] std::vector<geometry_msgs::Point> padded_footprint_;
[272] float footprint_padding_;
[273] costmap_2d::Costmap2DConfig old_config_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/include/costmap_2d/costmap_layer.h  ( 23 )
[67] int start_x
[67]  int start_y
[67]  int end_x
[67]  int end_y
[88] costmap_2d::Costmap2D master_grid
[88]  int min_i
[88]  int min_j
[88]  int max_i
[88]  int max_j
[135]  double min_x
[135]  double min_y
[135]  double max_x
[135]  double max_y
[151] bool has_extra_bounds_;
[154] double extra_min_x_, extra_max_x_, extra_min_y_, extra_max_y_;
[158] double clear_min_x_, clear_max_x_, clear_min_y_, clear_max_y_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_layer.cpp  ( 26 )
[6]  double min_x
[6]  double min_y
[6]  double max_x
[6]  double max_y
[21] int start_x
[21]  int start_y
[21]  int end_x
[21]  int end_y
[77] costmap_2d::Costmap2D master_grid
[77]  int min_i
[77]  int min_j
[77]  int max_i
[77]  int max_j
[94] unsigned char old_cost = master_array[it];
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_node.cpp  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d.cpp  ( 48 )
[74] unsigned int size_x
[74]  unsigned int size_y
[81]  double origin_x
[81]  double origin_y
[110]  double win_origin_x
[110]  double win_origin_y
[110]  double win_size_x
[110]  double win_size_y
[122] unsigned int lower_left_x, lower_left_y, upper_right_x, upper_right_y;
[186] double world_dist
[187] double cells_dist = max(0.0, ceil(world_dist / resolution_));
[256] double new_origin_x
[256]  double new_origin_y
[259] int cell_ox, cell_oy;
[271] double new_grid_ox, new_grid_oy;
[286] unsigned int cell_size_x = upper_right_x - lower_left_x;
[287] unsigned int cell_size_y = upper_right_y - lower_left_y;
[304] int start_x = lower_left_x - cell_ox;
[305] int start_y = lower_left_y - cell_oy;
[315]  unsigned char cost_value
[317] std::vector<MapLocation> map_polygon;
[329] std::vector<MapLocation> polygon_cells;
[345] PolygonOutlineCells cell_gatherer(*this, costmap_, polygon_cells);
[352] unsigned int last_index = polygon.size() - 1;
[384] MapLocation min_pt;
[385] MapLocation max_pt;
[386] unsigned int min_x = polygon_cells[0].x;
[387] unsigned int max_x = polygon_cells[polygon_cells.size() - 1].x;
[441] std::string file_name
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/observation_buffer.cpp  ( 17 )
[65] ros::Time transform_time = ros::Time::now();
[66] std::string tf_error;
[76] list<Observation>::iterator obs_it;
[110] geometry_msgs::PointStamped global_origin;
[116] string origin_frame = sensor_frame_ == "" ? cloud.header.frame_id : sensor_frame_;
[121] geometry_msgs::PointStamped local_origin;
[134] sensor_msgs::PointCloud2 global_frame_cloud;
[150] unsigned int cloud_size = global_frame_cloud.height*global_frame_cloud.width;
[153] unsigned int point_count = 0;
[156] sensor_msgs::PointCloud2Iterator<float> iter_z(global_frame_cloud, "z");
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_markers.cpp  ( 28 )
[58] std::string g_marker_ns;
[59] V_Cell g_cells;
[85] uint32_t num_markers = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/layer.cpp  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/layered_costmap.cpp  ( 20 )
[68] LayeredCostmap::LayeredCostmap(std::string global_frame, bool rolling_window, bool track_unknown) : costmap_() , global_frame_(global_frame) , rolling_window_(rolling_window) , current_(false) , minx_(0.0) , miny_(0.0) , maxx_(0.0) , maxy_(0.0) , bx0_(0) , bxn_(0) , by0_(0) , byn_(0) , initialized_(false) , size_locked_(false) , circumscribed_radius_(1.0) , inscribed_radius_(0.1) {
[85] unsigned int size_x
[85]  unsigned int size_y
[85]  double origin_x
[85]  double origin_y
[85]  bool size_locked
[96] double robot_x
[96]  double robot_y
[96]  double robot_yaw
[104] double new_origin_x = robot_x - costmap_.getSizeInMetersX() / 2;
[105] double new_origin_y = robot_y - costmap_.getSizeInMetersY() / 2;
[116] double prev_minx = minx_;
[117] double prev_miny = miny_;
[118] double prev_maxx = maxx_;
[119] double prev_maxy = maxy_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_math.cpp  ( 22 )
[34] double A = pX - x0;
[35] double B = pY - y0;
[36] double C = x1 - x0;
[37] double D = y1 - y0;
[40] double len_sq = C * C + D * D;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/array_parser.cpp  ( 5 )
[48] std::stringstream input_ss(input);
[50] std::vector<float> current_vector;
[88] std::stringstream err_ss;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/footprint.cpp  ( 34 )
[42]  double min_dist
[42]  double max_dist
[54] double vertex_dist = distance(0.0, 0.0, footprint[i].x, footprint[i].y);
[56] double edge_dist = distanceToLine(0.0, 0.0, footprint[i].x, footprint[i].y, footprint[i + 1].x, footprint[i + 1].y);
[108]  std::vector<geometry_msgs::Point> oriented_footprint
[111] double cos_th = cos(theta);
[112] double sin_th = sin(theta);
[115] geometry_msgs::Point new_pt;
[155] int N = 16;
[212] std::string full_param_name;
[213] std::string full_radius_param_name;
[218] XmlRpc::XmlRpcValue footprint_xmlrpc;
[239] double robot_radius;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_ros.cpp  ( 96 )
[57] ros::NodeHandle old_h
[57]  ros::NodeHandle new_h
[57]  bool should_delete = true
[88] ros::NodeHandle private_nh("~/" + name);
[89] ros::NodeHandle g_nh;
[94] ros::Time last_error = ros::Time::now();
[95] std::string tf_error;
[112] bool rolling_window, track_unknown_space, always_send_full_costmap;
[130] XmlRpc::XmlRpcValue my_list;
[146] std::string topic_param, topic;
[703]  uint8_t _priority
[703]  unsigned char _pri_mode
[737] SuperValue super_map;
[738] SuperValue super_array;
[747] ros::NodeHandle map_layer(nh, "static_layer");
[805] ros::NodeHandle target_layer(nh, plugin_name);
[862] double map_update_frequency = config.update_frequency;
[864] double map_publish_frequency = config.publish_frequency;
[871] double map_width_meters = config.width, map_height_meters = config.height, resolution = config.resolution, origin_x = config.origin_x, origin_y = config.origin_y;
[910] std::vector<geometry_msgs::Point> new_footprint;
[943] geometry_msgs::PoseStamped new_pose;
[979] double start_t, end_t, t_diff;
[1011] std::uint64_t diff_s = (nav::Now() - start);
[1114] geometry_msgs::PoseStamped global_pose
[1116] geometry_msgs::PoseStamped robot_pose;
[1120] ros::Time current_time = ros::Time::now();
[1165] std::vector<geometry_msgs::Point> oriented_footprint
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_cloud.cpp  ( 34 )
[58] V_Cell g_marked;
[59] V_Cell g_unknown;
[87] uint32_t num_marked = 0;
[88] uint32_t num_unknown = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/src/costmap_2d_publisher.cpp  ( 11 )
[51] Costmap2DPublisher::Costmap2DPublisher(ros::NodeHandle * ros_node, Costmap2D* costmap, std::string global_frame, std::string topic_name, bool always_send_full_costmap) : node(ros_node), costmap_(costmap), global_frame_(global_frame), active_(false), always_send_full_costmap_(always_send_full_costmap) {
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/cliff_layer.cpp  ( 99 )
[62] bool track_unknown_space;
[73] double transform_tolerance;
[76] std::string topics_string;
[86] ros::NodeHandle source_node(nh, source);
[89] double observation_keep_time, expected_update_rate, min_obstacle_height, max_obstacle_height;
[91] bool inf_is_valid, clearing, marking;
[110] std::string raytrace_range_param_name, obstacle_range_param_name;
[111] std::string raytrace_min_param_name;
[114] double obstacle_range = 2.5;
[121] double raytrace_range = 3.0;
[138] observation_buffers_.push_back(boost::shared_ptr<ObservationBuffer>(new ObservationBuffer( topic, observation_keep_time, expected_update_rate, min_obstacle_height, max_obstacle_height, obstacle_range, raytrace_range, *tf_, global_frame_, sensor_frame, transform_tolerance)));
[215] std::vector<std::string> target_frames;
[341] double robot_x
[341]  double robot_y
[341]  double robot_yaw
[341]  double min_x
[341]  double min_y
[341]  double max_x
[341]  double max_y
[374] double sq_obstacle_range = obs.obstacle_range_ ;
[376] sensor_msgs::PointCloud2ConstIterator<float> iter_x(cloud, "x");
[377] sensor_msgs::PointCloud2ConstIterator<float> iter_y(cloud, "y");
[378] sensor_msgs::PointCloud2ConstIterator<float> iter_z(cloud, "z");
[379] sensor_msgs::PointCloud2ConstIterator<float> iter_intensity(cloud, "intensity");
[400] double sq_dist = (px - obs.origin_.x) * (px - obs.origin_.x) + (py - obs.origin_.y) * (py - obs.origin_.y) + (pz - obs.origin_.z) * (pz - obs.origin_.z);
[439] costmap_2d::Costmap2D master_grid
[439]  int min_i
[439]  int min_j
[439]  int max_i
[439]  int max_j
[495] std::vector<Observation> marking_observations
[511] std::vector<Observation> clearing_observations
[528]  float raytrace_min
[547] double origin_x = origin_x_, origin_y = origin_y_;
[548] double map_end_x = origin_x + size_x_ * resolution_;
[549] double map_end_y = origin_y + size_y_ * resolution_;
[566] double start_x = ox;
[567] double start_y = oy;
[569] float _distance = distance(start_x, start_y, wx, wy);
[617] unsigned int start_phit_x, start_phit_y;
[627] std::uint64_t _index = x1 + y1 * getSizeInCellsY();
[672] double full_distance = hypot(dx, dy);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/inflation_layer.cpp  ( 33 )
[123] unsigned int size_x = costmap->getSizeInCellsX(), size_y = costmap->getSizeInCellsY();
[131] double robot_x
[131]  double robot_y
[131]  double robot_yaw
[131]  double min_x
[131]  double min_y
[131]  double max_x
[131]  double max_y
[149] double tmp_min_x = last_min_x_;
[150] double tmp_min_y = last_min_y_;
[151] double tmp_max_x = last_max_x_;
[152] double tmp_max_y = last_max_y_;
[179] costmap_2d::Costmap2D master_grid
[179]  int min_i
[179]  int min_j
[179]  int max_i
[179]  int max_j
[222] std::vector<CellData>& obs_bin = inflation_cells_[0.0];
[263] unsigned char old_cost = master_array[index];
[365] double inflation_radius
[365]  double cost_scaling_factor
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/dynamic_static_layer.cpp  ( 24 )
[25] bool track_unknown_space;
[65] double robot_x
[65]  double robot_y
[65]  double robot_yaw
[65]  double min_x
[65]  double min_y
[65]  double max_x
[65]  double max_y
[107] costmap_2d::Costmap2D master_grid
[107]  int min_i
[107]  int min_j
[107]  int max_i
[107]  int max_j
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/obstacle_layer.cpp  ( 96 )
[62] bool track_unknown_space;
[73] double transform_tolerance;
[76] std::string topics_string;
[86] ros::NodeHandle source_node(nh, source);
[89] double observation_keep_time, expected_update_rate, min_obstacle_height, max_obstacle_height;
[91] bool inf_is_valid, clearing, marking;
[110] std::string raytrace_range_param_name, obstacle_range_param_name;
[111] std::string raytrace_min_param_name;
[114] double obstacle_range = 2.5;
[121] double raytrace_range = 3.0;
[137] observation_buffers_.push_back(boost::shared_ptr<ObservationBuffer>(new ObservationBuffer( topic, observation_keep_time, expected_update_rate, min_obstacle_height, max_obstacle_height, obstacle_range, raytrace_range, *tf_, global_frame_, sensor_frame, transform_tolerance)));
[214] std::vector<std::string> target_frames;
[357] double robot_x
[357]  double robot_y
[357]  double robot_yaw
[357]  double min_x
[357]  double min_y
[357]  double max_x
[357]  double max_y
[390] double sq_obstacle_range = obs.obstacle_range_ * obs.obstacle_range_;
[392] sensor_msgs::PointCloud2ConstIterator<float> iter_x(cloud, "x");
[393] sensor_msgs::PointCloud2ConstIterator<float> iter_y(cloud, "y");
[394] sensor_msgs::PointCloud2ConstIterator<float> iter_z(cloud, "z");
[409] double sq_dist = (px - obs.origin_.x) * (px - obs.origin_.x) + (py - obs.origin_.y) * (py - obs.origin_.y) + (pz - obs.origin_.z) * (pz - obs.origin_.z);
[448] costmap_2d::Costmap2D master_grid
[448]  int min_i
[448]  int min_j
[448]  int max_i
[448]  int max_j
[487] std::vector<Observation> marking_observations
[503] std::vector<Observation> clearing_observations
[520]  float raytrace_min
[540] double origin_x = origin_x_, origin_y = origin_y_;
[541] double map_end_x = origin_x + size_x_ * resolution_;
[542] double map_end_y = origin_y + size_y_ * resolution_;
[554] double start_x = ox;
[555] double start_y = oy;
[557] float _distance = distance(start_x, start_y, wx, wy);
[606] unsigned int start_phit_x, start_phit_y;
[612] unsigned int cell_raytrace_range = cellDistance(clearing_observation.raytrace_range_);
[658] double full_distance = hypot(dx, dy);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/costmap_2d/plugins/static_layer.cpp  ( 45 )
[162] std::string map_topic;
[169] int temp_lethal_threshold, temp_unknown_cost_value;
[181] nav_msgs::OccupancyGridPtr occ_map = nav_msgs::OccupancyGridPtr(new nav_msgs::OccupancyGrid());
[220] unsigned int size_x = new_map->info.width, size_y = new_map->info.height;
[314] double robot_x
[314]  double robot_y
[314]  double robot_yaw
[314]  double min_x
[314]  double min_y
[314]  double max_x
[314]  double max_y
[326] costmap_2d::Costmap2D master_grid
[326]  unsigned char cost_value
[328] std::vector<MapLocation> map_polygon;
[340] std::vector<MapLocation> polygon_cells;
[451] unsigned int index_base = (update->y + y) * size_x_;
[514]  int min_i
[514]  int min_j
[514]  int max_i
[514]  int max_j
[549] tf2::Transform tf2_transform;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/test/teb_basics.cpp  ( 5 )
[8] double dt_hysteresis = dt/3.;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/homotopy_class_planner.h  ( 58 )
[144]  RobotFootprintModelPtr robot_model = boost::make_shared<PointRobotFootprint>
[164]  bool free_goal_vel=false
[201]  int look_ahead_poses
[227] base_local_planner::CostmapModel costmap_model
[227]  double inscribed_radius = 0.0
[227]  double circumscribed_radius=0.0
[227]  int look_ahead_idx=-1
[285]  double dist_to_obst
[302] BidirIter path_start
[302]  BidirIter path_end
[302]  double start_orientation
[302]  double goal_orientation
[337] int iter_innerloop
[337]  int iter_outerloop
[389]  boost::optional<TimeDiffSequence::iterator> timediff_start = boost::none
[389]  boost::optional<TimeDiffSequence::iterator> timediff_end = boost::none
[407]  double obst_cost_scale=1.0
[407]  double viapoint_cost_scale=1.0
[407]  bool alternative_time_cost=false
[417] double diff_real = std::abs(h2.real() - h1.real());
[418] double diff_imag = std::abs(h2.imag() - h1.imag());
[528] bool delete_detours
[538] bool all_trajectories
[549] TebVisualizationPtr visualization_;
[550] TebOptimalPlannerPtr best_teb_;
[551] EquivalenceClassPtr best_teb_eq_class_;
[552] RobotFootprintModelPtr robot_model_;
[555] EquivalenceClassPtr initial_plan_eq_class_;
[556] TebOptimalPlannerPtr initial_plan_teb_;
[558] TebOptPlannerContainer tebs_;
[560] EquivalenceClassContainer equivalence_classes_;
[563] boost::shared_ptr<GraphSearchInterface> graph_search_;
[565] ros::Time last_eq_class_switching_time_;
[567] std::default_random_engine random_;
[568] bool initialized_;
[570] TebOptimalPlannerPtr last_best_teb_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/visualization.h  ( 26 )
[220]  unsigned int selected_trajectory_idx
[253] ros::Publisher global_plan_pub_;
[254] ros::Publisher local_plan_pub_;
[255] ros::Publisher teb_poses_pub_;
[256] ros::Publisher teb_marker_pub_;
[257] ros::Publisher feedback_pub_;
[261] bool initialized_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/visualization.hpp  ( 14 )
[70] GraphEdgeIterator it_edge, end_edges;
[74] geometry_msgs::Point point_start1;
[79] geometry_msgs::Point point_start2;
[86] geometry_msgs::Point point_start;
[92] geometry_msgs::Point point_end;
[134] GraphVertexIterator it_vert, end_vert;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/misc.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/teb_local_planner_ros.h  ( 80 )
[110]  costmap_2d::Costmap2DROS costmap_ros
[125] geometry_msgs::Twist cmd_vel
[171] double xy_tolerance
[171]  double yaw_tolerance
[212] XmlRpc::XmlRpcValue footprint_xmlrpc
[268]  double min_separation
[309]  std::vector<geometry_msgs::PoseStamped> global_plan
[309]  double dist_behind_robot = 1
[335]  double max_plan_length
[335]  int current_goal_idx = NULL
[335]  geometry_msgs::TransformStamped tf_plan_to_global = NULL
[356]  int moving_average_length = 3
[373]  double max_vel_x
[373]  double max_vel_y
[373]  double max_vel_theta
[373]  double max_vel_x_backwards
[391]  double min_turning_radius = 0
[403] double opt_inscribed_radius
[403]  double costmap_inscribed_radius
[403]  double min_obst_dist
[405]  int goal_idx
[416] PlannerInterfacePtr planner_;
[417] ObstContainer obstacles_;
[419] ViaPointContainer via_points_;
[420] TebVisualizationPtr visualization_;
[421] boost::shared_ptr<base_local_planner::CostmapModel> costmap_model_;
[422] TebConfig cfg_;
[423] FailureDetector failure_detector_;
[425] std::vector<geometry_msgs::PoseStamped> global_plan_;
[428] base_local_planner::OdometryHelperRos odom_helper_;
[431] pluginlib::ClassLoader<costmap_converter::BaseCostmapToPolygons> costmap_converter_loader_;
[433] boost::shared_ptr<costmap_converter::BaseCostmapToPolygons> costmap_converter_;
[437] ros::Subscriber custom_obst_sub_;
[438] boost::mutex custom_obst_mutex_;
[439] costmap_converter::ObstacleArrayMsg custom_obstacle_msg_;
[441] ros::Subscriber via_points_sub_;
[442] bool custom_via_points_active_;
[443] boost::mutex via_point_mutex_;
[445] PoseSE2 robot_pose_;
[446] PoseSE2 robot_goal_;
[447] geometry_msgs::Twist robot_vel_;
[448] bool goal_reached_;
[449] ros::Time time_last_infeasible_plan_;
[450] int no_infeasible_plans_;
[451] ros::Time time_last_oscillation_;
[452] RotType last_preferred_rotdir_;
[453] geometry_msgs::Twist last_cmd_;
[455] std::vector<geometry_msgs::Point> footprint_spec_;
[456] double robot_inscribed_radius_;
[457] double robot_circumscribed_radius;
[459] std::string global_frame_;
[460] std::string robot_base_frame_;
[461] std::string name_;
[464] bool initialized_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/timed_elastic_band.hpp  ( 25 )
[50] BidirIter path_start
[50]  BidirIter path_end
[50]  double max_vel_x
[50]  double max_vel_theta
[50]  boost::optional<double> max_acc_x
[50]  boost::optional<double> max_acc_theta
[50]  boost::optional<double> start_orientation
[50]  boost::optional<double> goal_orientation
[50]  int min_samples
[50]  bool guess_backwards_motion
[51] Eigen::Vector2d start_position = fun_position( *path_start );
[52] Eigen::Vector2d goal_position = fun_position( *boost::prior(path_end) );
[56] double start_orient, goal_orient;
[95] Eigen::Vector2d curr_point = fun_position(*path_start);
[96] Eigen::Vector2d diff_last = curr_point - Pose(idx).position();
[98] double diff_norm = diff_last.norm();
[100] double timestep_vel = diff_norm/max_vel_x;
[101] double timestep_acc;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/obstacles.h  ( 30 )
[113]  double min_dist
[284] bool dynamic_;
[285] Eigen::Vector2d centroid_velocity_;
[350] Eigen::Vector2d nearest_point = line_start + a*t;
[436] Eigen::Vector2d pos_;
[585] double radius_ = 0.0;
[731] Eigen::Vector2d start_;
[732] Eigen::Vector2d end_;
[734] Eigen::Vector2d centroid_;
[820] Eigen::Vector2d closed_point_line = closest_point_on_line_segment_2d(position, start_, end_);
[991] Point2dContainer pred_vertices;
[1103] Point2dContainer vertices_;
[1106] bool finalized_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/equivalence_relations.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/pose_se2.h  ( 11 )
[280]  bool adjust_theta=true
[281] double new_x = std::cos(angle)*_position.x() - std::sin(angle)*_position.y();
[282] double new_y = std::sin(angle)*_position.x() + std::cos(angle)*_position.y();
[396] Eigen::Vector2d _position;
[397] double _theta;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/homotopy_class_planner.hpp  ( 10 )
[49] BidirIter path_start
[49]  BidirIter path_end
[49]  boost::optional<TimeDiffSequence::iterator> timediff_start
[49]  boost::optional<TimeDiffSequence::iterator> timediff_end
[67]  double start_orientation
[67]  double goal_orientation
[78] EquivalenceClassPtr H = calculateEquivalenceClass(candidate->teb().poses().begin(), candidate->teb().poses().end(), getCplxFromVertexPosePtr, obstacles_, candidate->teb().timediffs().begin(), candidate->teb().timediffs().end());
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/robot_footprint_model.h  ( 36 )
[256] double radius_;
[291] double front_offset
[291]  double front_radius
[291]  double rear_offset
[291]  double rear_radius
[302] double dist_front = obstacle->getMinimumDistance(current_pose.position() + front_offset_*dir) - front_radius_;
[303] double dist_rear = obstacle->getMinimumDistance(current_pose.position() - rear_offset_*dir) - rear_radius_;
[367] double min_longitudinal = std::min(rear_offset_ + rear_radius_, front_offset_ + front_radius_);
[368] double min_lateral = std::min(rear_radius_, front_radius_);
[374] double front_offset_;
[375] double front_radius_;
[376] double rear_offset_;
[377] double rear_radius_;
[446] Eigen::Vector2d line_start_world;
[447] Eigen::Vector2d line_end_world;
[519] double cos_th = std::cos(current_pose.theta());
[520] double sin_th = std::sin(current_pose.theta());
[527] Eigen::Vector2d line_start_;
[528] Eigen::Vector2d line_end_;
[572] Point2dContainer polygon_world(vertices_.size());
[636] double min_dist = std::numeric_limits<double>::max();
[645] double vertex_dist = vertices_[i].norm();
[646] double edge_dist = distance_point_to_segment_2d(center, vertices_[i], vertices_[i+1]);
[674] Point2dContainer vertices_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/timed_elastic_band.h  ( 37 )
[369]  double max_vel_x=0.5
[369]  int min_samples = 3
[369]  bool guess_backwards_motion = false
[409] BidirIter path_start
[409]  BidirIter path_end
[409]  double max_vel_theta
[409]  boost::optional<double> max_acc_x
[409]  boost::optional<double> max_acc_theta
[409]  boost::optional<double> start_orientation
[409]  boost::optional<double> goal_orientation
[427]  bool estimate_orient=false
[507] double dt_ref
[507]  double dt_hysteresis
[507]  int max_samples=1000
[507]  bool fast_mode=false
[549]  int begin_idx=0
[638]  double max_dist_behind_robot=-1
[638]  int skip_poses=0
[645] PoseSequence pose_vec_;
[646] TimeDiffSequence timediff_vec_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/teb_config.h  ( 116 )
[65] std::string odom_topic;
[66] std::string map_frame;
[71] double teb_autosize;
[72] double dt_ref;
[73] double dt_hysteresis;
[74] int min_samples;
[75] int max_samples;
[76] bool global_plan_overwrite_orientation;
[77] bool allow_init_with_backwards_motion;
[78] double global_plan_viapoint_sep;
[79] bool via_points_ordered;
[80] double max_global_plan_lookahead_dist;
[81] double global_plan_prune_distance;
[82] bool exact_arc_length;
[83] double force_reinit_new_goal_dist;
[84] double force_reinit_new_goal_angular;
[85] int feasibility_check_no_poses;
[86] bool publish_feedback;
[87] double min_resolution_collision_check_angular;
[88] int control_look_ahead_poses;
[94] double max_vel_x;
[95] double max_vel_x_backwards;
[96] double max_vel_y;
[97] double max_vel_theta;
[98] double acc_lim_x;
[99] double acc_lim_y;
[100] double acc_lim_theta;
[101] double min_turning_radius;
[103] bool cmd_angle_instead_rotvel;
[104] bool is_footprint_dynamic;
[105] bool use_proportional_saturation;
[106] double transform_tolerance = 0.5;
[112] double yaw_goal_tolerance;
[113] double xy_goal_tolerance;
[114] bool free_goal_vel;
[115] bool complete_global_plan;
[121] double min_obstacle_dist;
[122] double inflation_dist;
[123] double dynamic_obstacle_inflation_dist;
[124] bool include_dynamic_obstacles;
[125] bool include_costmap_obstacles;
[126] double costmap_obstacles_behind_robot_dist;
[127] int obstacle_poses_affected;
[128] bool legacy_obstacle_association;
[129] double obstacle_association_force_inclusion_factor;
[130] double obstacle_association_cutoff_factor;
[131] std::string costmap_converter_plugin;
[132] bool costmap_converter_spin_thread;
[133] int costmap_converter_rate;
[134] double obstacle_proximity_ratio_max_vel;
[135] double obstacle_proximity_lower_bound;
[136] double obstacle_proximity_upper_bound;
[143] int no_inner_iterations;
[144] int no_outer_iterations;
[146] bool optimization_activate;
[147] bool optimization_verbose;
[149] double penalty_epsilon;
[151] double weight_max_vel_x;
[152] double weight_max_vel_y;
[153] double weight_max_vel_theta;
[154] double weight_acc_lim_x;
[155] double weight_acc_lim_y;
[156] double weight_acc_lim_theta;
[157] double weight_kinematics_nh;
[158] double weight_kinematics_forward_drive;
[159] double weight_kinematics_turning_radius;
[160] double weight_optimaltime;
[161] double weight_shortest_path;
[162] double weight_obstacle;
[163] double weight_inflation;
[164] double weight_dynamic_obstacle;
[165] double weight_dynamic_obstacle_inflation;
[166] double weight_velocity_obstacle_ratio;
[167] double weight_viapoint;
[168] double weight_prefer_rotdir;
[170] double weight_adapt_factor;
[171] double obstacle_cost_exponent;
[177] bool enable_homotopy_class_planning;
[178] bool enable_multithreading;
[179] bool simple_exploration;
[180] int max_number_classes;
[181] int max_number_plans_in_current_class;
[182] double selection_cost_hysteresis;
[183] double selection_prefer_initial_plan;
[184] double selection_obst_cost_scale;
[185] double selection_viapoint_cost_scale;
[186] bool selection_alternative_time_cost;
[187] double selection_dropping_probability;
[188] double switching_blocking_period;
[190] int roadmap_graph_no_samples;
[191] double roadmap_graph_area_width;
[192] double roadmap_graph_area_length_scale;
[193] double h_signature_prescaler;
[194] double h_signature_threshold;
[196] double obstacle_keypoint_offset;
[197] double obstacle_heading_threshold;
[199] bool viapoints_all_candidates;
[201] bool visualize_hc_graph;
[202] double visualize_with_time_as_z_axis_scale;
[203] bool delete_detours_backwards;
[204] double detours_orientation_tolerance;
[205] double length_start_orientation_vector;
[206] double max_ratio_detours_duration_best_duration;
[212] bool shrink_horizon_backup;
[213] double shrink_horizon_min_duration;
[214] bool oscillation_recovery;
[215] double oscillation_v_eps;
[216] double oscillation_omega_eps;
[217] double oscillation_recovery_min_duration;
[218] double oscillation_filter_duration;
[219] bool divergence_detection_enable;
[220] int divergence_detection_max_chi_squared;
[414] boost::mutex config_mutex_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/recovery_behaviors.h  ( 11 )
[87]  double v_max
[87]  double v_backwards_max
[87]  double omega_max
[87]  double v_eps
[87]  double omega_eps
[126] boost::circular_buffer<VelMeasurement> buffer_;
[127] bool oscillating_ = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/optimal_planner.h  ( 44 )
[134]  RobotFootprintModelPtr robot_model = boost::make_shared<PointRobotFootprint>
[161]  bool free_goal_vel=false
[209]  int look_ahead_poses
[239] int iterations_innerloop
[239]  int iterations_outerloop
[239]  bool compute_cost_afterwards = false
[239]  double obst_cost_scale=1.0
[239]  double viapoint_cost_scale=1.0
[239]  bool alternative_time_cost=false
[281] ObstContainer obst_vector
[479] std::vector<geometry_msgs::Twist> velocity_profile
[508] base_local_planner::CostmapModel costmap_model
[508]  double inscribed_radius = 0.0
[508]  double circumscribed_radius=0.0
[508]  int look_ahead_idx=-1
[529] double weight_multiplier=1.0
[543] int no_iterations
[543]  bool clear_after=true
[685] std::vector<ObstContainer> obstacles_per_vertex_;
[687] double cost_;
[688] RotType prefer_rotdir_;
[691] TebVisualizationPtr visualization_;
[692] TimedElasticBand teb_;
[693] RobotFootprintModelPtr robot_model_;
[694] boost::shared_ptr<g2o::SparseOptimizer> optimizer_;
[698] bool initialized_;
[699] bool optimized_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/distance_calculations.h  ( 41 )
[63] double sq_norm = diff.squaredNorm();
[101] double s_numer, t_numer, denom, t;
[178] double new_dist = distance_point_to_segment_2d(point, vertices.at(i), vertices.at(i+1));
[287] double D = a*c - b*b;
[409]  double bound_cpa_time = 0
[412] VectorType P1 = x1 + (ctime * vel1);
[413] VectorType P2 = x2 + (ctime * vel2);
[432] VectorType Pb = line_base + b * line_dir;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/h_signature.h  ( 46 )
[98] BidirIter path_start
[98]  BidirIter path_end
[125] cplx map_bottom_left;
[126] cplx map_top_right;
[140] std::vector<double> imag_proposals(5);
[150] cplx obst_l = obstacles->at(l)->getCentroidCplx();
[155] cplx Al = f0;
[160] cplx obst_j = obstacles->at(j)->getCentroidCplx();
[173] double log_real = std::log(diff2)-std::log(diff1);
[175] double arg_diff = std::arg(z2-obst_l)-std::arg(z1-obst_l);
[181] double log_imag = *std::min_element(imag_proposals.begin(),imag_proposals.end(),smaller_than_abs);
[182] cplx log_value(log_real,log_imag);
[200] double diff_real = std::abs(hother->hsignature_.real() - hsignature_.real());
[201] double diff_imag = std::abs(hother->hsignature_.imag() - hsignature_.imag());
[284]  boost::optional<TimeDiffSequence::iterator> timediff_start
[284]  boost::optional<TimeDiffSequence::iterator> timediff_end
[293] double H = 0;
[294] double transition_time = 0;
[295] double next_transition_time = 0;
[296] BidirIter path_iter;
[297] TimeDiffSequence::iterator timediff_iter;
[305] double ds_sq_norm = ds.squaredNorm();
[323] Eigen::Vector3d direction_vec;
[421] std::vector<double> hsignature3d_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/graph_search.h  ( 12 )
[111]  double dist_to_obst
[111]  double obstacle_heading_threshold
[120] HcGraph graph_;
[140]  double start_orientation
[140]  double goal_orientation
[208] boost::random::mt19937 rnd_generator_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/planner_interface.h  ( 19 )
[99]  bool free_goal_vel=false
[136]  int look_ahead_poses
[165] RobotFootprintModelPtr robot_model
[182] base_local_planner::CostmapModel costmap_model
[182]  double inscribed_radius = 0.0
[182]  double circumscribed_radius=0.0
[182]  int look_ahead_idx=-1
[192]  double obst_cost_scale=1.0
[192]  bool alternative_time_cost=false
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_dynamic_obstacle.h  ( 5 )
[141] double t_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_velocity_obstacle_ratio.h  ( 13 )
[105] double dist_to_obstacle = robot_model_->calculateDistance(conf1->pose(), _measurement);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_acceleration.h  ( 50 )
[176] double sum_time = deltaT1->estimate() + deltaT2->estimate();
[177] double sum_time_inv = 1 / sum_time;
[178] double dt1_inv = 1/deltaT1->estimate();
[179] double dt2_inv = 1/deltaT2->estimate();
[193] double dev_border_acc = penaltyBoundToIntervalDerivative(acc, tebConfig.robot_acceleration_max_trans,optimizationConfig.optimization_boundaries_epsilon,optimizationConfig.optimization_boundaries_scale,optimizationConfig.optimization_boundaries_order);
[194] double dev_border_omegadot = penaltyBoundToIntervalDerivative(omegadot, tebConfig.robot_acceleration_max_rot,optimizationConfig.optimization_boundaries_epsilon,optimizationConfig.optimization_boundaries_scale,optimizationConfig.optimization_boundaries_order);
[502] double cos_theta1 = std::cos(pose1->theta());
[503] double sin_theta1 = std::sin(pose1->theta());
[504] double cos_theta2 = std::cos(pose2->theta());
[505] double sin_theta2 = std::sin(pose2->theta());
[508] double p1_dx = cos_theta1*diff1.x() + sin_theta1*diff1.y();
[509] double p1_dy = -sin_theta1*diff1.x() + cos_theta1*diff1.y();
[511] double p2_dx = cos_theta2*diff2.x() + sin_theta2*diff2.y();
[512] double p2_dy = -sin_theta2*diff2.x() + cos_theta2*diff2.y();
[514] double vel1_x = p1_dx / dt1->dt();
[515] double vel1_y = p1_dy / dt1->dt();
[516] double vel2_x = p2_dx / dt2->dt();
[517] double vel2_y = p2_dy / dt2->dt();
[521] double acc_x = (vel2_x - vel1_x)*2 / dt12;
[522] double acc_y = (vel2_y - vel1_y)*2 / dt12;
[604] double acc_lin_x = (vel2_x - vel1_x) / dt->dt();
[605] double acc_lin_y = (vel2_y - vel1_y) / dt->dt();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_velocity.h  ( 18 )
[141] double dev_border_vel = penaltyBoundToIntervalDerivative(vel, -cfg_->robot.max_vel_x_backwards, cfg_->robot.max_vel_x,cfg_->optim.penalty_epsilon);
[142] double dev_border_omega = penaltyBoundToIntervalDerivative(omega, cfg_->robot.max_vel_theta,cfg_->optim.penalty_epsilon);
[244] double cos_theta1 = std::cos(conf1->theta());
[245] double sin_theta1 = std::sin(conf1->theta());
[248] double r_dx = cos_theta1*deltaS.x() + sin_theta1*deltaS.y();
[249] double r_dy = -sin_theta1*deltaS.x() + cos_theta1*deltaS.y();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/base_teb_edges.h  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/vertex_pose.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/penalties.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/vertex_timediff.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_shortest_path.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_time_optimal.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_prefer_rotdir.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_kinematics.h  ( 13 )
[100] Eigen::Vector2d angle_vec ( cos(conf1->theta()), sin(conf1->theta()) );
[127] double dd_error_1 = deltaS[0]*cos1;
[128] double dd_error_2 = deltaS[1]*sin1;
[129] double dd_dev = penaltyBoundFromBelowDerivative(dd_error_1+dd_error_2, 0,0);
[132] double dev_nh_abs = g2o::sign( ( cos(conf1->theta())+cos(conf2->theta()) ) * deltaS[1] - ( sin(conf1->theta())+sin(conf2->theta()) ) * deltaS[0] );
[209] double angle_diff = g2o::normalize_theta( conf2->theta() - conf1->theta() );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_obstacle.h  ( 17 )
[122] double dist_squared = deltaS.squaredNorm();
[126] double dev_left_border = penaltyBoundFromBelowDerivative(dist*fabs(aux0),cfg_->obstacles.min_obstacle_dist,cfg_->optim.penalty_epsilon);
[137] double dev_norm_x = deltaS[0]*aux1;
[138] double dev_norm_y = deltaS[1]*aux1;
[142] double dev_proj_x = aux3 * deltaS[1] * dist;
[143] double dev_proj_y = -aux3 * deltaS[0] * dist;
[144] double dev_proj_angle = -aux2;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/include/teb_local_planner/g2o_types/edge_via_point.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/homotopy_class_planner.cpp  ( 75 )
[62]  RobotFootprintModelPtr robot_model
[94]  bool free_goal_vel
[110] PoseSE2 start_pose(start);
[111] PoseSE2 goal_pose(goal);
[129] double ViaPoint = boost::posix_time::microsec_clock::local_time().time_of_day().total_milliseconds();
[147]  int look_ahead_poses
[148] TebOptimalPlannerConstPtr best_teb = bestTeb();
[186] int best_idx = bestTebIdx();
[234] bool delete_detours
[239] TebOptPlannerContainer::iterator it_best_teb = best_teb_ ? std::find(tebs_.begin(), tebs_.end(), best_teb_) : tebs_.end();
[240] bool has_best_teb = it_best_teb != tebs_.end();
[254] TebOptPlannerContainer::iterator it_teb = has_best_teb ? std::next(tebs_.begin(), 1) : tebs_.begin();
[259] EquivalenceClassPtr equivalence_class = calculateEquivalenceClass(it_teb->get()->teb().poses().begin(), it_teb->get()->teb().poses().end(), getCplxFromVertexPosePtr , obstacles_, it_teb->get()->teb().timediffs().begin(), it_teb->get()->teb().timediffs().end());
[265] bool new_flag = addEquivalenceClassIfNew(equivalence_class);
[324] bool all_trajectories
[357]  double dist_to_obst
[390] EquivalenceClassPtr H = calculateEquivalenceClass(candidate->teb().poses().begin(), candidate->teb().poses().end(), getCplxFromVertexPosePtr, obstacles_, candidate->teb().timediffs().begin(), candidate->teb().timediffs().end());
[481] int iter_innerloop
[481]  int iter_outerloop
[490] boost::thread_group teb_threads;
[560] auto it_eqrel = equivalence_classes_.begin();
[580] double min_cost = std::numeric_limits<double>::max();
[581] double min_cost_last_best = std::numeric_limits<double>::max();
[582] double min_cost_initial_plan_teb = std::numeric_limits<double>::max();
[583] TebOptimalPlannerPtr initial_plan_teb = getInitialPlanTEB();
[615] double teb_cost;
[702] base_local_planner::CostmapModel costmap_model
[702]  double inscribed_radius
[702]  double circumscribed_radius
[702]  int look_ahead_idx
[734] TebOptPlannerContainer::iterator return_iterator = tebs_.end();
[740] auto it_eq_classes = equivalence_classes_.begin();
[773]  double obst_cost_scale
[773]  double viapoint_cost_scale
[773]  bool alternative_time_cost
[788] double current_movement_orientation;
[789] double best_plan_duration = std::max(best_teb_->teb().getSumOfAllTimeDiffs(), 1.0);
[805] double plan_orientation;
[837] bool second_pose_found = false;
[838] Eigen::Vector2d start_vector;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/test_optim_node.cpp  ( 42 )
[54] std::vector<ObstaclePtr> obst_vector;
[55] ViaPointContainer via_points;
[58] ros::Subscriber custom_obst_sub;
[59] ros::Subscriber via_points_sub;
[60] ros::Subscriber clicked_points_sub;
[61] std::vector<ros::Subscriber> obst_vel_subs;
[62] unsigned int no_fixed_obstacles;
[69]  interactive_markers::InteractiveMarkerServer marker_server
[69]  interactive_markers::InteractiveMarkerServer::FeedbackCallback feedback_cb
[86] ros::Timer cycle_timer = n.createTimer(ros::Duration(0.025), CB_mainCycle);
[87] ros::Timer publish_timer = n.createTimer(ros::Duration(0.1), CB_publishCycle);
[134] obst_vel_subs.push_back(n.subscribe<geometry_msgs::Twist>(topic, 1, boost::bind(&CB_setObstacleVelocity, _1, i)));
[150] RobotFootprintModelPtr robot_model = TebLocalPlannerROS::getRobotFootprintFromParamServer(n);
[187] visualization_msgs::InteractiveMarker i_marker;
[200] visualization_msgs::Marker box_marker;
[213] visualization_msgs::InteractiveMarkerControl box_control;
[221] visualization_msgs::InteractiveMarkerControl move_control;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/teb_local_planner_ros.cpp  ( 121 )
[88] RobotFootprintModelPtr robot_model = getRobotFootprintFromParamServer(nh);
[93]  costmap_2d::Costmap2DROS costmap_ros
[144] std::string converter_name = costmap_converter_loader_.getName(cfg_.obstacles.costmap_converter_plugin);
[207] ros::NodeHandle nh_move_base("~");
[208] double controller_frequency = 5;
[249] geometry_msgs::Twist cmd_vel
[250] std::string dummy_message;
[251] geometry_msgs::PoseStamped dummy_pose;
[252] geometry_msgs::TwistStamped dummy_velocity, cmd_vel_stamped;
[280] geometry_msgs::PoseStamped robot_pose;
[285] geometry_msgs::PoseStamped robot_vel_tf;
[295] std::vector<geometry_msgs::PoseStamped> transformed_plan;
[296] int goal_idx;
[297] geometry_msgs::TransformStamped tf_plan_to_global;
[313] geometry_msgs::PoseStamped global_goal;
[317] double delta_orient = g2o::normalize_theta(tf2::getYaw(global_goal.pose.orientation) - robot_pose_.theta());
[383] boost::mutex::scoped_lock cfg_lock(cfg_.configMutex());
[388] std::uint64_t start_ms = ros::Time::now().toNSec() / 1.0e6;
[522] Eigen::Vector2d robot_orient = robot_pose_.orientationUnitVec();
[534] Eigen::Vector2d obs_dir = obs - robot_pose_.position();
[599] Eigen::Affine3d obstacle_to_map_eig;
[604] geometry_msgs::TransformStamped obstacle_to_map = tf_->lookupTransform( global_frame_, ros::Time(0), custom_obstacle_msg_.header.frame_id, ros::Time(0), custom_obstacle_msg_.header.frame_id, ros::Duration(cfg_.robot.transform_tolerance));
[635] Eigen::Vector3d line_start(custom_obstacle_msg_.obstacles.at(i).polygon.points.front().x, custom_obstacle_msg_.obstacles.at(i).polygon.points.front().y, custom_obstacle_msg_.obstacles.at(i).polygon.points.front().z);
[638] Eigen::Vector3d line_end(custom_obstacle_msg_.obstacles.at(i).polygon.points.back().x, custom_obstacle_msg_.obstacles.at(i).polygon.points.back().y, custom_obstacle_msg_.obstacles.at(i).polygon.points.back().z);
[673]  double min_separation
[678] std::size_t prev_idx = 0;
[704]  std::vector<geometry_msgs::PoseStamped> global_plan
[704]  double dist_behind_robot
[712] geometry_msgs::TransformStamped global_to_plan_transform = tf.lookupTransform(global_plan.front().header.frame_id, global_pose.header.frame_id, ros::Time(0));
[716] double dist_thresh_sq = dist_behind_robot * dist_behind_robot;
[720] std::vector<geometry_msgs::PoseStamped>::iterator erase_end = it;
[725] double dist_sq = dx * dx + dy * dy;
[770] std::vector<geometry_msgs::PoseStamped>::iterator erase_start = it;
[807]  double max_plan_length
[807]  int current_goal_idx
[827] geometry_msgs::TransformStamped plan_to_global_transform = tf.lookupTransform(global_frame, ros::Time(), plan_pose.header.frame_id, plan_pose.header.stamp, plan_pose.header.frame_id, ros::Duration(cfg_.robot.transform_tolerance));
[835] double dist_threshold = std::max(costmap.getSizeInCellsX() * costmap.getResolution() / 2.0, costmap.getSizeInCellsY() * costmap.getResolution() / 2.0);
[840] double sq_dist_threshold = dist_threshold * dist_threshold;
[842] double sq_dist = 1e10;
[845] bool robot_reached = false;
[848] double x_diff = robot_pose.pose.position.x - global_plan[j].pose.position.x;
[849] double y_diff = robot_pose.pose.position.y - global_plan[j].pose.position.y;
[850] double new_sq_dist = x_diff * x_diff + y_diff * y_diff;
[869] geometry_msgs::PoseStamped newer_pose;
[871] double plan_length = 0;
[955]  int moving_average_length
[967] tf2::Quaternion global_orientation;
[982] geometry_msgs::PoseStamped tf_pose_k = local_goal;
[983] geometry_msgs::PoseStamped tf_pose_kp1;
[985] int range_end = current_goal_idx + moving_average_length;
[1002]  double max_vel_x
[1002]  double max_vel_y
[1002]  double max_vel_theta
[1002]  double max_vel_x_backwards
[1003] double ratio_x = 1, ratio_omega = 1, ratio_y = 1;
[1040]  double min_turning_radius
[1052] double opt_inscribed_radius
[1052]  double costmap_inscribed_radius
[1052]  double min_obst_dist
[1064] ros::Time current_time = ros::Time::now();
[1081] int horizon_reduction = goal_idx / 2;
[1094] int new_goal_idx_transformed_plan = int(transformed_plan.size()) - horizon_reduction - 1;
[1106] double max_vel_current = last_cmd_.linear.x >= 0 ? cfg_.robot.max_vel_x : cfg_.robot.max_vel_x_backwards;
[1120] bool recently_oscillated = (ros::Time::now() - time_last_oscillation_).toSec() < cfg_.recovery .oscillation_recovery_min_duration;
[1180] std::string model_name;
[1256] double front_offset, front_radius, rear_offset, rear_radius;
[1271] XmlRpc::XmlRpcValue footprint_xmlrpc;
[1355] std::string &value_string = value;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/teb_config.cpp  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/optimal_planner.cpp  ( 78 )
[90] RobotFootprintModelPtr robot_model
[174] std::unique_ptr<TEBLinearSolver> linear_solver(new TEBLinearSolver());
[176] std::unique_ptr<TEBBlockSolver> block_solver(new TEBBlockSolver(std::move(linear_solver)));
[188] int iterations_innerloop
[188]  int iterations_outerloop
[188]  bool compute_cost_afterwards
[188]  double obst_cost_scale
[188]  double viapoint_cost_scale
[188]  bool alternative_time_cost
[194] double weight_multiplier = 1.0;
[200] bool fast_mode = !cfg_->obstacles.include_dynamic_obstacles;
[255]  bool free_goal_vel
[265] PoseSE2 start_(initial_plan.front().pose);
[266] PoseSE2 goal_(initial_plan.back().pose);
[393] int no_iterations
[393]  bool clear_after
[449] unsigned int id_counter = 0;
[451] auto iter_obstacle = obstacles_per_vertex_.begin();
[483] auto create_edge = [inflated, &information, &information_inflated, this](int index, const Obstacle* obstacle) {
[507] double left_min_dist = std::numeric_limits<double>::max();
[508] double right_min_dist = std::numeric_limits<double>::max();
[509] ObstaclePtr left_obstacle;
[510] ObstaclePtr right_obstacle;
[697] int start_pose_idx = 0;
[1039] auto stats_vector = optimizer_->batchStatistics();
[1057] bool graph_exist_flag(false);
[1086] double cur_cost = (*it)->chi2();
[1134] double cos_theta1 = std::cos(pose1.theta());
[1135] double sin_theta1 = std::sin(pose1.theta());
[1136] double p1_dx = cos_theta1 * deltaS.x() + sin_theta1 * deltaS.y();
[1137] double p1_dy = -sin_theta1 * deltaS.x() + cos_theta1 * deltaS.y();
[1148]  int look_ahead_poses
[1188] std::vector<geometry_msgs::Twist> velocity_profile
[1223] double curr_time = 0;
[1244] double vel1_x, vel1_y, vel2_x, vel2_y, omega1, omega2;
[1269] base_local_planner::CostmapModel costmap_model
[1269]  double inscribed_radius
[1269]  double circumscribed_radius
[1269]  int look_ahead_idx
[1290] double delta_rot = g2o::normalize_theta(g2o::normalize_theta(teb().Pose(i + 1).theta()) - g2o::normalize_theta(teb().Pose(i).theta()));
[1291] Eigen::Vector2d delta_dist = teb().Pose(i + 1).position() - teb().Pose(i).position();
[1298] int n_additional_samples = std::max(std::ceil(fabs(delta_rot) / cfg_->trajectory.min_resolution_collision_check_angular), std::ceil(delta_dist.norm() / inscribed_radius)) - 1;
[1299] PoseSE2 intermediate_pose = teb().Pose(i);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/timed_elastic_band.cpp  ( 65 )
[54]  double max_vel_x
[54]  double max_vel_theta
[55] double dt_constant_motion = 0.1;
[57] double trans_dist = (end.position() - start.position()).norm();
[61] double rot_dist = std::abs(g2o::normalize_theta(end.theta() - start.theta()));
[228] double dt_ref
[228]  double dt_hysteresis
[228]  int min_samples
[228]  int max_samples
[228]  bool fast_mode
[280] for(TimeDiffSequence::const_iterator dt_it = timediff_vec_.begin(); dt_it != timediff_vec_.end(); ++dt_it)
[313]  bool guess_backwards_motion
[323] Eigen::Vector2d point_to_goal = goal.position()-start.position();
[324] double dir_to_goal = std::atan2(point_to_goal[1],point_to_goal[0]);
[327] double orient_init = dir_to_goal;
[333] double dist_to_goal = point_to_goal.norm();
[334] double no_steps_d = dist_to_goal/std::abs(diststep);
[335] unsigned int no_steps = (unsigned int) std::floor(no_steps_d);
[355] PoseSE2 intermediate_pose = PoseSE2::average(BackPose(), goal);
[379]  bool estimate_orient
[445]  int begin_idx
[450] double min_dist_sq = std::numeric_limits<double>::max();
[451] int min_idx = -1;
[455] double dist_sq = (ref_point - Pose(i).position()).squaredNorm();
[472] double min_dist = std::numeric_limits<double>::max();
[506] double dist_to_polygon = std::numeric_limits<double>::max();
[553] double dist_cache = (new_start->position()- Pose(0).position()).norm();
[557] int nearest_idx = 0;
[590]  double max_dist_behind_robot
[590]  int skip_poses
[594] double radius_sq = radius*radius;
[595] double max_dist_behind_robot_sq = max_dist_behind_robot*max_dist_behind_robot;
[596] Eigen::Vector2d robot_orient = Pose(0).orientationUnitVec();
[600] Eigen::Vector2d dist_vec = Pose(i).position()-Pose(0).position();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/recovery_behaviors.cpp  ( 11 )
[53]  double v_max
[53]  double v_backwards_max
[53]  double omega_max
[53]  double v_eps
[53]  double omega_eps
[92] double v_mean = 0;
[93] double omega_mean = 0;
[94] int omega_zero_crossings = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/graph_search.cpp  ( 33 )
[47]  double start_orientation
[47]  double goal_orientation
[94]  double dist_to_obst
[94]  double obstacle_heading_threshold
[118] HcGraphVertexType start_vtx = boost::add_vertex(graph_);
[124] double min_dist = DBL_MAX;
[152] HcGraphVertexType goal_vtx = boost::add_vertex(graph_);
[156] HcGraphVertexIterator it_i, end_i, it_j, end_j;
[177] Eigen::Vector2d keypoint_dist = graph_[*it_j].pos-start.position();
[179] Eigen::Vector2d start_orient_vec( cos(start.theta()), sin(start.theta()) );
[228] double start_goal_dist = diff.norm();
[246] double area_width = cfg_->hcp.roadmap_graph_area_width;
[248] boost::random::uniform_real_distribution<double> distribution_x(0, start_goal_dist * cfg_->hcp.roadmap_graph_area_length_scale);
[249] boost::random::uniform_real_distribution<double> distribution_y(0, area_width);
[252] Eigen::Rotation2D<double> rot_phi(phi);
[254] Eigen::Vector2d area_origin;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/obstacles.cpp  ( 14 )
[85] double A = 0;
[107] int i_cand = 0;
[108] int j_cand = 0;
[109] double max_dist = 0;
[141] Eigen::Vector2d new_pt = closest_point_on_line_segment_2d(position, vertices_.at(0), vertices_.at(1));
[146] Eigen::Vector2d closest_pt = new_pt;
[152] double new_dist = (new_pt-position).norm();
[179]  double min_dist
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/teb_local_planner/src/visualization.cpp  ( 36 )
[94] nav_msgs::Path teb_path;
[99] geometry_msgs::PoseArray teb_poses;
[387] PoseSequence::const_iterator it_pose = it_teb->get()->teb().poses().begin();
[388] TimeDiffSequence::const_iterator it_timediff = it_teb->get()->teb().timediffs().begin();
[389] PoseSequence::const_iterator it_pose_end = it_teb->get()->teb().poses().end();
[395] geometry_msgs::Point point_start;
[403] geometry_msgs::Point point_end;
[423]  unsigned int selected_trajectory_idx
[433] std::size_t idx_traj = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/astar.h  ( 14 )
[72]  double start_x
[72]  double start_y
[72]  double end_x
[72]  double end_y
[76]  float prev_potential
[76]  int next_i
[77] std::vector<Index> queue_;
[78] bool use_safe_control_ = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/dijkstra.h  ( 21 )
[83]  double start_x
[83]  double start_y
[83]  double end_x
[83]  double end_y
[93] unsigned char neutral_cost
[108] bool safety_control_ = true;
[131] int *buffer1_, *buffer2_, *buffer3_;
[132] int *currentBuffer_, *nextBuffer_, *overBuffer_;
[133] int currentEnd_, nextEnd_, overEnd_;
[135] bool precise_;
[138] float threshold_;
[139] float priorityIncrement_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/count_down_time.hpp  ( 6 )
[52] size_t m_countDownMS;
[53] std::atomic_bool m_over;
[54] std::thread m_thread;
[56] std::condition_variable m_cv;
[57] std::mutex m_mtx;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/planner_core.h  ( 67 )
[109]  costmap_2d::Costmap2DROS costmap_ros
[111]  std::string frame_id
[135] geometry_msgs::PoseStamped last_goal;
[137] std::vector<geometry_msgs::PoseStamped> record_last_path;
[142] geometry_msgs::PoseStamped new_goal
[146]  geometry_msgs::PoseStamped free_point
[148]  double movement_angle_range = M_PI_4
[186] double start_x
[186]  double start_y
[186]  double end_x
[186]  double end_y
[249] std::string frame_id_;
[250] ros::Publisher plan_pub_;
[251] ros::Publisher unsmoothed_plan_pub_;
[252] ros::Publisher raw_plan_pub_;
[253] bool initialized_, allow_unknown_;
[255] std::unique_ptr<Smoother> _smoother;
[256] double _max_planning_time;
[264] double planner_window_x_, planner_window_y_, default_tolerance_;
[265] double start_tolerance_, goal_tolerance_;
[266] boost::mutex mutex_;
[267] ros::ServiceServer make_plan_srv_;
[274] bool publish_potential_;
[275] ros::Publisher potential_pub_;
[276] int publish_scale_;
[280] unsigned int start_x_, start_y_, end_x_, end_y_;
[281] bool old_navfn_behavior_;
[282] float convert_offset_;
[283] bool outline_map_;
[284] dynamic_reconfigure::Server<global_planner::GlobalPlannerConfig>* dsrv_;
[286] ros::Publisher path_poses_pub_;
[287] static double time_out_;
[288] bool getNear_;
[289] bool safety_falg_;
[292] bool open_connect_flag_;
[293] double connect_dist_gap_;
[294] double lower_gap_times_;
[295] double higher_gap_times_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/expander.h  ( 22 )
[55]  double start_x
[55]  double start_y
[55]  double end_x
[55]  double end_y
[68] unsigned char lethal_cost
[73] unsigned char neutral_cost
[95] int nx_, ny_, ns_;
[96] bool unknown_;
[97] unsigned char lethal_cost_, neutral_cost_;
[98] int cells_visited_;
[99] float factor_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/quadratic_calculator.h  ( 4 )
[49]  float prev_potential
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/orientation_filter.h  ( 10 )
[56]  int start_index
[56]  int end_index
[58] OrientationMode new_mode
[61] size_t window_size
[64] OrientationMode omode_;
[65] int window_size_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/smoother.hpp  ( 34 )
[40] double min_turning_radius
[61] double max_dur = max_time;
[65] double x_i, y_i, y_m1, y_ip1, y_im2, y_ip2, y_i_org, curvature;
[68] nav_msgs::Path new_path = path;
[69] nav_msgs::Path last_path = path;
[216] double min_turning_rad_, tolerance_, data_w_, smooth_w_;
[217] int max_its_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/gradient_path.h  ( 11 )
[65]  double start_x
[65]  double start_y
[65]  double end_x
[65]  double end_y
[76] float *gradx_, *grady_;
[78] float pathStep_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/traceback.h  ( 10 )
[57]  double start_x
[57]  double start_y
[57]  double end_x
[57]  double end_y
[71] unsigned char lethal_cost
[76] int xs_, ys_;
[77] unsigned char lethal_cost_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/grid_path.h  ( 5 )
[52]  double start_x
[52]  double start_y
[52]  double end_x
[52]  double end_y
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/include/global_planner/potential_calculator.h  ( 7 )
[55]  float prev_potential=-1
[70] int nx_, ny_, ns_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/astar.cpp  ( 20 )
[49]  double start_x
[49]  double start_y
[49]  double end_x
[49]  double end_y
[51] int start_i = toIndex(start_x, start_y);
[57] int goal_i = toIndex(end_x, end_y);
[60] double max_plan_time = GlobalPlanner::getTimeOut();
[63] ros::Time start_plan = ros::Time::now();
[99]  float prev_potential
[99]  int next_i
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/traceback.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/potential_calculator.cpp  ( 8 )
[8]  float prev_potential
[12] float min_h = std::min( potential[n - 1], potential[n + 1] );
[13] float min_v = std::min( potential[n - nx_], potential[n + nx_]);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/orientation_filter.cpp  ( 18 )
[133]  int start_index
[133]  int end_index
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/grid_path.cpp  ( 12 )
[47]  double start_x
[47]  double start_y
[47]  double end_x
[47]  double end_y
[52] int start_index = getIndex(start_x, start_y);
[60] float min_val = 1e10;
[61] int min_x = 0, min_y = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/plan_node.cpp  ( 14 )
[66] ros::ServiceServer make_plan_service_;
[67] ros::Subscriber pose_sub_;
[88] geometry_msgs::PoseStamped global_pose;
[97] ros::NodeHandle private_nh("~");
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/quadratic_calculator.cpp  ( 10 )
[33]  float prev_potential
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/dijkstra.cpp  ( 24 )
[83]  double start_x
[83]  double start_y
[83]  double end_x
[83]  double end_y
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/expander.cpp  ( 11 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/planner_core.cpp  ( 87 )
[61]  costmap_2d::Costmap2DROS costmap_ros
[67]  std::string frame_id
[73] ros::NodeHandle private_nh("~/" + name);
[86] bool use_quadratic;
[101] bool use_dijkstra;
[119] bool use_grid_path;
[223] double origin_x = costmap_->getOriginX(), origin_y = costmap_->getOriginY();
[276] bool is_connect = false;
[280] geometry_msgs::PoseStamped next_connect_goal;
[281] bool need_connect = ConnectPathFilter(next_connect_goal);
[305] geometry_msgs::PoseStamped goal_new;
[312] unsigned int start_x_i, start_y_i, goal_x_i, goal_y_i;
[313] double start_x, start_y, goal_x, goal_y;
[368] int plan_timer = 0;
[375] bool found_legal = planner_->calculatePotentials(costmap_->getCharMap(), start_x, start_y, goal_x, goal_y, nx * ny * 2, potential_array_);
[441] geometry_msgs::PoseStamped goal_copy = goal_new;
[459] double plan_size = plan.size();
[461] double dist_start_n_goal = hypot(start.pose.position.x - goal.pose.position.x, start.pose.position.y - goal.pose.position.y);
[462] double dist_of_new_path = plan_size * costmap_->getResolution();
[502] std::chrono::duration<double> time_span = std::chrono::duration_cast<std::chrono::duration<double>>(b - a);
[503] double time_remaining = _max_planning_time - static_cast<double>(time_span.count());
[535] geometry_msgs::PoseStamped new_goal
[543] bool found_obstacle = false;
[610] nav_msgs::Path gui_path;
[628] nav_msgs::Path teb_path;
[639] geometry_msgs::PoseArray teb_poses;
[717]  double start_y
[717]  double goal_x
[717]  double goal_y
[738] ros::Time plan_time = ros::Time::now();
[739] int path_size_num = path.size() - 1;
[744] double world_x, world_y;
[767] geometry_msgs::PoseStamped pose_insert = pose;
[863] unsigned int grid_size = std::lround(tolerance / costmap_->getResolution() + 0.5);
[878] std::uint8_t min_cost = costmap_2d::INSCRIBED_INFLATED_OBSTACLE;
[888] double current_move_cost = distance(in.pose.position.x, in.pose.position.y, wx, wy);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/global_planner/src/gradient_path.cpp  ( 30 )
[73]  double start_x
[73]  double start_y
[73]  double goal_x
[73]  double goal_y
[109] bool oscillation_detected = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/wsfake_localization/fake_localization.cpp  ( 9 )
[23] ros::NodeHandle m_nh;
[24] ros::Subscriber m_getp;
[42] double m_pose_roll,m_pose_pitch,m_pose_yaw;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/rotate_recovery/include/rotate_recovery/rotate_recovery.h  ( 4 )
[67]  costmap_2d::Costmap2DROS local_costmap
[81] bool initialized_;
[82] double sim_granularity_, min_rotational_vel_, max_rotational_vel_, acc_lim_th_, tolerance_, frequency_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/rotate_recovery/src/rotate_recovery.cpp  ( 19 )
[60]  costmap_2d::Costmap2DROS local_costmap
[66] ros::NodeHandle private_nh("~/" + name);
[67] ros::NodeHandle blp_nh("~/TrajectoryPlannerROS");
[110] ros::Publisher vel_pub = n.advertise<geometry_msgs::Twist>("i18r/auto/velocity", 10);
[112] geometry_msgs::PoseStamped global_pose;
[115] double current_angle = tf2::getYaw(global_pose.pose.orientation);
[116] double start_angle = current_angle;
[118] bool got_180 = false;
[129] double dist_left;
[133] double distance_to_180 = std::fabs(angles::shortest_angular_distance(current_angle, start_angle + M_PI));
[150] double sim_angle = 0.0;
[156] double footprint_cost = world_model_->footprintCost(x, y, theta, local_costmap_->getRobotFootprint(), 0.0, 0.0);
[173] geometry_msgs::Twist cmd_vel;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/test/path_calc_test.cpp  ( 8 )
[128] bool plan_success = nav->calcNavFnDijkstra( true );
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/navfn.h  ( 31 )
[98] int create_nav_plan_astar(COSTTYPE *costmap, int nx, int ny, int* goal, int* start, float *plan, int nplan);
[132]  bool allow_unknown = true
[242] float last_path_cost_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/navfn_ros.h  ( 31 )
[85]  costmap_2d::Costmap2DROS costmap_ros
[93]  std::string global_frame
[172] boost::shared_ptr<NavFn> planner_;
[173] ros::Publisher plan_pub_;
[174] ros::Publisher potarr_pub_;
[175] bool initialized_, allow_unknown_, visualize_potential_;
[187] double planner_window_x_, planner_window_y_, default_tolerance_;
[188] boost::mutex mutex_;
[189] ros::ServiceServer make_plan_srv_;
[190] std::string global_frame_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/navwin.h  ( 10 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/read_pgm_costmap.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/include/navfn/potarr_point.h  ( 4 )
[45] float pot_value;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navfn.cpp  ( 53 )
[61] int create_nav_plan_astar(COSTTYPE *costmap, int nx, int ny, int* goal, int* start, float *plan, int nplan) {
[229]  bool allow_unknown
[814] int nearest_point=std::max(0,std::min(nx*ny-1,stc+(int)round(dx)+(int)(nx*round(dy))));
[833] bool oscillation_detected = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/read_pgm_costmap.cpp  ( 9 )
[49] int CS = 11;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navfn_ros.cpp  ( 46 )
[66]  std::string global_frame
[73] ros::NodeHandle private_nh("~/" + name);
[96]  costmap_2d::Costmap2DROS costmap_ros
[215] tf::Quaternion __t = tf::createQuaternionFromYaw(theta);
[320] bool found_legal = false;
[321] double best_sdist = DBL_MAX;
[349] geometry_msgs::PoseStamped goal_copy = best_pose;
[369] sensor_msgs::PointCloud2Modifier cloud_mod(cloud);
[374] sensor_msgs::PointCloud2Iterator<float> iter_x(cloud, "x");
[378] double pot_x, pot_y;
[410] nav_msgs::Path gui_path;
[481] ros::Time plan_time = ros::Time::now();
[486] double world_x, world_y;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navwin.cpp  ( 12 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navfn_node.cpp  ( 14 )
[63] ros::ServiceServer make_plan_service_;
[64] ros::Subscriber pose_sub_;
[84] geometry_msgs::PoseStamped global_pose;
[94] ros::NodeHandle private_nh("~");
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/navfn/src/navtest.cpp  ( 33 )
[64] bool got_start_goal = false;
[65] std::string pgm_file_name;
[76] std::string txt_file_name = std::string( argv[ 1 ]) + ".txt";
[78] std::ifstream txt_stream( txt_file_name.c_str() );
[211] static int CS;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/clear_costmap_recovery/test/clear_tester.cpp  ( 17 )
[18]  bool static_map
[18]  costmap_2d::Costmap2DROS global_costmap
[18]  costmap_2d::Costmap2DROS local_costmap
[24] std::vector<std::string> clearable_layers;
[38]  int global_lethal
[38]  int local_lethal=0
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/clear_costmap_recovery/include/clear_costmap_recovery/clear_costmap_recovery.h  ( 13 )
[65]  costmap_2d::Costmap2DROS global_costmap
[65]  costmap_2d::Costmap2DROS local_costmap
[76]  double pose_x
[76]  double pose_y
[78] std::string name_;
[80] bool initialized_;
[81] bool force_updating_;
[82] double reset_distance_;
[83] std::string affected_maps_;
[84] std::set<std::string> clearable_layers_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/clear_costmap_recovery/src/clear_costmap_recovery.cpp  ( 23 )
[51]  costmap_2d::Costmap2DROS global_costmap
[51]  costmap_2d::Costmap2DROS local_costmap
[59] ros::NodeHandle private_nh("~/" + name_);
[71] std::vector<std::string> clearable_layers_default, clearable_layers;
[155]  double pose_x
[155]  double pose_y
[158] double start_point_x = pose_x - reset_distance_ / 2;
[159] double start_point_y = pose_y - reset_distance_ / 2;
[160] double end_point_x = start_point_x + reset_distance_;
[161] double end_point_y = start_point_y + reset_distance_;
[163] int start_x, start_y, end_x, end_y;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/velocity_iterator_test.cpp  ( 2 )
[48] for(base_local_planner::VelocityIterator x_it(0.0, 0.0, 1); !x_it.isFinished(); x_it++) {
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/wavefront_map_accessor.h  ( 2 )
[43] double outer_radius_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/utest.cpp  ( 5 )
[176] std::vector<geometry_msgs::Point> footprint_spec;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/footprint_helper_test.cpp  ( 6 )
[49] std::vector<geometry_msgs::Point> footprint_spec;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/trajectory_generator_test.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/gtest_main.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/map_grid_test.cpp  ( 11 )
[19] MapGrid map_grid;
[33] MapGrid map_grid2;
[107] std::vector<geometry_msgs::PoseStamped> global_plan_out;
[143] std::vector<geometry_msgs::PoseStamped> base_plan, result;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/test/line_iterator_test.cpp  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/simple_trajectory_generator.h  ( 25 )
[86]  std::vector<Eigen::Vector3f> additional_samples
[86]  bool discretize_by_time = false
[116] double sim_time
[116]  double sim_granularity
[116]  double angular_sim_granularity
[116]  bool use_dwa = false
[116]  double sim_period = 0.0
[143] unsigned int next_sample_index_;
[145] std::vector<Eigen::Vector3f> sample_params_;
[147] Eigen::Vector3f pos_;
[148] Eigen::Vector3f vel_;
[151] bool continued_acceleration_;
[152] bool discretize_by_time_;
[154] double sim_time_, sim_granularity_, angular_sim_granularity_;
[155] bool use_dwa_;
[156] double sim_period_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/costmap_model.h  ( 10 )
[77]  double inscribed_radius
[77]  double circumscribed_radius
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/map_cell.h  ( 4 )
[59] double target_dist;
[61] bool target_mark;
[63] bool within_robot;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_planner_ros.h  ( 39 )
[102]  costmap_2d::Costmap2DROS costmap_ros
[115] geometry_msgs::Twist cmd_vel
[141] double vx_samp
[141]  double vy_samp
[141]  double vtheta_samp
[141]  bool update_map = true
[177]  double goal_th
[199] MapGridVisualizer map_viz_;
[201] std::string global_frame_;
[202] double max_sensor_range_;
[203] nav_msgs::Odometry base_odom_;
[204] std::string robot_base_frame_;
[205] double rot_stopped_velocity_, trans_stopped_velocity_;
[206] double xy_goal_tolerance_, yaw_goal_tolerance_, min_in_place_vel_th_;
[207] std::vector<geometry_msgs::PoseStamped> global_plan_;
[208] bool prune_plan_;
[209] boost::recursive_mutex odom_lock_;
[211] double max_vel_th_, min_vel_th_;
[212] double acc_lim_x_, acc_lim_y_, acc_lim_theta_;
[213] double sim_period_;
[214] bool rotating_to_goal_;
[215] bool reached_goal_;
[216] bool latch_xy_goal_tolerance_, xy_tolerance_latch_;
[218] ros::Publisher g_plan_pub_, l_plan_pub_;
[220] dynamic_reconfigure::Server<BaseLocalPlannerConfig> *dsrv_;
[221] base_local_planner::BaseLocalPlannerConfig default_config_;
[222] bool setup_;
[225] bool initialized_;
[226] base_local_planner::OdometryHelperRos odom_helper_;
[228] std::vector<geometry_msgs::Point> footprint_spec_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/twirling_cost_function.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_search.h  ( 2 )
[59]  std::vector<Trajectory> all_explored
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/velocity_iterator.h  ( 5 )
[59] double step_size = (max - min) / double(std::max(1, (num_samples - 1)));
[95] std::vector<double> samples_;
[96] unsigned int current_index;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_planner.h  ( 78 )
[143]  geometry_msgs::PoseStamped global_vel
[143]  geometry_msgs::PoseStamped drive_velocities
[150]  bool compute_dists = false
[173]  double vx_samp
[173]  double vy_samp
[173]  double vtheta_samp
[201]  float path_cost
[201]  float goal_cost
[201]  float occ_cost
[201]  float total_cost
[225]  double acc_x
[225]  double acc_y
[225]  double acc_theta
[246]  double impossible_cost
[255] double x_i
[255]  double y_i
[255]  double theta_i
[257] base_local_planner::FootprintHelper footprint_helper_;
[259] MapGrid path_map_;
[260] MapGrid goal_map_;
[264] std::vector<geometry_msgs::Point> footprint_spec_;
[266] std::vector<geometry_msgs::PoseStamped> global_plan_;
[268] bool stuck_left, stuck_right;
[269] bool rotating_left, rotating_right;
[271] bool stuck_left_strafe, stuck_right_strafe;
[272] bool strafe_right, strafe_left;
[274] bool escaping_;
[275] bool meter_scoring_;
[277] double goal_x_,goal_y_;
[279] double final_goal_x_, final_goal_y_;
[280] bool final_goal_position_valid_;
[282] double sim_time_;
[283] double sim_granularity_;
[284] double angular_sim_granularity_;
[286] int vx_samples_;
[287] int vtheta_samples_;
[289] double path_distance_bias_, goal_distance_bias_, occdist_scale_;
[290] double acc_lim_x_, acc_lim_y_, acc_lim_theta_;
[292] double prev_x_, prev_y_;
[293] double escape_x_, escape_y_, escape_theta_;
[295] Trajectory traj_one, traj_two;
[297] double heading_lookahead_;
[298] double oscillation_reset_dist_;
[299] double escape_reset_dist_, escape_reset_theta_;
[300] bool holonomic_robot_;
[302] double max_vel_x_, min_vel_x_, max_vel_th_, min_vel_th_, min_in_place_vel_th_;
[304] double backup_vel_;
[306] bool dwa_;
[307] bool heading_scoring_;
[308] double heading_scoring_timestep_;
[309] bool simple_attractor_;
[311] std::vector<double> y_vels_;
[313] double stop_time_buffer_;
[314] double sim_period_;
[316] double inscribed_radius_, circumscribed_radius_;
[318] boost::mutex configuration_mutex_;
[381] int cell_x
[381]  int cell_y
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_cost_function.h  ( 3 )
[81] double scale_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/planar_laser_scan.h  ( 3 )
[53] double angle_min, angle_max, angle_increment;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/oscillation_cost_function.h  ( 12 )
[61]  double min_vel_trans
[78] bool strafe_pos_only_, strafe_neg_only_, strafing_pos_, strafing_neg_;
[79] bool rot_pos_only_, rot_neg_only_, rotating_pos_, rotating_neg_;
[80] bool forward_pos_only_, forward_neg_only_, forward_pos_, forward_neg_;
[83] double oscillation_reset_dist_, oscillation_reset_angle_;
[85] Eigen::Vector3f prev_stationary_pos_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/map_grid.h  ( 13 )
[118] unsigned int size_x
[118]  unsigned int size_y
[164]  std::vector<geometry_msgs::PoseStamped> global_plan_out
[170] std::queue<MapCell> dist_queue
[189] double goal_x_, goal_y_;
[191] unsigned int size_x_, size_y_;
[195] std::vector<MapCell> map_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/map_grid_visualizer.h  ( 7 )
[63] std::string name_;
[65] ros::NodeHandle ns_nh_;
[66] std::string frame_id_;
[67] ros::Publisher pub_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_sample_generator.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/odometry_helper_ros.h  ( 9 )
[55] OdometryHelperRos(std::string odom_topic = "");
[64] nav_msgs::Odometry base_odom
[66] geometry_msgs::PoseStamped robot_vel
[80] std::string odom_topic_;
[83] ros::Subscriber odom_sub_;
[84] nav_msgs::Odometry base_odom_;
[85] boost::mutex odom_mutex_;
[87] std::string frame_id_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/world_model.h  ( 14 )
[66]  double inscribed_radius
[66]  double circumscribed_radius
[70] double cos_th = cos(theta);
[71] double sin_th = sin(theta);
[72] std::vector<geometry_msgs::Point> oriented_footprint;
[74] geometry_msgs::Point new_pt;
[80] geometry_msgs::Point robot_position;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/obstacle_cost_function.h  ( 16 )
[62] bool score_sums
[64] double max_trans_vel
[64]  double max_scaling_factor
[64]  double scaling_speed
[65] std::vector<geometry_msgs::Point> footprint_spec
[76]  base_local_planner::WorldModel world_model
[80] std::vector<geometry_msgs::Point> footprint_spec_;
[82] double max_trans_vel_;
[83] bool sum_scores_;
[85] double max_scaling_factor_, scaling_speed_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/line_iterator.h  ( 11 )
[124] int x0_;
[125] int y0_;
[126] int x1_;
[127] int y1_;
[129] int x_;
[130] int y_;
[132] int deltax_;
[133] int deltay_;
[135] int curpixel_;
[137] int xinc1_, xinc2_, yinc1_, yinc2_;
[138] int den_, num_, numadd_, numpixels_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/prefer_forward_cost_function.h  ( 3 )
[60] double penalty_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/local_planner_limits.h  ( 19 )
[47] double max_vel_trans;
[48] double min_vel_trans;
[49] double max_vel_x;
[50] double min_vel_x;
[51] double max_vel_y;
[52] double min_vel_y;
[53] double max_vel_theta;
[54] double min_vel_theta;
[55] double acc_lim_x;
[56] double acc_lim_y;
[57] double acc_lim_theta;
[58] double acc_lim_trans;
[59] bool prune_plan;
[60] double xy_goal_tolerance;
[61] double yaw_goal_tolerance;
[62] double trans_stopped_vel;
[63] double theta_stopped_vel;
[64] bool restore_defaults;
[111] Eigen::Vector3f acc_limits;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/local_planner_util.h  ( 17 )
[61] std::string name_;
[62] std::string global_frame_;
[68] std::vector<geometry_msgs::PoseStamped> global_plan_;
[71] boost::mutex limits_configuration_mutex_;
[72] bool setup_;
[73] LocalPlannerLimits default_limits_;
[74] LocalPlannerLimits limits_;
[75] bool initialized_;
[82]  bool restore_defaults
[91]  std::string global_frame
[93] geometry_msgs::PoseStamped goal_pose
[97]  std::vector<geometry_msgs::PoseStamped> transformed_plan
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory.h  ( 10 )
[60] double xv_, yv_, thetav_;
[62] double cost_;
[64] double time_delta_;
[112] std::vector<double> x_pts_;
[113] std::vector<double> y_pts_;
[114] std::vector<double> th_pts_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/latched_stop_rotate_controller.h  ( 11 )
[26] LocalPlannerUtil planner_util
[30]  OdometryHelperRos odom_helper
[50]  geometry_msgs::Twist cmd_vel
[50]  Eigen::Vector3f acc_lim
[50]  double sim_period
[69]  double goal_th
[88] bool latch_xy_goal_tolerance_, xy_tolerance_latch_;
[89] bool rotating_to_goal_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/map_grid_cost_function.h  ( 14 )
[86] std::vector<geometry_msgs::PoseStamped> target_poses
[94] bool stop_on_failure
[122] std::vector<geometry_msgs::PoseStamped> target_poses_;
[125] base_local_planner::MapGrid map_;
[126] CostAggregationType aggregationType_;
[131] double xshift_;
[132] double yshift_;
[134] bool is_local_goal_function_;
[135] bool stop_on_failure_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/footprint_helper.h  ( 9 )
[67]  std::vector<geometry_msgs::Point> footprint_spec
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/trajectory_inc.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/voxel_grid_model.h  ( 24 )
[87]  double inscribed_radius
[87]  double circumscribed_radius
[125]  double raytrace_range
[162] unsigned int cell_x, cell_y, cell_z;
[168] voxel_grid::VoxelGrid obstacle_grid_;
[169] double xy_resolution_;
[170] double z_resolution_;
[171] double origin_x_;
[172] double origin_y_;
[173] double origin_z_;
[174] double max_z_;
[175] double sq_obstacle_range_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/simple_scored_sampling_planner.h  ( 4 )
[81]  double best_traj_cost
[94]  std::vector<Trajectory> all_explored = 0
[101] int max_samples_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/point_grid.h  ( 30 )
[94]  double inscribed_radius
[94]  double circumscribed_radius
[315] double resolution_;
[316] geometry_msgs::Point origin_;
[317] unsigned int width_;
[318] unsigned int height_;
[320] double max_z_;
[321] double sq_obstacle_range_;
[322] double sq_min_separation_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/include/base_local_planner/goal_functions.h  ( 21 )
[63]  double goal_x
[63]  double goal_y
[72]  double goal_th
[88]  std::vector<geometry_msgs::PoseStamped> global_plan
[105]  std::vector<geometry_msgs::PoseStamped> transformed_plan
[118]  geometry_msgs::PoseStamped goal_pose
[140]  double rot_stopped_vel
[140]  double trans_stopped_vel
[140]  double xy_goal_tolerance
[140]  double yaw_goal_tolerance
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/local_planner_util.cpp  ( 10 )
[47]  std::string global_frame
[60]  bool restore_defaults
[83] geometry_msgs::PoseStamped goal_pose
[105]  std::vector<geometry_msgs::PoseStamped> transformed_plan
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/trajectory.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/trajectory_planner_ros.cpp  ( 61 )
[91]  costmap_2d::Costmap2DROS costmap_ros
[94] ros::NodeHandle private_nh("~/" + name);
[103] double sim_time, sim_granularity, angular_sim_granularity;
[104] int vx_samples, vtheta_samples;
[105] double path_distance_bias, goal_distance_bias, occdist_scale, heading_lookahead, oscillation_reset_dist, escape_reset_dist, escape_reset_theta;
[106] bool holonomic_robot, dwa, simple_attractor, heading_scoring;
[107] double heading_scoring_timestep;
[108] double max_vel_x, min_vel_x;
[109] double backup_vel;
[110] double stop_time_buffer;
[111] std::string world_model_type;
[146] std::string controller_frequency_param_name;
[151] double controller_frequency = 0;
[190] bool meter_scoring;
[214] double max_rotational_vel;
[241] double min_pt_separation, max_obstacle_height, grid_resolution;
[249] std::vector<double> y_vels = loadYVels(private_nh);
[274] std::string y_vel_list;
[306]  geometry_msgs::Twist cmd_vel
[312] double vel_yaw = tf2::getYaw(robot_vel.pose.orientation);
[318] bool valid_cmd = tc_->checkTrajectory(global_pose.pose.position.x, global_pose.pose.position.y, yaw, robot_vel.pose.position.x, robot_vel.pose.position.y, vel_yaw, vx, vy, vth);
[335]  double goal_th
[340] double ang_diff = angles::shortest_angular_distance(yaw, goal_th);
[344] double v_theta_samp = ang_diff > 0.0 ? std::min(max_vel_th_, std::max(min_in_place_vel_th_, ang_diff)) : std::max(min_vel_th_, std::min(-1.0 * min_in_place_vel_th_, ang_diff));
[347] double max_acc_vel = fabs(vel_yaw) + acc_lim_theta_ * sim_period_;
[348] double min_acc_vel = fabs(vel_yaw) - acc_lim_theta_ * sim_period_;
[353] double max_speed_to_stop = sqrt(2 * acc_lim_theta_ * fabs(ang_diff));
[401] std::vector<geometry_msgs::PoseStamped> local_plan;
[407] std::vector<geometry_msgs::PoseStamped> transformed_plan;
[418] geometry_msgs::PoseStamped drive_cmds;
[470] nav_msgs::Odometry base_odom;
[531] double p_x, p_y, p_th;
[551] double vx_samp
[551]  double vy_samp
[551]  double vtheta_samp
[551]  bool update_map
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/point_grid_node.cpp  ( 14 )
[65]  double line_width
[171] double start_t, end_t, t_diff;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/odometry_helper_ros.cpp  ( 8 )
[62] nav_msgs::Odometry base_odom
[68] geometry_msgs::PoseStamped robot_vel
[70] geometry_msgs::Twist global_vel;
[89] std::string odom_topic
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/map_grid_cost_function.cpp  ( 7 )
[55] std::vector<geometry_msgs::PoseStamped> target_poses
[71] double grid_dist = map_(px, py).target_dist;
[81] unsigned int cell_x, cell_y;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/map_grid_visualizer.cpp  ( 11 )
[45]  std::string frame_id
[55] sensor_msgs::PointCloud2 cost_cloud;
[59] sensor_msgs::PointCloud2Modifier cloud_mod(cost_cloud);
[68] unsigned int x_size = costmap_p_->getSizeInCellsX();
[69] unsigned int y_size = costmap_p_->getSizeInCellsY();
[70] double z_coord = 0.0;
[71] double x_coord, y_coord;
[74] sensor_msgs::PointCloud2Iterator<float> iter_x(cost_cloud, "x");
[76] float path_cost, goal_cost, occ_cost, total_cost;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/obstacle_cost_function.cpp  ( 19 )
[59] double max_trans_vel
[59]  double max_scaling_factor
[59]  double scaling_speed
[66] std::vector<geometry_msgs::Point> footprint_spec
[88] double f_cost = footprintCost(px, py, pth, scale, footprint_spec_, costmap_, world_model_);
[123]  base_local_planner::WorldModel world_model
[127] double footprint_cost = world_model->footprintCost(x, y, th, footprint_spec);
[132] unsigned int cell_x, cell_y;
[139] double occ_cost = std::max(std::max(0.0, footprint_cost), double(costmap->getCost(cell_x, cell_y)));
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/twirling_cost_function.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/latched_stop_rotate_controller.cpp  ( 30 )
[25] ros::NodeHandle private_nh("~/" + name);
[40] LocalPlannerUtil planner_util
[42] double xy_goal_tolerance = planner_util->getCurrentLimits().xy_goal_tolerance;
[45] geometry_msgs::PoseStamped goal_pose;
[50] double goal_x = goal_pose.pose.position.x;
[51] double goal_y = goal_pose.pose.position.y;
[69]  OdometryHelperRos odom_helper
[71] double theta_stopped_vel = planner_util->getCurrentLimits().theta_stopped_vel;
[72] double trans_stopped_vel = planner_util->getCurrentLimits().trans_stopped_vel;
[74] nav_msgs::Odometry base_odom;
[97] double goal_th = tf2::getYaw(goal_pose.pose.orientation);
[117]  geometry_msgs::Twist cmd_vel
[117]  Eigen::Vector3f acc_lim
[117]  double sim_period
[124] double vel_yaw = tf2::getYaw(robot_vel.pose.orientation);
[131] bool valid_cmd = obstacle_check(Eigen::Vector3f(global_pose.pose.position.x, global_pose.pose.position.y, yaw), Eigen::Vector3f(robot_vel.pose.position.x, robot_vel.pose.position.y, vel_yaw), Eigen::Vector3f(vx, vy, vth));
[164] double ang_diff = angles::shortest_angular_distance(yaw, goal_th);
[166] double v_theta_samp = std::min(limits.max_vel_theta, std::max(limits.min_vel_theta, fabs(ang_diff)));
[169] double max_acc_vel = fabs(vel_yaw) + acc_lim[2] * sim_period;
[170] double min_acc_vel = fabs(vel_yaw) - acc_lim[2] * sim_period;
[175] double max_speed_to_stop = sqrt(2 * acc_lim[2] * fabs(ang_diff));
[208]  OdometryHelperRos odom_helper_
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/point_grid.cpp  ( 60 )
[62]  double inscribed_radius
[62]  double circumscribed_radius
[64] double outer_square_radius = circumscribed_radius;
[67] geometry_msgs::Point c_lower_left, c_upper_right;
[83] double inner_square_radius = sqrt((inscribed_radius * inscribed_radius) / 2.0);
[86] geometry_msgs::Point i_lower_left, i_upper_right;
[95] list<geometry_msgs::Point32>* cell_points = points_[i];
[125] bool all_left = false;
[126] bool all_right = false;
[159] geometry_msgs::Point upper_left, lower_right;
[172] unsigned int lower_left_index = gridIndex(gx, gy);
[176] unsigned int lower_right_index = gridIndex(gx, gy);
[180] unsigned int upper_left_index = gridIndex(gx, gy);
[183] unsigned int x_steps = lower_right_index - lower_left_index + 1;
[184] unsigned int y_steps = (upper_left_index - lower_left_index) / width_ + 1;
[224] unsigned int pt_index = gridIndex(gx, gy);
[233] double min_sq_dist = DBL_MAX;
[253] geometry_msgs::Point32 check_point;
[254] double sq_dist = DBL_MAX;
[255] double neighbor_sq_dist = DBL_MAX;
[348] sensor_msgs::PointCloud2ConstIterator<float> iter_x(cloud, "x");
[349] sensor_msgs::PointCloud2ConstIterator<float> iter_y(cloud, "y");
[350] sensor_msgs::PointCloud2ConstIterator<float> iter_z(cloud, "z");
[424] double v1_x = laser_scan.cloud.points[0].x - laser_scan.origin.x;
[425] double v1_y = laser_scan.cloud.points[0].y - laser_scan.origin.y;
[426] double v2_x = pt.x - laser_scan.origin.x;
[427] double v2_y = pt.y - laser_scan.origin.y;
[429] double perp_dot = v1_x * v2_y - v1_y * v2_x;
[433] double vector_angle = atan2(perp_dot, dot);
[439] double total_rads = laser_scan.angle_max - laser_scan.angle_min;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/goal_functions.cpp  ( 35 )
[49]  double goal_x
[49]  double goal_y
[53]  double goal_th
[64] nav_msgs::Path gui_path;
[77]  std::vector<geometry_msgs::PoseStamped> global_plan
[80] std::vector<geometry_msgs::PoseStamped>::iterator global_it = global_plan.begin();
[84] double x_diff = global_pose.pose.position.x - w.pose.position.x;
[85] double y_diff = global_pose.pose.position.y - w.pose.position.y;
[86] double distance_sq = x_diff * x_diff + y_diff * y_diff;
[102]  std::vector<geometry_msgs::PoseStamped> transformed_plan
[114] geometry_msgs::TransformStamped plan_to_global_transform = tf.lookupTransform(global_frame, ros::Time(), plan_pose.header.frame_id, plan_pose.header.stamp, plan_pose.header.frame_id, ros::Duration(0.5));
[117] geometry_msgs::PoseStamped robot_pose;
[122] double dist_threshold = std::max(costmap.getSizeInCellsX() * costmap.getResolution() / 2.0, costmap.getSizeInCellsY() * costmap.getResolution() / 2.0);
[125] double sq_dist_threshold = dist_threshold * dist_threshold;
[126] double sq_dist = 0;
[139] geometry_msgs::PoseStamped newer_pose;
[176]  geometry_msgs::PoseStamped goal_pose
[216]  double rot_stopped_vel
[216]  double trans_stopped_vel
[216]  double xy_goal_tolerance
[216]  double yaw_goal_tolerance
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/costmap_model.cpp  ( 15 )
[48]  double inscribed_radius
[48]  double circumscribed_radius
[56] unsigned int cell_x, cell_y;
[74] double line_cost = 0.0;
[75] double footprint_cost = 0.0;
[118] double point_cost = -1.0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/oscillation_cost_function.cpp  ( 12 )
[56]  double min_vel_trans
[71] double x_diff = pos[0] - prev[0];
[72] double y_diff = pos[1] - prev[1];
[73] double sq_dist = x_diff * x_diff + y_diff * y_diff;
[75] double th_diff = pos[2] - prev[2];
[102] bool flag_set = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/prefer_forward_cost_function.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/map_cell.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/footprint_helper.cpp  ( 33 )
[141] base_local_planner::Position2DInt min_pt;
[142] base_local_planner::Position2DInt max_pt;
[143] unsigned int min_x = footprint[0].x;
[144] unsigned int max_x = footprint[footprint.size() -1].x;
[184]  std::vector<geometry_msgs::Point> footprint_spec
[185] double x_i = pos[0];
[186] double y_i = pos[1];
[187] double theta_i = pos[2];
[188] std::vector<base_local_planner::Position2DInt> footprint_cells;
[203] double cos_th = cos(theta_i);
[204] double sin_th = sin(theta_i);
[205] double new_x, new_y;
[207] unsigned int last_index = footprint_spec.size() - 1;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/simple_scored_sampling_planner.cpp  ( 12 )
[50]  double best_traj_cost
[51] double traj_cost = 0;
[52] int gen_id = 0;
[81]  std::vector<Trajectory> all_explored
[82] Trajectory loop_traj;
[83] Trajectory best_traj;
[84] double loop_traj_cost, best_traj_cost = -1;
[85] bool gen_success;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/trajectory_planner.cpp  ( 80 )
[125] string y_string = config.y_vels;
[126] vector<string> y_strs;
[193]  float path_cost
[193]  float goal_cost
[193]  float occ_cost
[193]  float total_cost
[195] MapCell goal_cell = goal_map_(cx, cy);
[220]  double vx_samp
[220]  double vy_samp
[220]  double vtheta_samp
[220]  double acc_x
[220]  double acc_y
[220]  double acc_theta
[220]  double impossible_cost
[225] double x_i = x;
[226] double y_i = y;
[227] double theta_i = theta;
[229] double vx_i, vy_i, vtheta_i;
[239] int num_steps;
[262] double path_dist = 0.0;
[263] double goal_dist = 0.0;
[265] double heading_diff = 0.0;
[269] unsigned int cell_x, cell_y;
[278] double footprint_cost = footprintCost(x_i, y_i, theta_i);
[317] bool update_path_and_goal_distances = true;
[372]  int cell_y
[373] unsigned int goal_cell_x, goal_cell_y;
[400] double line_cost = 0.0;
[401] double point_cost = -1.0;
[476]  bool compute_dists
[540] double max_vel_x = max_vel_x_, max_vel_theta;
[541] double min_vel_x, min_vel_theta;
[544] double final_goal_dist = hypot( final_goal_x_ - x, final_goal_y_ - y );
[654] double heading_dist = DBL_MAX;
[659] double vtheta_samp_limited = vtheta_samp > 0 ? max(vtheta_samp, min_in_place_vel_th_) : min(vtheta_samp, -1.0 * min_in_place_vel_th_);
[669] double x_r, y_r, th_r;
[677] double ahead_gdist = goal_map_(cell_x, cell_y).target_dist;
[908]  geometry_msgs::PoseStamped global_vel
[908]  geometry_msgs::PoseStamped drive_velocities
[923] std::vector<base_local_planner::Position2DInt> footprint_list = footprint_helper_.getFootprintCells( pos, footprint_spec_, costmap_, true);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/voxel_grid_model.cpp  ( 44 )
[51]  double inscribed_radius
[51]  double circumscribed_radius
[57] double line_cost = 0.0;
[107] double point_cost = -1.0;
[195] sensor_msgs::PointCloud2ConstIterator<float> iter_x(cloud, "x");
[196] sensor_msgs::PointCloud2ConstIterator<float> iter_y(cloud, "y");
[197] sensor_msgs::PointCloud2ConstIterator<float> iter_z(cloud, "z");
[209] double sq_dist = (*iter_x - obs.origin_.x) * (*iter_x - obs.origin_.x) + (*iter_y - obs.origin_.y) * (*iter_y - obs.origin_.y) + (*iter_z - obs.origin_.z) * (*iter_z - obs.origin_.z);
[226]  double raytrace_range
[230] unsigned int sensor_x, sensor_y, sensor_z;
[244] double scaling_fact = raytrace_range / distance;
[273] unsigned int point_x, point_y, point_z;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/simple_trajectory_generator.cpp  ( 40 )
[53]  std::vector<Eigen::Vector3f> additional_samples
[53]  bool discretize_by_time
[70] double max_vel_th = limits->max_vel_theta;
[71] double min_vel_th = -1.0 * max_vel_th;
[73] Eigen::Vector3f acc_lim = limits->getAccLimits();
[80] double min_vel_x = limits->min_vel_x;
[81] double max_vel_x = limits->max_vel_x;
[82] double min_vel_y = limits->min_vel_y;
[83] double max_vel_y = limits->max_vel_y;
[88] Eigen::Vector3f max_vel = Eigen::Vector3f::Zero();
[89] Eigen::Vector3f min_vel = Eigen::Vector3f::Zero();
[117] Eigen::Vector3f vel_samp = Eigen::Vector3f::Zero();
[118] VelocityIterator x_it(min_vel[0], max_vel[0], vsamples[0]);
[119] VelocityIterator y_it(min_vel[1], max_vel[1], vsamples[1]);
[120] VelocityIterator th_it(min_vel[2], max_vel[2], vsamples[2]);
[142]  double sim_time
[142]  double sim_granularity
[142]  double angular_sim_granularity
[142]  bool use_dwa
[142]  double sim_period
[161] Trajectory comp_traj
[184]  Eigen::Vector3f sample_target_vel
[202] int num_steps;
[207] double sim_time_distance = vmag * sim_time_;
[208] double sim_time_angle = fabs(sample_target_vel[2]) * sim_time_;
[222] Eigen::Vector3f loop_vel;
[259] Eigen::Vector3f new_pos = Eigen::Vector3f::Zero();
[271] Eigen::Vector3f new_vel = Eigen::Vector3f::Zero();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/base_local_planner/src/map_grid.cpp  ( 34 )
[84] unsigned int size_x
[84]  unsigned int size_y
[116] double new_target_dist = current_cell->target_dist + 1;
[134]  std::vector<geometry_msgs::PoseStamped> global_plan_out
[138] double last_x = global_plan_in[0].pose.position.x;
[139] double last_y = global_plan_in[0].pose.position.y;
[142] double min_sq_resolution = resolution * resolution;
[145] double loop_x = global_plan_in[i].pose.position.x;
[146] double loop_y = global_plan_in[i].pose.position.y;
[175] bool started_path = false;
[179] std::vector<geometry_msgs::PoseStamped> adjusted_global_plan;
[187] double g_x = adjusted_global_plan[i].pose.position.x;
[188] double g_y = adjusted_global_plan[i].pose.position.y;
[189] unsigned int map_x, map_y;
[214] int local_goal_x = -1;
[215] int local_goal_y = -1;
[255] queue<MapCell> dist_queue
[258] unsigned int last_col = size_x_ - 1;
[259] unsigned int last_row = size_y_ - 1;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/nav_core/include/nav_core/base_local_planner.h  ( 7 )
[61] geometry_msgs::Twist cmd_vel
[82]  costmap_2d::Costmap2DROS costmap_ros
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/nav_core/include/nav_core/base_global_planner.h  ( 6 )
[81]  costmap_2d::Costmap2DROS costmap_ros
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/nav_core/include/nav_core/recovery_behavior.h  ( 4 )
[56]  costmap_2d::Costmap2DROS global_costmap
[56]  costmap_2d::Costmap2DROS local_costmap
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/nav_core/include/nav_core/parameter_magic.h  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/tools.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/menu_handler.h  ( 19 )
[85]  CheckState check_state 
[109] std::vector<EntryHandle> sub_entries;
[123]  std::vector<EntryHandle> handles_in
[123]  std::vector<visualization_msgs::MenuEntry> entries_out
[123]  EntryHandle parent_handle 
[133] std::vector<EntryHandle> top_level_handles_;
[137] EntryHandle current_handle_;
[139] std::set<std::string> managed_markers_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/interactive_marker_server.h  ( 22 )
[163] ros::Time last_feedback;
[164] std::string last_client_id;
[165] FeedbackCallback default_feedback_cb;
[167] visualization_msgs::InteractiveMarker int_marker;
[208]  M_UpdateContext::iterator update_it
[211] M_MarkerContext marker_contexts_;
[214] M_UpdateContext pending_updates_;
[217] std::string topic_ns_;
[222] boost::scoped_ptr<boost::thread> spin_thread_;
[223] ros::NodeHandle node_handle_;
[224] ros::CallbackQueue callback_queue_;
[228] ros::Timer keep_alive_timer_;
[230] ros::Publisher init_pub_;
[231] ros::Publisher update_pub_;
[232] ros::Subscriber feedback_sub_;
[236] std::string server_id_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/interactive_marker_client.h  ( 27 )
[139] ros::NodeHandle nh_;
[148] StateMachine<StateT> state_;
[150] std::string topic_ns_;
[152] ros::Subscriber update_sub_;
[153] ros::Subscriber init_sub_;
[165] M_SingleClient publisher_contexts_;
[166] boost::mutex publisher_contexts_mutex_;
[169] std::string target_frame_;
[184]  InitCallback init_cb 
[187]  UpdateCallback update_cb 
[190]  ResetCallback reset_cb 
[193]  StatusCallback status_cb 
[198] InitCallback init_cb_;
[199] UpdateCallback update_cb_;
[200] ResetCallback reset_cb_;
[201] StatusCallback status_cb_;
[211] CbCollection callbacks_;
[217] uint32_t last_num_publishers_;
[220] bool enable_autocomplete_transparency_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/visibility_control.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/detail/single_client.h  ( 11 )
[75]  bool enable_autocomplete_transparency = true
[100] StateMachine<StateT> state_;
[108]  std::string error_msg 
[115] ros::Time last_update_time_;
[119] bool update_time_ok_;
[129] M_UpdateMessageContext update_queue_;
[132] M_InitMessageContext init_queue_;
[135] std::string target_frame_;
[139] std::string server_id_;
[141] bool warn_keepalive_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/detail/message_context.h  ( 9 )
[71]  geometry_msgs::Pose pose_msg 
[73]  std::vector<visualization_msgs::InteractiveMarker> msg_vec
[77] std::list<size_t> open_marker_idx_;
[78] std::list<size_t> open_pose_idx_;
[80] std::string target_frame_;
[81] bool enable_autocomplete_transparency_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/include/interactive_markers/detail/state_machine.h  ( 3 )
[56] StateT state_;
[57] ros::Time chg_time_;
[58] std::string name_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/tools.cpp  ( 40 )
[45]  bool enable_autocomplete_transparency 
[67] tf2::Quaternion int_marker_orientation( msg.pose.orientation.x, msg.pose.orientation.y, msg.pose.orientation.z, msg.pose.orientation.w );
[85] int uniqueification_number = 0;
[146] tf2::Vector3 int_marker_position( msg.pose.position.x, msg.pose.position.y, msg.pose.position.z );
[177] tf2::Quaternion marker_orientation( marker.pose.orientation.x, marker.pose.orientation.y, marker.pose.orientation.z, marker.pose.orientation.w );
[273] std_msgs::ColorRGBA base_color = marker.color;
[377] float base_scale = 0.25 * msg.scale;
[378] float base_z = 1.2 * msg.scale;
[400] tf2::Quaternion bt_quat( quat.x, quat.y, quat.z, quat.w );
[401] tf2::Vector3 bt_x_axis = tf2::Matrix3x3(bt_quat) * tf2::Vector3(1,0,0);
[408] float max_xy = x>y ? x : y;
[409] float max_yz = y>z ? y : z;
[410] float max_xyz = max_xy > max_yz ? max_xy : max_yz;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/message_context.cpp  ( 6 )
[93] ros::Time latest_time;
[94] std::string error_string;
[119] std::list<size_t>::iterator idx_it;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/interactive_marker_client.cpp  ( 13 )
[69]  std::string topic_ns 
[96]  std::string target_frame 
[184] M_SingleClient::iterator context_it = publisher_contexts_.find(msg->server_id);
[249] SingleClientPtr single_client = it->second;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/single_client.cpp  ( 8 )
[67]  bool enable_autocomplete_transparency
[175] double time_since_upd = (ros::Time::now() - last_update_time_).toSec();
[203] M_InitMessageContext::iterator init_it;
[207] bool next_up_exists = init_seq_num >= first_update_seq_num_ && init_seq_num <= last_update_seq_num_;
[282]  std::string error_msg 
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/menu_handler.cpp  ( 20 )
[109]  CheckState check_state 
[141] visualization_msgs::InteractiveMarker int_marker;
[163]  std::vector<EntryHandle> handles_in
[163]  std::vector<visualization_msgs::MenuEntry> entries_out
[163]  EntryHandle parent_handle 
[200] std::set<std::string>::iterator next_it = it;
[230] visualization_msgs::MenuEntry menu_entry;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/interactive_marker_server.cpp  ( 19 )
[61] std::string update_topic = topic_ns + "/update";
[62] std::string init_topic = update_topic + "_full";
[63] std::string feedback_topic = topic_ns + "/feedback";
[119] M_UpdateContext::iterator update_it;
[130] M_MarkerContext::iterator marker_context_it = marker_contexts_.find( update_it->first );
[163] visualization_msgs::InteractiveMarkerPose pose_update;
[270]  FeedbackCallback feedback_cb
[270]  uint8_t feedback_type 
[422] MarkerContext &marker_context = marker_context_it->second;
[465] visualization_msgs::InteractiveMarkerUpdate empty_update;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/bursty_tf.cpp  ( 13 )
[181] ros::Timer frame_timer = n.createTimer(ros::Duration(0.5), frameCallback);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/client_test.cpp  ( 28 )
[63] std::string server_id;
[64] std::string frame_id;
[67] std::vector<std::string> expect_reset_calls;
[68] std::vector<int> expect_init_seq_num;
[69] std::vector<int> expect_update_seq_num;
[72] std::string target_frame = "target_frame";
[80] std::vector<visualization_msgs::InteractiveMarkerInit> recv_init_msgs;
[81] std::vector<visualization_msgs::InteractiveMarkerUpdate> recv_update_msgs;
[82] std::vector<std::string> recv_reset_calls;
[125] visualization_msgs::InteractiveMarker int_marker;
[128] std::string topic_ns ="im_client_test";
[159] visualization_msgs::InteractiveMarkerInitPtr init_msg_out( new visualization_msgs::InteractiveMarkerInit() );
[170] visualization_msgs::InteractiveMarkerUpdatePtr update_msg_out( new visualization_msgs::InteractiveMarkerUpdate() );
[251] visualization_msgs::InteractiveMarkerUpdate sent_msg = sent_update_msgs[msg.expect_update_seq_num[u]];
[252] visualization_msgs::InteractiveMarkerUpdate recv_msg = recv_update_msgs[ u ];
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/server_test.cpp  ( 5 )
[46] visualization_msgs::InteractiveMarker int_marker;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/missing_tf.cpp  ( 13 )
[180] ros::Timer frame_timer = n.createTimer(ros::Duration(0.5), frameCallback);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/interactive_markers/src/test/server_client_test.cpp  ( 16 )
[49] int update_calls;
[50] int init_calls;
[51] int reset_calls;
[52] int status_calls;
[55] std::string reset_server_id;
[60] InitConstPtr init_msg;
[61] UpdateConstPtr update_msg;
[119] visualization_msgs::InteractiveMarker int_marker;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/test_rgb_colors.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/utest.cpp  ( 12 )
[31] cv_bridge::CvImageConstPtr cv_ptr = cv_bridge::toCvShare(image);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/test_endian.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/utest2.cpp  ( 14 )
[75] std::string src_encoding = encodings[i];
[76] bool is_src_color_format = isColor(src_encoding) || isMono(src_encoding) || (src_encoding == sensor_msgs::image_encodings::YUV422);
[77] cv::Mat image_original(cv::Size(400, 400), cv_bridge::getCvType(src_encoding));
[81] sensor_msgs::Image image_message;
[82] cv_bridge::CvImage image_bridge(std_msgs::Header(), src_encoding, image_original);
[85] sensor_msgs::ImagePtr image_msg = image_bridge.toImageMsg();
[88] std::string dst_encoding = encodings[j];
[89] bool is_dst_color_format = isColor(dst_encoding) || isMono(dst_encoding) || (dst_encoding == sensor_msgs::image_encodings::YUV422);
[90] bool is_num_channels_the_same = (numChannels(src_encoding) == numChannels(dst_encoding));
[92] cv_bridge::CvImageConstPtr cv_image;
[93] cv::Mat image_back;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/test/test_compression.cpp  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/include/cv_bridge/rgb_colors.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/include/cv_bridge/cv_bridge.h  ( 16 )
[119] sensor_msgs::Image ros_image
[257] bool do_dynamic_scaling;
[258] double min_image_value;
[259] double max_image_value;
[261] int bg_label;
[365] uint8_t is_bigendian = 0;
[368] size_t data_size = m.image.step*m.image.rows;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/cv_bridge.cpp  ( 47 )
[200] std::string src_encoding
[200]  std::string dst_encoding
[201] Encoding src_encod = getEncoding(src_encoding);
[202] Encoding dst_encod = getEncoding(dst_encoding);
[204] bool is_src_color_format = enc::isColor(src_encoding) || enc::isMono(src_encoding) || enc::isBayer(src_encoding) || (src_encoding == enc::YUV422);
[206] bool is_dst_color_format = enc::isColor(dst_encoding) || enc::isMono(dst_encoding) || enc::isBayer(dst_encoding) || (dst_encoding == enc::YUV422);
[207] bool is_num_channels_the_same = (enc::numChannels(src_encoding) == enc::numChannels(dst_encoding));
[251] int source_type = getCvType(source.encoding);
[252] int byte_depth = enc::bitDepth(source.encoding) / 8;
[253] int num_channels = enc::numChannels(source.encoding);
[281] cv::Mat mat_swap(source.height, source.width, mat.type());
[322] int conversion_code = conversion_codes[i];
[326] int src_depth = enc::bitDepth(src_encoding);
[327] int dst_depth = enc::bitDepth(dst_encoding);
[329] int image2_type = CV_MAKETYPE(CV_MAT_DEPTH(getCvType(dst_encoding)), image1.channels());
[363] sensor_msgs::Image ros_image
[542] double min_image_value = options.min_image_value;
[543] double max_image_value = options.max_image_value;
[638] CvImagePtr img_scaled(new CvImage());
[653] float float_value = source->image.at<float>(j, i);
[665] CvImagePtr source_typed(new CvImage());
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/module_opencv3.cpp  ( 22 )
[158] NumpyAllocator g_numpyAllocator;
[162] bool pyopencv_to(PyObject* obj, T& p, const char* name = "<unknown>");
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/rgb_colors.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/module.hpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/module_opencv2.cpp  ( 18 )
[85] static size_t REFCOUNT_OFFSET = ( size_t )&((( PyObject* )0)->ob_refcnt ) + ( 0x12345678 != *( const size_t* )"\x78\x56\x34\x12\0\0\0\0\0" )*sizeof( int );
[151] NumpyAllocator g_numpyAllocator;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/pycompat.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/module.cpp  ( 11 )
[40] bp::object obj_in
[42] cv::Mat mat_in;
[46] cv_bridge::CvImagePtr cv_image(new cv_bridge::CvImage(std_msgs::Header(), encoding_in, mat_in));
[59]  bool do_dynamic_scaling = false
[59]  double min_image_value = 0.0
[59]  double max_image_value = 0.0
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/make.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/version_number.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/detail/test.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/detail/endian_compat.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/detail/_cassert.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/library/c/gnu.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/library/c/_prefix.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/ios.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/macos.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/android.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/dragonfly.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/bsdi.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/net.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/free.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/os/bsd/open.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/predef/other/endian.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/core/scoped_enum.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/endian/conversion.hpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/navigation/cv_bridge/src/boost/endian/detail/intrinsic.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/auto_clean/arrow_clean.h  ( 25 )
[21] std::uint32_t _plan_length
[37] boost::shared_ptr<clean2d_Map> mp_clean_map;
[46] OrientedPoint _point
[56] clean_robot *mp_clean_robot;
[62] std::vector<OrientedPoint> m_edge;
[63] std::vector<EdgePoint> m_edge_cells;
[64] bool m_edge_init;
[66] boost::thread *_calHandle;
[67] boost::condition_variable _cal_notify;
[68] boost::mutex _cal_mutex;
[72] bool _thread_exit_flag;
[74] costmap_2d::Costmap2D *_costmap;
[76] std::vector<float> m_arrow_distance;
[78] OrientedPoint m_start_arrow_point;
[80] float m_master_direction;
[86]  Point _cur_point
[86]  std::uint32_t _steps = 10
[90] std::vector<IntPoint> _tmp_footprint_cells;
[92] nav_msgs::OccupancyGrid _edge_map;
[94] ros::Publisher publisher_static_map;
[96] ros::Subscriber goal_sub_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/auto_clean/autoc_state.h  ( 21 )
[90] std::list<swr::control_types::PATH_ITEM> m_def_edge;
[91] std::list<swr::control_types::PATH_ITEM> m_paths;
[102] bool recv_mark_msg ;
[104] bool NotInThisState ;
[134] int m_finish_counter;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/move_base/move_base.h  ( 95 )
[100] geometry_msgs::PoseStamped global_pose
[209] double size_x
[209]  double size_y
[248]  std::vector<geometry_msgs::PoseStamped> global_plan
[255] std::vector<geometry_msgs::PoseStamped> track_plan
[283] boost::shared_ptr<nav_core::BaseLocalPlanner> tc_;
[285] std::string robot_base_frame_, global_frame_;
[287] boost::shared_ptr<nav_core::BaseGlobalPlanner> planner_;
[290] std::vector<std::string> recovery_behavior_names_;
[291] unsigned int recovery_index_;
[294] double planner_frequency_, controller_frequency_, inscribed_radius_, circumscribed_radius_;
[295] double planner_patience_, controller_patience_;
[297] uint32_t planning_retries_;
[299] double conservative_reset_dist_, clearing_radius_;
[300] ros::Publisher current_goal_pub_, vel_pub_, action_goal_pub_, recovery_status_pub_, combinePathPub;
[301] ros::Subscriber goal_sub_;
[302] ros::ServiceServer make_plan_srv_, clear_costmaps_srv_;
[303] bool shutdown_costmaps_, clearing_rotation_allowed_, recovery_behavior_enabled_;
[304] bool make_plan_clear_costmap_, make_plan_add_unreachable_goal_;
[305] double oscillation_timeout_, oscillation_distance_;
[307] MoveBaseState state_;
[308] RecoveryTrigger recovery_trigger_;
[310] ros::Time last_valid_plan_, last_valid_control_, last_oscillation_reset_;
[311] geometry_msgs::PoseStamped oscillation_pose_;
[312] pluginlib::ClassLoader<nav_core::BaseGlobalPlanner> bgp_loader_;
[313] pluginlib::ClassLoader<nav_core::BaseLocalPlanner> blp_loader_;
[314] pluginlib::ClassLoader<nav_core::RecoveryBehavior> recovery_loader_;
[317] std::vector<geometry_msgs::PoseStamped>* planner_plan_;
[318] std::vector<geometry_msgs::PoseStamped>* latest_plan_;
[319] std::vector<geometry_msgs::PoseStamped>* controller_plan_;
[322] bool runPlanner_;
[331] boost::recursive_mutex planner_mutex_;
[332] boost::condition_variable_any planner_cond_;
[333] geometry_msgs::PoseStamped planner_start_;
[334] geometry_msgs::PoseStamped planner_goal_;
[338] boost::recursive_mutex configuration_mutex_;
[339] dynamic_reconfigure::Server<move_base::MoveBaseConfig>* dsrv_;
[349] move_base::MoveBaseConfig last_config_;
[350] move_base::MoveBaseConfig default_config_;
[351] bool setup_, p_freq_change_, c_freq_change_;
[352] bool new_global_plan_;
[353] bool new_global_plan_tmp;
[359]  int work_mode
[372] std::ofstream cal_vel;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/state/event.h  ( 3 )
[149] int _event_type;
[153] int data_type;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/state/eventtype.h  ( 15 )
[284] bool l1_cliff = false;
[285] bool l2_cliff = false;
[286] bool r1_cliff = false;
[287] bool r2_cliff = false;
[294] bool left_bumper = false;
[295] bool right_bumper = false;
[302] bool motor_power_state = true;
[315] std::uint8_t work_mode = 0;
[376] std::uint8_t father_id;
[383] std::uint8_t _res;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/state/state.h  ( 6 )
[34] std::uint32_t _id
[45] std::uint32_t m_state_id;
[47] Context *_context;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/state/context.h  ( 10 )
[21] std::uint32_t _father_id=0;
[33] std::uint32_t _id
[40] std::uint32_t _child_id
[69] NodeState node_state
[72] NodeState _cur_node_state;
[73] std::uint32_t _cur_id;
[75] std::uint32_t _root_id;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/error/error_handle_autoslow.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/error/error_message_filter.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/task_based/optimize_path.h  ( 26 )
[20] ros::Subscriber robotPointrecSubscriber_;
[26] int cell_inflation_radius_;
[27] unsigned int cached_cell_inflation_radius_;
[29] float resolution_;
[32] int seen_size_;
[36] double last_min_x_, last_min_y_, last_max_x_, last_max_y_;
[88] float OptimizeDistanceLevel1;
[89] float OptimizeDistanceLevel2;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/task_based/taskbp_state.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/task_based/task_based_path.h  ( 15 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/task_based/defedge_state.h  ( 3 )
[32] std::uint8_t m_state;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/semantic/lift_map.h  ( 16 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/semantic/semantic_map.h  ( 13 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/semantic/pedestrian_map.h  ( 36 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/robot_status.h  ( 3 )
[10] swr::control_types::__ROBOT_STATUS _robot_status
[15] swr::control_types::__ROBOT_STATUS m_robot_status;
[16] swr::control_types::__ROBOT_STATUS m_history_robot_status;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/error_state.h  ( 2 )
[21] std::uint8_t m_state;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/working_mode.h  ( 3 )
[10] swr::control_types::__WORK_MODE _working_mode
[15] swr::control_types::__WORK_MODE m_working_mode;
[16] swr::control_types::__WORK_MODE m_history_working_mode;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/idle_state.h  ( 3 )
[21] std::uint8_t m_state;
[23] std::uint64_t _start_time;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/mode/manual_state.h  ( 2 )
[21] std::uint8_t m_state;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/system_para.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/global_reaction.h  ( 2 )
[27] clean_robot *mp_clean_robot;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/gridlinetraversal.h  ( 10 )
[10] int num_points;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/manual_ros.h  ( 46 )
[49] ros::Subscriber robotPointrecSubscriber_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/nav_basetype.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/clstate.h  ( 8 )
[36] clean_robot *mp_clean_robot;
[37] std::uint16_t m_state;
[67] EventN m_eventN;
[68] ClStateN m_stateN;
[80] boost::mutex m_mutex_queue_eventdata;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/indemind_map.h  ( 32 )
[76] boost::shared_ptr<Grid2dMap> mp_Indemidmap;
[124] std::uint64_t PubLocalCostmap2StaticStamp;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/sensors.h  ( 86 )
[62] bool _flag
[85] std::uint8_t UltraRangeSensor_l1 = 0;
[86] std::uint8_t UltraRangeSensor_l2 = 0;
[87] std::uint8_t UltraRangeSensor_c3 = 0;
[88] std::uint8_t UltraRangeSensor_r4 = 0;
[89] std::uint8_t UltraRangeSensor_r5 = 0;
[90] std::uint8_t UltraRangeSensor_b6 = 0;
[132] double laser_filter_angle;
[134] double laser_filter_radius;
[168] ros::Subscriber bumperEventSubscriber_;
[169] ros::Subscriber joint_state_subscriber_;
[313] std::list<swr::control_types::PATH_ITEM> _clean_path
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/path_planning.h  ( 50 )
[27] boost::thread *m_SystickHandle;
[28] bool m_sys_start_flag;
[33] boost::shared_ptr<PathPlanning::ManualRos> mp_manual_ros;
[34] bool _exit;
[249] std::list<swr::control_types::PATH_ITEM> _clean_path
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/ultra_mapping.h  ( 30 )
[56] OrientedPoint CorUltra1;
[58] OrientedPoint CorUltra2;
[60] OrientedPoint CorUltra3;
[62] OrientedPoint CorUltra4;
[64] OrientedPoint CorUltra5;
[66] OrientedPoint CorUltra6;
[72] std::queue<swr::sensor_types::UltraData> UltraQueueData;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/nav.h  ( 44 )
[147] std::uint8_t _percentage
[224] std::list<swr::control_types::PATH_ITEM> _clean_path
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/advsensor.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_robot/clean_robot.h  ( 115 )
[171]  std::uint8_t _priority
[171]  unsigned char _pri_mode
[192] bool _flag
[209] int m_plan_type;
[309] boost::shared_ptr<navi_para::LoadPara> mp_load_para;
[311] boost::shared_ptr<sensors> mp_sensor;
[317] boost::shared_ptr<IndemindMap> mp_indemindmap;
[319] boost::shared_ptr<clState> mp_clstate;
[323] boost::shared_ptr<track_plan> mp_track_plan;
[331] boost::shared_ptr<execute> mp_execute;
[333] boost::shared_ptr<auto_track> mp_auto_track;
[335] boost::shared_ptr<TaskBasedPath> mp_taskBasedPath;
[337] boost::shared_ptr<move_base::MoveBase> mp_move_base;
[339] boost::shared_ptr<working_mode> mp_working_mode;
[341] boost::shared_ptr<robot_status> mp_robot_status;
[347] costmap_2d::Costmap2DROS *planner_costmap_ros_;
[348] costmap_2d::Costmap2DROS *controller_costmap_ros_;
[350] boost::shared_ptr<vel_control> mp_vel_controller;
[353] boost::shared_ptr<ccpp::CcppPlanner> mp_ccpp_planner;
[355] boost::shared_ptr<CheckFootprint> mp_check_footprint;
[358] boost::shared_ptr<auto_clean::arrow_clean> mp_arrow_clean;
[361] boost::shared_ptr<SemanticMap> mp_semantic_map;
[363] boost::shared_ptr<RemRtPath> mp_rem_rtpath;
[365] boost::shared_ptr<CleanArea> mp_clean_area;
[367] boost::shared_ptr<CalTime> mp_cal_time;
[422] std::uint32_t _child_id
[422]  std::uint32_t _father_id
[473] bool IfInitFlag;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/load_para.h  ( 8 )
[20] std::string _config_path
[40] YAML::Node m_config_yamlN;
[45] bool m_if_init;
[46] std::string m_config_path;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/bumper_state.h  ( 10 )
[28] std::uint8_t m_state;
[30] std::uint8_t _rev_back_msg;
[31] std::int8_t _res_back;
[33] std::uint64_t _start_time;
[34] std::uint8_t _father_id;
[37] std::uint64_t _try_history_time;
[38] std::uint16_t _try_counter;
[54] float _back_distance
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/basetype.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/check_footprint.h  ( 14 )
[13]  std::vector<IntPoint> polygon_cells
[18]  costmap_2d::Costmap2DROS __costmap
[18]  double inscribed_radius = 0
[18]  double circumscribed_radius = 0
[30]  std::vector<IntPoint> _cells
[34] clean_robot *mp_clean_robot;
[35] std::vector<IntPoint> m_footprint_cells;
[36] std::vector<Point> m_footprint_points;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/back_normal_state.h  ( 6 )
[28] std::uint8_t m_state;
[30] std::uint64_t _start_time;
[31] std::uint8_t _trying_counter;
[32] std::uint8_t _father_id;
[46] float _back_distance
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/cpu_check.h  ( 3 )
[15] double m_cpu_occ_threshold;
[16] std::uint8_t m_cpu_occ;
[18] bool m_cal_cpu_occ_flag;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/fun_id.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/nav_log.h  ( 1 )
[11] static double history_time = 0; \
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/cliff_state.h  ( 10 )
[28] std::uint8_t m_state;
[30] std::uint8_t _rev_back_msg;
[31] std::int8_t _res_back;
[33] std::uint64_t _start_time;
[34] std::uint8_t _father_id;
[37] std::uint64_t _try_history_time;
[38] std::uint16_t _try_counter;
[54] float _back_distance
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/public/path_save.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/trap/surround_detect.h  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/back_charging/back_charging.h  ( 26 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/trpath_state.h  ( 38 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/execute.h  ( 10 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/track_plan.h  ( 108 )
[40] geometry_msgs::PoseStamped PoseStamped;
[41] std::uint64_t Sequenc;
[42] std::uint8_t CleanIntensity;
[43] std::uint8_t BrushState;
[44] bool IsObst;
[45] std::uint8_t TrackState;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/check_pedestrian.h  ( 8 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/base_track_planner.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/get_path_virtual_wall.h  ( 25 )
[33] unsigned int index_;
[34] unsigned int x_, y_;
[35] unsigned int src_x_, src_y_;
[60] int cell_inflation_radius_;
[61] int width_virtual_wall;
[62] int shift_inflation_radius;
[63] unsigned int cached_cell_inflation_radius_;
[65] float resolution_;
[68] int seen_size_;
[72] double last_min_x_, last_min_y_, last_max_x_, last_max_y_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/normal_tool.h  ( 37 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/to_scan_marker.h  ( 35 )
[30] std::uint8_t _father_id;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/tracking_path/check_obstacle.h  ( 14 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/map/point.h  ( 8 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/map/map.h  ( 5 )
[78] Point m_center;
[79] double m_worldSizeX, m_worldSizeY, m_delta;
[80] int m_mapSizeX, m_mapSizeY;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/map/gvalues.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/auto_track/auto_track.h  ( 92 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/bumper_abnormal.h  ( 12 )
[43] bool CheckingFlag;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/curent_abnormal.h  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/abnormal.h  ( 9 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/abnormal_center.h  ( 15 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/overcurent_abnormal.h  ( 9 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/speeding_taskbp.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/tilt_observation.h  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/still.h  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/drop_observation.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/cliff_abnormal.h  ( 10 )
[39] bool CheckingFlag;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/narrow_abnormal.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/abnormal/obs_intrusion_abnormal.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/ccpp_planner.h  ( 3 )
[37] std::list<swr::control_types::PATH_ITEM> m_def_edge
[57] int finish_timeout ;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/gyriform/PathSmoothing.h  ( 9 )
[43]  int np_skip 
[43]  float r_smooth_f
[50] int nsliding_window = 10;
[52] int length_max(Mat & map , Point p , list<Point> &p_max);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/gyriform/AnnularCleaningPath.h  ( 43 )
[112] int Init(Mat & map , Point p_min , Point p_max , MapInfo info , list<Point> wall , int lengthcleanpath , int lengthsinglecleanpath , int areasinglecleanpath , int areasingleclean , int clean_level);
[121] int GetPath(Mat & src , Point s , list<Spot> & path , int dir = 0);
[122] int coverage_width=3
[133] list<Point> p_path
[133]  list<Point> p_path_new
[138] Point p_lu;
[142] int CoverageWidth = 4;
[145] Point p_rd;
[146] MapInfo src_mapinfo;
[147] list<Point> p_sidewall;
[148] int length_cleanpath_min = 60;
[149] int length_singlecleanpath_min = 20;
[150] int area_singlecleanpath_min = 64;
[151] int minarea_singleclean = 8;
[152] int flg_clean_level;
[154] int flg_getpath = 0;
[155] int getpath_0(Mat & src , Point s , list<Spot> & path , int dir = 0);
[156] int getpath_1(Mat & src , Point s , list<Spot> & path);
[172] int set_out_4(Mat & src , Point p_min , Point p_max , uint8_t sidetype , uint8_t settype , list<Point> & ilist);
[173]  Point target_point 
[173]  Point p_min 
[173]  Point p_max 
[173] list<Point> list_out
[178]  Point start_point 
[182]  list<Point> p_list
[183] int length_max(Mat & src , Point p , list<Point> &p_list);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/gyriform/gyriform_planner.h  ( 67 )
[42] GyriformPlanner(costmap_2d::Costmap2DROS *costmap2d_ros, clean_robot *mCleanRobot);
[55] std::list<swr::control_types::PATH_ITEM> m_def_edge
[80] int min_x
[80]  int min_y
[80]  int max_x
[80]  int max_y
[89] std::vector<swr::control_types::PATH_ITEM> all_paths
[98] int smooth_length;
[116] int clean_level;
[119] int use_smooth;
[120] float r_smooth;
[122] int use_optim;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/bow/bow.h  ( 42 )
[32] int obs_tag ;
[51] geometry_msgs::PoseStamped origin_pose
[51]  geometry_msgs::PoseStamped center_point_wd
[51]  geometry_msgs::PoseStamped gyriform_pose
[60]  int bow_direct
[60]  int HEAD_RANGE
[60]  int SIDE_RANGE
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/bow/bow_planner.h  ( 112 )
[43] int start_index;
[44] int end_index;
[45] int start_direct;
[46] int end_direct;
[52] BowPlanner(costmap_2d::Costmap2DROS *costmap2d_ros, clean_robot *clean_robot);
[65] std::list<swr::control_types::PATH_ITEM> m_def_edge
[113] std::list<swr::control_types::PATH_ITEM> in_edge
[113]  std::list<swr::control_types::PATH_ITEM> out_edge
[115] std::vector<geometry_msgs::PoseStamped> origin_edge
[115]  std::vector<geometry_msgs::PoseStamped> trans_edge
[116]  double min_x
[116]  double max_x
[116]  double min_y
[116]  double max_y
[125]  double closed_value
[128]  double shorted_len
[154]  std::list<swr::control_types::PATH_ITEM> path_items
[176] unsigned int stop_x
[176]  unsigned int stop_y
[181] int bow_direct
[186] geometry_msgs::PoseStamped fixed_point
[192] int SIDE_LENGTH ;
[193] int OBSTACLE_SIZE ;
[194] int AVOID_DIST ;
[209] int BOW_DIRECT ;
[210] int PLAN_TYPE ;
[211] int HEAD_RANGE ;
[212] int SIDE_RANGE ;
[213] int PLAN_DIST ;
[214] int GYRIFORM_PLAN_TYPE ;
[216] int WAITING_MARK_TIME ;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/ccpp_planner/bow/edge_def.h  ( 19 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/freq_check.h  ( 14 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/cal_grids.h  ( 15 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/cal_enclose_area.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/butterworth_filter.h  ( 7 )
[30] double X
[36] double T
[36]  int N
[43]  Eigen::Vector3d raw_data
[53] bool InitF;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/LoopThread.h  ( 9 )
[83] auto packed_f = [this]() {
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/narrow_check.h  ( 11 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/Rate.h  ( 10 )
[15] std::uint64_t base_time;
[19] std::mutex mtx_cv;
[46] std::uint64_t time_left = base_time * (counter + 1) - ((tv_end.tv_sec - tv_start.tv_sec) * 1000000 + (tv_end.tv_usec - tv_start.tv_usec)) * 1000;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/clean_area.h  ( 17 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/time.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/cal_time.h  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/rem_rtpath.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/operate_water_pump.h  ( 9 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/utility/SysOper.h  ( 12 )
[124] float cpu_occupy = 0.0;
[192]  unsigned int N
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_equipment/clean_eqpt.h  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_equipment/finish_operate.h  ( 10 )
[25] std::uint8_t _father_id;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/clean_equipment/brush_operate.h  ( 9 )
[28] std::uint8_t _father_id;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/controller/auto_slow.h  ( 43 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/controller/vel_control.h  ( 39 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/controller/emergency_slow.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/global_plan/goal_points.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/include/global_plan/global_plan.h  ( 8 )
[28] boost::mutex planner_mutex_;
[35] pluginlib::ClassLoader<nav_core::BaseGlobalPlanner> bgp_loader_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/sensors.cpp  ( 37 )
[55] ros::NodeHandle m_n;
[146] bool _flag
[356] float vel_l, vel_r;
[376] geometry_msgs::Twist _vel_twist;
[489] OrientedPoint _robot_rpy(poseRoll, posePitch, poseYaw);
[574] geometry_msgs::Twist _yaw_twist;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/advsensor.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/indemind_map.cpp  ( 56 )
[74] OrientedPoint robot_pose = mpCleanRobot->mp_sensor->get_OrientedPose() - OrientedPoint(mp_Indemidmap->getMapResolution() / 2.0, mp_Indemidmap->getMapResolution() / 2.0, 0.0);
[89] IntPoint robot_point(mp_Indemidmap->world2map(robot_pose.x, robot_pose.y));
[114] OrientedPoint laser_pose(robot_pose.x + 0.14115 * cos(robot_pose.theta), robot_pose.y + 0.14115 * sin(robot_pose.theta), robot_pose.theta + angle);
[117] OrientedPoint laser_point(laser_pose.x + lengthLaser * cos(laser_pose.theta), laser_pose.y + lengthLaser * sin(laser_pose.theta), laser_pose.theta);
[119] IntPoint p_robot(mp_Indemidmap->world2map(laser_pose.x, laser_pose.y));
[125] std::uint32_t _update_voxel = phit.x * 10000 + phit.y;
[317] std::int8_t _res = mp_Indemidmap->cell(IntPoint(x + mapUpdate->x, y + mapUpdate->y)).data[0];
[318] std::int8_t _res2 = mp_Indemidmap->cell(IntPoint(x + mapUpdate->x, y + mapUpdate->y)).data[1];
[320] std::int8_t _res3 = mp_Indemidmap->cell(IntPoint(x + mapUpdate->x, y + mapUpdate->y)).data[LAY_FORBIDDEN_STATIC];
[399] costmap_2d::Costmap2D *_costmap = mpCleanRobot->controller_costmap_ros_->getCostmap();
[499] i18r_basetype::OrientedPoseStamp pose_stamp = mpCleanRobot->mp_sensor->get_OrientedPoseStamp();
[500] Point new_pt;
[655] double step_time = (nav::Now() / 1000 - odomHistoryTime) / 1000.0;
[658] i18r_basetype::VelocityStamp _velocity = mpCleanRobot->mp_sensor->GetVelocityStamp();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clean_robot.cpp  ( 51 )
[183] ros::NodeHandle m_n;
[312]  std::uint8_t _priority
[312]  unsigned char _pri_mode
[346] std::uint64_t _ww_start_time = nav::Now() / 1000;
[377] std::uint64_t _start_time = nav::Now() / 1000;
[589] bool _flag
[633] std::uint64_t start_time = nav::Now() / 1000;
[654] static unsigned int t_click = 0;
[729] nav_msgs::Path plan_path;
[735] geometry_msgs::PoseStamped this_pose_stamped;
[739] geometry_msgs::Quaternion goal_quat = tf::createQuaternionMsgFromYaw(pt.pose.theta);
[770] OrientedPoint robot_pose = mp_sensor->get_OrientedPose();
[836] std::list<swr::control_types::PATH_ITEM> _task_bp;
[838] std::vector<OrientedPoint> _cur_path;
[1076] uint32_t _child_id
[1076]  uint32_t _father_id
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/nav.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/global_reaction.cpp  ( 3 )
[120] bool forbidden_cliff;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ultra_mapping.cpp  ( 26 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/path_planning.cpp  ( 42 )
[269] std::list<swr::control_types::PATH_ITEM> _clean_path
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/manual_ros.cpp  ( 15 )
[7] ros::NodeHandle m_n;
[123] std::list<swr::control_types::PATH_ITEM> _task_bp;
[133] std::vector<OrientedPoint> _cur_path;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clstate.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/auto_clean/autoc_state.cpp  ( 17 )
[77] bool _forbidden_rbumper_flag = true;
[103] bool _forbidden_rcliff_flag = true;
[235] float _clean_area, _rework_rate;
[961] bool forbidden_cliff;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/auto_clean/arrow_clean.cpp  ( 29 )
[8] ros::NodeHandle _nh;
[46] UIntPoint _edge_item_start, _edge_item_end;
[168] ros::NodeHandle m_n;
[176] OrientedPoint _cur_location(msg->pose.pose.position.x, msg->pose.pose.position.y, tf::getYaw(msg->pose.pose.orientation));
[181] std::uint64_t start_time = nav::Now() / 1000;
[187] std::vector<geometry_msgs::Point> footprint_spec = mp_clean_robot->planner_costmap_ros_->getRobotFootprint();
[188] std::vector<Point> oriented_footprint;
[191] Point new_pt;
[209] boost::unique_lock<boost::mutex> _lock(_cal_mutex);
[262]  Point _cur_point
[262]  uint32_t _steps
[264] OrientedPoint _point
[274] UIntPoint _des_loc;
[283] OrientedPoint _cur;
[284] OrientedPoint _tmp;
[386] unsigned int _x, _y;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/move_base/move_base.cpp  ( 130 )
[105] ros::NodeHandle private_nh("~");
[112] std::string global_planner, local_planner;
[158] std::string _velocity_topic;
[165] ros::NodeHandle action_nh("move_base");
[172] ros::NodeHandle simple_nh("move_base_simple");
[303] boost::shared_ptr<nav_core::BaseGlobalPlanner> old_planner = planner_;
[369] move_base_msgs::MoveBaseActionGoal action_goal;
[377] double size_x
[377]  double size_y
[378] geometry_msgs::PoseStamped global_pose;
[383] std::vector<geometry_msgs::Point> clear_poly;
[436] boost::unique_lock<costmap_2d::Costmap2D::mutex_t> lock_controller( *(mp_clean_robot->controller_costmap_ros_->getCostmap()->getMutex()));
[440] boost::unique_lock<costmap_2d::Costmap2D::mutex_t> lock_planner( *(mp_clean_robot->planner_costmap_ros_->getCostmap()->getMutex()));
[485] std::vector<geometry_msgs::PoseStamped> global_plan;
[495] bool found_legal = false;
[497] float search_increment = resolution * 3.0;
[695] tf2::Quaternion tf_q(q.x, q.y, q.z, q.w);
[723] std::string global_frame = mp_clean_robot->planner_costmap_ros_->getGlobalFrameID();
[724] geometry_msgs::PoseStamped goal_pose, global_pose;
[852] bool wait_for_wake = false;
[872] ros::Time start_time = ros::Time::now();
[874] geometry_msgs::PoseStamped temp_goal = planner_goal_;
[920] geometry_msgs::PoseStamped temp_start = planner_start_;
[946] ros::Time success_time = ros::Time::now();
[950] std::vector<geometry_msgs::PoseStamped>* temp_plan = planner_plan_;
[970] ros::Time failed_time = ros::Time::now();
[973] ros::Time attempt_end = last_valid_plan_ + ros::Duration(planner_patience_);
[1048] OrientedPoint robot_pose = mp_clean_robot->mp_sensor->get_OrientedPose();
[1148] move_base_msgs::MoveBaseGoal new_goal = *as_->acceptNewGoal();
[1234] ros::WallDuration t_diff = ros::WallTime::now() - start;
[1299] std::uint64_t start_ms = ros::Time::now().toNSec() / 1e6;
[1476] double t_diff_s = (ros::Time::now().toNSec() / 1.0e6 - start_ms) / 1.0e3;
[1494] geometry_msgs::Twist cmd_vel;
[1564] std::unique_lock<boost::mutex> _lock(globalPlanPathMutex);
[1944] tf2::Quaternion q_orig, q_rot, q_new;
[2076] std::unique_lock<boost::mutex> lock_(globalPlanPathMutex);
[2126]  int work_mode
[2500] XmlRpc::XmlRpcValue behavior_list;
[2518] std::string name_i = behavior_list[i]["name"];
[2519] std::string name_j = behavior_list[j]["name"];
[2628] boost::shared_ptr<nav_core::RecoveryBehavior> cons_clear( recovery_loader_.createInstance("clear_costmap_recovery/ClearCostmapRecovery"));
[2647] boost::shared_ptr<nav_core::RecoveryBehavior> ags_clear( recovery_loader_.createInstance("clear_costmap_recovery/ClearCostmapRecovery"));
[2724] ros::Time current_time = ros::Time::now();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/state/state.cpp  ( 4 )
[25] std::uint32_t _id
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/state/context.cpp  ( 8 )
[22] std::uint32_t _id
[34] uint32_t _child_id
[34]  uint32_t _father_id
[54] NodeState node_state;
[82] EventDeal event_deal = node_state._state->RunEventFunc(event_data);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/error/error_message_filter.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/error/error_handle_autoslow.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/task_based/taskbp_state.cpp  ( 8 )
[159] float _clean_area, _rework_rate;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/task_based/task_based_path.cpp  ( 10 )
[134] std::list<swr::control_types::PATH_ITEM> _task_bp
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/task_based/optimize_path.cpp  ( 41 )
[65] std::uint64_t size_x = mpCleanRobot->mp_indemindmap->mp_Indemidmap->getMapSizeX();
[66] std::uint64_t size_y = mpCleanRobot->mp_indemindmap->mp_Indemidmap->getMapSizeY();
[94] std::vector<CellData> &obs_bin = inflation_cells_[0.0];
[133] unsigned char old_cost = mpCostmap->cell(IntPoint(cell.x_, cell.y_));
[286]  unsigned int src_x
[286]  unsigned int src_y
[332] float min_distance = 1e5;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/task_based/defedge_state.cpp  ( 8 )
[155] float _clean_area, _rework_rate;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/semantic/semantic_map.cpp  ( 6 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/semantic/pedestrian_map.cpp  ( 27 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/semantic/lift_map.cpp  ( 16 )
[121] visualization_msgs::Marker line_list;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/sample/loopTrpath.cpp  ( 16 )
[59] std::string info_log = home + "master_info_";
[61] std::string warning_log = home + "master_warning_";
[63] std::string error_log = home + "master_error_";
[65] std::string fatal_log = home + "master_fatal_";
[69] std::string config_path("");
[71] ros::NodeHandle private_nh("~");
[91] boost::thread *m_SystickHandle = new boost::thread(boost::bind(&keeploop, cr));
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/sample/main.cpp  ( 12 )
[20] std::string info_log = home + "master_info_";
[22] std::string warning_log = home + "master_warning_";
[24] std::string error_log = home + "master_error_";
[26] std::string fatal_log = home + "master_fatal_";
[30] std::string config_path("");
[32] ros::NodeHandle private_nh("~");
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/sample/loopAutoc.cpp  ( 16 )
[61] std::string info_log = home + "master_info_";
[63] std::string warning_log = home + "master_warning_";
[65] std::string error_log = home + "master_error_";
[67] std::string fatal_log = home + "master_fatal_";
[71] std::string config_path("");
[73] ros::NodeHandle private_nh("~");
[93] boost::thread *m_SystickHandle = new boost::thread(boost::bind(&keeploop, cr));
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/error_state.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/idle_state.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/working_mode.cpp  ( 2 )
[6] swr::control_types::__WORK_MODE _working_mode
[10] std::uint8_t __work_mode;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/robot_status.cpp  ( 1 )
[6] swr::control_types::__ROBOT_STATUS _robot_status
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/mode/manual_state.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/cliff_state.cpp  ( 5 )
[34] int cliff_try_counter;
[197] float _back_distance
[198] std::vector<geometry_msgs::Point> _foot_print = mp_clean_robot->planner_costmap_ros_->getRobotFootprint();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/path_save.cpp  ( 7 )
[56] swr::control_types::PATH_ITEM _path_item_buf;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/check_footprint.cpp  ( 34 )
[16]  costmap_2d::Costmap2DROS __costmap
[16]  double inscribed_radius
[16]  double circumscribed_radius
[17] costmap_2d::Costmap2D *_costmap = __costmap->getCostmap();
[18] double cos_th = cos(theta);
[19] double sin_th = sin(theta);
[20] std::vector<Point> oriented_footprint;
[23] Point new_pt;
[28] std::vector<IntPoint> _foot_print_cells;
[37] std::uint32_t _no_infomation_count = 0;
[252] std::vector<IntPoint> _cells;
[316] std::vector<IntPoint> map_polygon;
[332]  std::vector<IntPoint> polygon_cells
[357] IntPoint min_pt;
[358] IntPoint max_pt;
[359] unsigned int min_x = polygon_cells[0].x;
[360] unsigned int max_x = polygon_cells[polygon_cells.size() - 1].x;
[415] unsigned int last_index = polygon.size() - 1;
[427] std::vector<geometry_msgs::Point> _foot_print = __costmap->getRobotFootprint();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/cpu_check.cpp  ( 1 )
[42] float _res = swr::util::SysOper::getTotalCPUOccupy(1000);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/bumper_state.cpp  ( 5 )
[35] int bumper_try_counter;
[186] float _back_distance
[187] std::vector<geometry_msgs::Point> _foot_print = mp_clean_robot->planner_costmap_ros_->getRobotFootprint();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/back_normal_state.cpp  ( 6 )
[76] OrientedPoint _cur_point = mp_clean_robot->mp_sensor->get_OrientedPose();
[95] std::int8_t _res = mp_clean_robot->mp_check_footprint->footprintCost(_cur_point.x, _cur_point.y, _cur_point.theta, make_footprint(0.2), mp_clean_robot->planner_costmap_ros_);
[202] float _back_distance
[203] std::vector<geometry_msgs::Point> _foot_print = mp_clean_robot->planner_costmap_ros_->getRobotFootprint();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/public/load_para.cpp  ( 16 )
[7] std::string _config_path
[13] ros::NodeHandle private_nh("~/");
[27] bool _flag = false;
[96] std::string _mprim;
[104] std::string set_para;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/trap/surround_detect.cpp  ( 18 )
[74] i18r_basetype::OrientedPoseStamp pose_stamp = mpCleanRobot->mp_sensor->get_OrientedPoseStamp();
[147] IntPoint _cur;
[148] IntPoint _tmp;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/back_charging/back_charging.cpp  ( 5 )
[437] bool forbidden_cliff;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/normal_tool.cpp  ( 38 )
[48] tf::Quaternion _tq = tf::createQuaternionFromYaw(ori.theta);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/base_track_planner.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/trpath_state.cpp  ( 21 )
[98] bool _forbidden_rbumper_flag = true;
[323] float _clean_area, _rework_rate;
[671] bool forbidden_cliff;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/get_path_virtual_wall.cpp  ( 44 )
[41] std::uint64_t size_x = pCleanRobot->mp_indemindmap->mp_Indemidmap->getMapSizeX();
[42] std::uint64_t size_y = pCleanRobot->mp_indemindmap->mp_Indemidmap->getMapSizeY();
[45] Cost2dMap master_array(pCleanRobot->mp_indemindmap->mp_Indemidmap->getCenter(), size_x * resolution_, size_y * resolution_, resolution_);
[73] std::vector<CellData>& obs_bin = inflation_cells_[0.0];
[108] unsigned char old_cost = master_array.cell(IntPoint(cell.x_, cell.y_));
[318]  unsigned int src_x
[318]  unsigned int src_y
[496] IntPoint _cur;
[497] IntPoint _tmp;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/execute.cpp  ( 4 )
[29] boost::unique_lock<boost::mutex> _lock(mtx);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/check_obstacle.cpp  ( 20 )
[157] tf::Quaternion _tq = tf::createQuaternionFromYaw(points[i].z);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/to_scan_marker.cpp  ( 29 )
[484] std::unique_lock<boost::mutex> _lock(mpCleanRobot->mp_move_base->usedForTrCheckMtx);
[523] bool forbidden_cliff;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/track_plan.cpp  ( 64 )
[844] geometry_msgs::PoseStamped global_pose;
[1227] PoseStampedWithIndex path_ps;
[1484] std::unique_lock<boost::mutex> _lock(subSwrPathMtx);
[1497] tf::Quaternion _tq = tf::createQuaternionFromYaw(path.pose.theta);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/tracking_path/check_pedestrian.cpp  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/auto_track/auto_track.cpp  ( 54 )
[53] boost::unique_lock<boost::mutex> _lock(mtx);
[600] geometry_msgs::PoseStamped global_pose;
[1077] AutoPoseStampedWithIndex path_ps;
[1281] tf::Quaternion _tq = tf::createQuaternionFromYaw(path.pose.theta);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/abnormal_center.cpp  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/bumper_abnormal.cpp  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/narrow_abnromal.cpp  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/still.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/speeding_taskbp.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/obs_intrusion_abnormal.cpp  ( 10 )
[75] OrientedPoint laser_point(laserAxisX + laserLength * cos(laserTheta), laserAxisY + laserLength * sin(laserTheta), laserTheta);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/cliff_abnormal.cpp  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/drop_observation.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/overcurent_abnormal.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/curent_abnormal.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/abnormal/tilt_observation.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/ccpp_planner.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/gyriform/PathSmoothing.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/gyriform/AnnularCleaningPath.cpp  ( 74 )
[135] list<Point> p_r;
[136] list<Point> p_tmp;
[482] int new_row = row - p_lu.y;
[483] int new_col = col - p_lu.x;
[494] int tmp_x = aMx[i] + p_lu.x;
[495] int tmp_y = aMy[i] + p_lu.y;
[530] int coverage_width
[564] list<Point> p_side;
[566] list<Point> p_path;
[567] list<Point> p_tmp_;
[573] Point p_s, p_t;
[574] Point p_map_min = Point(0, 0);
[575] Point p_map_max = Point(0, 0);
[576] Point p_target;
[578] int num_limit = 0;
[579] int num_limit_tmp = 0;
[582] int flg_ = 0;
[1192] int num_loop = 100;
[1381] int flg_return = 0;
[1615] list<Point> p_path_new;
[1921] int num_path = minarea_singleclean;
[2176] int x_0 = 0, y_0 = 0;
[2177] int x_2 = 0, y_2 = 0;
[2178] int x_4 = 0, y_4 = 0;
[2179] int x_6 = 0, y_6 = 0;
[2266]  Point target_point
[2266]  Point p_min
[2266]  Point p_max
[2266]  list<Point> list_out
[2277] uint8_t target_type = src.at<uchar>(target_point.y, target_point.x);
[2290] int x_1 = 0, y_1 = 0;
[2292] int x_3 = 0, y_3 = 0;
[2294] int x_5 = 0, y_5 = 0;
[2296] int x_7 = 0, y_7 = 0;
[3387]  Point start_point
[3630] bool flg_run = true;
[3953]  list<Point> p_list
[4272] int num_cover = 0;
[4273] int num_free = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/gyriform/gyriform_planner.cpp  ( 62 )
[13] GyriformPlanner::GyriformPlanner(costmap_2d::Costmap2DROS *costmap2d_ros, clean_robot *mCleanRobot) : isExit(false), pathLengthForNarrowCheck(30) {
[28] int occupy_cell;
[53] ros::NodeHandle private_nh;
[115] std::list<swr::control_types::PATH_ITEM> m_def_edge
[126] tf::Quaternion _tq = tf::createQuaternionFromYaw(m_def_edge.front().pose.theta);
[138] geometry_msgs::PoseStamped edge_end;
[139] geometry_msgs::PoseStamped arcuate_start;
[185] std::list<swr::control_types::PATH_ITEM> def_edge = m_def_edge;
[194] Point w_point;
[202] nav_msgs::Path gui_path;
[208] geometry_msgs::PoseStamped path_ps;
[221] nav_msgs::Path gui_path2;
[303] std::list<swr::control_types::PATH_ITEM> saved_def_edge;
[417] std::vector<swr::control_types::PATH_ITEM> all_paths
[449] swr::control_types::PATH_ITEM path_item;
[473] Point p_min, p_max;
[479] MapInfo map_info;
[496] int min_x
[496]  int min_y
[496]  int max_x
[496]  int max_y
[552] double footprint_cost = mpCleanRobot->mp_check_footprint->footprintCost( x, y, theta, MakeFootprintDirectly(), mpCleanRobot->planner_costmap_ros_, 0.0, 0.0);
[570] int x_
[570]  int y_
[593] int new_x, new_y;
[905] std::list<swr::control_types::PATH_ITEM> path_items;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/bow/bow_planner.cpp  ( 215 )
[12] BowPlanner::BowPlanner(costmap_2d::Costmap2DROS *costmap2d_ros, clean_robot *mpCleanRobot_) : mStopX(0), mStopY(0), isCcppStop(false), isExit(false), bUseMap(false) {
[45] ros::NodeHandle private_nh;
[132]  double min_x
[132]  double max_x
[132]  double min_y
[132]  double max_y
[133] double min_x_ = 10000.0;
[134] double max_x_ = -10000.0;
[135] double min_y_ = 10000.0;
[136] double max_y_ = -10000.0;
[186] std::vector<EdgePose> fFixedEdge_;
[225]  std::vector<geometry_msgs::PoseStamped> trans_edge
[226] std::vector<EdgePose> yMaxVec_;
[227] std::vector<EdgePose> yMinVec_;
[228] std::vector<EdgePose> xMaxVec_;
[229] std::vector<EdgePose> xMinVec_;
[342] double new_yaw = yaw-PI;
[343] tf::Quaternion _tq = tf::createQuaternionFromYaw(new_yaw);
[444] double A1 = abs(sqrt(std::pow(dx1, 2) + std::pow(dy1, 2)));
[821] std::vector<geometry_msgs::PoseStamped> origin_edge
[839] double iter_y = max_y;
[856] int min_i, max_i ;
[898] double iter_x = max_x;
[976] std::list<swr::control_types::PATH_ITEM> in_edge
[976]  std::list<swr::control_types::PATH_ITEM> out_edge
[994] std::list<swr::control_types::PATH_ITEM> new_edge;
[996] std::vector<geometry_msgs::PoseStamped> trans_edge_;
[1000] int shorted_i = -1;
[1001] double shorted_dis = 10000.0;
[1028] swr::control_types::PATH_ITEM path_item;
[1106] std::list<swr::control_types::PATH_ITEM> m_def_edge_
[1114] geometry_msgs::PoseStamped edge_end;
[1115] geometry_msgs::PoseStamped arcuate_start;
[1159] nav_msgs::Path gui_path;
[1165] geometry_msgs::PoseStamped path_ps;
[1295] int area_num = 0;
[1297] int skip_num = 10;
[1300] int slide_num = 0;
[1396] double footprint_cost = mpCleanRobot->mp_check_footprint->footprintCost( x, y, theta, MakeFootprintDirectly(), mpCleanRobot->planner_costmap_ros_, 0.0, 0.0);
[1428]  std::list<swr::control_types::PATH_ITEM> path_items_
[1429] std::vector<swr::control_types::PATH_ITEM> path_items_tmp;
[1435] std::list<swr::control_types::PATH_ITEM> path_items;
[1516] int bow_direct
[1517] int x_, y_;
[1663]  double shorted_len
[1670] int nYaw90_ = 0;
[1672] double sum_x_1=0.0, sum_x_2=0.0;
[1673] double sum_y_1=0.0, sum_y_2=0.0;
[1700] double x_1 = sum_x_1 / nYaw90;
[1701] double x_2 = sum_x_2 / nYaw90_;
[1702] double y_1 = sum_y_1 / nYaw180;
[1703] double y_2 = sum_y_2 / nYaw0;
[1748] double edge_shorted_len = 0.0;
[1880]  double closed_value
[1886] int back_i = i-24;
[2095] double obs_len1 = 0.0;
[2103] double tmp_x = x;
[2141] double tmp_y = y;
[2603] double obs_depth = 0.0;
[2605] double obs_length_r = 0.0;
[2606] int skip_i_num = 0;
[2612] double path_yaw = vGyriPoses[i].yaw;
[2615] int obs_direct = vGyriPoses[i].direct;
[2639] int obs_stap = 0;
[3354] bool r_ = IsItemInObstacle(pose) || IsItemInObstacle(vGyriPoses[i].pose);
[3435] geometry_msgs::PoseStamped start_conn = vGyriPoses[os.start_index].pose;
[3437] geometry_msgs::PoseStamped end_conn = vGyriPoses[os.end_index].pose;
[3768] double A = abs(sqrt(std::pow(dx, 2) + std::pow(dy, 2)));
[4996] int cur_i = i;
[5318] double x_d = x - tmpvFixedGyriPoses[i].pose.pose.position.x;
[5333] double y_d = tmpvFixedGyriPoses[i+1].pose.pose.position.y - y;
[5694] bool IsInitialed = false;
[5848] static bool IsGyriInitialed = false;
[6015] std::list<swr::control_types::PATH_ITEM> path_items_origin;
[6039] swr::control_types::PATH_ITEM start_item = path_items_origin.front();
[6043] std::list<swr::control_types::PATH_ITEM> path_items_stop;
[6309] geometry_msgs::PoseStamped fixed_point
[6316] geometry_msgs::PoseStamped _point = mStartPoint;
[7011] int stop_x
[7011]  int stop_y
[7083] int curr_x, curr_y ;
[7315] int loop_num = 4;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/bow/bow.cpp  ( 63 )
[29] double A1 = abs(sqrt(std::pow(dx1, 2) + std::pow(dy1, 2)));
[34] double A2 = abs(sqrt(std::pow(dx2, 2) + std::pow(dy2, 2)));
[388] geometry_msgs::PoseStamped origin_pose
[388]  geometry_msgs::PoseStamped center_point_wd
[388]  geometry_msgs::PoseStamped gyriform_pose
[392] double A = abs(sqrt(std::pow(dx, 2) + std::pow(dy, 2)));
[471]  int bow_direct
[471]  int HEAD_RANGE
[471]  int SIDE_RANGE
[473] int last_theta = 0;
[474] int cp_theta = 0;
[500] bool is_legal = false;
[530] int obs_r = 0;
[531] int obs_l = 0;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/ccpp_planner/bow/edge_def.cpp  ( 29 )
[9] ros::NodeHandle private_nh;
[159] Point p_;
[360] int x_ = x1-i;
[361] int y_ = y1-j;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/narrow_check.cpp  ( 20 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/clean_area.cpp  ( 35 )
[125] std::vector<IntPoint> map_polygon;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/cal_grids.cpp  ( 29 )
[9] double cos_th = cos(theta);
[10] double sin_th = sin(theta);
[89] unsigned int min_x = polygonCells[0].x;
[90] unsigned int max_x = polygonCells[polygonCells.size() - 1].x;
[145] unsigned int last_index = polygon.size() - 1;
[175] std::vector<geometry_msgs::Point> _foot_print = localCostmap->getRobotFootprint();
[176] std::vector<Point> oriented_footprint;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/operate_water_pump.cpp  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/cal_time.cpp  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/butterworth_filter.cpp  ( 12 )
[21] double X
[43] double T
[43]  int N
[84] double C;
[104] double A;
[310]  Eigen::Vector3d raw_data
[325] std::vector<double> temp_data(3, 0);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/freq_check.cpp  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/utility/rem_rtpath.cpp  ( 13 )
[9] ros::NodeHandle m_n;
[33] std::vector<OrientedPoint> _path_items;
[38] float _cal_res_distannce = 0;
[39] OrientedPoint _cur_pt = *_path_items.begin();
[58] std::vector<OrientedPoint> _path
[73] geometry_msgs::PoseStamped this_pose_stamped;
[77] std::vector<OrientedPoint> _tmp_path;
[87] geometry_msgs::Quaternion goal_quat = tf::createQuaternionMsgFromYaw(pt.theta);
[107] OrientedPoint _robot_pose = mpCleanRobot->mp_sensor->get_OrientedPose();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clean_equipment/brush_operate.cpp  ( 5 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clean_equipment/finish_operate.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/clean_equipment/clean_eqpt.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/controller/auto_slow.cpp  ( 27 )
[242] geometry_msgs::Twist _velocity_msg;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/controller/vel_control.cpp  ( 23 )
[46] ros::NodeHandle _n;
[103] boost::mutex::scoped_lock _tmp(mutexDesVelocity);
[278] static double _history_time = nav::Now() / 1000000.0;
[279] double _cur_time = nav::Now() / 1000000.0;
[280] double _diff_time = _cur_time - _history_time;
[281] Point _des_velocity = GetDesVelocity();
[410] geometry_msgs::Twist _velocity_msg;
[469] swr::sensor_types::VelocityCmd _vel_tmp;
[500] i18r_basetype::VelocityStamp _velocity = mpCleanRobot->mp_sensor->GetVelocityStamp();
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/controller/emergency_slow.cpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/src/indemind_clean_robot/src/global_plan/global_plan.cpp  ( 6 )
[74] bool wait_for_wake = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/clean_robot/MoveBaseConfig.h  ( 46 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T MoveBaseConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[258] std::string base_global_planner;
[259] std::string base_local_planner;
[260] double planner_frequency;
[261] double controller_frequency;
[262] double planner_patience;
[263] double controller_patience;
[264] int max_planning_retries;
[265] double conservative_reset_dist;
[266] bool recovery_behavior_enabled;
[267] bool clearing_rotation_allowed;
[268] bool shutdown_costmaps;
[269] double oscillation_timeout;
[270] double oscillation_distance;
[271] bool make_plan_clear_costmap;
[272] bool make_plan_add_unreachable_goal;
[273] bool restore_defaults;
[631] MoveBaseConfig __default__;
[632] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToLinesDBSRANSACConfig.h  ( 40 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToLinesDBSRANSACConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[252] double cluster_max_distance;
[253] int cluster_min_pts;
[254] int cluster_max_pts;
[255] double ransac_inlier_distance;
[256] int ransac_min_inliers;
[257] int ransac_no_iterations;
[258] int ransac_remainig_outliers;
[259] bool ransac_convert_outlier_pts;
[260] bool ransac_filter_remaining_outlier_pts;
[261] double convex_hull_min_pt_separation;
[547] CostmapToLinesDBSRANSACConfig __default__;
[548] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToDynamicObstaclesConfig.h  ( 55 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToDynamicObstaclesConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[267] double alpha_slow;
[268] double alpha_fast;
[270] int min_sep_between_slow_and_fast_filter;
[271] int min_occupancy_probability;
[272] int max_occupancy_neighbors;
[273] int morph_size;
[274] bool publish_static_obstacles;
[275] double min_distance_between_blobs;
[276] bool filter_by_area;
[277] int min_area;
[278] int max_area;
[279] bool filter_by_circularity;
[280] double min_circularity;
[281] double max_circularity;
[282] bool filter_by_inertia;
[283] double min_inertia_ratio;
[284] double max_inertia_ratio;
[285] bool filter_by_convexity;
[286] double min_convexity;
[287] double max_convexity;
[289] double dist_thresh;
[290] int max_allowed_skipped_frames;
[291] int max_trace_length;
[757] CostmapToDynamicObstaclesConfig __default__;
[758] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/ObstacleMsg.h  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToLinesDBSMCCHConfig.h  ( 37 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToLinesDBSMCCHConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[249] double cluster_max_distance;
[250] int cluster_min_pts;
[251] int cluster_max_pts;
[252] double convex_hull_min_pt_separation;
[253] double support_pts_max_dist;
[254] double support_pts_max_dist_inbetween;
[255] int min_support_pts;
[505] CostmapToLinesDBSMCCHConfig __default__;
[506] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToPolygonsDBSConcaveHullConfig.h  ( 35 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToPolygonsDBSConcaveHullConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[247] double cluster_max_distance;
[248] int cluster_min_pts;
[249] int cluster_max_pts;
[250] double convex_hull_min_pt_separation;
[251] double concave_hull_depth;
[477] CostmapToPolygonsDBSConcaveHullConfig __default__;
[478] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/CostmapToPolygonsDBSMCCHConfig.h  ( 34 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToPolygonsDBSMCCHConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[246] double cluster_max_distance;
[247] int cluster_min_pts;
[248] int cluster_max_pts;
[249] double convex_hull_min_pt_separation;
[463] CostmapToPolygonsDBSMCCHConfig __default__;
[464] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_converter/ObstacleArrayMsg.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/DynamicStaticPluginConfig.h  ( 36 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T DynamicStaticPluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[246] bool footprint_clearing_enabled;
[247] int combination_method;
[449] DynamicStaticPluginConfig __default__;
[450] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/GenericPluginConfig.h  ( 31 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T GenericPluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[421] GenericPluginConfig __default__;
[422] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/PubMap.h  ( 8 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/InflationPluginConfig.h  ( 35 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T InflationPluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[248] double cost_scaling_factor;
[249] double inflation_radius;
[250] bool inflate_unknown;
[251] double inscribed_radius;
[477] InflationPluginConfig __default__;
[478] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/Costmap2DConfig.h  ( 41 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T Costmap2DConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[253] double transform_tolerance;
[254] double update_frequency;
[255] double publish_frequency;
[259] double origin_x;
[260] double origin_y;
[262] double robot_radius;
[263] double footprint_padding;
[561] Costmap2DConfig __default__;
[562] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/ObstaclePluginConfig.h  ( 37 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T ObstaclePluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[247] bool footprint_clearing_enabled;
[248] double max_obstacle_height;
[249] int combination_method;
[463] ObstaclePluginConfig __default__;
[464] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/costmap_2d/CliffPluginConfig.h  ( 37 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CliffPluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[247] bool footprint_clearing_enabled;
[248] double max_obstacle_height;
[249] int combination_method;
[463] CliffPluginConfig __default__;
[464] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/teb_local_planner/TrajectoryPointMsg.h  ( 5 )
[55] _time_from_start_type time_from_start;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/teb_local_planner/TebLocalPlannerReconfigureConfig.h  ( 119 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T TebLocalPlannerReconfigureConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[279] bool teb_autosize;
[280] double dt_ref;
[281] double dt_hysteresis;
[282] bool global_plan_overwrite_orientation;
[283] bool allow_init_with_backwards_motion;
[284] double max_global_plan_lookahead_dist;
[285] double force_reinit_new_goal_dist;
[286] double force_reinit_new_goal_angular;
[287] int feasibility_check_no_poses;
[288] bool exact_arc_length;
[289] bool publish_feedback;
[290] double visualize_with_time_as_z_axis_scale;
[319] double global_plan_viapoint_sep;
[320] bool via_points_ordered;
[355] double max_vel_x;
[356] double max_vel_x_backwards;
[357] double max_vel_theta;
[358] double acc_lim_x;
[359] double acc_lim_theta;
[360] bool is_footprint_dynamic;
[361] bool use_proportional_saturation;
[362] double transform_tolerance;
[389] double min_turning_radius;
[391] bool cmd_angle_instead_rotvel;
[420] double max_vel_y;
[421] double acc_lim_y;
[453] double xy_goal_tolerance;
[454] double yaw_goal_tolerance;
[455] bool free_goal_vel;
[492] double min_obstacle_dist;
[493] double inflation_dist;
[494] double dynamic_obstacle_inflation_dist;
[495] bool include_dynamic_obstacles;
[496] bool include_costmap_obstacles;
[497] bool legacy_obstacle_association;
[498] double obstacle_association_force_inclusion_factor;
[499] double obstacle_association_cutoff_factor;
[500] double costmap_obstacles_behind_robot_dist;
[501] int obstacle_poses_affected;
[528] double obstacle_proximity_ratio_max_vel;
[529] double obstacle_proximity_lower_bound;
[530] double obstacle_proximity_upper_bound;
[583] int no_inner_iterations;
[584] int no_outer_iterations;
[585] bool optimization_activate;
[586] bool optimization_verbose;
[587] double penalty_epsilon;
[588] double weight_max_vel_x;
[589] double weight_max_vel_y;
[590] double weight_max_vel_theta;
[591] double weight_acc_lim_x;
[592] double weight_acc_lim_y;
[593] double weight_acc_lim_theta;
[594] double weight_kinematics_nh;
[595] double weight_kinematics_forward_drive;
[596] double weight_kinematics_turning_radius;
[597] double weight_optimaltime;
[598] double weight_shortest_path;
[599] double weight_obstacle;
[600] double weight_inflation;
[601] double weight_dynamic_obstacle;
[602] double weight_dynamic_obstacle_inflation;
[603] double weight_velocity_obstacle_ratio;
[604] double weight_viapoint;
[605] double weight_adapt_factor;
[606] double obstacle_cost_exponent;
[651] bool enable_multithreading;
[652] int max_number_classes;
[653] int max_number_plans_in_current_class;
[654] double selection_cost_hysteresis;
[655] double selection_prefer_initial_plan;
[656] double selection_obst_cost_scale;
[657] double selection_viapoint_cost_scale;
[658] bool selection_alternative_time_cost;
[659] double selection_dropping_probability;
[660] double switching_blocking_period;
[661] int roadmap_graph_no_samples;
[662] double roadmap_graph_area_width;
[663] double roadmap_graph_area_length_scale;
[664] double h_signature_prescaler;
[665] double h_signature_threshold;
[666] double obstacle_heading_threshold;
[667] bool viapoints_all_candidates;
[668] bool visualize_hc_graph;
[697] bool shrink_horizon_backup;
[698] bool oscillation_recovery;
[724] bool divergence_detection_enable;
[725] double divergence_detection_max_chi_squared;
[2047] TebLocalPlannerReconfigureConfig __default__;
[2048] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/teb_local_planner/TrajectoryMsg.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/teb_local_planner/FeedbackMsg.h  ( 5 )
[52] _selected_trajectory_idx_type selected_trajectory_idx;
[55] _obstacles_msg_type obstacles_msg;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/global_planner/GlobalPlannerConfig.h  ( 43 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T GlobalPlannerConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[248] int lethal_cost;
[249] int neutral_cost;
[250] double cost_factor;
[251] bool publish_potential;
[252] int orientation_mode;
[253] int orientation_window_size;
[491] GlobalPlannerConfig __default__;
[492] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/BumperEvent.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/CliffEvent.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/MotorPower.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/WheelDropEvent.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/i18r_msgs/KeyboardInput.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/SetCostmap.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/SetCostmapRequest.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/MakeNavPlan.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/SetCostmapResponse.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/MakeNavPlanRequest.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/navfn/MakeNavPlanResponse.h  ( 4 )
[42] _plan_found_type plan_found;
[45] _error_message_type error_message;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/base_local_planner/Position2DInt.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/devel/include/base_local_planner/BaseLocalPlannerConfig.h  ( 58 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T BaseLocalPlannerConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[270] double acc_lim_x;
[271] double acc_lim_y;
[272] double acc_lim_theta;
[273] double max_vel_x;
[274] double min_vel_x;
[275] double max_vel_theta;
[276] double min_vel_theta;
[277] double min_in_place_vel_theta;
[278] double sim_time;
[279] double sim_granularity;
[280] double angular_sim_granularity;
[281] double path_distance_bias;
[282] double goal_distance_bias;
[283] double occdist_scale;
[284] double oscillation_reset_dist;
[285] double escape_reset_dist;
[286] double escape_reset_theta;
[287] int vx_samples;
[288] int vtheta_samples;
[289] double heading_lookahead;
[290] bool holonomic_robot;
[291] double escape_vel;
[293] bool heading_scoring;
[294] double heading_scoring_timestep;
[295] bool simple_attractor;
[296] std::string y_vels;
[297] bool restore_defaults;
[799] BaseLocalPlannerConfig __default__;
[800] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/nav_basetype.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/MoveBaseConfig.h  ( 46 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T MoveBaseConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[258] std::string base_global_planner;
[259] std::string base_local_planner;
[260] double planner_frequency;
[261] double controller_frequency;
[262] double planner_patience;
[263] double controller_patience;
[264] int max_planning_retries;
[265] double conservative_reset_dist;
[266] bool recovery_behavior_enabled;
[267] bool clearing_rotation_allowed;
[268] bool shutdown_costmaps;
[269] double oscillation_timeout;
[270] double oscillation_distance;
[271] bool make_plan_clear_costmap;
[272] bool make_plan_add_unreachable_goal;
[273] bool restore_defaults;
[631] MoveBaseConfig __default__;
[632] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clean_robot/nav.h  ( 44 )
[147] std::uint8_t _percentage
[224] std::list<swr::control_types::PATH_ITEM> _clean_path
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToLinesDBSRANSACConfig.h  ( 40 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToLinesDBSRANSACConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[252] double cluster_max_distance;
[253] int cluster_min_pts;
[254] int cluster_max_pts;
[255] double ransac_inlier_distance;
[256] int ransac_min_inliers;
[257] int ransac_no_iterations;
[258] int ransac_remainig_outliers;
[259] bool ransac_convert_outlier_pts;
[260] bool ransac_filter_remaining_outlier_pts;
[261] double convex_hull_min_pt_separation;
[547] CostmapToLinesDBSRANSACConfig __default__;
[548] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToDynamicObstaclesConfig.h  ( 55 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToDynamicObstaclesConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[267] double alpha_slow;
[268] double alpha_fast;
[270] int min_sep_between_slow_and_fast_filter;
[271] int min_occupancy_probability;
[272] int max_occupancy_neighbors;
[273] int morph_size;
[274] bool publish_static_obstacles;
[275] double min_distance_between_blobs;
[276] bool filter_by_area;
[277] int min_area;
[278] int max_area;
[279] bool filter_by_circularity;
[280] double min_circularity;
[281] double max_circularity;
[282] bool filter_by_inertia;
[283] double min_inertia_ratio;
[284] double max_inertia_ratio;
[285] bool filter_by_convexity;
[286] double min_convexity;
[287] double max_convexity;
[289] double dist_thresh;
[290] int max_allowed_skipped_frames;
[291] int max_trace_length;
[757] CostmapToDynamicObstaclesConfig __default__;
[758] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/ObstacleMsg.h  ( 7 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/misc.h  ( 5 )
[88] double length_sqr = dx*dx + dy*dy;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_polygons.h  ( 33 )
[110] double max_distance_;
[111] int min_pts_;
[112] int max_pts_;
[115] double min_keypoint_separation_;
[198] int curr_index
[198]  std::vector<int> neighbor_indices
[275] std::vector<KeyPoint> occupied_cells_;
[278] int neighbor_size_x_;
[279] int neighbor_size_y_;
[280] double offset_x_;
[281] double offset_y_;
[308] Parameters parameter_;
[309] Parameters parameter_buffered_;
[310] boost::mutex parameter_mutex_;
[324] PolygonContainerPtr polygons_;
[325] boost::mutex mutex_;
[327] dynamic_reconfigure::Server<CostmapToPolygonsDBSMCCHConfig>* dynamic_recfg_;
[329] costmap_2d::Costmap2D *costmap_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_converter_interface.h  ( 20 )
[178]  bool spin_thread = false
[184] boost::mutex::scoped_lock terminate_lock(terminate_mutex_);
[257] ros::Timer worker_timer_;
[258] ros::NodeHandle nh_;
[260] ros::CallbackQueue callback_queue_;
[261] boost::mutex terminate_mutex_;
[262] bool need_to_terminate_;
[283]  ros::NodeHandle nh_parent
[292] std::string raw_plugin_name = static_converter_loader_.getName(plugin_name);
[309] boost::shared_ptr<BaseCostmapToPolygons> static_costmap_converter
[318] boost::shared_ptr<costmap_2d::Costmap2D> static_costmap
[359] pluginlib::ClassLoader<BaseCostmapToPolygons> static_converter_loader_;
[360] boost::shared_ptr<BaseCostmapToPolygons> static_costmap_converter_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_polygons_concave.h  ( 20 )
[114] double concave_hull_depth_;
[127] dynamic_reconfigure::Server<CostmapToPolygonsDBSConcaveHullConfig>* dynamic_recfg_;
[136] std::size_t nearsest_idx = 0;
[150] double dist_temp = computeDistanceToLineSegment(cluster[i], hull[j], hull[j + 1]);
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToLinesDBSMCCHConfig.h  ( 37 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToLinesDBSMCCHConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[249] double cluster_max_distance;
[250] int cluster_min_pts;
[251] int cluster_max_pts;
[252] double convex_hull_min_pt_separation;
[253] double support_pts_max_dist;
[254] double support_pts_max_dist_inbetween;
[255] int min_support_pts;
[505] CostmapToLinesDBSMCCHConfig __default__;
[506] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToPolygonsDBSConcaveHullConfig.h  ( 35 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToPolygonsDBSConcaveHullConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[247] double cluster_max_distance;
[248] int cluster_min_pts;
[249] int cluster_max_pts;
[250] double convex_hull_min_pt_separation;
[251] double concave_hull_depth;
[477] CostmapToPolygonsDBSConcaveHullConfig __default__;
[478] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_lines_convex_hull.h  ( 9 )
[109] double support_pts_max_dist_inbetween_;
[110] double support_pts_max_dist_;
[111] int min_support_pts_;
[124] dynamic_reconfigure::Server<CostmapToLinesDBSMCCHConfig>* dynamic_recfg_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_lines_ransac.h  ( 25 )
[108]  double min_distance
[112] double ransac_inlier_distance_;
[113] int ransac_min_inliers_;
[114] int ransac_no_iterations_;
[115] int ransac_remainig_outliers_;
[116] bool ransac_convert_outlier_pts_;
[117] bool ransac_filter_remaining_outlier_pts_;
[120] boost::random::mt19937 rnd_generator_;
[136]  double inlier_distance
[136]  int no_iterations
[136]  int min_inliers
[148]  double mean_x_out = NULL
[148]  double mean_y_out = NULL
[166] dynamic_reconfigure::Server<CostmapToLinesDBSRANSACConfig>* dynamic_recfg_;
[175] bool is_inbetween = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/CostmapToPolygonsDBSMCCHConfig.h  ( 34 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CostmapToPolygonsDBSMCCHConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[246] double cluster_max_distance;
[247] int cluster_min_pts;
[248] int cluster_max_pts;
[249] double convex_hull_min_pt_separation;
[463] CostmapToPolygonsDBSMCCHConfig __default__;
[464] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/ObstacleArrayMsg.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/blob_detector.h  ( 13 )
[104]  std::vector<std::vector<cv::Point>> cur_contours
[106] std::vector<std::vector<cv::Point>> contours_;
[108] Params params_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.h  ( 24 )
[172] boost::mutex mutex_;
[174] cv::Mat costmap_mat_;
[175] ObstacleArrayPtr obstacles_;
[176] cv::Mat fg_mask_;
[177] std::unique_ptr<BackgroundSubtractor> bg_sub_;
[178] cv::Ptr<BlobDetector> blob_det_;
[179] std::vector<cv::KeyPoint> keypoints_;
[180] std::unique_ptr<CTracker> tracker_;
[181] ros::Subscriber odom_sub_;
[182] Point_t ego_vel_;
[184] std::string odom_topic_ = "/odom";
[185] bool publish_static_obstacles_ = true;
[188] dynamic_reconfigure::Server<CostmapToDynamicObstaclesConfig>* dynamic_recfg_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/background_subtractor.h  ( 21 )
[62] double alpha_slow;
[63] double alpha_fast;
[65] double min_sep_between_fast_and_slow_filter;
[66] double min_occupancy_probability;
[67] double max_occupancy_neighbors;
[68] int morph_size;
[81]  cv::Mat fg_mask
[81]  int shift_x = 0
[81]  int shift_y = 0
[105] cv::Mat occupancy_grid_fast_;
[106] cv::Mat occupancy_grid_slow_;
[107] cv::Mat current_frame_;
[109] int previous_shift_x_;
[110] int previous_shift_y_;
[112] Params params_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.h  ( 5 )
[15]  bool DataCorrect
[18] Point_t LastPosition;
[19] Point_t LastVelocity;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.h  ( 19 )
[33]  size_t max_trace_length
[63] size_t track_id;
[64] size_t skipped_frames;
[69] TKalmanFilter KF;
[78] track_t dist_thresh;
[79] int max_allowed_skipped_frames;
[95] size_t NextTrackID;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.h  ( 15 )
[59]  TMethod Method = optimal
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_converter/costmap_to_dynamic_obstacles/multitarget_tracker/defines.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/DynamicStaticPluginConfig.h  ( 36 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T DynamicStaticPluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[246] bool footprint_clearing_enabled;
[247] int combination_method;
[449] DynamicStaticPluginConfig __default__;
[450] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/GenericPluginConfig.h  ( 31 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T GenericPluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[421] GenericPluginConfig __default__;
[422] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/PubMap.h  ( 8 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/InflationPluginConfig.h  ( 35 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T InflationPluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[248] double cost_scaling_factor;
[249] double inflation_radius;
[250] bool inflate_unknown;
[251] double inscribed_radius;
[477] InflationPluginConfig __default__;
[478] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/Costmap2DConfig.h  ( 41 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T Costmap2DConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[253] double transform_tolerance;
[254] double update_frequency;
[255] double publish_frequency;
[259] double origin_x;
[260] double origin_y;
[262] double robot_radius;
[263] double footprint_padding;
[561] Costmap2DConfig __default__;
[562] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/ObstaclePluginConfig.h  ( 37 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T ObstaclePluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[247] bool footprint_clearing_enabled;
[248] double max_obstacle_height;
[249] int combination_method;
[463] ObstaclePluginConfig __default__;
[464] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/costmap_2d/CliffPluginConfig.h  ( 37 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T CliffPluginConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[247] bool footprint_clearing_enabled;
[248] double max_obstacle_height;
[249] int combination_method;
[463] CliffPluginConfig __default__;
[464] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TrajectoryPointMsg.h  ( 5 )
[55] _time_from_start_type time_from_start;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TebLocalPlannerReconfigureConfig.h  ( 119 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T TebLocalPlannerReconfigureConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[279] bool teb_autosize;
[280] double dt_ref;
[281] double dt_hysteresis;
[282] bool global_plan_overwrite_orientation;
[283] bool allow_init_with_backwards_motion;
[284] double max_global_plan_lookahead_dist;
[285] double force_reinit_new_goal_dist;
[286] double force_reinit_new_goal_angular;
[287] int feasibility_check_no_poses;
[288] bool exact_arc_length;
[289] bool publish_feedback;
[290] double visualize_with_time_as_z_axis_scale;
[319] double global_plan_viapoint_sep;
[320] bool via_points_ordered;
[355] double max_vel_x;
[356] double max_vel_x_backwards;
[357] double max_vel_theta;
[358] double acc_lim_x;
[359] double acc_lim_theta;
[360] bool is_footprint_dynamic;
[361] bool use_proportional_saturation;
[362] double transform_tolerance;
[389] double min_turning_radius;
[391] bool cmd_angle_instead_rotvel;
[420] double max_vel_y;
[421] double acc_lim_y;
[453] double xy_goal_tolerance;
[454] double yaw_goal_tolerance;
[455] bool free_goal_vel;
[492] double min_obstacle_dist;
[493] double inflation_dist;
[494] double dynamic_obstacle_inflation_dist;
[495] bool include_dynamic_obstacles;
[496] bool include_costmap_obstacles;
[497] bool legacy_obstacle_association;
[498] double obstacle_association_force_inclusion_factor;
[499] double obstacle_association_cutoff_factor;
[500] double costmap_obstacles_behind_robot_dist;
[501] int obstacle_poses_affected;
[528] double obstacle_proximity_ratio_max_vel;
[529] double obstacle_proximity_lower_bound;
[530] double obstacle_proximity_upper_bound;
[583] int no_inner_iterations;
[584] int no_outer_iterations;
[585] bool optimization_activate;
[586] bool optimization_verbose;
[587] double penalty_epsilon;
[588] double weight_max_vel_x;
[589] double weight_max_vel_y;
[590] double weight_max_vel_theta;
[591] double weight_acc_lim_x;
[592] double weight_acc_lim_y;
[593] double weight_acc_lim_theta;
[594] double weight_kinematics_nh;
[595] double weight_kinematics_forward_drive;
[596] double weight_kinematics_turning_radius;
[597] double weight_optimaltime;
[598] double weight_shortest_path;
[599] double weight_obstacle;
[600] double weight_inflation;
[601] double weight_dynamic_obstacle;
[602] double weight_dynamic_obstacle_inflation;
[603] double weight_velocity_obstacle_ratio;
[604] double weight_viapoint;
[605] double weight_adapt_factor;
[606] double obstacle_cost_exponent;
[651] bool enable_multithreading;
[652] int max_number_classes;
[653] int max_number_plans_in_current_class;
[654] double selection_cost_hysteresis;
[655] double selection_prefer_initial_plan;
[656] double selection_obst_cost_scale;
[657] double selection_viapoint_cost_scale;
[658] bool selection_alternative_time_cost;
[659] double selection_dropping_probability;
[660] double switching_blocking_period;
[661] int roadmap_graph_no_samples;
[662] double roadmap_graph_area_width;
[663] double roadmap_graph_area_length_scale;
[664] double h_signature_prescaler;
[665] double h_signature_threshold;
[666] double obstacle_heading_threshold;
[667] bool viapoints_all_candidates;
[668] bool visualize_hc_graph;
[697] bool shrink_horizon_backup;
[698] bool oscillation_recovery;
[724] bool divergence_detection_enable;
[725] double divergence_detection_max_chi_squared;
[2047] TebLocalPlannerReconfigureConfig __default__;
[2048] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/TrajectoryMsg.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/teb_local_planner/FeedbackMsg.h  ( 5 )
[52] _selected_trajectory_idx_type selected_trajectory_idx;
[55] _obstacles_msg_type obstacles_msg;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/astar.h  ( 14 )
[72]  double start_x
[72]  double start_y
[72]  double end_x
[72]  double end_y
[76]  float prev_potential
[76]  int next_i
[77] std::vector<Index> queue_;
[78] bool use_safe_control_ = false;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/dijkstra.h  ( 21 )
[83]  double start_x
[83]  double start_y
[83]  double end_x
[83]  double end_y
[93] unsigned char neutral_cost
[108] bool safety_control_ = true;
[131] int *buffer1_, *buffer2_, *buffer3_;
[132] int *currentBuffer_, *nextBuffer_, *overBuffer_;
[133] int currentEnd_, nextEnd_, overEnd_;
[135] bool precise_;
[138] float threshold_;
[139] float priorityIncrement_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/count_down_time.hpp  ( 6 )
[52] size_t m_countDownMS;
[53] std::atomic_bool m_over;
[54] std::thread m_thread;
[56] std::condition_variable m_cv;
[57] std::mutex m_mtx;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/planner_core.h  ( 67 )
[109]  costmap_2d::Costmap2DROS costmap_ros
[111]  std::string frame_id
[135] geometry_msgs::PoseStamped last_goal;
[137] std::vector<geometry_msgs::PoseStamped> record_last_path;
[142] geometry_msgs::PoseStamped new_goal
[146]  geometry_msgs::PoseStamped free_point
[148]  double movement_angle_range = M_PI_4
[186] double start_x
[186]  double start_y
[186]  double end_x
[186]  double end_y
[249] std::string frame_id_;
[250] ros::Publisher plan_pub_;
[251] ros::Publisher unsmoothed_plan_pub_;
[252] ros::Publisher raw_plan_pub_;
[253] bool initialized_, allow_unknown_;
[255] std::unique_ptr<Smoother> _smoother;
[256] double _max_planning_time;
[264] double planner_window_x_, planner_window_y_, default_tolerance_;
[265] double start_tolerance_, goal_tolerance_;
[266] boost::mutex mutex_;
[267] ros::ServiceServer make_plan_srv_;
[274] bool publish_potential_;
[275] ros::Publisher potential_pub_;
[276] int publish_scale_;
[280] unsigned int start_x_, start_y_, end_x_, end_y_;
[281] bool old_navfn_behavior_;
[282] float convert_offset_;
[283] bool outline_map_;
[284] dynamic_reconfigure::Server<global_planner::GlobalPlannerConfig>* dsrv_;
[286] ros::Publisher path_poses_pub_;
[287] static double time_out_;
[288] bool getNear_;
[289] bool safety_falg_;
[292] bool open_connect_flag_;
[293] double connect_dist_gap_;
[294] double lower_gap_times_;
[295] double higher_gap_times_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/GlobalPlannerConfig.h  ( 43 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T GlobalPlannerConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[248] int lethal_cost;
[249] int neutral_cost;
[250] double cost_factor;
[251] bool publish_potential;
[252] int orientation_mode;
[253] int orientation_window_size;
[491] GlobalPlannerConfig __default__;
[492] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/expander.h  ( 22 )
[55]  double start_x
[55]  double start_y
[55]  double end_x
[55]  double end_y
[68] unsigned char lethal_cost
[73] unsigned char neutral_cost
[95] int nx_, ny_, ns_;
[96] bool unknown_;
[97] unsigned char lethal_cost_, neutral_cost_;
[98] int cells_visited_;
[99] float factor_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/quadratic_calculator.h  ( 4 )
[49]  float prev_potential
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/orientation_filter.h  ( 10 )
[56]  int start_index
[56]  int end_index
[58] OrientationMode new_mode
[61] size_t window_size
[64] OrientationMode omode_;
[65] int window_size_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/smoother.hpp  ( 34 )
[40] double min_turning_radius
[61] double max_dur = max_time;
[65] double x_i, y_i, y_m1, y_ip1, y_im2, y_ip2, y_i_org, curvature;
[68] nav_msgs::Path new_path = path;
[69] nav_msgs::Path last_path = path;
[216] double min_turning_rad_, tolerance_, data_w_, smooth_w_;
[217] int max_its_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/gradient_path.h  ( 11 )
[65]  double start_x
[65]  double start_y
[65]  double end_x
[65]  double end_y
[76] float *gradx_, *grady_;
[78] float pathStep_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/traceback.h  ( 10 )
[57]  double start_x
[57]  double start_y
[57]  double end_x
[57]  double end_y
[71] unsigned char lethal_cost
[76] int xs_, ys_;
[77] unsigned char lethal_cost_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/grid_path.h  ( 5 )
[52]  double start_x
[52]  double start_y
[52]  double end_x
[52]  double end_y
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/global_planner/potential_calculator.h  ( 7 )
[55]  float prev_potential=-1
[70] int nx_, ny_, ns_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/BumperEvent.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/CliffEvent.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/MotorPower.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/WheelDropEvent.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/i18r_msgs/KeyboardInput.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/rotate_recovery/rotate_recovery.h  ( 4 )
[67]  costmap_2d::Costmap2DROS local_costmap
[81] bool initialized_;
[82] double sim_granularity_, min_rotational_vel_, max_rotational_vel_, acc_lim_th_, tolerance_, frequency_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmap.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmapRequest.h  ( 4 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlan.h  ( 2 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/SetCostmapResponse.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlanRequest.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/navfn/MakeNavPlanResponse.h  ( 4 )
[42] _plan_found_type plan_found;
[45] _error_message_type error_message;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/clear_costmap_recovery/clear_costmap_recovery.h  ( 13 )
[65]  costmap_2d::Costmap2DROS global_costmap
[65]  costmap_2d::Costmap2DROS local_costmap
[76]  double pose_x
[76]  double pose_y
[78] std::string name_;
[80] bool initialized_;
[81] bool force_updating_;
[82] double reset_distance_;
[83] std::string affected_maps_;
[84] std::set<std::string> clearable_layers_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/base_local_planner/Position2DInt.h  ( 3 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/base_local_planner/BaseLocalPlannerConfig.h  ( 58 )
[70] ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, std::string a_description, std::string a_edit_method, T BaseLocalPlannerConfig::* a_f) : AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method), field(a_f) {}
[84] uint32_t comb_level
[127] std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
[270] double acc_lim_x;
[271] double acc_lim_y;
[272] double acc_lim_theta;
[273] double max_vel_x;
[274] double min_vel_x;
[275] double max_vel_theta;
[276] double min_vel_theta;
[277] double min_in_place_vel_theta;
[278] double sim_time;
[279] double sim_granularity;
[280] double angular_sim_granularity;
[281] double path_distance_bias;
[282] double goal_distance_bias;
[283] double occdist_scale;
[284] double oscillation_reset_dist;
[285] double escape_reset_dist;
[286] double escape_reset_theta;
[287] int vx_samples;
[288] int vtheta_samples;
[289] double heading_lookahead;
[290] bool holonomic_robot;
[291] double escape_vel;
[293] bool heading_scoring;
[294] double heading_scoring_timestep;
[295] bool simple_attractor;
[296] std::string y_vels;
[297] bool restore_defaults;
[799] BaseLocalPlannerConfig __default__;
[800] dynamic_reconfigure::ConfigDescription __description_message__;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/tools.h  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/menu_handler.h  ( 19 )
[85]  CheckState check_state 
[109] std::vector<EntryHandle> sub_entries;
[123]  std::vector<EntryHandle> handles_in
[123]  std::vector<visualization_msgs::MenuEntry> entries_out
[123]  EntryHandle parent_handle 
[133] std::vector<EntryHandle> top_level_handles_;
[137] EntryHandle current_handle_;
[139] std::set<std::string> managed_markers_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/interactive_marker_server.h  ( 22 )
[163] ros::Time last_feedback;
[164] std::string last_client_id;
[165] FeedbackCallback default_feedback_cb;
[167] visualization_msgs::InteractiveMarker int_marker;
[208]  M_UpdateContext::iterator update_it
[211] M_MarkerContext marker_contexts_;
[214] M_UpdateContext pending_updates_;
[217] std::string topic_ns_;
[222] boost::scoped_ptr<boost::thread> spin_thread_;
[223] ros::NodeHandle node_handle_;
[224] ros::CallbackQueue callback_queue_;
[228] ros::Timer keep_alive_timer_;
[230] ros::Publisher init_pub_;
[231] ros::Publisher update_pub_;
[232] ros::Subscriber feedback_sub_;
[236] std::string server_id_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/interactive_marker_client.h  ( 27 )
[139] ros::NodeHandle nh_;
[148] StateMachine<StateT> state_;
[150] std::string topic_ns_;
[152] ros::Subscriber update_sub_;
[153] ros::Subscriber init_sub_;
[165] M_SingleClient publisher_contexts_;
[166] boost::mutex publisher_contexts_mutex_;
[169] std::string target_frame_;
[184]  InitCallback init_cb 
[187]  UpdateCallback update_cb 
[190]  ResetCallback reset_cb 
[193]  StatusCallback status_cb 
[198] InitCallback init_cb_;
[199] UpdateCallback update_cb_;
[200] ResetCallback reset_cb_;
[201] StatusCallback status_cb_;
[211] CbCollection callbacks_;
[217] uint32_t last_num_publishers_;
[220] bool enable_autocomplete_transparency_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/visibility_control.hpp  ( 0 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/single_client.h  ( 11 )
[75]  bool enable_autocomplete_transparency = true
[100] StateMachine<StateT> state_;
[108]  std::string error_msg 
[115] ros::Time last_update_time_;
[119] bool update_time_ok_;
[129] M_UpdateMessageContext update_queue_;
[132] M_InitMessageContext init_queue_;
[135] std::string target_frame_;
[139] std::string server_id_;
[141] bool warn_keepalive_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/message_context.h  ( 9 )
[71]  geometry_msgs::Pose pose_msg 
[73]  std::vector<visualization_msgs::InteractiveMarker> msg_vec
[77] std::list<size_t> open_marker_idx_;
[78] std::list<size_t> open_pose_idx_;
[80] std::string target_frame_;
[81] bool enable_autocomplete_transparency_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/interactive_markers/detail/state_machine.h  ( 3 )
[56] StateT state_;
[57] ros::Time chg_time_;
[58] std::string name_;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/cv_bridge/rgb_colors.h  ( 1 )
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/include/cv_bridge/cv_bridge.h  ( 16 )
[119] sensor_msgs::Image ros_image
[257] bool do_dynamic_scaling;
[258] double min_image_value;
[259] double max_image_value;
[261] int bg_label;
[365] uint8_t is_bigendian = 0;
[368] size_t data_size = m.image.step*m.image.rows;
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/loopTrpath.cpp  ( 16 )
[59] std::string info_log = home + "master_info_";
[61] std::string warning_log = home + "master_warning_";
[63] std::string error_log = home + "master_error_";
[65] std::string fatal_log = home + "master_fatal_";
[69] std::string config_path("");
[71] ros::NodeHandle private_nh("~");
[91] boost::thread *m_SystickHandle = new boost::thread(boost::bind(&keeploop, cr));
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/main.cpp  ( 12 )
[20] std::string info_log = home + "master_info_";
[22] std::string warning_log = home + "master_warning_";
[24] std::string error_log = home + "master_error_";
[26] std::string fatal_log = home + "master_fatal_";
[30] std::string config_path("");
[32] ros::NodeHandle private_nh("~");
 /root/workspace/workspace/control-planing-i18r-so-upload/i18r_robot/install/share/clean_robot/sample/loopAutoc.cpp  ( 16 )
[61] std::string info_log = home + "master_info_";
[63] std::string warning_log = home + "master_warning_";
[65] std::string error_log = home + "master_error_";
[67] std::string fatal_log = home + "master_fatal_";
[71] std::string config_path("");
[73] ros::NodeHandle private_nh("~");
[93] boost::thread *m_SystickHandle = new boost::thread(boost::bind(&keeploop, cr));

Type name:-----------------------------------------------------------------------------------------
 base  ( 29 )
 struct  ( 72 )
timeval
sched_param
greater1
native_type
point
orientedpoint:
pointcomparator
pointradialcomparator
ObstacleMsg_
ObstacleArrayMsg_
PubMap_
TrajectoryPointMsg_
TrajectoryMsg_
FeedbackMsg_
BumperEvent_
CliffEvent_
MotorPower_
WheelDropEvent_
KeyboardInput_
SetCostmapRequest_
SetCostmapResponse_
MakeNavPlanRequest_
MakeNavPlanResponse_
Position2DInt_
 class  ( 296 )
lrKeyPointGraph
arrow_clean
clean_robot
robot_status
working_mode
SYS_DATA
clState
sensors
track_plan
auto_track
execute
vel_control
Path_Saver
REDUCE_VELOCITY_NEAR_OBSTACLES
DIVERGENCE_DETECTION
 enum  ( 35 )
 namespace  ( 40 )
PARA
PathPlanning
 using  ( 26 )
 typedef  ( 208 )
 template  ( 37 )

function: 61% (2967 / 4786)
variable: 37% (4044 / 10824)
type: 5% (41 / 743)
+ mkdir -p /mnt/ftp/release/code_style_report/20220830
+ mv i18r_robot_aarch64_codesytle_check.log /mnt/ftp/release/code_style_report/20220830/
+ echo 'check code style end'
check code style end
+ popd
~/workspace/workspace/control-planing-i18r-so-upload/I18RNavigationSubmodule ~/workspace/workspace/control-planing-i18r-so-upload
Notified JIRA that a build has completed.
No emails were triggered.
Finished: SUCCESS
